/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [25]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.AnchnetPersistentDisk != nil && x.AnchnetPersistentDisk != nil
			yyq101[24] = x.VolumeSource.AliyunPersistentDisk != nil && x.AliyunPersistentDisk != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(25)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.Cinder == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.CephFS == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.Flocker == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.FC == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.AzureFile == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.Quobyte == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.AnchnetPersistentDisk == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.AnchnetPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AnchnetPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("anchnetPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.AnchnetPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AnchnetPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn128 bool
			if x.VolumeSource.AliyunPersistentDisk == nil {
				yyn128 = true
				goto LABEL128
			}
		LABEL128:
			if yyr101 || yy2arr101 {
				if yyn128 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[24] {
						if x.AliyunPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AliyunPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("aliyunPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn128 {
						r.EncodeNil()
					} else {
						if x.AliyunPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AliyunPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym129 := z.DecBinary()
	_ = yym129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct130 := r.ContainerType()
		if yyct130 == codecSelferValueTypeMap1234 {
			yyl130 := r.ReadMapStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl130, d)
			}
		} else if yyct130 == codecSelferValueTypeArray1234 {
			yyl130 := r.ReadArrayStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys131Slc
	var yyhl131 bool = l >= 0
	for yyj131 := 0; ; yyj131++ {
		if yyhl131 {
			if yyj131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys131Slc = r.DecodeBytes(yys131Slc, true, true)
		yys131 := string(yys131Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys131 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "anchnetPersistentDisk":
			if x.VolumeSource.AnchnetPersistentDisk == nil {
				x.VolumeSource.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AnchnetPersistentDisk != nil {
					x.AnchnetPersistentDisk = nil
				}
			} else {
				if x.AnchnetPersistentDisk == nil {
					x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
				}
				x.AnchnetPersistentDisk.CodecDecodeSelf(d)
			}
		case "aliyunPersistentDisk":
			if x.VolumeSource.AliyunPersistentDisk == nil {
				x.VolumeSource.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AliyunPersistentDisk != nil {
					x.AliyunPersistentDisk = nil
				}
			} else {
				if x.AliyunPersistentDisk == nil {
					x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
				}
				x.AliyunPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys131)
		} // end switch yys131
	} // end for yyj131
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj157 int
	var yyb157 bool
	var yyhl157 bool = l >= 0
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AnchnetPersistentDisk == nil {
		x.VolumeSource.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AnchnetPersistentDisk != nil {
			x.AnchnetPersistentDisk = nil
		}
	} else {
		if x.AnchnetPersistentDisk == nil {
			x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
		}
		x.AnchnetPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AliyunPersistentDisk == nil {
		x.VolumeSource.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AliyunPersistentDisk != nil {
			x.AliyunPersistentDisk = nil
		}
	} else {
		if x.AliyunPersistentDisk == nil {
			x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
		}
		x.AliyunPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj157++
		if yyhl157 {
			yyb157 = yyj157 > l
		} else {
			yyb157 = r.CheckBreak()
		}
		if yyb157 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj157-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym183 := z.EncBinary()
		_ = yym183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep184 := !z.EncBinary()
			yy2arr184 := z.EncBasicHandle().StructToArray
			var yyq184 [24]bool
			_, _, _ = yysep184, yyq184, yy2arr184
			const yyr184 bool = false
			yyq184[0] = x.HostPath != nil
			yyq184[1] = x.EmptyDir != nil
			yyq184[2] = x.GCEPersistentDisk != nil
			yyq184[3] = x.AWSElasticBlockStore != nil
			yyq184[4] = x.GitRepo != nil
			yyq184[5] = x.Secret != nil
			yyq184[6] = x.NFS != nil
			yyq184[7] = x.ISCSI != nil
			yyq184[8] = x.Glusterfs != nil
			yyq184[9] = x.PersistentVolumeClaim != nil
			yyq184[10] = x.RBD != nil
			yyq184[11] = x.FlexVolume != nil
			yyq184[12] = x.Cinder != nil
			yyq184[13] = x.CephFS != nil
			yyq184[14] = x.Flocker != nil
			yyq184[15] = x.DownwardAPI != nil
			yyq184[16] = x.FC != nil
			yyq184[17] = x.AzureFile != nil
			yyq184[18] = x.ConfigMap != nil
			yyq184[19] = x.VsphereVolume != nil
			yyq184[20] = x.Quobyte != nil
			yyq184[21] = x.AzureDisk != nil
			yyq184[22] = x.AnchnetPersistentDisk != nil
			yyq184[23] = x.AliyunPersistentDisk != nil
			var yynn184 int
			if yyr184 || yy2arr184 {
				r.EncodeArrayStart(24)
			} else {
				yynn184 = 0
				for _, b := range yyq184 {
					if b {
						yynn184++
					}
				}
				r.EncodeMapStart(yynn184)
				yynn184 = 0
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[20] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[22] {
					if x.AnchnetPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AnchnetPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("anchnetPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AnchnetPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AnchnetPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[23] {
					if x.AliyunPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AliyunPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("aliyunPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AliyunPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AliyunPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym209 := z.DecBinary()
	_ = yym209
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct210 := r.ContainerType()
		if yyct210 == codecSelferValueTypeMap1234 {
			yyl210 := r.ReadMapStart()
			if yyl210 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl210, d)
			}
		} else if yyct210 == codecSelferValueTypeArray1234 {
			yyl210 := r.ReadArrayStart()
			if yyl210 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl210, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys211Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys211Slc
	var yyhl211 bool = l >= 0
	for yyj211 := 0; ; yyj211++ {
		if yyhl211 {
			if yyj211 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys211Slc = r.DecodeBytes(yys211Slc, true, true)
		yys211 := string(yys211Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys211 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "anchnetPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.AnchnetPersistentDisk != nil {
					x.AnchnetPersistentDisk = nil
				}
			} else {
				if x.AnchnetPersistentDisk == nil {
					x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
				}
				x.AnchnetPersistentDisk.CodecDecodeSelf(d)
			}
		case "aliyunPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.AliyunPersistentDisk != nil {
					x.AliyunPersistentDisk = nil
				}
			} else {
				if x.AliyunPersistentDisk == nil {
					x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
				}
				x.AliyunPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys211)
		} // end switch yys211
	} // end for yyj211
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj236 int
	var yyb236 bool
	var yyhl236 bool = l >= 0
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AnchnetPersistentDisk != nil {
			x.AnchnetPersistentDisk = nil
		}
	} else {
		if x.AnchnetPersistentDisk == nil {
			x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
		}
		x.AnchnetPersistentDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AliyunPersistentDisk != nil {
			x.AliyunPersistentDisk = nil
		}
	} else {
		if x.AliyunPersistentDisk == nil {
			x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
		}
		x.AliyunPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj236++
		if yyhl236 {
			yyb236 = yyj236 > l
		} else {
			yyb236 = r.CheckBreak()
		}
		if yyb236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym261 := z.EncBinary()
		_ = yym261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep262 := !z.EncBinary()
			yy2arr262 := z.EncBasicHandle().StructToArray
			var yyq262 [2]bool
			_, _, _ = yysep262, yyq262, yy2arr262
			const yyr262 bool = false
			yyq262[1] = x.ReadOnly != false
			var yynn262 int
			if yyr262 || yy2arr262 {
				r.EncodeArrayStart(2)
			} else {
				yynn262 = 1
				for _, b := range yyq262 {
					if b {
						yynn262++
					}
				}
				r.EncodeMapStart(yynn262)
				yynn262 = 0
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym264 := z.EncBinary()
				_ = yym264
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym265 := z.EncBinary()
				_ = yym265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[1] {
					yym267 := z.EncBinary()
					_ = yym267
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq262[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym268 := z.EncBinary()
					_ = yym268
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym269 := z.DecBinary()
	_ = yym269
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct270 := r.ContainerType()
		if yyct270 == codecSelferValueTypeMap1234 {
			yyl270 := r.ReadMapStart()
			if yyl270 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl270, d)
			}
		} else if yyct270 == codecSelferValueTypeArray1234 {
			yyl270 := r.ReadArrayStart()
			if yyl270 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl270, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys271Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys271Slc
	var yyhl271 bool = l >= 0
	for yyj271 := 0; ; yyj271++ {
		if yyhl271 {
			if yyj271 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys271Slc = r.DecodeBytes(yys271Slc, true, true)
		yys271 := string(yys271Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys271 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys271)
		} // end switch yys271
	} // end for yyj271
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym277 := z.EncBinary()
		_ = yym277
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep278 := !z.EncBinary()
			yy2arr278 := z.EncBasicHandle().StructToArray
			var yyq278 [18]bool
			_, _, _ = yysep278, yyq278, yy2arr278
			const yyr278 bool = false
			yyq278[0] = x.GCEPersistentDisk != nil
			yyq278[1] = x.AWSElasticBlockStore != nil
			yyq278[2] = x.HostPath != nil
			yyq278[3] = x.Glusterfs != nil
			yyq278[4] = x.NFS != nil
			yyq278[5] = x.RBD != nil
			yyq278[6] = x.ISCSI != nil
			yyq278[7] = x.Cinder != nil
			yyq278[8] = x.CephFS != nil
			yyq278[9] = x.FC != nil
			yyq278[10] = x.Flocker != nil
			yyq278[11] = x.FlexVolume != nil
			yyq278[12] = x.AzureFile != nil
			yyq278[13] = x.VsphereVolume != nil
			yyq278[14] = x.Quobyte != nil
			yyq278[15] = x.AzureDisk != nil
			yyq278[16] = x.AnchnetPersistentDisk != nil
			yyq278[17] = x.AliyunPersistentDisk != nil
			var yynn278 int
			if yyr278 || yy2arr278 {
				r.EncodeArrayStart(18)
			} else {
				yynn278 = 0
				for _, b := range yyq278 {
					if b {
						yynn278++
					}
				}
				r.EncodeMapStart(yynn278)
				yynn278 = 0
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[14] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[16] {
					if x.AnchnetPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AnchnetPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("anchnetPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AnchnetPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AnchnetPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[17] {
					if x.AliyunPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AliyunPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("aliyunPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AliyunPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AliyunPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym297 := z.DecBinary()
	_ = yym297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct298 := r.ContainerType()
		if yyct298 == codecSelferValueTypeMap1234 {
			yyl298 := r.ReadMapStart()
			if yyl298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl298, d)
			}
		} else if yyct298 == codecSelferValueTypeArray1234 {
			yyl298 := r.ReadArrayStart()
			if yyl298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys299Slc
	var yyhl299 bool = l >= 0
	for yyj299 := 0; ; yyj299++ {
		if yyhl299 {
			if yyj299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys299Slc = r.DecodeBytes(yys299Slc, true, true)
		yys299 := string(yys299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys299 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "anchnetPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.AnchnetPersistentDisk != nil {
					x.AnchnetPersistentDisk = nil
				}
			} else {
				if x.AnchnetPersistentDisk == nil {
					x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
				}
				x.AnchnetPersistentDisk.CodecDecodeSelf(d)
			}
		case "aliyunPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.AliyunPersistentDisk != nil {
					x.AliyunPersistentDisk = nil
				}
			} else {
				if x.AliyunPersistentDisk == nil {
					x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
				}
				x.AliyunPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys299)
		} // end switch yys299
	} // end for yyj299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AnchnetPersistentDisk != nil {
			x.AnchnetPersistentDisk = nil
		}
	} else {
		if x.AnchnetPersistentDisk == nil {
			x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
		}
		x.AnchnetPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AliyunPersistentDisk != nil {
			x.AliyunPersistentDisk = nil
		}
	} else {
		if x.AliyunPersistentDisk == nil {
			x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
		}
		x.AliyunPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [5]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Kind != ""
			yyq338[1] = x.APIVersion != ""
			yyq338[2] = true
			yyq338[3] = true
			yyq338[4] = true
			var yynn338 int
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(5)
			} else {
				yynn338 = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
				yynn338 = 0
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[0] {
					yym340 := z.EncBinary()
					_ = yym340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[1] {
					yym343 := z.EncBinary()
					_ = yym343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[2] {
					yy346 := &x.ObjectMeta
					yy346.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy347 := &x.ObjectMeta
					yy347.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[3] {
					yy349 := &x.Spec
					yy349.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy350 := &x.Spec
					yy350.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[4] {
					yy352 := &x.Status
					yy352.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy353 := &x.Status
					yy353.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym354 := z.DecBinary()
	_ = yym354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct355 := r.ContainerType()
		if yyct355 == codecSelferValueTypeMap1234 {
			yyl355 := r.ReadMapStart()
			if yyl355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl355, d)
			}
		} else if yyct355 == codecSelferValueTypeArray1234 {
			yyl355 := r.ReadArrayStart()
			if yyl355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys356Slc
	var yyhl356 bool = l >= 0
	for yyj356 := 0; ; yyj356++ {
		if yyhl356 {
			if yyj356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys356Slc = r.DecodeBytes(yys356Slc, true, true)
		yys356 := string(yys356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys356 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv359 := &x.ObjectMeta
				yyv359.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv360 := &x.Spec
				yyv360.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv361 := &x.Status
				yyv361.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys356)
		} // end switch yys356
	} // end for yyj356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj362 int
	var yyb362 bool
	var yyhl362 bool = l >= 0
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv365 := &x.ObjectMeta
		yyv365.CodecDecodeSelf(d)
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv366 := &x.Spec
		yyv366.CodecDecodeSelf(d)
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv367 := &x.Status
		yyv367.CodecDecodeSelf(d)
	}
	for {
		yyj362++
		if yyhl362 {
			yyb362 = yyj362 > l
		} else {
			yyb362 = r.CheckBreak()
		}
		if yyb362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym368 := z.EncBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep369 := !z.EncBinary()
			yy2arr369 := z.EncBasicHandle().StructToArray
			var yyq369 [22]bool
			_, _, _ = yysep369, yyq369, yy2arr369
			const yyr369 bool = false
			yyq369[0] = len(x.Capacity) != 0
			yyq369[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq369[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq369[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq369[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq369[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq369[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq369[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq369[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq369[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq369[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq369[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq369[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq369[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq369[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq369[15] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq369[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq369[17] = x.PersistentVolumeSource.AnchnetPersistentDisk != nil && x.AnchnetPersistentDisk != nil
			yyq369[18] = x.PersistentVolumeSource.AliyunPersistentDisk != nil && x.AliyunPersistentDisk != nil
			yyq369[19] = len(x.AccessModes) != 0
			yyq369[20] = x.ClaimRef != nil
			yyq369[21] = x.PersistentVolumeReclaimPolicy != ""
			var yynn369 int
			if yyr369 || yy2arr369 {
				r.EncodeArrayStart(22)
			} else {
				yynn369 = 0
				for _, b := range yyq369 {
					if b {
						yynn369++
					}
				}
				r.EncodeMapStart(yynn369)
				yynn369 = 0
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn371 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn371 = true
				goto LABEL371
			}
		LABEL371:
			if yyr369 || yy2arr369 {
				if yyn371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn371 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn372 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn372 = true
				goto LABEL372
			}
		LABEL372:
			if yyr369 || yy2arr369 {
				if yyn372 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn372 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn373 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn373 = true
				goto LABEL373
			}
		LABEL373:
			if yyr369 || yy2arr369 {
				if yyn373 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn373 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn374 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr369 || yy2arr369 {
				if yyn374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn374 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn375 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn375 = true
				goto LABEL375
			}
		LABEL375:
			if yyr369 || yy2arr369 {
				if yyn375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn375 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn376 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn376 = true
				goto LABEL376
			}
		LABEL376:
			if yyr369 || yy2arr369 {
				if yyn376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn376 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn377 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn377 = true
				goto LABEL377
			}
		LABEL377:
			if yyr369 || yy2arr369 {
				if yyn377 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn377 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn378 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn378 = true
				goto LABEL378
			}
		LABEL378:
			if yyr369 || yy2arr369 {
				if yyn378 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn378 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn379 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn379 = true
				goto LABEL379
			}
		LABEL379:
			if yyr369 || yy2arr369 {
				if yyn379 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn379 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn380 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn380 = true
				goto LABEL380
			}
		LABEL380:
			if yyr369 || yy2arr369 {
				if yyn380 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn380 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn381 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn381 = true
				goto LABEL381
			}
		LABEL381:
			if yyr369 || yy2arr369 {
				if yyn381 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn381 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn382 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn382 = true
				goto LABEL382
			}
		LABEL382:
			if yyr369 || yy2arr369 {
				if yyn382 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn382 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn383 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn383 = true
				goto LABEL383
			}
		LABEL383:
			if yyr369 || yy2arr369 {
				if yyn383 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn383 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn384 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn384 = true
				goto LABEL384
			}
		LABEL384:
			if yyr369 || yy2arr369 {
				if yyn384 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn384 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn385 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn385 = true
				goto LABEL385
			}
		LABEL385:
			if yyr369 || yy2arr369 {
				if yyn385 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[15] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn385 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn386 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn386 = true
				goto LABEL386
			}
		LABEL386:
			if yyr369 || yy2arr369 {
				if yyn386 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn386 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn387 bool
			if x.PersistentVolumeSource.AnchnetPersistentDisk == nil {
				yyn387 = true
				goto LABEL387
			}
		LABEL387:
			if yyr369 || yy2arr369 {
				if yyn387 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[17] {
						if x.AnchnetPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AnchnetPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("anchnetPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn387 {
						r.EncodeNil()
					} else {
						if x.AnchnetPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AnchnetPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn388 bool
			if x.PersistentVolumeSource.AliyunPersistentDisk == nil {
				yyn388 = true
				goto LABEL388
			}
		LABEL388:
			if yyr369 || yy2arr369 {
				if yyn388 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[18] {
						if x.AliyunPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AliyunPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("aliyunPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn388 {
						r.EncodeNil()
					} else {
						if x.AliyunPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AliyunPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[19] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym390 := z.EncBinary()
						_ = yym390
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym391 := z.EncBinary()
						_ = yym391
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[20] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[21] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym394 := z.DecBinary()
	_ = yym394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct395 := r.ContainerType()
		if yyct395 == codecSelferValueTypeMap1234 {
			yyl395 := r.ReadMapStart()
			if yyl395 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl395, d)
			}
		} else if yyct395 == codecSelferValueTypeArray1234 {
			yyl395 := r.ReadArrayStart()
			if yyl395 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl395, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys396Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys396Slc
	var yyhl396 bool = l >= 0
	for yyj396 := 0; ; yyj396++ {
		if yyhl396 {
			if yyj396 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys396Slc = r.DecodeBytes(yys396Slc, true, true)
		yys396 := string(yys396Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys396 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv397 := &x.Capacity
				yyv397.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "anchnetPersistentDisk":
			if x.PersistentVolumeSource.AnchnetPersistentDisk == nil {
				x.PersistentVolumeSource.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AnchnetPersistentDisk != nil {
					x.AnchnetPersistentDisk = nil
				}
			} else {
				if x.AnchnetPersistentDisk == nil {
					x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
				}
				x.AnchnetPersistentDisk.CodecDecodeSelf(d)
			}
		case "aliyunPersistentDisk":
			if x.PersistentVolumeSource.AliyunPersistentDisk == nil {
				x.PersistentVolumeSource.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AliyunPersistentDisk != nil {
					x.AliyunPersistentDisk = nil
				}
			} else {
				if x.AliyunPersistentDisk == nil {
					x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
				}
				x.AliyunPersistentDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv416 := &x.AccessModes
				yym417 := z.DecBinary()
				_ = yym417
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv416), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys396)
		} // end switch yys396
	} // end for yyj396
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj420 int
	var yyb420 bool
	var yyhl420 bool = l >= 0
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv421 := &x.Capacity
		yyv421.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AnchnetPersistentDisk == nil {
		x.PersistentVolumeSource.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AnchnetPersistentDisk != nil {
			x.AnchnetPersistentDisk = nil
		}
	} else {
		if x.AnchnetPersistentDisk == nil {
			x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
		}
		x.AnchnetPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AliyunPersistentDisk == nil {
		x.PersistentVolumeSource.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AliyunPersistentDisk != nil {
			x.AliyunPersistentDisk = nil
		}
	} else {
		if x.AliyunPersistentDisk == nil {
			x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
		}
		x.AliyunPersistentDisk.CodecDecodeSelf(d)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv440 := &x.AccessModes
		yym441 := z.DecBinary()
		_ = yym441
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv440), d)
		}
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj420++
		if yyhl420 {
			yyb420 = yyj420 > l
		} else {
			yyb420 = r.CheckBreak()
		}
		if yyb420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym444 := z.EncBinary()
	_ = yym444
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym445 := z.DecBinary()
	_ = yym445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym446 := z.EncBinary()
		_ = yym446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep447 := !z.EncBinary()
			yy2arr447 := z.EncBasicHandle().StructToArray
			var yyq447 [3]bool
			_, _, _ = yysep447, yyq447, yy2arr447
			const yyr447 bool = false
			yyq447[0] = x.Phase != ""
			yyq447[1] = x.Message != ""
			yyq447[2] = x.Reason != ""
			var yynn447 int
			if yyr447 || yy2arr447 {
				r.EncodeArrayStart(3)
			} else {
				yynn447 = 0
				for _, b := range yyq447 {
					if b {
						yynn447++
					}
				}
				r.EncodeMapStart(yynn447)
				yynn447 = 0
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[1] {
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[2] {
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym454 := z.EncBinary()
					_ = yym454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym455 := z.DecBinary()
	_ = yym455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct456 := r.ContainerType()
		if yyct456 == codecSelferValueTypeMap1234 {
			yyl456 := r.ReadMapStart()
			if yyl456 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl456, d)
			}
		} else if yyct456 == codecSelferValueTypeArray1234 {
			yyl456 := r.ReadArrayStart()
			if yyl456 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl456, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys457Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys457Slc
	var yyhl457 bool = l >= 0
	for yyj457 := 0; ; yyj457++ {
		if yyhl457 {
			if yyj457 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys457Slc = r.DecodeBytes(yys457Slc, true, true)
		yys457 := string(yys457Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys457 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys457)
		} // end switch yys457
	} // end for yyj457
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj461 int
	var yyb461 bool
	var yyhl461 bool = l >= 0
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj461++
		if yyhl461 {
			yyb461 = yyj461 > l
		} else {
			yyb461 = r.CheckBreak()
		}
		if yyb461 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj461-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym465 := z.EncBinary()
		_ = yym465
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep466 := !z.EncBinary()
			yy2arr466 := z.EncBasicHandle().StructToArray
			var yyq466 [4]bool
			_, _, _ = yysep466, yyq466, yy2arr466
			const yyr466 bool = false
			yyq466[0] = x.Kind != ""
			yyq466[1] = x.APIVersion != ""
			yyq466[2] = true
			var yynn466 int
			if yyr466 || yy2arr466 {
				r.EncodeArrayStart(4)
			} else {
				yynn466 = 1
				for _, b := range yyq466 {
					if b {
						yynn466++
					}
				}
				r.EncodeMapStart(yynn466)
				yynn466 = 0
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[0] {
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq466[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym469 := z.EncBinary()
					_ = yym469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[1] {
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq466[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[2] {
					yy474 := &x.ListMeta
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else if z.HasExtensions() && z.EncExt(yy474) {
					} else {
						z.EncFallback(yy474)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq466[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy476 := &x.ListMeta
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else if z.HasExtensions() && z.EncExt(yy476) {
					} else {
						z.EncFallback(yy476)
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv486 := &x.ListMeta
				yym487 := z.DecBinary()
				_ = yym487
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv486) {
				} else {
					z.DecFallback(yyv486, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv488 := &x.Items
				yym489 := z.DecBinary()
				_ = yym489
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv488), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj490 int
	var yyb490 bool
	var yyhl490 bool = l >= 0
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv493 := &x.ListMeta
		yym494 := z.DecBinary()
		_ = yym494
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv493) {
		} else {
			z.DecFallback(yyv493, false)
		}
	}
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv495 := &x.Items
		yym496 := z.DecBinary()
		_ = yym496
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv495), d)
		}
	}
	for {
		yyj490++
		if yyhl490 {
			yyb490 = yyj490 > l
		} else {
			yyb490 = r.CheckBreak()
		}
		if yyb490 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj490-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym497 := z.EncBinary()
		_ = yym497
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep498 := !z.EncBinary()
			yy2arr498 := z.EncBasicHandle().StructToArray
			var yyq498 [5]bool
			_, _, _ = yysep498, yyq498, yy2arr498
			const yyr498 bool = false
			yyq498[0] = x.Kind != ""
			yyq498[1] = x.APIVersion != ""
			yyq498[2] = true
			yyq498[3] = true
			yyq498[4] = true
			var yynn498 int
			if yyr498 || yy2arr498 {
				r.EncodeArrayStart(5)
			} else {
				yynn498 = 0
				for _, b := range yyq498 {
					if b {
						yynn498++
					}
				}
				r.EncodeMapStart(yynn498)
				yynn498 = 0
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[0] {
					yym500 := z.EncBinary()
					_ = yym500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq498[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[1] {
					yym503 := z.EncBinary()
					_ = yym503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq498[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[2] {
					yy506 := &x.ObjectMeta
					yy506.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq498[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy507 := &x.ObjectMeta
					yy507.CodecEncodeSelf(e)
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[3] {
					yy509 := &x.Spec
					yy509.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq498[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy510 := &x.Spec
					yy510.CodecEncodeSelf(e)
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[4] {
					yy512 := &x.Status
					yy512.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq498[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy513 := &x.Status
					yy513.CodecEncodeSelf(e)
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym514 := z.DecBinary()
	_ = yym514
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct515 := r.ContainerType()
		if yyct515 == codecSelferValueTypeMap1234 {
			yyl515 := r.ReadMapStart()
			if yyl515 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl515, d)
			}
		} else if yyct515 == codecSelferValueTypeArray1234 {
			yyl515 := r.ReadArrayStart()
			if yyl515 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl515, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys516Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys516Slc
	var yyhl516 bool = l >= 0
	for yyj516 := 0; ; yyj516++ {
		if yyhl516 {
			if yyj516 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys516Slc = r.DecodeBytes(yys516Slc, true, true)
		yys516 := string(yys516Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys516 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv519 := &x.ObjectMeta
				yyv519.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv520 := &x.Spec
				yyv520.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv521 := &x.Status
				yyv521.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys516)
		} // end switch yys516
	} // end for yyj516
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj522 int
	var yyb522 bool
	var yyhl522 bool = l >= 0
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv525 := &x.ObjectMeta
		yyv525.CodecDecodeSelf(d)
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv526 := &x.Spec
		yyv526.CodecDecodeSelf(d)
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv527 := &x.Status
		yyv527.CodecDecodeSelf(d)
	}
	for {
		yyj522++
		if yyhl522 {
			yyb522 = yyj522 > l
		} else {
			yyb522 = r.CheckBreak()
		}
		if yyb522 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj522-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym528 := z.EncBinary()
		_ = yym528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep529 := !z.EncBinary()
			yy2arr529 := z.EncBasicHandle().StructToArray
			var yyq529 [4]bool
			_, _, _ = yysep529, yyq529, yy2arr529
			const yyr529 bool = false
			yyq529[0] = x.Kind != ""
			yyq529[1] = x.APIVersion != ""
			yyq529[2] = true
			var yynn529 int
			if yyr529 || yy2arr529 {
				r.EncodeArrayStart(4)
			} else {
				yynn529 = 1
				for _, b := range yyq529 {
					if b {
						yynn529++
					}
				}
				r.EncodeMapStart(yynn529)
				yynn529 = 0
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[0] {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq529[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[1] {
					yym534 := z.EncBinary()
					_ = yym534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq529[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[2] {
					yy537 := &x.ListMeta
					yym538 := z.EncBinary()
					_ = yym538
					if false {
					} else if z.HasExtensions() && z.EncExt(yy537) {
					} else {
						z.EncFallback(yy537)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq529[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy539 := &x.ListMeta
					yym540 := z.EncBinary()
					_ = yym540
					if false {
					} else if z.HasExtensions() && z.EncExt(yy539) {
					} else {
						z.EncFallback(yy539)
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym544 := z.DecBinary()
	_ = yym544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct545 := r.ContainerType()
		if yyct545 == codecSelferValueTypeMap1234 {
			yyl545 := r.ReadMapStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl545, d)
			}
		} else if yyct545 == codecSelferValueTypeArray1234 {
			yyl545 := r.ReadArrayStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl545, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys546Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys546Slc
	var yyhl546 bool = l >= 0
	for yyj546 := 0; ; yyj546++ {
		if yyhl546 {
			if yyj546 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys546Slc = r.DecodeBytes(yys546Slc, true, true)
		yys546 := string(yys546Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys546 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv549 := &x.ListMeta
				yym550 := z.DecBinary()
				_ = yym550
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv549) {
				} else {
					z.DecFallback(yyv549, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv551 := &x.Items
				yym552 := z.DecBinary()
				_ = yym552
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv551), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys546)
		} // end switch yys546
	} // end for yyj546
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj553 int
	var yyb553 bool
	var yyhl553 bool = l >= 0
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv556 := &x.ListMeta
		yym557 := z.DecBinary()
		_ = yym557
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv556) {
		} else {
			z.DecFallback(yyv556, false)
		}
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv558 := &x.Items
		yym559 := z.DecBinary()
		_ = yym559
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv558), d)
		}
	}
	for {
		yyj553++
		if yyhl553 {
			yyb553 = yyj553 > l
		} else {
			yyb553 = r.CheckBreak()
		}
		if yyb553 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj553-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym560 := z.EncBinary()
		_ = yym560
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep561 := !z.EncBinary()
			yy2arr561 := z.EncBasicHandle().StructToArray
			var yyq561 [4]bool
			_, _, _ = yysep561, yyq561, yy2arr561
			const yyr561 bool = false
			yyq561[0] = len(x.AccessModes) != 0
			yyq561[1] = x.Selector != nil
			yyq561[2] = true
			yyq561[3] = x.VolumeName != ""
			var yynn561 int
			if yyr561 || yy2arr561 {
				r.EncodeArrayStart(4)
			} else {
				yynn561 = 0
				for _, b := range yyq561 {
					if b {
						yynn561++
					}
				}
				r.EncodeMapStart(yynn561)
				yynn561 = 0
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym563 := z.EncBinary()
						_ = yym563
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym564 := z.EncBinary()
						_ = yym564
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym566 := z.EncBinary()
						_ = yym566
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym567 := z.EncBinary()
						_ = yym567
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[2] {
					yy569 := &x.Resources
					yy569.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy570 := &x.Resources
					yy570.CodecEncodeSelf(e)
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[3] {
					yym572 := z.EncBinary()
					_ = yym572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq561[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym573 := z.EncBinary()
					_ = yym573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym574 := z.DecBinary()
	_ = yym574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct575 := r.ContainerType()
		if yyct575 == codecSelferValueTypeMap1234 {
			yyl575 := r.ReadMapStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl575, d)
			}
		} else if yyct575 == codecSelferValueTypeArray1234 {
			yyl575 := r.ReadArrayStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys576Slc
	var yyhl576 bool = l >= 0
	for yyj576 := 0; ; yyj576++ {
		if yyhl576 {
			if yyj576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys576Slc = r.DecodeBytes(yys576Slc, true, true)
		yys576 := string(yys576Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys576 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv577 := &x.AccessModes
				yym578 := z.DecBinary()
				_ = yym578
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv577), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym580 := z.DecBinary()
				_ = yym580
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv581 := &x.Resources
				yyv581.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys576)
		} // end switch yys576
	} // end for yyj576
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj583 int
	var yyb583 bool
	var yyhl583 bool = l >= 0
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv584 := &x.AccessModes
		yym585 := z.DecBinary()
		_ = yym585
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv584), d)
		}
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym587 := z.DecBinary()
		_ = yym587
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv588 := &x.Resources
		yyv588.CodecDecodeSelf(d)
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj583++
		if yyhl583 {
			yyb583 = yyj583 > l
		} else {
			yyb583 = r.CheckBreak()
		}
		if yyb583 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj583-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym590 := z.EncBinary()
		_ = yym590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep591 := !z.EncBinary()
			yy2arr591 := z.EncBasicHandle().StructToArray
			var yyq591 [3]bool
			_, _, _ = yysep591, yyq591, yy2arr591
			const yyr591 bool = false
			yyq591[0] = x.Phase != ""
			yyq591[1] = len(x.AccessModes) != 0
			yyq591[2] = len(x.Capacity) != 0
			var yynn591 int
			if yyr591 || yy2arr591 {
				r.EncodeArrayStart(3)
			} else {
				yynn591 = 0
				for _, b := range yyq591 {
					if b {
						yynn591++
					}
				}
				r.EncodeMapStart(yynn591)
				yynn591 = 0
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq591[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym594 := z.EncBinary()
						_ = yym594
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq591[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym595 := z.EncBinary()
						_ = yym595
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq591[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym597 := z.DecBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct598 := r.ContainerType()
		if yyct598 == codecSelferValueTypeMap1234 {
			yyl598 := r.ReadMapStart()
			if yyl598 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl598, d)
			}
		} else if yyct598 == codecSelferValueTypeArray1234 {
			yyl598 := r.ReadArrayStart()
			if yyl598 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl598, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys599Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys599Slc
	var yyhl599 bool = l >= 0
	for yyj599 := 0; ; yyj599++ {
		if yyhl599 {
			if yyj599 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys599Slc = r.DecodeBytes(yys599Slc, true, true)
		yys599 := string(yys599Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys599 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv601 := &x.AccessModes
				yym602 := z.DecBinary()
				_ = yym602
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv601), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv603 := &x.Capacity
				yyv603.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys599)
		} // end switch yys599
	} // end for yyj599
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj604 int
	var yyb604 bool
	var yyhl604 bool = l >= 0
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv606 := &x.AccessModes
		yym607 := z.DecBinary()
		_ = yym607
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv606), d)
		}
	}
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv608 := &x.Capacity
		yyv608.CodecDecodeSelf(d)
	}
	for {
		yyj604++
		if yyhl604 {
			yyb604 = yyj604 > l
		} else {
			yyb604 = r.CheckBreak()
		}
		if yyb604 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj604-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym609 := z.EncBinary()
	_ = yym609
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym610 := z.DecBinary()
	_ = yym610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym611 := z.EncBinary()
	_ = yym611
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym612 := z.DecBinary()
	_ = yym612
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym613 := z.EncBinary()
	_ = yym613
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym614 := z.DecBinary()
	_ = yym614
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym615 := z.EncBinary()
		_ = yym615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep616 := !z.EncBinary()
			yy2arr616 := z.EncBasicHandle().StructToArray
			var yyq616 [1]bool
			_, _, _ = yysep616, yyq616, yy2arr616
			const yyr616 bool = false
			var yynn616 int
			if yyr616 || yy2arr616 {
				r.EncodeArrayStart(1)
			} else {
				yynn616 = 1
				for _, b := range yyq616 {
					if b {
						yynn616++
					}
				}
				r.EncodeMapStart(yynn616)
				yynn616 = 0
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym618 := z.EncBinary()
				_ = yym618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym619 := z.EncBinary()
				_ = yym619
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym620 := z.DecBinary()
	_ = yym620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct621 := r.ContainerType()
		if yyct621 == codecSelferValueTypeMap1234 {
			yyl621 := r.ReadMapStart()
			if yyl621 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl621, d)
			}
		} else if yyct621 == codecSelferValueTypeArray1234 {
			yyl621 := r.ReadArrayStart()
			if yyl621 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl621, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys622Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys622Slc
	var yyhl622 bool = l >= 0
	for yyj622 := 0; ; yyj622++ {
		if yyhl622 {
			if yyj622 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys622Slc = r.DecodeBytes(yys622Slc, true, true)
		yys622 := string(yys622Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys622 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys622)
		} // end switch yys622
	} // end for yyj622
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj624 int
	var yyb624 bool
	var yyhl624 bool = l >= 0
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj624++
		if yyhl624 {
			yyb624 = yyj624 > l
		} else {
			yyb624 = r.CheckBreak()
		}
		if yyb624 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj624-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym626 := z.EncBinary()
		_ = yym626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep627 := !z.EncBinary()
			yy2arr627 := z.EncBasicHandle().StructToArray
			var yyq627 [1]bool
			_, _, _ = yysep627, yyq627, yy2arr627
			const yyr627 bool = false
			yyq627[0] = x.Medium != ""
			var yynn627 int
			if yyr627 || yy2arr627 {
				r.EncodeArrayStart(1)
			} else {
				yynn627 = 0
				for _, b := range yyq627 {
					if b {
						yynn627++
					}
				}
				r.EncodeMapStart(yynn627)
				yynn627 = 0
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq627[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym629 := z.DecBinary()
	_ = yym629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct630 := r.ContainerType()
		if yyct630 == codecSelferValueTypeMap1234 {
			yyl630 := r.ReadMapStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl630, d)
			}
		} else if yyct630 == codecSelferValueTypeArray1234 {
			yyl630 := r.ReadArrayStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys631Slc
	var yyhl631 bool = l >= 0
	for yyj631 := 0; ; yyj631++ {
		if yyhl631 {
			if yyj631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys631Slc = r.DecodeBytes(yys631Slc, true, true)
		yys631 := string(yys631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys631 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys631)
		} // end switch yys631
	} // end for yyj631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym635 := z.EncBinary()
		_ = yym635
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep636 := !z.EncBinary()
			yy2arr636 := z.EncBasicHandle().StructToArray
			var yyq636 [3]bool
			_, _, _ = yysep636, yyq636, yy2arr636
			const yyr636 bool = false
			yyq636[2] = x.ReadOnly != false
			var yynn636 int
			if yyr636 || yy2arr636 {
				r.EncodeArrayStart(3)
			} else {
				yynn636 = 2
				for _, b := range yyq636 {
					if b {
						yynn636++
					}
				}
				r.EncodeMapStart(yynn636)
				yynn636 = 0
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym638 := z.EncBinary()
				_ = yym638
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym639 := z.EncBinary()
				_ = yym639
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym641 := z.EncBinary()
				_ = yym641
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym642 := z.EncBinary()
				_ = yym642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq636[2] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq636[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym646 := z.DecBinary()
	_ = yym646
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct647 := r.ContainerType()
		if yyct647 == codecSelferValueTypeMap1234 {
			yyl647 := r.ReadMapStart()
			if yyl647 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl647, d)
			}
		} else if yyct647 == codecSelferValueTypeArray1234 {
			yyl647 := r.ReadArrayStart()
			if yyl647 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl647, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys648Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys648Slc
	var yyhl648 bool = l >= 0
	for yyj648 := 0; ; yyj648++ {
		if yyhl648 {
			if yyj648 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys648Slc = r.DecodeBytes(yys648Slc, true, true)
		yys648 := string(yys648Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys648 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys648)
		} // end switch yys648
	} // end for yyj648
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj652 int
	var yyb652 bool
	var yyhl652 bool = l >= 0
	yyj652++
	if yyhl652 {
		yyb652 = yyj652 > l
	} else {
		yyb652 = r.CheckBreak()
	}
	if yyb652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj652++
	if yyhl652 {
		yyb652 = yyj652 > l
	} else {
		yyb652 = r.CheckBreak()
	}
	if yyb652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj652++
	if yyhl652 {
		yyb652 = yyj652 > l
	} else {
		yyb652 = r.CheckBreak()
	}
	if yyb652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj652++
		if yyhl652 {
			yyb652 = yyj652 > l
		} else {
			yyb652 = r.CheckBreak()
		}
		if yyb652 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj652-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym656 := z.EncBinary()
		_ = yym656
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep657 := !z.EncBinary()
			yy2arr657 := z.EncBasicHandle().StructToArray
			var yyq657 [8]bool
			_, _, _ = yysep657, yyq657, yy2arr657
			const yyr657 bool = false
			yyq657[2] = x.FSType != ""
			yyq657[3] = x.RBDPool != ""
			yyq657[4] = x.RadosUser != ""
			yyq657[5] = x.Keyring != ""
			yyq657[6] = x.SecretRef != nil
			yyq657[7] = x.ReadOnly != false
			var yynn657 int
			if yyr657 || yy2arr657 {
				r.EncodeArrayStart(8)
			} else {
				yynn657 = 2
				for _, b := range yyq657 {
					if b {
						yynn657++
					}
				}
				r.EncodeMapStart(yynn657)
				yynn657 = 0
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym662 := z.EncBinary()
				_ = yym662
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym663 := z.EncBinary()
				_ = yym663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq657[2] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq657[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq657[3] {
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq657[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq657[4] {
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq657[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq657[5] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq657[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq657[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq657[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq657[7] {
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq657[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym680 := z.DecBinary()
	_ = yym680
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct681 := r.ContainerType()
		if yyct681 == codecSelferValueTypeMap1234 {
			yyl681 := r.ReadMapStart()
			if yyl681 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl681, d)
			}
		} else if yyct681 == codecSelferValueTypeArray1234 {
			yyl681 := r.ReadArrayStart()
			if yyl681 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl681, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys682Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys682Slc
	var yyhl682 bool = l >= 0
	for yyj682 := 0; ; yyj682++ {
		if yyhl682 {
			if yyj682 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys682Slc = r.DecodeBytes(yys682Slc, true, true)
		yys682 := string(yys682Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys682 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv683 := &x.CephMonitors
				yym684 := z.DecBinary()
				_ = yym684
				if false {
				} else {
					z.F.DecSliceStringX(yyv683, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys682)
		} // end switch yys682
	} // end for yyj682
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj692 int
	var yyb692 bool
	var yyhl692 bool = l >= 0
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv693 := &x.CephMonitors
		yym694 := z.DecBinary()
		_ = yym694
		if false {
		} else {
			z.F.DecSliceStringX(yyv693, false, d)
		}
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj692++
		if yyhl692 {
			yyb692 = yyj692 > l
		} else {
			yyb692 = r.CheckBreak()
		}
		if yyb692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym702 := z.EncBinary()
		_ = yym702
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep703 := !z.EncBinary()
			yy2arr703 := z.EncBasicHandle().StructToArray
			var yyq703 [3]bool
			_, _, _ = yysep703, yyq703, yy2arr703
			const yyr703 bool = false
			yyq703[1] = x.FSType != ""
			yyq703[2] = x.ReadOnly != false
			var yynn703 int
			if yyr703 || yy2arr703 {
				r.EncodeArrayStart(3)
			} else {
				yynn703 = 1
				for _, b := range yyq703 {
					if b {
						yynn703++
					}
				}
				r.EncodeMapStart(yynn703)
				yynn703 = 0
			}
			if yyr703 || yy2arr703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym705 := z.EncBinary()
				_ = yym705
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym706 := z.EncBinary()
				_ = yym706
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr703 || yy2arr703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq703[1] {
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq703[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym709 := z.EncBinary()
					_ = yym709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr703 || yy2arr703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq703[2] {
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq703[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr703 || yy2arr703 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym713 := z.DecBinary()
	_ = yym713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct714 := r.ContainerType()
		if yyct714 == codecSelferValueTypeMap1234 {
			yyl714 := r.ReadMapStart()
			if yyl714 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl714, d)
			}
		} else if yyct714 == codecSelferValueTypeArray1234 {
			yyl714 := r.ReadArrayStart()
			if yyl714 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys715Slc
	var yyhl715 bool = l >= 0
	for yyj715 := 0; ; yyj715++ {
		if yyhl715 {
			if yyj715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys715Slc = r.DecodeBytes(yys715Slc, true, true)
		yys715 := string(yys715Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys715 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys715)
		} // end switch yys715
	} // end for yyj715
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj719 int
	var yyb719 bool
	var yyhl719 bool = l >= 0
	yyj719++
	if yyhl719 {
		yyb719 = yyj719 > l
	} else {
		yyb719 = r.CheckBreak()
	}
	if yyb719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj719++
	if yyhl719 {
		yyb719 = yyj719 > l
	} else {
		yyb719 = r.CheckBreak()
	}
	if yyb719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj719++
	if yyhl719 {
		yyb719 = yyj719 > l
	} else {
		yyb719 = r.CheckBreak()
	}
	if yyb719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj719++
		if yyhl719 {
			yyb719 = yyj719 > l
		} else {
			yyb719 = r.CheckBreak()
		}
		if yyb719 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj719-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym723 := z.EncBinary()
		_ = yym723
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep724 := !z.EncBinary()
			yy2arr724 := z.EncBasicHandle().StructToArray
			var yyq724 [6]bool
			_, _, _ = yysep724, yyq724, yy2arr724
			const yyr724 bool = false
			yyq724[1] = x.Path != ""
			yyq724[2] = x.User != ""
			yyq724[3] = x.SecretFile != ""
			yyq724[4] = x.SecretRef != nil
			yyq724[5] = x.ReadOnly != false
			var yynn724 int
			if yyr724 || yy2arr724 {
				r.EncodeArrayStart(6)
			} else {
				yynn724 = 1
				for _, b := range yyq724 {
					if b {
						yynn724++
					}
				}
				r.EncodeMapStart(yynn724)
				yynn724 = 0
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym726 := z.EncBinary()
					_ = yym726
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[1] {
					yym729 := z.EncBinary()
					_ = yym729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq724[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[2] {
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq724[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[3] {
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq724[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym736 := z.EncBinary()
					_ = yym736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq724[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[5] {
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq724[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym741 := z.DecBinary()
	_ = yym741
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct742 := r.ContainerType()
		if yyct742 == codecSelferValueTypeMap1234 {
			yyl742 := r.ReadMapStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl742, d)
			}
		} else if yyct742 == codecSelferValueTypeArray1234 {
			yyl742 := r.ReadArrayStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl742, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys743Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys743Slc
	var yyhl743 bool = l >= 0
	for yyj743 := 0; ; yyj743++ {
		if yyhl743 {
			if yyj743 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys743Slc = r.DecodeBytes(yys743Slc, true, true)
		yys743 := string(yys743Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys743 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv744 := &x.Monitors
				yym745 := z.DecBinary()
				_ = yym745
				if false {
				} else {
					z.F.DecSliceStringX(yyv744, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys743)
		} // end switch yys743
	} // end for yyj743
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj751 int
	var yyb751 bool
	var yyhl751 bool = l >= 0
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv752 := &x.Monitors
		yym753 := z.DecBinary()
		_ = yym753
		if false {
		} else {
			z.F.DecSliceStringX(yyv752, false, d)
		}
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj751++
		if yyhl751 {
			yyb751 = yyj751 > l
		} else {
			yyb751 = r.CheckBreak()
		}
		if yyb751 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj751-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym759 := z.EncBinary()
		_ = yym759
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep760 := !z.EncBinary()
			yy2arr760 := z.EncBasicHandle().StructToArray
			var yyq760 [1]bool
			_, _, _ = yysep760, yyq760, yy2arr760
			const yyr760 bool = false
			var yynn760 int
			if yyr760 || yy2arr760 {
				r.EncodeArrayStart(1)
			} else {
				yynn760 = 1
				for _, b := range yyq760 {
					if b {
						yynn760++
					}
				}
				r.EncodeMapStart(yynn760)
				yynn760 = 0
			}
			if yyr760 || yy2arr760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym763 := z.EncBinary()
				_ = yym763
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr760 || yy2arr760 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym764 := z.DecBinary()
	_ = yym764
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct765 := r.ContainerType()
		if yyct765 == codecSelferValueTypeMap1234 {
			yyl765 := r.ReadMapStart()
			if yyl765 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl765, d)
			}
		} else if yyct765 == codecSelferValueTypeArray1234 {
			yyl765 := r.ReadArrayStart()
			if yyl765 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl765, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys766Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys766Slc
	var yyhl766 bool = l >= 0
	for yyj766 := 0; ; yyj766++ {
		if yyhl766 {
			if yyj766 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys766Slc = r.DecodeBytes(yys766Slc, true, true)
		yys766 := string(yys766Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys766 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys766)
		} // end switch yys766
	} // end for yyj766
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj768 int
	var yyb768 bool
	var yyhl768 bool = l >= 0
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj768++
		if yyhl768 {
			yyb768 = yyj768 > l
		} else {
			yyb768 = r.CheckBreak()
		}
		if yyb768 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj768-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym770 := z.EncBinary()
	_ = yym770
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym771 := z.DecBinary()
	_ = yym771
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym772 := z.EncBinary()
	_ = yym772
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym773 := z.DecBinary()
	_ = yym773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AnchnetPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym774 := z.EncBinary()
		_ = yym774
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep775 := !z.EncBinary()
			yy2arr775 := z.EncBasicHandle().StructToArray
			var yyq775 [4]bool
			_, _, _ = yysep775, yyq775, yy2arr775
			const yyr775 bool = false
			yyq775[1] = x.FSType != ""
			yyq775[2] = x.Partition != 0
			yyq775[3] = x.ReadOnly != false
			var yynn775 int
			if yyr775 || yy2arr775 {
				r.EncodeArrayStart(4)
			} else {
				yynn775 = 1
				for _, b := range yyq775 {
					if b {
						yynn775++
					}
				}
				r.EncodeMapStart(yynn775)
				yynn775 = 0
			}
			if yyr775 || yy2arr775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym777 := z.EncBinary()
				_ = yym777
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym778 := z.EncBinary()
				_ = yym778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr775 || yy2arr775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq775[1] {
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq775[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym781 := z.EncBinary()
					_ = yym781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr775 || yy2arr775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq775[2] {
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq775[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr775 || yy2arr775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq775[3] {
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq775[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr775 || yy2arr775 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AnchnetPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym788 := z.DecBinary()
	_ = yym788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct789 := r.ContainerType()
		if yyct789 == codecSelferValueTypeMap1234 {
			yyl789 := r.ReadMapStart()
			if yyl789 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl789, d)
			}
		} else if yyct789 == codecSelferValueTypeArray1234 {
			yyl789 := r.ReadArrayStart()
			if yyl789 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AnchnetPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys790Slc
	var yyhl790 bool = l >= 0
	for yyj790 := 0; ; yyj790++ {
		if yyhl790 {
			if yyj790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys790Slc = r.DecodeBytes(yys790Slc, true, true)
		yys790 := string(yys790Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys790 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys790)
		} // end switch yys790
	} // end for yyj790
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AnchnetPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj795 int
	var yyb795 bool
	var yyhl795 bool = l >= 0
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj795++
		if yyhl795 {
			yyb795 = yyj795 > l
		} else {
			yyb795 = r.CheckBreak()
		}
		if yyb795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AliyunPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym800 := z.EncBinary()
		_ = yym800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep801 := !z.EncBinary()
			yy2arr801 := z.EncBasicHandle().StructToArray
			var yyq801 [4]bool
			_, _, _ = yysep801, yyq801, yy2arr801
			const yyr801 bool = false
			yyq801[1] = x.FSType != ""
			yyq801[2] = x.Partition != 0
			yyq801[3] = x.ReadOnly != false
			var yynn801 int
			if yyr801 || yy2arr801 {
				r.EncodeArrayStart(4)
			} else {
				yynn801 = 1
				for _, b := range yyq801 {
					if b {
						yynn801++
					}
				}
				r.EncodeMapStart(yynn801)
				yynn801 = 0
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym803 := z.EncBinary()
				_ = yym803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym804 := z.EncBinary()
				_ = yym804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq801[1] {
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq801[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym807 := z.EncBinary()
					_ = yym807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq801[2] {
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq801[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym810 := z.EncBinary()
					_ = yym810
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq801[3] {
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq801[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AliyunPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym814 := z.DecBinary()
	_ = yym814
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct815 := r.ContainerType()
		if yyct815 == codecSelferValueTypeMap1234 {
			yyl815 := r.ReadMapStart()
			if yyl815 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl815, d)
			}
		} else if yyct815 == codecSelferValueTypeArray1234 {
			yyl815 := r.ReadArrayStart()
			if yyl815 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl815, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AliyunPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys816Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys816Slc
	var yyhl816 bool = l >= 0
	for yyj816 := 0; ; yyj816++ {
		if yyhl816 {
			if yyj816 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys816Slc = r.DecodeBytes(yys816Slc, true, true)
		yys816 := string(yys816Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys816 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys816)
		} // end switch yys816
	} // end for yyj816
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AliyunPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj821 int
	var yyb821 bool
	var yyhl821 bool = l >= 0
	yyj821++
	if yyhl821 {
		yyb821 = yyj821 > l
	} else {
		yyb821 = r.CheckBreak()
	}
	if yyb821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj821++
	if yyhl821 {
		yyb821 = yyj821 > l
	} else {
		yyb821 = r.CheckBreak()
	}
	if yyb821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj821++
	if yyhl821 {
		yyb821 = yyj821 > l
	} else {
		yyb821 = r.CheckBreak()
	}
	if yyb821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj821++
	if yyhl821 {
		yyb821 = yyj821 > l
	} else {
		yyb821 = r.CheckBreak()
	}
	if yyb821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj821++
		if yyhl821 {
			yyb821 = yyj821 > l
		} else {
			yyb821 = r.CheckBreak()
		}
		if yyb821 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj821-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym826 := z.EncBinary()
		_ = yym826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep827 := !z.EncBinary()
			yy2arr827 := z.EncBasicHandle().StructToArray
			var yyq827 [4]bool
			_, _, _ = yysep827, yyq827, yy2arr827
			const yyr827 bool = false
			yyq827[1] = x.FSType != ""
			yyq827[2] = x.Partition != 0
			yyq827[3] = x.ReadOnly != false
			var yynn827 int
			if yyr827 || yy2arr827 {
				r.EncodeArrayStart(4)
			} else {
				yynn827 = 1
				for _, b := range yyq827 {
					if b {
						yynn827++
					}
				}
				r.EncodeMapStart(yynn827)
				yynn827 = 0
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym829 := z.EncBinary()
				_ = yym829
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym830 := z.EncBinary()
				_ = yym830
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[1] {
					yym832 := z.EncBinary()
					_ = yym832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq827[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[2] {
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq827[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[3] {
					yym838 := z.EncBinary()
					_ = yym838
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq827[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym840 := z.DecBinary()
	_ = yym840
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct841 := r.ContainerType()
		if yyct841 == codecSelferValueTypeMap1234 {
			yyl841 := r.ReadMapStart()
			if yyl841 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl841, d)
			}
		} else if yyct841 == codecSelferValueTypeArray1234 {
			yyl841 := r.ReadArrayStart()
			if yyl841 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl841, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys842Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys842Slc
	var yyhl842 bool = l >= 0
	for yyj842 := 0; ; yyj842++ {
		if yyhl842 {
			if yyj842 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys842Slc = r.DecodeBytes(yys842Slc, true, true)
		yys842 := string(yys842Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys842 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys842)
		} // end switch yys842
	} // end for yyj842
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj847 int
	var yyb847 bool
	var yyhl847 bool = l >= 0
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj847++
		if yyhl847 {
			yyb847 = yyj847 > l
		} else {
			yyb847 = r.CheckBreak()
		}
		if yyb847 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj847-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym852 := z.EncBinary()
		_ = yym852
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep853 := !z.EncBinary()
			yy2arr853 := z.EncBasicHandle().StructToArray
			var yyq853 [5]bool
			_, _, _ = yysep853, yyq853, yy2arr853
			const yyr853 bool = false
			yyq853[2] = x.ReadOnly != false
			yyq853[3] = x.User != ""
			yyq853[4] = x.Group != ""
			var yynn853 int
			if yyr853 || yy2arr853 {
				r.EncodeArrayStart(5)
			} else {
				yynn853 = 2
				for _, b := range yyq853 {
					if b {
						yynn853++
					}
				}
				r.EncodeMapStart(yynn853)
				yynn853 = 0
			}
			if yyr853 || yy2arr853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym856 := z.EncBinary()
				_ = yym856
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr853 || yy2arr853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym858 := z.EncBinary()
				_ = yym858
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym859 := z.EncBinary()
				_ = yym859
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr853 || yy2arr853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq853[2] {
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq853[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr853 || yy2arr853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq853[3] {
					yym864 := z.EncBinary()
					_ = yym864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq853[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr853 || yy2arr853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq853[4] {
					yym867 := z.EncBinary()
					_ = yym867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq853[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr853 || yy2arr853 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym869 := z.DecBinary()
	_ = yym869
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct870 := r.ContainerType()
		if yyct870 == codecSelferValueTypeMap1234 {
			yyl870 := r.ReadMapStart()
			if yyl870 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl870, d)
			}
		} else if yyct870 == codecSelferValueTypeArray1234 {
			yyl870 := r.ReadArrayStart()
			if yyl870 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl870, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys871Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys871Slc
	var yyhl871 bool = l >= 0
	for yyj871 := 0; ; yyj871++ {
		if yyhl871 {
			if yyj871 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys871Slc = r.DecodeBytes(yys871Slc, true, true)
		yys871 := string(yys871Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys871 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys871)
		} // end switch yys871
	} // end for yyj871
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj877 int
	var yyb877 bool
	var yyhl877 bool = l >= 0
	yyj877++
	if yyhl877 {
		yyb877 = yyj877 > l
	} else {
		yyb877 = r.CheckBreak()
	}
	if yyb877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj877++
	if yyhl877 {
		yyb877 = yyj877 > l
	} else {
		yyb877 = r.CheckBreak()
	}
	if yyb877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj877++
	if yyhl877 {
		yyb877 = yyj877 > l
	} else {
		yyb877 = r.CheckBreak()
	}
	if yyb877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj877++
	if yyhl877 {
		yyb877 = yyj877 > l
	} else {
		yyb877 = r.CheckBreak()
	}
	if yyb877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj877++
	if yyhl877 {
		yyb877 = yyj877 > l
	} else {
		yyb877 = r.CheckBreak()
	}
	if yyb877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj877++
		if yyhl877 {
			yyb877 = yyj877 > l
		} else {
			yyb877 = r.CheckBreak()
		}
		if yyb877 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj877-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym883 := z.EncBinary()
		_ = yym883
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep884 := !z.EncBinary()
			yy2arr884 := z.EncBasicHandle().StructToArray
			var yyq884 [5]bool
			_, _, _ = yysep884, yyq884, yy2arr884
			const yyr884 bool = false
			yyq884[1] = x.FSType != ""
			yyq884[2] = x.SecretRef != nil
			yyq884[3] = x.ReadOnly != false
			yyq884[4] = len(x.Options) != 0
			var yynn884 int
			if yyr884 || yy2arr884 {
				r.EncodeArrayStart(5)
			} else {
				yynn884 = 1
				for _, b := range yyq884 {
					if b {
						yynn884++
					}
				}
				r.EncodeMapStart(yynn884)
				yynn884 = 0
			}
			if yyr884 || yy2arr884 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym886 := z.EncBinary()
				_ = yym886
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym887 := z.EncBinary()
				_ = yym887
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr884 || yy2arr884 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq884[1] {
					yym889 := z.EncBinary()
					_ = yym889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq884[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr884 || yy2arr884 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq884[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq884[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr884 || yy2arr884 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq884[3] {
					yym893 := z.EncBinary()
					_ = yym893
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq884[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr884 || yy2arr884 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq884[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym896 := z.EncBinary()
						_ = yym896
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq884[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym897 := z.EncBinary()
						_ = yym897
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr884 || yy2arr884 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym898 := z.DecBinary()
	_ = yym898
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct899 := r.ContainerType()
		if yyct899 == codecSelferValueTypeMap1234 {
			yyl899 := r.ReadMapStart()
			if yyl899 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl899, d)
			}
		} else if yyct899 == codecSelferValueTypeArray1234 {
			yyl899 := r.ReadArrayStart()
			if yyl899 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl899, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys900Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys900Slc
	var yyhl900 bool = l >= 0
	for yyj900 := 0; ; yyj900++ {
		if yyhl900 {
			if yyj900 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys900Slc = r.DecodeBytes(yys900Slc, true, true)
		yys900 := string(yys900Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys900 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv905 := &x.Options
				yym906 := z.DecBinary()
				_ = yym906
				if false {
				} else {
					z.F.DecMapStringStringX(yyv905, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys900)
		} // end switch yys900
	} // end for yyj900
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv912 := &x.Options
		yym913 := z.DecBinary()
		_ = yym913
		if false {
		} else {
			z.F.DecMapStringStringX(yyv912, false, d)
		}
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym914 := z.EncBinary()
		_ = yym914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep915 := !z.EncBinary()
			yy2arr915 := z.EncBasicHandle().StructToArray
			var yyq915 [4]bool
			_, _, _ = yysep915, yyq915, yy2arr915
			const yyr915 bool = false
			yyq915[1] = x.FSType != ""
			yyq915[2] = x.Partition != 0
			yyq915[3] = x.ReadOnly != false
			var yynn915 int
			if yyr915 || yy2arr915 {
				r.EncodeArrayStart(4)
			} else {
				yynn915 = 1
				for _, b := range yyq915 {
					if b {
						yynn915++
					}
				}
				r.EncodeMapStart(yynn915)
				yynn915 = 0
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym918 := z.EncBinary()
				_ = yym918
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq915[1] {
					yym920 := z.EncBinary()
					_ = yym920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq915[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq915[2] {
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq915[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym924 := z.EncBinary()
					_ = yym924
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq915[3] {
					yym926 := z.EncBinary()
					_ = yym926
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq915[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym928 := z.DecBinary()
	_ = yym928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct929 := r.ContainerType()
		if yyct929 == codecSelferValueTypeMap1234 {
			yyl929 := r.ReadMapStart()
			if yyl929 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl929, d)
			}
		} else if yyct929 == codecSelferValueTypeArray1234 {
			yyl929 := r.ReadArrayStart()
			if yyl929 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys930Slc
	var yyhl930 bool = l >= 0
	for yyj930 := 0; ; yyj930++ {
		if yyhl930 {
			if yyj930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys930Slc = r.DecodeBytes(yys930Slc, true, true)
		yys930 := string(yys930Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys930 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys930)
		} // end switch yys930
	} // end for yyj930
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj935 int
	var yyb935 bool
	var yyhl935 bool = l >= 0
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj935++
		if yyhl935 {
			yyb935 = yyj935 > l
		} else {
			yyb935 = r.CheckBreak()
		}
		if yyb935 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj935-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym940 := z.EncBinary()
		_ = yym940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep941 := !z.EncBinary()
			yy2arr941 := z.EncBasicHandle().StructToArray
			var yyq941 [3]bool
			_, _, _ = yysep941, yyq941, yy2arr941
			const yyr941 bool = false
			yyq941[1] = x.Revision != ""
			yyq941[2] = x.Directory != ""
			var yynn941 int
			if yyr941 || yy2arr941 {
				r.EncodeArrayStart(3)
			} else {
				yynn941 = 1
				for _, b := range yyq941 {
					if b {
						yynn941++
					}
				}
				r.EncodeMapStart(yynn941)
				yynn941 = 0
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym943 := z.EncBinary()
				_ = yym943
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq941[1] {
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq941[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym947 := z.EncBinary()
					_ = yym947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq941[2] {
					yym949 := z.EncBinary()
					_ = yym949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq941[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym951 := z.DecBinary()
	_ = yym951
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct952 := r.ContainerType()
		if yyct952 == codecSelferValueTypeMap1234 {
			yyl952 := r.ReadMapStart()
			if yyl952 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl952, d)
			}
		} else if yyct952 == codecSelferValueTypeArray1234 {
			yyl952 := r.ReadArrayStart()
			if yyl952 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl952, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys953Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys953Slc
	var yyhl953 bool = l >= 0
	for yyj953 := 0; ; yyj953++ {
		if yyhl953 {
			if yyj953 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys953Slc = r.DecodeBytes(yys953Slc, true, true)
		yys953 := string(yys953Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys953 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys953)
		} // end switch yys953
	} // end for yyj953
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj957 int
	var yyb957 bool
	var yyhl957 bool = l >= 0
	yyj957++
	if yyhl957 {
		yyb957 = yyj957 > l
	} else {
		yyb957 = r.CheckBreak()
	}
	if yyb957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj957++
	if yyhl957 {
		yyb957 = yyj957 > l
	} else {
		yyb957 = r.CheckBreak()
	}
	if yyb957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj957++
	if yyhl957 {
		yyb957 = yyj957 > l
	} else {
		yyb957 = r.CheckBreak()
	}
	if yyb957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj957++
		if yyhl957 {
			yyb957 = yyj957 > l
		} else {
			yyb957 = r.CheckBreak()
		}
		if yyb957 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj957-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym961 := z.EncBinary()
		_ = yym961
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep962 := !z.EncBinary()
			yy2arr962 := z.EncBasicHandle().StructToArray
			var yyq962 [3]bool
			_, _, _ = yysep962, yyq962, yy2arr962
			const yyr962 bool = false
			yyq962[0] = x.SecretName != ""
			yyq962[1] = len(x.Items) != 0
			yyq962[2] = x.DefaultMode != nil
			var yynn962 int
			if yyr962 || yy2arr962 {
				r.EncodeArrayStart(3)
			} else {
				yynn962 = 0
				for _, b := range yyq962 {
					if b {
						yynn962++
					}
				}
				r.EncodeMapStart(yynn962)
				yynn962 = 0
			}
			if yyr962 || yy2arr962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq962[0] {
					yym964 := z.EncBinary()
					_ = yym964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq962[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym965 := z.EncBinary()
					_ = yym965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr962 || yy2arr962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq962[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym967 := z.EncBinary()
						_ = yym967
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq962[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym968 := z.EncBinary()
						_ = yym968
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr962 || yy2arr962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq962[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy970 := *x.DefaultMode
						yym971 := z.EncBinary()
						_ = yym971
						if false {
						} else {
							r.EncodeInt(int64(yy970))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq962[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy972 := *x.DefaultMode
						yym973 := z.EncBinary()
						_ = yym973
						if false {
						} else {
							r.EncodeInt(int64(yy972))
						}
					}
				}
			}
			if yyr962 || yy2arr962 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym974 := z.DecBinary()
	_ = yym974
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct975 := r.ContainerType()
		if yyct975 == codecSelferValueTypeMap1234 {
			yyl975 := r.ReadMapStart()
			if yyl975 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl975, d)
			}
		} else if yyct975 == codecSelferValueTypeArray1234 {
			yyl975 := r.ReadArrayStart()
			if yyl975 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl975, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys976Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys976Slc
	var yyhl976 bool = l >= 0
	for yyj976 := 0; ; yyj976++ {
		if yyhl976 {
			if yyj976 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys976Slc = r.DecodeBytes(yys976Slc, true, true)
		yys976 := string(yys976Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys976 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv978 := &x.Items
				yym979 := z.DecBinary()
				_ = yym979
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv978), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym981 := z.DecBinary()
				_ = yym981
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys976)
		} // end switch yys976
	} // end for yyj976
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj982 int
	var yyb982 bool
	var yyhl982 bool = l >= 0
	yyj982++
	if yyhl982 {
		yyb982 = yyj982 > l
	} else {
		yyb982 = r.CheckBreak()
	}
	if yyb982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj982++
	if yyhl982 {
		yyb982 = yyj982 > l
	} else {
		yyb982 = r.CheckBreak()
	}
	if yyb982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv984 := &x.Items
		yym985 := z.DecBinary()
		_ = yym985
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv984), d)
		}
	}
	yyj982++
	if yyhl982 {
		yyb982 = yyj982 > l
	} else {
		yyb982 = r.CheckBreak()
	}
	if yyb982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym987 := z.DecBinary()
		_ = yym987
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj982++
		if yyhl982 {
			yyb982 = yyj982 > l
		} else {
			yyb982 = r.CheckBreak()
		}
		if yyb982 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj982-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym988 := z.EncBinary()
		_ = yym988
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep989 := !z.EncBinary()
			yy2arr989 := z.EncBasicHandle().StructToArray
			var yyq989 [3]bool
			_, _, _ = yysep989, yyq989, yy2arr989
			const yyr989 bool = false
			yyq989[2] = x.ReadOnly != false
			var yynn989 int
			if yyr989 || yy2arr989 {
				r.EncodeArrayStart(3)
			} else {
				yynn989 = 2
				for _, b := range yyq989 {
					if b {
						yynn989++
					}
				}
				r.EncodeMapStart(yynn989)
				yynn989 = 0
			}
			if yyr989 || yy2arr989 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym991 := z.EncBinary()
				_ = yym991
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym992 := z.EncBinary()
				_ = yym992
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr989 || yy2arr989 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym994 := z.EncBinary()
				_ = yym994
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym995 := z.EncBinary()
				_ = yym995
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr989 || yy2arr989 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq989[2] {
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq989[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym998 := z.EncBinary()
					_ = yym998
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr989 || yy2arr989 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym999 := z.DecBinary()
	_ = yym999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1000 := r.ContainerType()
		if yyct1000 == codecSelferValueTypeMap1234 {
			yyl1000 := r.ReadMapStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1000, d)
			}
		} else if yyct1000 == codecSelferValueTypeArray1234 {
			yyl1000 := r.ReadArrayStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1001Slc
	var yyhl1001 bool = l >= 0
	for yyj1001 := 0; ; yyj1001++ {
		if yyhl1001 {
			if yyj1001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1001Slc = r.DecodeBytes(yys1001Slc, true, true)
		yys1001 := string(yys1001Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1001 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1001)
		} // end switch yys1001
	} // end for yyj1001
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1005 int
	var yyb1005 bool
	var yyhl1005 bool = l >= 0
	yyj1005++
	if yyhl1005 {
		yyb1005 = yyj1005 > l
	} else {
		yyb1005 = r.CheckBreak()
	}
	if yyb1005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj1005++
	if yyhl1005 {
		yyb1005 = yyj1005 > l
	} else {
		yyb1005 = r.CheckBreak()
	}
	if yyb1005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1005++
	if yyhl1005 {
		yyb1005 = yyj1005 > l
	} else {
		yyb1005 = r.CheckBreak()
	}
	if yyb1005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1005++
		if yyhl1005 {
			yyb1005 = yyj1005 > l
		} else {
			yyb1005 = r.CheckBreak()
		}
		if yyb1005 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1005-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1009 := z.EncBinary()
		_ = yym1009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1010 := !z.EncBinary()
			yy2arr1010 := z.EncBasicHandle().StructToArray
			var yyq1010 [6]bool
			_, _, _ = yysep1010, yyq1010, yy2arr1010
			const yyr1010 bool = false
			yyq1010[3] = x.ISCSIInterface != ""
			yyq1010[4] = x.FSType != ""
			yyq1010[5] = x.ReadOnly != false
			var yynn1010 int
			if yyr1010 || yy2arr1010 {
				r.EncodeArrayStart(6)
			} else {
				yynn1010 = 3
				for _, b := range yyq1010 {
					if b {
						yynn1010++
					}
				}
				r.EncodeMapStart(yynn1010)
				yynn1010 = 0
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1012 := z.EncBinary()
				_ = yym1012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1013 := z.EncBinary()
				_ = yym1013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1015 := z.EncBinary()
				_ = yym1015
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1016 := z.EncBinary()
				_ = yym1016
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1018 := z.EncBinary()
				_ = yym1018
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1019 := z.EncBinary()
				_ = yym1019
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1010[3] {
					yym1021 := z.EncBinary()
					_ = yym1021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1010[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1010[4] {
					yym1024 := z.EncBinary()
					_ = yym1024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1010[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1010[5] {
					yym1027 := z.EncBinary()
					_ = yym1027
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1010[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1029 := z.DecBinary()
	_ = yym1029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1030 := r.ContainerType()
		if yyct1030 == codecSelferValueTypeMap1234 {
			yyl1030 := r.ReadMapStart()
			if yyl1030 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1030, d)
			}
		} else if yyct1030 == codecSelferValueTypeArray1234 {
			yyl1030 := r.ReadArrayStart()
			if yyl1030 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1031Slc
	var yyhl1031 bool = l >= 0
	for yyj1031 := 0; ; yyj1031++ {
		if yyhl1031 {
			if yyj1031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1031Slc = r.DecodeBytes(yys1031Slc, true, true)
		yys1031 := string(yys1031Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1031 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1031)
		} // end switch yys1031
	} // end for yyj1031
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1038 int
	var yyb1038 bool
	var yyhl1038 bool = l >= 0
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1038++
		if yyhl1038 {
			yyb1038 = yyj1038 > l
		} else {
			yyb1038 = r.CheckBreak()
		}
		if yyb1038 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1038-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1045 := z.EncBinary()
		_ = yym1045
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1046 := !z.EncBinary()
			yy2arr1046 := z.EncBasicHandle().StructToArray
			var yyq1046 [4]bool
			_, _, _ = yysep1046, yyq1046, yy2arr1046
			const yyr1046 bool = false
			yyq1046[2] = x.FSType != ""
			yyq1046[3] = x.ReadOnly != false
			var yynn1046 int
			if yyr1046 || yy2arr1046 {
				r.EncodeArrayStart(4)
			} else {
				yynn1046 = 2
				for _, b := range yyq1046 {
					if b {
						yynn1046++
					}
				}
				r.EncodeMapStart(yynn1046)
				yynn1046 = 0
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym1048 := z.EncBinary()
					_ = yym1048
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym1049 := z.EncBinary()
					_ = yym1049
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy1051 := *x.Lun
					yym1052 := z.EncBinary()
					_ = yym1052
					if false {
					} else {
						r.EncodeInt(int64(yy1051))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy1053 := *x.Lun
					yym1054 := z.EncBinary()
					_ = yym1054
					if false {
					} else {
						r.EncodeInt(int64(yy1053))
					}
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1046[2] {
					yym1056 := z.EncBinary()
					_ = yym1056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1046[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1057 := z.EncBinary()
					_ = yym1057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1046[3] {
					yym1059 := z.EncBinary()
					_ = yym1059
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1046[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1061 := z.DecBinary()
	_ = yym1061
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1062 := r.ContainerType()
		if yyct1062 == codecSelferValueTypeMap1234 {
			yyl1062 := r.ReadMapStart()
			if yyl1062 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1062, d)
			}
		} else if yyct1062 == codecSelferValueTypeArray1234 {
			yyl1062 := r.ReadArrayStart()
			if yyl1062 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1062, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1063Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1063Slc
	var yyhl1063 bool = l >= 0
	for yyj1063 := 0; ; yyj1063++ {
		if yyhl1063 {
			if yyj1063 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1063Slc = r.DecodeBytes(yys1063Slc, true, true)
		yys1063 := string(yys1063Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1063 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv1064 := &x.TargetWWNs
				yym1065 := z.DecBinary()
				_ = yym1065
				if false {
				} else {
					z.F.DecSliceStringX(yyv1064, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym1067 := z.DecBinary()
				_ = yym1067
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1063)
		} // end switch yys1063
	} // end for yyj1063
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1070 int
	var yyb1070 bool
	var yyhl1070 bool = l >= 0
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv1071 := &x.TargetWWNs
		yym1072 := z.DecBinary()
		_ = yym1072
		if false {
		} else {
			z.F.DecSliceStringX(yyv1071, false, d)
		}
	}
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym1074 := z.DecBinary()
		_ = yym1074
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1070++
		if yyhl1070 {
			yyb1070 = yyj1070 > l
		} else {
			yyb1070 = r.CheckBreak()
		}
		if yyb1070 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1070-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1077 := z.EncBinary()
		_ = yym1077
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1078 := !z.EncBinary()
			yy2arr1078 := z.EncBasicHandle().StructToArray
			var yyq1078 [3]bool
			_, _, _ = yysep1078, yyq1078, yy2arr1078
			const yyr1078 bool = false
			yyq1078[2] = x.ReadOnly != false
			var yynn1078 int
			if yyr1078 || yy2arr1078 {
				r.EncodeArrayStart(3)
			} else {
				yynn1078 = 2
				for _, b := range yyq1078 {
					if b {
						yynn1078++
					}
				}
				r.EncodeMapStart(yynn1078)
				yynn1078 = 0
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1080 := z.EncBinary()
				_ = yym1080
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1081 := z.EncBinary()
				_ = yym1081
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1083 := z.EncBinary()
				_ = yym1083
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1084 := z.EncBinary()
				_ = yym1084
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1078[2] {
					yym1086 := z.EncBinary()
					_ = yym1086
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1078[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1087 := z.EncBinary()
					_ = yym1087
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1088 := z.DecBinary()
	_ = yym1088
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1089 := r.ContainerType()
		if yyct1089 == codecSelferValueTypeMap1234 {
			yyl1089 := r.ReadMapStart()
			if yyl1089 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1089, d)
			}
		} else if yyct1089 == codecSelferValueTypeArray1234 {
			yyl1089 := r.ReadArrayStart()
			if yyl1089 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1089, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1090Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1090Slc
	var yyhl1090 bool = l >= 0
	for yyj1090 := 0; ; yyj1090++ {
		if yyhl1090 {
			if yyj1090 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1090Slc = r.DecodeBytes(yys1090Slc, true, true)
		yys1090 := string(yys1090Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1090 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1090)
		} // end switch yys1090
	} // end for yyj1090
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1094 int
	var yyb1094 bool
	var yyhl1094 bool = l >= 0
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1094++
		if yyhl1094 {
			yyb1094 = yyj1094 > l
		} else {
			yyb1094 = r.CheckBreak()
		}
		if yyb1094 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1094-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1098 := z.EncBinary()
		_ = yym1098
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1099 := !z.EncBinary()
			yy2arr1099 := z.EncBasicHandle().StructToArray
			var yyq1099 [2]bool
			_, _, _ = yysep1099, yyq1099, yy2arr1099
			const yyr1099 bool = false
			yyq1099[1] = x.FSType != ""
			var yynn1099 int
			if yyr1099 || yy2arr1099 {
				r.EncodeArrayStart(2)
			} else {
				yynn1099 = 1
				for _, b := range yyq1099 {
					if b {
						yynn1099++
					}
				}
				r.EncodeMapStart(yynn1099)
				yynn1099 = 0
			}
			if yyr1099 || yy2arr1099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1101 := z.EncBinary()
				_ = yym1101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1102 := z.EncBinary()
				_ = yym1102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1099 || yy2arr1099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1099[1] {
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1099[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1105 := z.EncBinary()
					_ = yym1105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1099 || yy2arr1099 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1106 := z.DecBinary()
	_ = yym1106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1107 := r.ContainerType()
		if yyct1107 == codecSelferValueTypeMap1234 {
			yyl1107 := r.ReadMapStart()
			if yyl1107 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1107, d)
			}
		} else if yyct1107 == codecSelferValueTypeArray1234 {
			yyl1107 := r.ReadArrayStart()
			if yyl1107 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1107, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1108Slc
	var yyhl1108 bool = l >= 0
	for yyj1108 := 0; ; yyj1108++ {
		if yyhl1108 {
			if yyj1108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1108Slc = r.DecodeBytes(yys1108Slc, true, true)
		yys1108 := string(yys1108Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1108 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1108)
		} // end switch yys1108
	} // end for yyj1108
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1111 int
	var yyb1111 bool
	var yyhl1111 bool = l >= 0
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1111++
		if yyhl1111 {
			yyb1111 = yyj1111 > l
		} else {
			yyb1111 = r.CheckBreak()
		}
		if yyb1111 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1111-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1114 := z.EncBinary()
	_ = yym1114
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1115 := z.DecBinary()
	_ = yym1115
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1116 := z.EncBinary()
		_ = yym1116
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1117 := !z.EncBinary()
			yy2arr1117 := z.EncBasicHandle().StructToArray
			var yyq1117 [5]bool
			_, _, _ = yysep1117, yyq1117, yy2arr1117
			const yyr1117 bool = false
			yyq1117[2] = x.CachingMode != nil
			yyq1117[3] = x.FSType != nil
			yyq1117[4] = x.ReadOnly != nil
			var yynn1117 int
			if yyr1117 || yy2arr1117 {
				r.EncodeArrayStart(5)
			} else {
				yynn1117 = 2
				for _, b := range yyq1117 {
					if b {
						yynn1117++
					}
				}
				r.EncodeMapStart(yynn1117)
				yynn1117 = 0
			}
			if yyr1117 || yy2arr1117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1119 := z.EncBinary()
				_ = yym1119
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1120 := z.EncBinary()
				_ = yym1120
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1117 || yy2arr1117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1122 := z.EncBinary()
				_ = yym1122
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1123 := z.EncBinary()
				_ = yym1123
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1117 || yy2arr1117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1117[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1125 := *x.CachingMode
						yy1125.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1117[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1126 := *x.CachingMode
						yy1126.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1117 || yy2arr1117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1117[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1128 := *x.FSType
						yym1129 := z.EncBinary()
						_ = yym1129
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1128))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1117[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1130 := *x.FSType
						yym1131 := z.EncBinary()
						_ = yym1131
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1130))
						}
					}
				}
			}
			if yyr1117 || yy2arr1117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1117[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1133 := *x.ReadOnly
						yym1134 := z.EncBinary()
						_ = yym1134
						if false {
						} else {
							r.EncodeBool(bool(yy1133))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1117[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1135 := *x.ReadOnly
						yym1136 := z.EncBinary()
						_ = yym1136
						if false {
						} else {
							r.EncodeBool(bool(yy1135))
						}
					}
				}
			}
			if yyr1117 || yy2arr1117 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1137 := z.DecBinary()
	_ = yym1137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1138 := r.ContainerType()
		if yyct1138 == codecSelferValueTypeMap1234 {
			yyl1138 := r.ReadMapStart()
			if yyl1138 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1138, d)
			}
		} else if yyct1138 == codecSelferValueTypeArray1234 {
			yyl1138 := r.ReadArrayStart()
			if yyl1138 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1138, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1139Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1139Slc
	var yyhl1139 bool = l >= 0
	for yyj1139 := 0; ; yyj1139++ {
		if yyhl1139 {
			if yyj1139 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1139Slc = r.DecodeBytes(yys1139Slc, true, true)
		yys1139 := string(yys1139Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1139 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1144 := z.DecBinary()
				_ = yym1144
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1146 := z.DecBinary()
				_ = yym1146
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1139)
		} // end switch yys1139
	} // end for yyj1139
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1147 int
	var yyb1147 bool
	var yyhl1147 bool = l >= 0
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1152 := z.DecBinary()
		_ = yym1152
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1154 := z.DecBinary()
		_ = yym1154
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1147++
		if yyhl1147 {
			yyb1147 = yyj1147 > l
		} else {
			yyb1147 = r.CheckBreak()
		}
		if yyb1147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1155 := z.EncBinary()
		_ = yym1155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1156 := !z.EncBinary()
			yy2arr1156 := z.EncBasicHandle().StructToArray
			var yyq1156 [3]bool
			_, _, _ = yysep1156, yyq1156, yy2arr1156
			const yyr1156 bool = false
			yyq1156[0] = x.Name != ""
			yyq1156[1] = len(x.Items) != 0
			yyq1156[2] = x.DefaultMode != nil
			var yynn1156 int
			if yyr1156 || yy2arr1156 {
				r.EncodeArrayStart(3)
			} else {
				yynn1156 = 0
				for _, b := range yyq1156 {
					if b {
						yynn1156++
					}
				}
				r.EncodeMapStart(yynn1156)
				yynn1156 = 0
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1156[0] {
					yym1158 := z.EncBinary()
					_ = yym1158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1156[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1159 := z.EncBinary()
					_ = yym1159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1156[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1161 := z.EncBinary()
						_ = yym1161
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1156[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1162 := z.EncBinary()
						_ = yym1162
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1156[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1164 := *x.DefaultMode
						yym1165 := z.EncBinary()
						_ = yym1165
						if false {
						} else {
							r.EncodeInt(int64(yy1164))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1156[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1166 := *x.DefaultMode
						yym1167 := z.EncBinary()
						_ = yym1167
						if false {
						} else {
							r.EncodeInt(int64(yy1166))
						}
					}
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1168 := z.DecBinary()
	_ = yym1168
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1169 := r.ContainerType()
		if yyct1169 == codecSelferValueTypeMap1234 {
			yyl1169 := r.ReadMapStart()
			if yyl1169 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1169, d)
			}
		} else if yyct1169 == codecSelferValueTypeArray1234 {
			yyl1169 := r.ReadArrayStart()
			if yyl1169 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1169, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1170Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1170Slc
	var yyhl1170 bool = l >= 0
	for yyj1170 := 0; ; yyj1170++ {
		if yyhl1170 {
			if yyj1170 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1170Slc = r.DecodeBytes(yys1170Slc, true, true)
		yys1170 := string(yys1170Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1170 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1172 := &x.Items
				yym1173 := z.DecBinary()
				_ = yym1173
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1172), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1175 := z.DecBinary()
				_ = yym1175
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1170)
		} // end switch yys1170
	} // end for yyj1170
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1176 int
	var yyb1176 bool
	var yyhl1176 bool = l >= 0
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1178 := &x.Items
		yym1179 := z.DecBinary()
		_ = yym1179
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1178), d)
		}
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1181 := z.DecBinary()
		_ = yym1181
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1176++
		if yyhl1176 {
			yyb1176 = yyj1176 > l
		} else {
			yyb1176 = r.CheckBreak()
		}
		if yyb1176 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1176-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1182 := z.EncBinary()
		_ = yym1182
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1183 := !z.EncBinary()
			yy2arr1183 := z.EncBasicHandle().StructToArray
			var yyq1183 [3]bool
			_, _, _ = yysep1183, yyq1183, yy2arr1183
			const yyr1183 bool = false
			yyq1183[2] = x.Mode != nil
			var yynn1183 int
			if yyr1183 || yy2arr1183 {
				r.EncodeArrayStart(3)
			} else {
				yynn1183 = 2
				for _, b := range yyq1183 {
					if b {
						yynn1183++
					}
				}
				r.EncodeMapStart(yynn1183)
				yynn1183 = 0
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1185 := z.EncBinary()
				_ = yym1185
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1186 := z.EncBinary()
				_ = yym1186
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1188 := z.EncBinary()
				_ = yym1188
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1189 := z.EncBinary()
				_ = yym1189
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1183[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1191 := *x.Mode
						yym1192 := z.EncBinary()
						_ = yym1192
						if false {
						} else {
							r.EncodeInt(int64(yy1191))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1183[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1193 := *x.Mode
						yym1194 := z.EncBinary()
						_ = yym1194
						if false {
						} else {
							r.EncodeInt(int64(yy1193))
						}
					}
				}
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1195 := z.DecBinary()
	_ = yym1195
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1196 := r.ContainerType()
		if yyct1196 == codecSelferValueTypeMap1234 {
			yyl1196 := r.ReadMapStart()
			if yyl1196 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1196, d)
			}
		} else if yyct1196 == codecSelferValueTypeArray1234 {
			yyl1196 := r.ReadArrayStart()
			if yyl1196 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1196, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1197Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1197Slc
	var yyhl1197 bool = l >= 0
	for yyj1197 := 0; ; yyj1197++ {
		if yyhl1197 {
			if yyj1197 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1197Slc = r.DecodeBytes(yys1197Slc, true, true)
		yys1197 := string(yys1197Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1197 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1201 := z.DecBinary()
				_ = yym1201
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1197)
		} // end switch yys1197
	} // end for yyj1197
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1202 int
	var yyb1202 bool
	var yyhl1202 bool = l >= 0
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1206 := z.DecBinary()
		_ = yym1206
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1202++
		if yyhl1202 {
			yyb1202 = yyj1202 > l
		} else {
			yyb1202 = r.CheckBreak()
		}
		if yyb1202 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1202-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1207 := z.EncBinary()
		_ = yym1207
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1208 := !z.EncBinary()
			yy2arr1208 := z.EncBasicHandle().StructToArray
			var yyq1208 [5]bool
			_, _, _ = yysep1208, yyq1208, yy2arr1208
			const yyr1208 bool = false
			yyq1208[0] = x.Name != ""
			yyq1208[1] = x.HostPort != 0
			yyq1208[3] = x.Protocol != ""
			yyq1208[4] = x.HostIP != ""
			var yynn1208 int
			if yyr1208 || yy2arr1208 {
				r.EncodeArrayStart(5)
			} else {
				yynn1208 = 1
				for _, b := range yyq1208 {
					if b {
						yynn1208++
					}
				}
				r.EncodeMapStart(yynn1208)
				yynn1208 = 0
			}
			if yyr1208 || yy2arr1208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1208[0] {
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1208[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1208 || yy2arr1208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1208[1] {
					yym1213 := z.EncBinary()
					_ = yym1213
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1208[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1214 := z.EncBinary()
					_ = yym1214
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1208 || yy2arr1208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1216 := z.EncBinary()
				_ = yym1216
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1217 := z.EncBinary()
				_ = yym1217
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1208 || yy2arr1208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1208[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1208[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1208 || yy2arr1208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1208[4] {
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1208[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1208 || yy2arr1208 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1222 := z.DecBinary()
	_ = yym1222
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1223 := r.ContainerType()
		if yyct1223 == codecSelferValueTypeMap1234 {
			yyl1223 := r.ReadMapStart()
			if yyl1223 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1223, d)
			}
		} else if yyct1223 == codecSelferValueTypeArray1234 {
			yyl1223 := r.ReadArrayStart()
			if yyl1223 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1223, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1224Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1224Slc
	var yyhl1224 bool = l >= 0
	for yyj1224 := 0; ; yyj1224++ {
		if yyhl1224 {
			if yyj1224 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1224Slc = r.DecodeBytes(yys1224Slc, true, true)
		yys1224 := string(yys1224Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1224 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1224)
		} // end switch yys1224
	} // end for yyj1224
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1230 int
	var yyb1230 bool
	var yyhl1230 bool = l >= 0
	yyj1230++
	if yyhl1230 {
		yyb1230 = yyj1230 > l
	} else {
		yyb1230 = r.CheckBreak()
	}
	if yyb1230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1230++
	if yyhl1230 {
		yyb1230 = yyj1230 > l
	} else {
		yyb1230 = r.CheckBreak()
	}
	if yyb1230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1230++
	if yyhl1230 {
		yyb1230 = yyj1230 > l
	} else {
		yyb1230 = r.CheckBreak()
	}
	if yyb1230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1230++
	if yyhl1230 {
		yyb1230 = yyj1230 > l
	} else {
		yyb1230 = r.CheckBreak()
	}
	if yyb1230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1230++
	if yyhl1230 {
		yyb1230 = yyj1230 > l
	} else {
		yyb1230 = r.CheckBreak()
	}
	if yyb1230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1230++
		if yyhl1230 {
			yyb1230 = yyj1230 > l
		} else {
			yyb1230 = r.CheckBreak()
		}
		if yyb1230 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1230-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1236 := z.EncBinary()
		_ = yym1236
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1237 := !z.EncBinary()
			yy2arr1237 := z.EncBasicHandle().StructToArray
			var yyq1237 [4]bool
			_, _, _ = yysep1237, yyq1237, yy2arr1237
			const yyr1237 bool = false
			yyq1237[1] = x.ReadOnly != false
			yyq1237[3] = x.SubPath != ""
			var yynn1237 int
			if yyr1237 || yy2arr1237 {
				r.EncodeArrayStart(4)
			} else {
				yynn1237 = 2
				for _, b := range yyq1237 {
					if b {
						yynn1237++
					}
				}
				r.EncodeMapStart(yynn1237)
				yynn1237 = 0
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1239 := z.EncBinary()
				_ = yym1239
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1240 := z.EncBinary()
				_ = yym1240
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1237[1] {
					yym1242 := z.EncBinary()
					_ = yym1242
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1237[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1243 := z.EncBinary()
					_ = yym1243
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1245 := z.EncBinary()
				_ = yym1245
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1246 := z.EncBinary()
				_ = yym1246
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1237[3] {
					yym1248 := z.EncBinary()
					_ = yym1248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1237[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1249 := z.EncBinary()
					_ = yym1249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1250 := z.DecBinary()
	_ = yym1250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1251 := r.ContainerType()
		if yyct1251 == codecSelferValueTypeMap1234 {
			yyl1251 := r.ReadMapStart()
			if yyl1251 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1251, d)
			}
		} else if yyct1251 == codecSelferValueTypeArray1234 {
			yyl1251 := r.ReadArrayStart()
			if yyl1251 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1251, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1252Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1252Slc
	var yyhl1252 bool = l >= 0
	for yyj1252 := 0; ; yyj1252++ {
		if yyhl1252 {
			if yyj1252 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1252Slc = r.DecodeBytes(yys1252Slc, true, true)
		yys1252 := string(yys1252Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1252 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1252)
		} // end switch yys1252
	} // end for yyj1252
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1257 int
	var yyb1257 bool
	var yyhl1257 bool = l >= 0
	yyj1257++
	if yyhl1257 {
		yyb1257 = yyj1257 > l
	} else {
		yyb1257 = r.CheckBreak()
	}
	if yyb1257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1257++
	if yyhl1257 {
		yyb1257 = yyj1257 > l
	} else {
		yyb1257 = r.CheckBreak()
	}
	if yyb1257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1257++
	if yyhl1257 {
		yyb1257 = yyj1257 > l
	} else {
		yyb1257 = r.CheckBreak()
	}
	if yyb1257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1257++
	if yyhl1257 {
		yyb1257 = yyj1257 > l
	} else {
		yyb1257 = r.CheckBreak()
	}
	if yyb1257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1257++
		if yyhl1257 {
			yyb1257 = yyj1257 > l
		} else {
			yyb1257 = r.CheckBreak()
		}
		if yyb1257 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1257-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1262 := z.EncBinary()
		_ = yym1262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1263 := !z.EncBinary()
			yy2arr1263 := z.EncBasicHandle().StructToArray
			var yyq1263 [3]bool
			_, _, _ = yysep1263, yyq1263, yy2arr1263
			const yyr1263 bool = false
			yyq1263[1] = x.Value != ""
			yyq1263[2] = x.ValueFrom != nil
			var yynn1263 int
			if yyr1263 || yy2arr1263 {
				r.EncodeArrayStart(3)
			} else {
				yynn1263 = 1
				for _, b := range yyq1263 {
					if b {
						yynn1263++
					}
				}
				r.EncodeMapStart(yynn1263)
				yynn1263 = 0
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1265 := z.EncBinary()
				_ = yym1265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1266 := z.EncBinary()
				_ = yym1266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1263[1] {
					yym1268 := z.EncBinary()
					_ = yym1268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1263[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1269 := z.EncBinary()
					_ = yym1269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1263[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1263[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1271 := z.DecBinary()
	_ = yym1271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1272 := r.ContainerType()
		if yyct1272 == codecSelferValueTypeMap1234 {
			yyl1272 := r.ReadMapStart()
			if yyl1272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1272, d)
			}
		} else if yyct1272 == codecSelferValueTypeArray1234 {
			yyl1272 := r.ReadArrayStart()
			if yyl1272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1273Slc
	var yyhl1273 bool = l >= 0
	for yyj1273 := 0; ; yyj1273++ {
		if yyhl1273 {
			if yyj1273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1273Slc = r.DecodeBytes(yys1273Slc, true, true)
		yys1273 := string(yys1273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1273 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1273)
		} // end switch yys1273
	} // end for yyj1273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1277 int
	var yyb1277 bool
	var yyhl1277 bool = l >= 0
	yyj1277++
	if yyhl1277 {
		yyb1277 = yyj1277 > l
	} else {
		yyb1277 = r.CheckBreak()
	}
	if yyb1277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1277++
	if yyhl1277 {
		yyb1277 = yyj1277 > l
	} else {
		yyb1277 = r.CheckBreak()
	}
	if yyb1277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1277++
	if yyhl1277 {
		yyb1277 = yyj1277 > l
	} else {
		yyb1277 = r.CheckBreak()
	}
	if yyb1277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1277++
		if yyhl1277 {
			yyb1277 = yyj1277 > l
		} else {
			yyb1277 = r.CheckBreak()
		}
		if yyb1277 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1277-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1281 := z.EncBinary()
		_ = yym1281
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1282 := !z.EncBinary()
			yy2arr1282 := z.EncBasicHandle().StructToArray
			var yyq1282 [4]bool
			_, _, _ = yysep1282, yyq1282, yy2arr1282
			const yyr1282 bool = false
			yyq1282[0] = x.FieldRef != nil
			yyq1282[1] = x.ResourceFieldRef != nil
			yyq1282[2] = x.ConfigMapKeyRef != nil
			yyq1282[3] = x.SecretKeyRef != nil
			var yynn1282 int
			if yyr1282 || yy2arr1282 {
				r.EncodeArrayStart(4)
			} else {
				yynn1282 = 0
				for _, b := range yyq1282 {
					if b {
						yynn1282++
					}
				}
				r.EncodeMapStart(yynn1282)
				yynn1282 = 0
			}
			if yyr1282 || yy2arr1282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1282[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1282[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1282 || yy2arr1282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1282[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1282[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1282 || yy2arr1282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1282[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1282[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1282 || yy2arr1282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1282[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1282[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1282 || yy2arr1282 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1287 := z.DecBinary()
	_ = yym1287
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1288 := r.ContainerType()
		if yyct1288 == codecSelferValueTypeMap1234 {
			yyl1288 := r.ReadMapStart()
			if yyl1288 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1288, d)
			}
		} else if yyct1288 == codecSelferValueTypeArray1234 {
			yyl1288 := r.ReadArrayStart()
			if yyl1288 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1288, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1289Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1289Slc
	var yyhl1289 bool = l >= 0
	for yyj1289 := 0; ; yyj1289++ {
		if yyhl1289 {
			if yyj1289 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1289Slc = r.DecodeBytes(yys1289Slc, true, true)
		yys1289 := string(yys1289Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1289 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1289)
		} // end switch yys1289
	} // end for yyj1289
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1294 int
	var yyb1294 bool
	var yyhl1294 bool = l >= 0
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1294++
		if yyhl1294 {
			yyb1294 = yyj1294 > l
		} else {
			yyb1294 = r.CheckBreak()
		}
		if yyb1294 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1294-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1299 := z.EncBinary()
		_ = yym1299
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1300 := !z.EncBinary()
			yy2arr1300 := z.EncBasicHandle().StructToArray
			var yyq1300 [2]bool
			_, _, _ = yysep1300, yyq1300, yy2arr1300
			const yyr1300 bool = false
			yyq1300[0] = x.APIVersion != ""
			var yynn1300 int
			if yyr1300 || yy2arr1300 {
				r.EncodeArrayStart(2)
			} else {
				yynn1300 = 1
				for _, b := range yyq1300 {
					if b {
						yynn1300++
					}
				}
				r.EncodeMapStart(yynn1300)
				yynn1300 = 0
			}
			if yyr1300 || yy2arr1300 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1300[0] {
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1300[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1305 := z.EncBinary()
				_ = yym1305
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1306 := z.EncBinary()
				_ = yym1306
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1300 || yy2arr1300 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1307 := z.DecBinary()
	_ = yym1307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1308 := r.ContainerType()
		if yyct1308 == codecSelferValueTypeMap1234 {
			yyl1308 := r.ReadMapStart()
			if yyl1308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1308, d)
			}
		} else if yyct1308 == codecSelferValueTypeArray1234 {
			yyl1308 := r.ReadArrayStart()
			if yyl1308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1309Slc
	var yyhl1309 bool = l >= 0
	for yyj1309 := 0; ; yyj1309++ {
		if yyhl1309 {
			if yyj1309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1309Slc = r.DecodeBytes(yys1309Slc, true, true)
		yys1309 := string(yys1309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1309 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1309)
		} // end switch yys1309
	} // end for yyj1309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1312 int
	var yyb1312 bool
	var yyhl1312 bool = l >= 0
	yyj1312++
	if yyhl1312 {
		yyb1312 = yyj1312 > l
	} else {
		yyb1312 = r.CheckBreak()
	}
	if yyb1312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1312++
	if yyhl1312 {
		yyb1312 = yyj1312 > l
	} else {
		yyb1312 = r.CheckBreak()
	}
	if yyb1312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1312++
		if yyhl1312 {
			yyb1312 = yyj1312 > l
		} else {
			yyb1312 = r.CheckBreak()
		}
		if yyb1312 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1312-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1315 := z.EncBinary()
		_ = yym1315
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1316 := !z.EncBinary()
			yy2arr1316 := z.EncBasicHandle().StructToArray
			var yyq1316 [3]bool
			_, _, _ = yysep1316, yyq1316, yy2arr1316
			const yyr1316 bool = false
			yyq1316[0] = x.ContainerName != ""
			yyq1316[2] = true
			var yynn1316 int
			if yyr1316 || yy2arr1316 {
				r.EncodeArrayStart(3)
			} else {
				yynn1316 = 1
				for _, b := range yyq1316 {
					if b {
						yynn1316++
					}
				}
				r.EncodeMapStart(yynn1316)
				yynn1316 = 0
			}
			if yyr1316 || yy2arr1316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1316[0] {
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1316[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1319 := z.EncBinary()
					_ = yym1319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1316 || yy2arr1316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1321 := z.EncBinary()
				_ = yym1321
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1322 := z.EncBinary()
				_ = yym1322
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1316 || yy2arr1316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1316[2] {
					yy1324 := &x.Divisor
					yym1325 := z.EncBinary()
					_ = yym1325
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1324) {
					} else if !yym1325 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1324)
					} else {
						z.EncFallback(yy1324)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1316[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1326 := &x.Divisor
					yym1327 := z.EncBinary()
					_ = yym1327
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1326) {
					} else if !yym1327 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1326)
					} else {
						z.EncFallback(yy1326)
					}
				}
			}
			if yyr1316 || yy2arr1316 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1328 := z.DecBinary()
	_ = yym1328
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1329 := r.ContainerType()
		if yyct1329 == codecSelferValueTypeMap1234 {
			yyl1329 := r.ReadMapStart()
			if yyl1329 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1329, d)
			}
		} else if yyct1329 == codecSelferValueTypeArray1234 {
			yyl1329 := r.ReadArrayStart()
			if yyl1329 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1329, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1330Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1330Slc
	var yyhl1330 bool = l >= 0
	for yyj1330 := 0; ; yyj1330++ {
		if yyhl1330 {
			if yyj1330 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1330Slc = r.DecodeBytes(yys1330Slc, true, true)
		yys1330 := string(yys1330Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1330 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1333 := &x.Divisor
				yym1334 := z.DecBinary()
				_ = yym1334
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1333) {
				} else if !yym1334 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1333)
				} else {
					z.DecFallback(yyv1333, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1330)
		} // end switch yys1330
	} // end for yyj1330
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1335 int
	var yyb1335 bool
	var yyhl1335 bool = l >= 0
	yyj1335++
	if yyhl1335 {
		yyb1335 = yyj1335 > l
	} else {
		yyb1335 = r.CheckBreak()
	}
	if yyb1335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1335++
	if yyhl1335 {
		yyb1335 = yyj1335 > l
	} else {
		yyb1335 = r.CheckBreak()
	}
	if yyb1335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1335++
	if yyhl1335 {
		yyb1335 = yyj1335 > l
	} else {
		yyb1335 = r.CheckBreak()
	}
	if yyb1335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1338 := &x.Divisor
		yym1339 := z.DecBinary()
		_ = yym1339
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1338) {
		} else if !yym1339 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1338)
		} else {
			z.DecFallback(yyv1338, false)
		}
	}
	for {
		yyj1335++
		if yyhl1335 {
			yyb1335 = yyj1335 > l
		} else {
			yyb1335 = r.CheckBreak()
		}
		if yyb1335 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1335-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1340 := z.EncBinary()
		_ = yym1340
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1341 := !z.EncBinary()
			yy2arr1341 := z.EncBasicHandle().StructToArray
			var yyq1341 [2]bool
			_, _, _ = yysep1341, yyq1341, yy2arr1341
			const yyr1341 bool = false
			yyq1341[0] = x.Name != ""
			var yynn1341 int
			if yyr1341 || yy2arr1341 {
				r.EncodeArrayStart(2)
			} else {
				yynn1341 = 1
				for _, b := range yyq1341 {
					if b {
						yynn1341++
					}
				}
				r.EncodeMapStart(yynn1341)
				yynn1341 = 0
			}
			if yyr1341 || yy2arr1341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1341[0] {
					yym1343 := z.EncBinary()
					_ = yym1343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1341[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1344 := z.EncBinary()
					_ = yym1344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1341 || yy2arr1341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1346 := z.EncBinary()
				_ = yym1346
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1347 := z.EncBinary()
				_ = yym1347
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1341 || yy2arr1341 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1348 := z.DecBinary()
	_ = yym1348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1349 := r.ContainerType()
		if yyct1349 == codecSelferValueTypeMap1234 {
			yyl1349 := r.ReadMapStart()
			if yyl1349 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1349, d)
			}
		} else if yyct1349 == codecSelferValueTypeArray1234 {
			yyl1349 := r.ReadArrayStart()
			if yyl1349 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1349, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1350Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1350Slc
	var yyhl1350 bool = l >= 0
	for yyj1350 := 0; ; yyj1350++ {
		if yyhl1350 {
			if yyj1350 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1350Slc = r.DecodeBytes(yys1350Slc, true, true)
		yys1350 := string(yys1350Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1350 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1350)
		} // end switch yys1350
	} // end for yyj1350
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1353 int
	var yyb1353 bool
	var yyhl1353 bool = l >= 0
	yyj1353++
	if yyhl1353 {
		yyb1353 = yyj1353 > l
	} else {
		yyb1353 = r.CheckBreak()
	}
	if yyb1353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1353++
	if yyhl1353 {
		yyb1353 = yyj1353 > l
	} else {
		yyb1353 = r.CheckBreak()
	}
	if yyb1353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1353++
		if yyhl1353 {
			yyb1353 = yyj1353 > l
		} else {
			yyb1353 = r.CheckBreak()
		}
		if yyb1353 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1353-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1356 := z.EncBinary()
		_ = yym1356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1357 := !z.EncBinary()
			yy2arr1357 := z.EncBasicHandle().StructToArray
			var yyq1357 [2]bool
			_, _, _ = yysep1357, yyq1357, yy2arr1357
			const yyr1357 bool = false
			yyq1357[0] = x.Name != ""
			var yynn1357 int
			if yyr1357 || yy2arr1357 {
				r.EncodeArrayStart(2)
			} else {
				yynn1357 = 1
				for _, b := range yyq1357 {
					if b {
						yynn1357++
					}
				}
				r.EncodeMapStart(yynn1357)
				yynn1357 = 0
			}
			if yyr1357 || yy2arr1357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1357[0] {
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1357[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1360 := z.EncBinary()
					_ = yym1360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1357 || yy2arr1357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1362 := z.EncBinary()
				_ = yym1362
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1363 := z.EncBinary()
				_ = yym1363
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1357 || yy2arr1357 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1364 := z.DecBinary()
	_ = yym1364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1365 := r.ContainerType()
		if yyct1365 == codecSelferValueTypeMap1234 {
			yyl1365 := r.ReadMapStart()
			if yyl1365 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1365, d)
			}
		} else if yyct1365 == codecSelferValueTypeArray1234 {
			yyl1365 := r.ReadArrayStart()
			if yyl1365 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1366Slc
	var yyhl1366 bool = l >= 0
	for yyj1366 := 0; ; yyj1366++ {
		if yyhl1366 {
			if yyj1366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1366Slc = r.DecodeBytes(yys1366Slc, true, true)
		yys1366 := string(yys1366Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1366 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1366)
		} // end switch yys1366
	} // end for yyj1366
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1369 int
	var yyb1369 bool
	var yyhl1369 bool = l >= 0
	yyj1369++
	if yyhl1369 {
		yyb1369 = yyj1369 > l
	} else {
		yyb1369 = r.CheckBreak()
	}
	if yyb1369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1369++
	if yyhl1369 {
		yyb1369 = yyj1369 > l
	} else {
		yyb1369 = r.CheckBreak()
	}
	if yyb1369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1369++
		if yyhl1369 {
			yyb1369 = yyj1369 > l
		} else {
			yyb1369 = r.CheckBreak()
		}
		if yyb1369 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1369-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1372 := z.EncBinary()
		_ = yym1372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1373 := !z.EncBinary()
			yy2arr1373 := z.EncBasicHandle().StructToArray
			var yyq1373 [2]bool
			_, _, _ = yysep1373, yyq1373, yy2arr1373
			const yyr1373 bool = false
			var yynn1373 int
			if yyr1373 || yy2arr1373 {
				r.EncodeArrayStart(2)
			} else {
				yynn1373 = 2
				for _, b := range yyq1373 {
					if b {
						yynn1373++
					}
				}
				r.EncodeMapStart(yynn1373)
				yynn1373 = 0
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1375 := z.EncBinary()
				_ = yym1375
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1376 := z.EncBinary()
				_ = yym1376
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1378 := z.EncBinary()
				_ = yym1378
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1379 := z.EncBinary()
				_ = yym1379
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1380 := z.DecBinary()
	_ = yym1380
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1381 := r.ContainerType()
		if yyct1381 == codecSelferValueTypeMap1234 {
			yyl1381 := r.ReadMapStart()
			if yyl1381 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1381, d)
			}
		} else if yyct1381 == codecSelferValueTypeArray1234 {
			yyl1381 := r.ReadArrayStart()
			if yyl1381 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1381, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1382Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1382Slc
	var yyhl1382 bool = l >= 0
	for yyj1382 := 0; ; yyj1382++ {
		if yyhl1382 {
			if yyj1382 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1382Slc = r.DecodeBytes(yys1382Slc, true, true)
		yys1382 := string(yys1382Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1382 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1382)
		} // end switch yys1382
	} // end for yyj1382
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1385 int
	var yyb1385 bool
	var yyhl1385 bool = l >= 0
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1385++
		if yyhl1385 {
			yyb1385 = yyj1385 > l
		} else {
			yyb1385 = r.CheckBreak()
		}
		if yyb1385 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1385-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1388 := z.EncBinary()
		_ = yym1388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1389 := !z.EncBinary()
			yy2arr1389 := z.EncBasicHandle().StructToArray
			var yyq1389 [5]bool
			_, _, _ = yysep1389, yyq1389, yy2arr1389
			const yyr1389 bool = false
			yyq1389[0] = x.Path != ""
			yyq1389[2] = x.Host != ""
			yyq1389[3] = x.Scheme != ""
			yyq1389[4] = len(x.HTTPHeaders) != 0
			var yynn1389 int
			if yyr1389 || yy2arr1389 {
				r.EncodeArrayStart(5)
			} else {
				yynn1389 = 1
				for _, b := range yyq1389 {
					if b {
						yynn1389++
					}
				}
				r.EncodeMapStart(yynn1389)
				yynn1389 = 0
			}
			if yyr1389 || yy2arr1389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1389[0] {
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1389[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1389 || yy2arr1389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1394 := &x.Port
				yym1395 := z.EncBinary()
				_ = yym1395
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1394) {
				} else if !yym1395 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1394)
				} else {
					z.EncFallback(yy1394)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1396 := &x.Port
				yym1397 := z.EncBinary()
				_ = yym1397
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1396) {
				} else if !yym1397 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1396)
				} else {
					z.EncFallback(yy1396)
				}
			}
			if yyr1389 || yy2arr1389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1389[2] {
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1389[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1400 := z.EncBinary()
					_ = yym1400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1389 || yy2arr1389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1389[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1389[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1389 || yy2arr1389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1389[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1403 := z.EncBinary()
						_ = yym1403
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1389[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1404 := z.EncBinary()
						_ = yym1404
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1389 || yy2arr1389 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1405 := z.DecBinary()
	_ = yym1405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1406 := r.ContainerType()
		if yyct1406 == codecSelferValueTypeMap1234 {
			yyl1406 := r.ReadMapStart()
			if yyl1406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1406, d)
			}
		} else if yyct1406 == codecSelferValueTypeArray1234 {
			yyl1406 := r.ReadArrayStart()
			if yyl1406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1407Slc
	var yyhl1407 bool = l >= 0
	for yyj1407 := 0; ; yyj1407++ {
		if yyhl1407 {
			if yyj1407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1407Slc = r.DecodeBytes(yys1407Slc, true, true)
		yys1407 := string(yys1407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1407 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1409 := &x.Port
				yym1410 := z.DecBinary()
				_ = yym1410
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1409) {
				} else if !yym1410 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1409)
				} else {
					z.DecFallback(yyv1409, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1413 := &x.HTTPHeaders
				yym1414 := z.DecBinary()
				_ = yym1414
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1413), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1407)
		} // end switch yys1407
	} // end for yyj1407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1415 int
	var yyb1415 bool
	var yyhl1415 bool = l >= 0
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1417 := &x.Port
		yym1418 := z.DecBinary()
		_ = yym1418
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1417) {
		} else if !yym1418 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1417)
		} else {
			z.DecFallback(yyv1417, false)
		}
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1421 := &x.HTTPHeaders
		yym1422 := z.DecBinary()
		_ = yym1422
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1421), d)
		}
	}
	for {
		yyj1415++
		if yyhl1415 {
			yyb1415 = yyj1415 > l
		} else {
			yyb1415 = r.CheckBreak()
		}
		if yyb1415 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1415-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1423 := z.EncBinary()
	_ = yym1423
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1424 := z.DecBinary()
	_ = yym1424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1425 := z.EncBinary()
		_ = yym1425
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1426 := !z.EncBinary()
			yy2arr1426 := z.EncBasicHandle().StructToArray
			var yyq1426 [1]bool
			_, _, _ = yysep1426, yyq1426, yy2arr1426
			const yyr1426 bool = false
			var yynn1426 int
			if yyr1426 || yy2arr1426 {
				r.EncodeArrayStart(1)
			} else {
				yynn1426 = 1
				for _, b := range yyq1426 {
					if b {
						yynn1426++
					}
				}
				r.EncodeMapStart(yynn1426)
				yynn1426 = 0
			}
			if yyr1426 || yy2arr1426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1428 := &x.Port
				yym1429 := z.EncBinary()
				_ = yym1429
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1428) {
				} else if !yym1429 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1428)
				} else {
					z.EncFallback(yy1428)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1430 := &x.Port
				yym1431 := z.EncBinary()
				_ = yym1431
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1430) {
				} else if !yym1431 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1430)
				} else {
					z.EncFallback(yy1430)
				}
			}
			if yyr1426 || yy2arr1426 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1432 := z.DecBinary()
	_ = yym1432
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1433 := r.ContainerType()
		if yyct1433 == codecSelferValueTypeMap1234 {
			yyl1433 := r.ReadMapStart()
			if yyl1433 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1433, d)
			}
		} else if yyct1433 == codecSelferValueTypeArray1234 {
			yyl1433 := r.ReadArrayStart()
			if yyl1433 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1433, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1434Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1434Slc
	var yyhl1434 bool = l >= 0
	for yyj1434 := 0; ; yyj1434++ {
		if yyhl1434 {
			if yyj1434 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1434Slc = r.DecodeBytes(yys1434Slc, true, true)
		yys1434 := string(yys1434Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1434 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1435 := &x.Port
				yym1436 := z.DecBinary()
				_ = yym1436
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1435) {
				} else if !yym1436 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1435)
				} else {
					z.DecFallback(yyv1435, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1434)
		} // end switch yys1434
	} // end for yyj1434
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1437 int
	var yyb1437 bool
	var yyhl1437 bool = l >= 0
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1438 := &x.Port
		yym1439 := z.DecBinary()
		_ = yym1439
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1438) {
		} else if !yym1439 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1438)
		} else {
			z.DecFallback(yyv1438, false)
		}
	}
	for {
		yyj1437++
		if yyhl1437 {
			yyb1437 = yyj1437 > l
		} else {
			yyb1437 = r.CheckBreak()
		}
		if yyb1437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1440 := z.EncBinary()
		_ = yym1440
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1441 := !z.EncBinary()
			yy2arr1441 := z.EncBasicHandle().StructToArray
			var yyq1441 [1]bool
			_, _, _ = yysep1441, yyq1441, yy2arr1441
			const yyr1441 bool = false
			yyq1441[0] = len(x.Command) != 0
			var yynn1441 int
			if yyr1441 || yy2arr1441 {
				r.EncodeArrayStart(1)
			} else {
				yynn1441 = 0
				for _, b := range yyq1441 {
					if b {
						yynn1441++
					}
				}
				r.EncodeMapStart(yynn1441)
				yynn1441 = 0
			}
			if yyr1441 || yy2arr1441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1441[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1443 := z.EncBinary()
						_ = yym1443
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1441[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1444 := z.EncBinary()
						_ = yym1444
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1441 || yy2arr1441 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1445 := z.DecBinary()
	_ = yym1445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1446 := r.ContainerType()
		if yyct1446 == codecSelferValueTypeMap1234 {
			yyl1446 := r.ReadMapStart()
			if yyl1446 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1446, d)
			}
		} else if yyct1446 == codecSelferValueTypeArray1234 {
			yyl1446 := r.ReadArrayStart()
			if yyl1446 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1446, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1447Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1447Slc
	var yyhl1447 bool = l >= 0
	for yyj1447 := 0; ; yyj1447++ {
		if yyhl1447 {
			if yyj1447 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1447Slc = r.DecodeBytes(yys1447Slc, true, true)
		yys1447 := string(yys1447Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1447 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1448 := &x.Command
				yym1449 := z.DecBinary()
				_ = yym1449
				if false {
				} else {
					z.F.DecSliceStringX(yyv1448, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1447)
		} // end switch yys1447
	} // end for yyj1447
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1450 int
	var yyb1450 bool
	var yyhl1450 bool = l >= 0
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1451 := &x.Command
		yym1452 := z.DecBinary()
		_ = yym1452
		if false {
		} else {
			z.F.DecSliceStringX(yyv1451, false, d)
		}
	}
	for {
		yyj1450++
		if yyhl1450 {
			yyb1450 = yyj1450 > l
		} else {
			yyb1450 = r.CheckBreak()
		}
		if yyb1450 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1450-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1453 := z.EncBinary()
		_ = yym1453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1454 := !z.EncBinary()
			yy2arr1454 := z.EncBasicHandle().StructToArray
			var yyq1454 [8]bool
			_, _, _ = yysep1454, yyq1454, yy2arr1454
			const yyr1454 bool = false
			yyq1454[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1454[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1454[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1454[3] = x.InitialDelaySeconds != 0
			yyq1454[4] = x.TimeoutSeconds != 0
			yyq1454[5] = x.PeriodSeconds != 0
			yyq1454[6] = x.SuccessThreshold != 0
			yyq1454[7] = x.FailureThreshold != 0
			var yynn1454 int
			if yyr1454 || yy2arr1454 {
				r.EncodeArrayStart(8)
			} else {
				yynn1454 = 0
				for _, b := range yyq1454 {
					if b {
						yynn1454++
					}
				}
				r.EncodeMapStart(yynn1454)
				yynn1454 = 0
			}
			var yyn1455 bool
			if x.Handler.Exec == nil {
				yyn1455 = true
				goto LABEL1455
			}
		LABEL1455:
			if yyr1454 || yy2arr1454 {
				if yyn1455 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1454[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1454[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1455 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1456 bool
			if x.Handler.HTTPGet == nil {
				yyn1456 = true
				goto LABEL1456
			}
		LABEL1456:
			if yyr1454 || yy2arr1454 {
				if yyn1456 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1454[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1454[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1456 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1457 bool
			if x.Handler.TCPSocket == nil {
				yyn1457 = true
				goto LABEL1457
			}
		LABEL1457:
			if yyr1454 || yy2arr1454 {
				if yyn1457 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1454[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1454[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1457 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1454[3] {
					yym1459 := z.EncBinary()
					_ = yym1459
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1454[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1460 := z.EncBinary()
					_ = yym1460
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1454[4] {
					yym1462 := z.EncBinary()
					_ = yym1462
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1454[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1463 := z.EncBinary()
					_ = yym1463
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1454[5] {
					yym1465 := z.EncBinary()
					_ = yym1465
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1454[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1466 := z.EncBinary()
					_ = yym1466
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1454[6] {
					yym1468 := z.EncBinary()
					_ = yym1468
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1454[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1469 := z.EncBinary()
					_ = yym1469
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1454[7] {
					yym1471 := z.EncBinary()
					_ = yym1471
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1454[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1472 := z.EncBinary()
					_ = yym1472
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1473 := z.DecBinary()
	_ = yym1473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1474 := r.ContainerType()
		if yyct1474 == codecSelferValueTypeMap1234 {
			yyl1474 := r.ReadMapStart()
			if yyl1474 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1474, d)
			}
		} else if yyct1474 == codecSelferValueTypeArray1234 {
			yyl1474 := r.ReadArrayStart()
			if yyl1474 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1474, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1475Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1475Slc
	var yyhl1475 bool = l >= 0
	for yyj1475 := 0; ; yyj1475++ {
		if yyhl1475 {
			if yyj1475 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1475Slc = r.DecodeBytes(yys1475Slc, true, true)
		yys1475 := string(yys1475Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1475 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1475)
		} // end switch yys1475
	} // end for yyj1475
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1484 int
	var yyb1484 bool
	var yyhl1484 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1484++
	if yyhl1484 {
		yyb1484 = yyj1484 > l
	} else {
		yyb1484 = r.CheckBreak()
	}
	if yyb1484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1484++
	if yyhl1484 {
		yyb1484 = yyj1484 > l
	} else {
		yyb1484 = r.CheckBreak()
	}
	if yyb1484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1484++
	if yyhl1484 {
		yyb1484 = yyj1484 > l
	} else {
		yyb1484 = r.CheckBreak()
	}
	if yyb1484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1484++
	if yyhl1484 {
		yyb1484 = yyj1484 > l
	} else {
		yyb1484 = r.CheckBreak()
	}
	if yyb1484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1484++
	if yyhl1484 {
		yyb1484 = yyj1484 > l
	} else {
		yyb1484 = r.CheckBreak()
	}
	if yyb1484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1484++
	if yyhl1484 {
		yyb1484 = yyj1484 > l
	} else {
		yyb1484 = r.CheckBreak()
	}
	if yyb1484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1484++
	if yyhl1484 {
		yyb1484 = yyj1484 > l
	} else {
		yyb1484 = r.CheckBreak()
	}
	if yyb1484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1484++
	if yyhl1484 {
		yyb1484 = yyj1484 > l
	} else {
		yyb1484 = r.CheckBreak()
	}
	if yyb1484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1484++
		if yyhl1484 {
			yyb1484 = yyj1484 > l
		} else {
			yyb1484 = r.CheckBreak()
		}
		if yyb1484 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1484-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1493 := z.EncBinary()
	_ = yym1493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1494 := z.DecBinary()
	_ = yym1494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1495 := z.EncBinary()
	_ = yym1495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1496 := z.DecBinary()
	_ = yym1496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1497 := z.EncBinary()
		_ = yym1497
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1498 := !z.EncBinary()
			yy2arr1498 := z.EncBasicHandle().StructToArray
			var yyq1498 [2]bool
			_, _, _ = yysep1498, yyq1498, yy2arr1498
			const yyr1498 bool = false
			yyq1498[0] = len(x.Add) != 0
			yyq1498[1] = len(x.Drop) != 0
			var yynn1498 int
			if yyr1498 || yy2arr1498 {
				r.EncodeArrayStart(2)
			} else {
				yynn1498 = 0
				for _, b := range yyq1498 {
					if b {
						yynn1498++
					}
				}
				r.EncodeMapStart(yynn1498)
				yynn1498 = 0
			}
			if yyr1498 || yy2arr1498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1498[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1500 := z.EncBinary()
						_ = yym1500
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1498[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1501 := z.EncBinary()
						_ = yym1501
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1498 || yy2arr1498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1498[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1503 := z.EncBinary()
						_ = yym1503
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1498[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1504 := z.EncBinary()
						_ = yym1504
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1498 || yy2arr1498 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1505 := z.DecBinary()
	_ = yym1505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1506 := r.ContainerType()
		if yyct1506 == codecSelferValueTypeMap1234 {
			yyl1506 := r.ReadMapStart()
			if yyl1506 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1506, d)
			}
		} else if yyct1506 == codecSelferValueTypeArray1234 {
			yyl1506 := r.ReadArrayStart()
			if yyl1506 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1506, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1507Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1507Slc
	var yyhl1507 bool = l >= 0
	for yyj1507 := 0; ; yyj1507++ {
		if yyhl1507 {
			if yyj1507 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1507Slc = r.DecodeBytes(yys1507Slc, true, true)
		yys1507 := string(yys1507Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1507 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1508 := &x.Add
				yym1509 := z.DecBinary()
				_ = yym1509
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1508), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1510 := &x.Drop
				yym1511 := z.DecBinary()
				_ = yym1511
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1510), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1507)
		} // end switch yys1507
	} // end for yyj1507
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1512 int
	var yyb1512 bool
	var yyhl1512 bool = l >= 0
	yyj1512++
	if yyhl1512 {
		yyb1512 = yyj1512 > l
	} else {
		yyb1512 = r.CheckBreak()
	}
	if yyb1512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1513 := &x.Add
		yym1514 := z.DecBinary()
		_ = yym1514
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1513), d)
		}
	}
	yyj1512++
	if yyhl1512 {
		yyb1512 = yyj1512 > l
	} else {
		yyb1512 = r.CheckBreak()
	}
	if yyb1512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1515 := &x.Drop
		yym1516 := z.DecBinary()
		_ = yym1516
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1515), d)
		}
	}
	for {
		yyj1512++
		if yyhl1512 {
			yyb1512 = yyj1512 > l
		} else {
			yyb1512 = r.CheckBreak()
		}
		if yyb1512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1517 := z.EncBinary()
		_ = yym1517
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1518 := !z.EncBinary()
			yy2arr1518 := z.EncBasicHandle().StructToArray
			var yyq1518 [2]bool
			_, _, _ = yysep1518, yyq1518, yy2arr1518
			const yyr1518 bool = false
			yyq1518[0] = len(x.Limits) != 0
			yyq1518[1] = len(x.Requests) != 0
			var yynn1518 int
			if yyr1518 || yy2arr1518 {
				r.EncodeArrayStart(2)
			} else {
				yynn1518 = 0
				for _, b := range yyq1518 {
					if b {
						yynn1518++
					}
				}
				r.EncodeMapStart(yynn1518)
				yynn1518 = 0
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1518[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1518[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1518[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1518[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1521 := z.DecBinary()
	_ = yym1521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1522 := r.ContainerType()
		if yyct1522 == codecSelferValueTypeMap1234 {
			yyl1522 := r.ReadMapStart()
			if yyl1522 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1522, d)
			}
		} else if yyct1522 == codecSelferValueTypeArray1234 {
			yyl1522 := r.ReadArrayStart()
			if yyl1522 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1523Slc
	var yyhl1523 bool = l >= 0
	for yyj1523 := 0; ; yyj1523++ {
		if yyhl1523 {
			if yyj1523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1523Slc = r.DecodeBytes(yys1523Slc, true, true)
		yys1523 := string(yys1523Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1523 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1524 := &x.Limits
				yyv1524.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1525 := &x.Requests
				yyv1525.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1523)
		} // end switch yys1523
	} // end for yyj1523
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1526 int
	var yyb1526 bool
	var yyhl1526 bool = l >= 0
	yyj1526++
	if yyhl1526 {
		yyb1526 = yyj1526 > l
	} else {
		yyb1526 = r.CheckBreak()
	}
	if yyb1526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1527 := &x.Limits
		yyv1527.CodecDecodeSelf(d)
	}
	yyj1526++
	if yyhl1526 {
		yyb1526 = yyj1526 > l
	} else {
		yyb1526 = r.CheckBreak()
	}
	if yyb1526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1528 := &x.Requests
		yyv1528.CodecDecodeSelf(d)
	}
	for {
		yyj1526++
		if yyhl1526 {
			yyb1526 = yyj1526 > l
		} else {
			yyb1526 = r.CheckBreak()
		}
		if yyb1526 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1526-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1529 := z.EncBinary()
		_ = yym1529
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1530 := !z.EncBinary()
			yy2arr1530 := z.EncBasicHandle().StructToArray
			var yyq1530 [18]bool
			_, _, _ = yysep1530, yyq1530, yy2arr1530
			const yyr1530 bool = false
			yyq1530[1] = x.Image != ""
			yyq1530[2] = len(x.Command) != 0
			yyq1530[3] = len(x.Args) != 0
			yyq1530[4] = x.WorkingDir != ""
			yyq1530[5] = len(x.Ports) != 0
			yyq1530[6] = len(x.Env) != 0
			yyq1530[7] = true
			yyq1530[8] = len(x.VolumeMounts) != 0
			yyq1530[9] = x.LivenessProbe != nil
			yyq1530[10] = x.ReadinessProbe != nil
			yyq1530[11] = x.Lifecycle != nil
			yyq1530[12] = x.TerminationMessagePath != ""
			yyq1530[13] = x.ImagePullPolicy != ""
			yyq1530[14] = x.SecurityContext != nil
			yyq1530[15] = x.Stdin != false
			yyq1530[16] = x.StdinOnce != false
			yyq1530[17] = x.TTY != false
			var yynn1530 int
			if yyr1530 || yy2arr1530 {
				r.EncodeArrayStart(18)
			} else {
				yynn1530 = 1
				for _, b := range yyq1530 {
					if b {
						yynn1530++
					}
				}
				r.EncodeMapStart(yynn1530)
				yynn1530 = 0
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1532 := z.EncBinary()
				_ = yym1532
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1533 := z.EncBinary()
				_ = yym1533
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[1] {
					yym1535 := z.EncBinary()
					_ = yym1535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1530[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1536 := z.EncBinary()
					_ = yym1536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1538 := z.EncBinary()
						_ = yym1538
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1530[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1539 := z.EncBinary()
						_ = yym1539
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1541 := z.EncBinary()
						_ = yym1541
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1530[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1542 := z.EncBinary()
						_ = yym1542
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[4] {
					yym1544 := z.EncBinary()
					_ = yym1544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1530[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1545 := z.EncBinary()
					_ = yym1545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1547 := z.EncBinary()
						_ = yym1547
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1530[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1548 := z.EncBinary()
						_ = yym1548
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1550 := z.EncBinary()
						_ = yym1550
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1530[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1551 := z.EncBinary()
						_ = yym1551
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[7] {
					yy1553 := &x.Resources
					yy1553.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1530[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1554 := &x.Resources
					yy1554.CodecEncodeSelf(e)
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1556 := z.EncBinary()
						_ = yym1556
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1530[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1557 := z.EncBinary()
						_ = yym1557
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1530[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1530[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1530[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[12] {
					yym1562 := z.EncBinary()
					_ = yym1562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1530[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1563 := z.EncBinary()
					_ = yym1563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1530[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1530[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[15] {
					yym1567 := z.EncBinary()
					_ = yym1567
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1530[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1568 := z.EncBinary()
					_ = yym1568
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[16] {
					yym1570 := z.EncBinary()
					_ = yym1570
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1530[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1571 := z.EncBinary()
					_ = yym1571
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1530[17] {
					yym1573 := z.EncBinary()
					_ = yym1573
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1530[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1574 := z.EncBinary()
					_ = yym1574
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1530 || yy2arr1530 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1575 := z.DecBinary()
	_ = yym1575
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1576 := r.ContainerType()
		if yyct1576 == codecSelferValueTypeMap1234 {
			yyl1576 := r.ReadMapStart()
			if yyl1576 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1576, d)
			}
		} else if yyct1576 == codecSelferValueTypeArray1234 {
			yyl1576 := r.ReadArrayStart()
			if yyl1576 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1576, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1577Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1577Slc
	var yyhl1577 bool = l >= 0
	for yyj1577 := 0; ; yyj1577++ {
		if yyhl1577 {
			if yyj1577 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1577Slc = r.DecodeBytes(yys1577Slc, true, true)
		yys1577 := string(yys1577Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1577 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1580 := &x.Command
				yym1581 := z.DecBinary()
				_ = yym1581
				if false {
				} else {
					z.F.DecSliceStringX(yyv1580, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1582 := &x.Args
				yym1583 := z.DecBinary()
				_ = yym1583
				if false {
				} else {
					z.F.DecSliceStringX(yyv1582, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1585 := &x.Ports
				yym1586 := z.DecBinary()
				_ = yym1586
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1585), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1587 := &x.Env
				yym1588 := z.DecBinary()
				_ = yym1588
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1587), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1589 := &x.Resources
				yyv1589.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1590 := &x.VolumeMounts
				yym1591 := z.DecBinary()
				_ = yym1591
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1590), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1577)
		} // end switch yys1577
	} // end for yyj1577
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1601 int
	var yyb1601 bool
	var yyhl1601 bool = l >= 0
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1604 := &x.Command
		yym1605 := z.DecBinary()
		_ = yym1605
		if false {
		} else {
			z.F.DecSliceStringX(yyv1604, false, d)
		}
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1606 := &x.Args
		yym1607 := z.DecBinary()
		_ = yym1607
		if false {
		} else {
			z.F.DecSliceStringX(yyv1606, false, d)
		}
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1609 := &x.Ports
		yym1610 := z.DecBinary()
		_ = yym1610
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1609), d)
		}
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1611 := &x.Env
		yym1612 := z.DecBinary()
		_ = yym1612
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1611), d)
		}
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1613 := &x.Resources
		yyv1613.CodecDecodeSelf(d)
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1614 := &x.VolumeMounts
		yym1615 := z.DecBinary()
		_ = yym1615
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1614), d)
		}
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1601++
		if yyhl1601 {
			yyb1601 = yyj1601 > l
		} else {
			yyb1601 = r.CheckBreak()
		}
		if yyb1601 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1601-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1625 := z.EncBinary()
		_ = yym1625
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1626 := !z.EncBinary()
			yy2arr1626 := z.EncBasicHandle().StructToArray
			var yyq1626 [3]bool
			_, _, _ = yysep1626, yyq1626, yy2arr1626
			const yyr1626 bool = false
			yyq1626[0] = x.Exec != nil
			yyq1626[1] = x.HTTPGet != nil
			yyq1626[2] = x.TCPSocket != nil
			var yynn1626 int
			if yyr1626 || yy2arr1626 {
				r.EncodeArrayStart(3)
			} else {
				yynn1626 = 0
				for _, b := range yyq1626 {
					if b {
						yynn1626++
					}
				}
				r.EncodeMapStart(yynn1626)
				yynn1626 = 0
			}
			if yyr1626 || yy2arr1626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1626[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1626[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1626 || yy2arr1626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1626[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1626[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1626 || yy2arr1626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1626[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1626[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1626 || yy2arr1626 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1630 := z.DecBinary()
	_ = yym1630
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1631 := r.ContainerType()
		if yyct1631 == codecSelferValueTypeMap1234 {
			yyl1631 := r.ReadMapStart()
			if yyl1631 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1631, d)
			}
		} else if yyct1631 == codecSelferValueTypeArray1234 {
			yyl1631 := r.ReadArrayStart()
			if yyl1631 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1631, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1632Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1632Slc
	var yyhl1632 bool = l >= 0
	for yyj1632 := 0; ; yyj1632++ {
		if yyhl1632 {
			if yyj1632 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1632Slc = r.DecodeBytes(yys1632Slc, true, true)
		yys1632 := string(yys1632Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1632 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1632)
		} // end switch yys1632
	} // end for yyj1632
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1636 int
	var yyb1636 bool
	var yyhl1636 bool = l >= 0
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1636++
		if yyhl1636 {
			yyb1636 = yyj1636 > l
		} else {
			yyb1636 = r.CheckBreak()
		}
		if yyb1636 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1636-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1640 := z.EncBinary()
		_ = yym1640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1641 := !z.EncBinary()
			yy2arr1641 := z.EncBasicHandle().StructToArray
			var yyq1641 [2]bool
			_, _, _ = yysep1641, yyq1641, yy2arr1641
			const yyr1641 bool = false
			yyq1641[0] = x.PostStart != nil
			yyq1641[1] = x.PreStop != nil
			var yynn1641 int
			if yyr1641 || yy2arr1641 {
				r.EncodeArrayStart(2)
			} else {
				yynn1641 = 0
				for _, b := range yyq1641 {
					if b {
						yynn1641++
					}
				}
				r.EncodeMapStart(yynn1641)
				yynn1641 = 0
			}
			if yyr1641 || yy2arr1641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1641[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1641[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1641 || yy2arr1641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1641[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1641[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1641 || yy2arr1641 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1644 := z.DecBinary()
	_ = yym1644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1645 := r.ContainerType()
		if yyct1645 == codecSelferValueTypeMap1234 {
			yyl1645 := r.ReadMapStart()
			if yyl1645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1645, d)
			}
		} else if yyct1645 == codecSelferValueTypeArray1234 {
			yyl1645 := r.ReadArrayStart()
			if yyl1645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1646Slc
	var yyhl1646 bool = l >= 0
	for yyj1646 := 0; ; yyj1646++ {
		if yyhl1646 {
			if yyj1646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1646Slc = r.DecodeBytes(yys1646Slc, true, true)
		yys1646 := string(yys1646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1646 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1646)
		} // end switch yys1646
	} // end for yyj1646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1649 int
	var yyb1649 bool
	var yyhl1649 bool = l >= 0
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1649++
		if yyhl1649 {
			yyb1649 = yyj1649 > l
		} else {
			yyb1649 = r.CheckBreak()
		}
		if yyb1649 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1649-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1652 := z.EncBinary()
	_ = yym1652
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1653 := z.DecBinary()
	_ = yym1653
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1654 := z.EncBinary()
		_ = yym1654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1655 := !z.EncBinary()
			yy2arr1655 := z.EncBasicHandle().StructToArray
			var yyq1655 [2]bool
			_, _, _ = yysep1655, yyq1655, yy2arr1655
			const yyr1655 bool = false
			yyq1655[0] = x.Reason != ""
			yyq1655[1] = x.Message != ""
			var yynn1655 int
			if yyr1655 || yy2arr1655 {
				r.EncodeArrayStart(2)
			} else {
				yynn1655 = 0
				for _, b := range yyq1655 {
					if b {
						yynn1655++
					}
				}
				r.EncodeMapStart(yynn1655)
				yynn1655 = 0
			}
			if yyr1655 || yy2arr1655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1655[0] {
					yym1657 := z.EncBinary()
					_ = yym1657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1655[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1658 := z.EncBinary()
					_ = yym1658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1655 || yy2arr1655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1655[1] {
					yym1660 := z.EncBinary()
					_ = yym1660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1655[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1661 := z.EncBinary()
					_ = yym1661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1655 || yy2arr1655 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1662 := z.DecBinary()
	_ = yym1662
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1663 := r.ContainerType()
		if yyct1663 == codecSelferValueTypeMap1234 {
			yyl1663 := r.ReadMapStart()
			if yyl1663 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1663, d)
			}
		} else if yyct1663 == codecSelferValueTypeArray1234 {
			yyl1663 := r.ReadArrayStart()
			if yyl1663 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1663, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1664Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1664Slc
	var yyhl1664 bool = l >= 0
	for yyj1664 := 0; ; yyj1664++ {
		if yyhl1664 {
			if yyj1664 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1664Slc = r.DecodeBytes(yys1664Slc, true, true)
		yys1664 := string(yys1664Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1664 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1664)
		} // end switch yys1664
	} // end for yyj1664
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1667 int
	var yyb1667 bool
	var yyhl1667 bool = l >= 0
	yyj1667++
	if yyhl1667 {
		yyb1667 = yyj1667 > l
	} else {
		yyb1667 = r.CheckBreak()
	}
	if yyb1667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1667++
	if yyhl1667 {
		yyb1667 = yyj1667 > l
	} else {
		yyb1667 = r.CheckBreak()
	}
	if yyb1667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1667++
		if yyhl1667 {
			yyb1667 = yyj1667 > l
		} else {
			yyb1667 = r.CheckBreak()
		}
		if yyb1667 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1667-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1670 := z.EncBinary()
		_ = yym1670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1671 := !z.EncBinary()
			yy2arr1671 := z.EncBasicHandle().StructToArray
			var yyq1671 [1]bool
			_, _, _ = yysep1671, yyq1671, yy2arr1671
			const yyr1671 bool = false
			yyq1671[0] = true
			var yynn1671 int
			if yyr1671 || yy2arr1671 {
				r.EncodeArrayStart(1)
			} else {
				yynn1671 = 0
				for _, b := range yyq1671 {
					if b {
						yynn1671++
					}
				}
				r.EncodeMapStart(yynn1671)
				yynn1671 = 0
			}
			if yyr1671 || yy2arr1671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1671[0] {
					yy1673 := &x.StartedAt
					yym1674 := z.EncBinary()
					_ = yym1674
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1673) {
					} else if yym1674 {
						z.EncBinaryMarshal(yy1673)
					} else if !yym1674 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1673)
					} else {
						z.EncFallback(yy1673)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1671[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1675 := &x.StartedAt
					yym1676 := z.EncBinary()
					_ = yym1676
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1675) {
					} else if yym1676 {
						z.EncBinaryMarshal(yy1675)
					} else if !yym1676 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1675)
					} else {
						z.EncFallback(yy1675)
					}
				}
			}
			if yyr1671 || yy2arr1671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1677 := z.DecBinary()
	_ = yym1677
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1678 := r.ContainerType()
		if yyct1678 == codecSelferValueTypeMap1234 {
			yyl1678 := r.ReadMapStart()
			if yyl1678 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1678, d)
			}
		} else if yyct1678 == codecSelferValueTypeArray1234 {
			yyl1678 := r.ReadArrayStart()
			if yyl1678 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1678, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1679Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1679Slc
	var yyhl1679 bool = l >= 0
	for yyj1679 := 0; ; yyj1679++ {
		if yyhl1679 {
			if yyj1679 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1679Slc = r.DecodeBytes(yys1679Slc, true, true)
		yys1679 := string(yys1679Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1679 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1680 := &x.StartedAt
				yym1681 := z.DecBinary()
				_ = yym1681
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1680) {
				} else if yym1681 {
					z.DecBinaryUnmarshal(yyv1680)
				} else if !yym1681 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1680)
				} else {
					z.DecFallback(yyv1680, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1679)
		} // end switch yys1679
	} // end for yyj1679
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1682 int
	var yyb1682 bool
	var yyhl1682 bool = l >= 0
	yyj1682++
	if yyhl1682 {
		yyb1682 = yyj1682 > l
	} else {
		yyb1682 = r.CheckBreak()
	}
	if yyb1682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1683 := &x.StartedAt
		yym1684 := z.DecBinary()
		_ = yym1684
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1683) {
		} else if yym1684 {
			z.DecBinaryUnmarshal(yyv1683)
		} else if !yym1684 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1683)
		} else {
			z.DecFallback(yyv1683, false)
		}
	}
	for {
		yyj1682++
		if yyhl1682 {
			yyb1682 = yyj1682 > l
		} else {
			yyb1682 = r.CheckBreak()
		}
		if yyb1682 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1682-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1685 := z.EncBinary()
		_ = yym1685
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1686 := !z.EncBinary()
			yy2arr1686 := z.EncBasicHandle().StructToArray
			var yyq1686 [7]bool
			_, _, _ = yysep1686, yyq1686, yy2arr1686
			const yyr1686 bool = false
			yyq1686[1] = x.Signal != 0
			yyq1686[2] = x.Reason != ""
			yyq1686[3] = x.Message != ""
			yyq1686[4] = true
			yyq1686[5] = true
			yyq1686[6] = x.ContainerID != ""
			var yynn1686 int
			if yyr1686 || yy2arr1686 {
				r.EncodeArrayStart(7)
			} else {
				yynn1686 = 1
				for _, b := range yyq1686 {
					if b {
						yynn1686++
					}
				}
				r.EncodeMapStart(yynn1686)
				yynn1686 = 0
			}
			if yyr1686 || yy2arr1686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1688 := z.EncBinary()
				_ = yym1688
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1689 := z.EncBinary()
				_ = yym1689
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1686 || yy2arr1686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1686[1] {
					yym1691 := z.EncBinary()
					_ = yym1691
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1686[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1692 := z.EncBinary()
					_ = yym1692
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1686 || yy2arr1686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1686[2] {
					yym1694 := z.EncBinary()
					_ = yym1694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1686[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1695 := z.EncBinary()
					_ = yym1695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1686 || yy2arr1686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1686[3] {
					yym1697 := z.EncBinary()
					_ = yym1697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1686[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1686 || yy2arr1686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1686[4] {
					yy1700 := &x.StartedAt
					yym1701 := z.EncBinary()
					_ = yym1701
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1700) {
					} else if yym1701 {
						z.EncBinaryMarshal(yy1700)
					} else if !yym1701 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1700)
					} else {
						z.EncFallback(yy1700)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1686[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1702 := &x.StartedAt
					yym1703 := z.EncBinary()
					_ = yym1703
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1702) {
					} else if yym1703 {
						z.EncBinaryMarshal(yy1702)
					} else if !yym1703 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1702)
					} else {
						z.EncFallback(yy1702)
					}
				}
			}
			if yyr1686 || yy2arr1686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1686[5] {
					yy1705 := &x.FinishedAt
					yym1706 := z.EncBinary()
					_ = yym1706
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1705) {
					} else if yym1706 {
						z.EncBinaryMarshal(yy1705)
					} else if !yym1706 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1705)
					} else {
						z.EncFallback(yy1705)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1686[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1707 := &x.FinishedAt
					yym1708 := z.EncBinary()
					_ = yym1708
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1707) {
					} else if yym1708 {
						z.EncBinaryMarshal(yy1707)
					} else if !yym1708 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1707)
					} else {
						z.EncFallback(yy1707)
					}
				}
			}
			if yyr1686 || yy2arr1686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1686[6] {
					yym1710 := z.EncBinary()
					_ = yym1710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1686[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1711 := z.EncBinary()
					_ = yym1711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1686 || yy2arr1686 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1712 := z.DecBinary()
	_ = yym1712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1713 := r.ContainerType()
		if yyct1713 == codecSelferValueTypeMap1234 {
			yyl1713 := r.ReadMapStart()
			if yyl1713 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1713, d)
			}
		} else if yyct1713 == codecSelferValueTypeArray1234 {
			yyl1713 := r.ReadArrayStart()
			if yyl1713 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1713, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1714Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1714Slc
	var yyhl1714 bool = l >= 0
	for yyj1714 := 0; ; yyj1714++ {
		if yyhl1714 {
			if yyj1714 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1714Slc = r.DecodeBytes(yys1714Slc, true, true)
		yys1714 := string(yys1714Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1714 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1719 := &x.StartedAt
				yym1720 := z.DecBinary()
				_ = yym1720
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1719) {
				} else if yym1720 {
					z.DecBinaryUnmarshal(yyv1719)
				} else if !yym1720 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1719)
				} else {
					z.DecFallback(yyv1719, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1721 := &x.FinishedAt
				yym1722 := z.DecBinary()
				_ = yym1722
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1721) {
				} else if yym1722 {
					z.DecBinaryUnmarshal(yyv1721)
				} else if !yym1722 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1721)
				} else {
					z.DecFallback(yyv1721, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1714)
		} // end switch yys1714
	} // end for yyj1714
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1724 int
	var yyb1724 bool
	var yyhl1724 bool = l >= 0
	yyj1724++
	if yyhl1724 {
		yyb1724 = yyj1724 > l
	} else {
		yyb1724 = r.CheckBreak()
	}
	if yyb1724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1724++
	if yyhl1724 {
		yyb1724 = yyj1724 > l
	} else {
		yyb1724 = r.CheckBreak()
	}
	if yyb1724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1724++
	if yyhl1724 {
		yyb1724 = yyj1724 > l
	} else {
		yyb1724 = r.CheckBreak()
	}
	if yyb1724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1724++
	if yyhl1724 {
		yyb1724 = yyj1724 > l
	} else {
		yyb1724 = r.CheckBreak()
	}
	if yyb1724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1724++
	if yyhl1724 {
		yyb1724 = yyj1724 > l
	} else {
		yyb1724 = r.CheckBreak()
	}
	if yyb1724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1729 := &x.StartedAt
		yym1730 := z.DecBinary()
		_ = yym1730
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1729) {
		} else if yym1730 {
			z.DecBinaryUnmarshal(yyv1729)
		} else if !yym1730 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1729)
		} else {
			z.DecFallback(yyv1729, false)
		}
	}
	yyj1724++
	if yyhl1724 {
		yyb1724 = yyj1724 > l
	} else {
		yyb1724 = r.CheckBreak()
	}
	if yyb1724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1731 := &x.FinishedAt
		yym1732 := z.DecBinary()
		_ = yym1732
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1731) {
		} else if yym1732 {
			z.DecBinaryUnmarshal(yyv1731)
		} else if !yym1732 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1731)
		} else {
			z.DecFallback(yyv1731, false)
		}
	}
	yyj1724++
	if yyhl1724 {
		yyb1724 = yyj1724 > l
	} else {
		yyb1724 = r.CheckBreak()
	}
	if yyb1724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1724++
		if yyhl1724 {
			yyb1724 = yyj1724 > l
		} else {
			yyb1724 = r.CheckBreak()
		}
		if yyb1724 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1724-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1734 := z.EncBinary()
		_ = yym1734
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1735 := !z.EncBinary()
			yy2arr1735 := z.EncBasicHandle().StructToArray
			var yyq1735 [3]bool
			_, _, _ = yysep1735, yyq1735, yy2arr1735
			const yyr1735 bool = false
			yyq1735[0] = x.Waiting != nil
			yyq1735[1] = x.Running != nil
			yyq1735[2] = x.Terminated != nil
			var yynn1735 int
			if yyr1735 || yy2arr1735 {
				r.EncodeArrayStart(3)
			} else {
				yynn1735 = 0
				for _, b := range yyq1735 {
					if b {
						yynn1735++
					}
				}
				r.EncodeMapStart(yynn1735)
				yynn1735 = 0
			}
			if yyr1735 || yy2arr1735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1735[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1735[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1735 || yy2arr1735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1735[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1735[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1735 || yy2arr1735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1735[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1735[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1735 || yy2arr1735 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1739 := z.DecBinary()
	_ = yym1739
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1740 := r.ContainerType()
		if yyct1740 == codecSelferValueTypeMap1234 {
			yyl1740 := r.ReadMapStart()
			if yyl1740 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1740, d)
			}
		} else if yyct1740 == codecSelferValueTypeArray1234 {
			yyl1740 := r.ReadArrayStart()
			if yyl1740 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1740, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1741Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1741Slc
	var yyhl1741 bool = l >= 0
	for yyj1741 := 0; ; yyj1741++ {
		if yyhl1741 {
			if yyj1741 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1741Slc = r.DecodeBytes(yys1741Slc, true, true)
		yys1741 := string(yys1741Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1741 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1741)
		} // end switch yys1741
	} // end for yyj1741
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1745 int
	var yyb1745 bool
	var yyhl1745 bool = l >= 0
	yyj1745++
	if yyhl1745 {
		yyb1745 = yyj1745 > l
	} else {
		yyb1745 = r.CheckBreak()
	}
	if yyb1745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1745++
	if yyhl1745 {
		yyb1745 = yyj1745 > l
	} else {
		yyb1745 = r.CheckBreak()
	}
	if yyb1745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1745++
	if yyhl1745 {
		yyb1745 = yyj1745 > l
	} else {
		yyb1745 = r.CheckBreak()
	}
	if yyb1745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1745++
		if yyhl1745 {
			yyb1745 = yyj1745 > l
		} else {
			yyb1745 = r.CheckBreak()
		}
		if yyb1745 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1745-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1749 := z.EncBinary()
		_ = yym1749
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1750 := !z.EncBinary()
			yy2arr1750 := z.EncBasicHandle().StructToArray
			var yyq1750 [8]bool
			_, _, _ = yysep1750, yyq1750, yy2arr1750
			const yyr1750 bool = false
			yyq1750[1] = true
			yyq1750[2] = true
			yyq1750[7] = x.ContainerID != ""
			var yynn1750 int
			if yyr1750 || yy2arr1750 {
				r.EncodeArrayStart(8)
			} else {
				yynn1750 = 5
				for _, b := range yyq1750 {
					if b {
						yynn1750++
					}
				}
				r.EncodeMapStart(yynn1750)
				yynn1750 = 0
			}
			if yyr1750 || yy2arr1750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1752 := z.EncBinary()
				_ = yym1752
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1753 := z.EncBinary()
				_ = yym1753
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1750 || yy2arr1750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1750[1] {
					yy1755 := &x.State
					yy1755.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1750[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1756 := &x.State
					yy1756.CodecEncodeSelf(e)
				}
			}
			if yyr1750 || yy2arr1750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1750[2] {
					yy1758 := &x.LastTerminationState
					yy1758.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1750[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1759 := &x.LastTerminationState
					yy1759.CodecEncodeSelf(e)
				}
			}
			if yyr1750 || yy2arr1750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1761 := z.EncBinary()
				_ = yym1761
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1762 := z.EncBinary()
				_ = yym1762
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1750 || yy2arr1750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1764 := z.EncBinary()
				_ = yym1764
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1765 := z.EncBinary()
				_ = yym1765
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1750 || yy2arr1750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1767 := z.EncBinary()
				_ = yym1767
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1768 := z.EncBinary()
				_ = yym1768
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1750 || yy2arr1750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1770 := z.EncBinary()
				_ = yym1770
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1771 := z.EncBinary()
				_ = yym1771
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1750 || yy2arr1750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1750[7] {
					yym1773 := z.EncBinary()
					_ = yym1773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1750[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1750 || yy2arr1750 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1775 := z.DecBinary()
	_ = yym1775
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1776 := r.ContainerType()
		if yyct1776 == codecSelferValueTypeMap1234 {
			yyl1776 := r.ReadMapStart()
			if yyl1776 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1776, d)
			}
		} else if yyct1776 == codecSelferValueTypeArray1234 {
			yyl1776 := r.ReadArrayStart()
			if yyl1776 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1776, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1777Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1777Slc
	var yyhl1777 bool = l >= 0
	for yyj1777 := 0; ; yyj1777++ {
		if yyhl1777 {
			if yyj1777 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1777Slc = r.DecodeBytes(yys1777Slc, true, true)
		yys1777 := string(yys1777Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1777 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1779 := &x.State
				yyv1779.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1780 := &x.LastTerminationState
				yyv1780.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1777)
		} // end switch yys1777
	} // end for yyj1777
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1786 int
	var yyb1786 bool
	var yyhl1786 bool = l >= 0
	yyj1786++
	if yyhl1786 {
		yyb1786 = yyj1786 > l
	} else {
		yyb1786 = r.CheckBreak()
	}
	if yyb1786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1786++
	if yyhl1786 {
		yyb1786 = yyj1786 > l
	} else {
		yyb1786 = r.CheckBreak()
	}
	if yyb1786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1788 := &x.State
		yyv1788.CodecDecodeSelf(d)
	}
	yyj1786++
	if yyhl1786 {
		yyb1786 = yyj1786 > l
	} else {
		yyb1786 = r.CheckBreak()
	}
	if yyb1786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1789 := &x.LastTerminationState
		yyv1789.CodecDecodeSelf(d)
	}
	yyj1786++
	if yyhl1786 {
		yyb1786 = yyj1786 > l
	} else {
		yyb1786 = r.CheckBreak()
	}
	if yyb1786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1786++
	if yyhl1786 {
		yyb1786 = yyj1786 > l
	} else {
		yyb1786 = r.CheckBreak()
	}
	if yyb1786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1786++
	if yyhl1786 {
		yyb1786 = yyj1786 > l
	} else {
		yyb1786 = r.CheckBreak()
	}
	if yyb1786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1786++
	if yyhl1786 {
		yyb1786 = yyj1786 > l
	} else {
		yyb1786 = r.CheckBreak()
	}
	if yyb1786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1786++
	if yyhl1786 {
		yyb1786 = yyj1786 > l
	} else {
		yyb1786 = r.CheckBreak()
	}
	if yyb1786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1786++
		if yyhl1786 {
			yyb1786 = yyj1786 > l
		} else {
			yyb1786 = r.CheckBreak()
		}
		if yyb1786 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1786-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1795 := z.EncBinary()
	_ = yym1795
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1796 := z.DecBinary()
	_ = yym1796
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1797 := z.EncBinary()
	_ = yym1797
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1798 := z.DecBinary()
	_ = yym1798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1799 := z.EncBinary()
		_ = yym1799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1800 := !z.EncBinary()
			yy2arr1800 := z.EncBasicHandle().StructToArray
			var yyq1800 [6]bool
			_, _, _ = yysep1800, yyq1800, yy2arr1800
			const yyr1800 bool = false
			yyq1800[2] = true
			yyq1800[3] = true
			yyq1800[4] = x.Reason != ""
			yyq1800[5] = x.Message != ""
			var yynn1800 int
			if yyr1800 || yy2arr1800 {
				r.EncodeArrayStart(6)
			} else {
				yynn1800 = 2
				for _, b := range yyq1800 {
					if b {
						yynn1800++
					}
				}
				r.EncodeMapStart(yynn1800)
				yynn1800 = 0
			}
			if yyr1800 || yy2arr1800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1800 || yy2arr1800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1800 || yy2arr1800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1800[2] {
					yy1804 := &x.LastProbeTime
					yym1805 := z.EncBinary()
					_ = yym1805
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1804) {
					} else if yym1805 {
						z.EncBinaryMarshal(yy1804)
					} else if !yym1805 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1804)
					} else {
						z.EncFallback(yy1804)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1800[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1806 := &x.LastProbeTime
					yym1807 := z.EncBinary()
					_ = yym1807
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1806) {
					} else if yym1807 {
						z.EncBinaryMarshal(yy1806)
					} else if !yym1807 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1806)
					} else {
						z.EncFallback(yy1806)
					}
				}
			}
			if yyr1800 || yy2arr1800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1800[3] {
					yy1809 := &x.LastTransitionTime
					yym1810 := z.EncBinary()
					_ = yym1810
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1809) {
					} else if yym1810 {
						z.EncBinaryMarshal(yy1809)
					} else if !yym1810 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1809)
					} else {
						z.EncFallback(yy1809)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1800[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1811 := &x.LastTransitionTime
					yym1812 := z.EncBinary()
					_ = yym1812
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1811) {
					} else if yym1812 {
						z.EncBinaryMarshal(yy1811)
					} else if !yym1812 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1811)
					} else {
						z.EncFallback(yy1811)
					}
				}
			}
			if yyr1800 || yy2arr1800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1800[4] {
					yym1814 := z.EncBinary()
					_ = yym1814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1800[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1815 := z.EncBinary()
					_ = yym1815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1800 || yy2arr1800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1800[5] {
					yym1817 := z.EncBinary()
					_ = yym1817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1800[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1818 := z.EncBinary()
					_ = yym1818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1800 || yy2arr1800 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1819 := z.DecBinary()
	_ = yym1819
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1820 := r.ContainerType()
		if yyct1820 == codecSelferValueTypeMap1234 {
			yyl1820 := r.ReadMapStart()
			if yyl1820 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1820, d)
			}
		} else if yyct1820 == codecSelferValueTypeArray1234 {
			yyl1820 := r.ReadArrayStart()
			if yyl1820 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1820, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1821Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1821Slc
	var yyhl1821 bool = l >= 0
	for yyj1821 := 0; ; yyj1821++ {
		if yyhl1821 {
			if yyj1821 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1821Slc = r.DecodeBytes(yys1821Slc, true, true)
		yys1821 := string(yys1821Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1821 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1824 := &x.LastProbeTime
				yym1825 := z.DecBinary()
				_ = yym1825
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1824) {
				} else if yym1825 {
					z.DecBinaryUnmarshal(yyv1824)
				} else if !yym1825 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1824)
				} else {
					z.DecFallback(yyv1824, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1826 := &x.LastTransitionTime
				yym1827 := z.DecBinary()
				_ = yym1827
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1826) {
				} else if yym1827 {
					z.DecBinaryUnmarshal(yyv1826)
				} else if !yym1827 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1826)
				} else {
					z.DecFallback(yyv1826, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1821)
		} // end switch yys1821
	} // end for yyj1821
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1830 int
	var yyb1830 bool
	var yyhl1830 bool = l >= 0
	yyj1830++
	if yyhl1830 {
		yyb1830 = yyj1830 > l
	} else {
		yyb1830 = r.CheckBreak()
	}
	if yyb1830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1830++
	if yyhl1830 {
		yyb1830 = yyj1830 > l
	} else {
		yyb1830 = r.CheckBreak()
	}
	if yyb1830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1830++
	if yyhl1830 {
		yyb1830 = yyj1830 > l
	} else {
		yyb1830 = r.CheckBreak()
	}
	if yyb1830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1833 := &x.LastProbeTime
		yym1834 := z.DecBinary()
		_ = yym1834
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1833) {
		} else if yym1834 {
			z.DecBinaryUnmarshal(yyv1833)
		} else if !yym1834 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1833)
		} else {
			z.DecFallback(yyv1833, false)
		}
	}
	yyj1830++
	if yyhl1830 {
		yyb1830 = yyj1830 > l
	} else {
		yyb1830 = r.CheckBreak()
	}
	if yyb1830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1835 := &x.LastTransitionTime
		yym1836 := z.DecBinary()
		_ = yym1836
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1835) {
		} else if yym1836 {
			z.DecBinaryUnmarshal(yyv1835)
		} else if !yym1836 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1835)
		} else {
			z.DecFallback(yyv1835, false)
		}
	}
	yyj1830++
	if yyhl1830 {
		yyb1830 = yyj1830 > l
	} else {
		yyb1830 = r.CheckBreak()
	}
	if yyb1830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1830++
	if yyhl1830 {
		yyb1830 = yyj1830 > l
	} else {
		yyb1830 = r.CheckBreak()
	}
	if yyb1830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1830++
		if yyhl1830 {
			yyb1830 = yyj1830 > l
		} else {
			yyb1830 = r.CheckBreak()
		}
		if yyb1830 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1830-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1839 := z.EncBinary()
	_ = yym1839
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1840 := z.DecBinary()
	_ = yym1840
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1841 := z.EncBinary()
	_ = yym1841
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1842 := z.DecBinary()
	_ = yym1842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1843 := z.EncBinary()
		_ = yym1843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1844 := !z.EncBinary()
			yy2arr1844 := z.EncBasicHandle().StructToArray
			var yyq1844 [1]bool
			_, _, _ = yysep1844, yyq1844, yy2arr1844
			const yyr1844 bool = false
			var yynn1844 int
			if yyr1844 || yy2arr1844 {
				r.EncodeArrayStart(1)
			} else {
				yynn1844 = 1
				for _, b := range yyq1844 {
					if b {
						yynn1844++
					}
				}
				r.EncodeMapStart(yynn1844)
				yynn1844 = 0
			}
			if yyr1844 || yy2arr1844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1846 := z.EncBinary()
					_ = yym1846
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1847 := z.EncBinary()
					_ = yym1847
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1844 || yy2arr1844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1848 := z.DecBinary()
	_ = yym1848
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1849 := r.ContainerType()
		if yyct1849 == codecSelferValueTypeMap1234 {
			yyl1849 := r.ReadMapStart()
			if yyl1849 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1849, d)
			}
		} else if yyct1849 == codecSelferValueTypeArray1234 {
			yyl1849 := r.ReadArrayStart()
			if yyl1849 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1849, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1850Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1850Slc
	var yyhl1850 bool = l >= 0
	for yyj1850 := 0; ; yyj1850++ {
		if yyhl1850 {
			if yyj1850 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1850Slc = r.DecodeBytes(yys1850Slc, true, true)
		yys1850 := string(yys1850Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1850 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1851 := &x.NodeSelectorTerms
				yym1852 := z.DecBinary()
				_ = yym1852
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1851), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1850)
		} // end switch yys1850
	} // end for yyj1850
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1853 int
	var yyb1853 bool
	var yyhl1853 bool = l >= 0
	yyj1853++
	if yyhl1853 {
		yyb1853 = yyj1853 > l
	} else {
		yyb1853 = r.CheckBreak()
	}
	if yyb1853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1854 := &x.NodeSelectorTerms
		yym1855 := z.DecBinary()
		_ = yym1855
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1854), d)
		}
	}
	for {
		yyj1853++
		if yyhl1853 {
			yyb1853 = yyj1853 > l
		} else {
			yyb1853 = r.CheckBreak()
		}
		if yyb1853 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1853-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1856 := z.EncBinary()
		_ = yym1856
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1857 := !z.EncBinary()
			yy2arr1857 := z.EncBasicHandle().StructToArray
			var yyq1857 [1]bool
			_, _, _ = yysep1857, yyq1857, yy2arr1857
			const yyr1857 bool = false
			var yynn1857 int
			if yyr1857 || yy2arr1857 {
				r.EncodeArrayStart(1)
			} else {
				yynn1857 = 1
				for _, b := range yyq1857 {
					if b {
						yynn1857++
					}
				}
				r.EncodeMapStart(yynn1857)
				yynn1857 = 0
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1859 := z.EncBinary()
					_ = yym1859
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1860 := z.EncBinary()
					_ = yym1860
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1861 := z.DecBinary()
	_ = yym1861
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1862 := r.ContainerType()
		if yyct1862 == codecSelferValueTypeMap1234 {
			yyl1862 := r.ReadMapStart()
			if yyl1862 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1862, d)
			}
		} else if yyct1862 == codecSelferValueTypeArray1234 {
			yyl1862 := r.ReadArrayStart()
			if yyl1862 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1862, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1863Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1863Slc
	var yyhl1863 bool = l >= 0
	for yyj1863 := 0; ; yyj1863++ {
		if yyhl1863 {
			if yyj1863 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1863Slc = r.DecodeBytes(yys1863Slc, true, true)
		yys1863 := string(yys1863Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1863 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1864 := &x.MatchExpressions
				yym1865 := z.DecBinary()
				_ = yym1865
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1864), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1863)
		} // end switch yys1863
	} // end for yyj1863
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1866 int
	var yyb1866 bool
	var yyhl1866 bool = l >= 0
	yyj1866++
	if yyhl1866 {
		yyb1866 = yyj1866 > l
	} else {
		yyb1866 = r.CheckBreak()
	}
	if yyb1866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1867 := &x.MatchExpressions
		yym1868 := z.DecBinary()
		_ = yym1868
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1867), d)
		}
	}
	for {
		yyj1866++
		if yyhl1866 {
			yyb1866 = yyj1866 > l
		} else {
			yyb1866 = r.CheckBreak()
		}
		if yyb1866 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1866-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1869 := z.EncBinary()
		_ = yym1869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1870 := !z.EncBinary()
			yy2arr1870 := z.EncBasicHandle().StructToArray
			var yyq1870 [3]bool
			_, _, _ = yysep1870, yyq1870, yy2arr1870
			const yyr1870 bool = false
			yyq1870[2] = len(x.Values) != 0
			var yynn1870 int
			if yyr1870 || yy2arr1870 {
				r.EncodeArrayStart(3)
			} else {
				yynn1870 = 2
				for _, b := range yyq1870 {
					if b {
						yynn1870++
					}
				}
				r.EncodeMapStart(yynn1870)
				yynn1870 = 0
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1872 := z.EncBinary()
				_ = yym1872
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1873 := z.EncBinary()
				_ = yym1873
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1870[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1876 := z.EncBinary()
						_ = yym1876
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1870[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1877 := z.EncBinary()
						_ = yym1877
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1878 := z.DecBinary()
	_ = yym1878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1879 := r.ContainerType()
		if yyct1879 == codecSelferValueTypeMap1234 {
			yyl1879 := r.ReadMapStart()
			if yyl1879 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1879, d)
			}
		} else if yyct1879 == codecSelferValueTypeArray1234 {
			yyl1879 := r.ReadArrayStart()
			if yyl1879 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1879, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1880Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1880Slc
	var yyhl1880 bool = l >= 0
	for yyj1880 := 0; ; yyj1880++ {
		if yyhl1880 {
			if yyj1880 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1880Slc = r.DecodeBytes(yys1880Slc, true, true)
		yys1880 := string(yys1880Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1880 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1883 := &x.Values
				yym1884 := z.DecBinary()
				_ = yym1884
				if false {
				} else {
					z.F.DecSliceStringX(yyv1883, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1880)
		} // end switch yys1880
	} // end for yyj1880
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1885 int
	var yyb1885 bool
	var yyhl1885 bool = l >= 0
	yyj1885++
	if yyhl1885 {
		yyb1885 = yyj1885 > l
	} else {
		yyb1885 = r.CheckBreak()
	}
	if yyb1885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1885++
	if yyhl1885 {
		yyb1885 = yyj1885 > l
	} else {
		yyb1885 = r.CheckBreak()
	}
	if yyb1885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1885++
	if yyhl1885 {
		yyb1885 = yyj1885 > l
	} else {
		yyb1885 = r.CheckBreak()
	}
	if yyb1885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1888 := &x.Values
		yym1889 := z.DecBinary()
		_ = yym1889
		if false {
		} else {
			z.F.DecSliceStringX(yyv1888, false, d)
		}
	}
	for {
		yyj1885++
		if yyhl1885 {
			yyb1885 = yyj1885 > l
		} else {
			yyb1885 = r.CheckBreak()
		}
		if yyb1885 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1885-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1890 := z.EncBinary()
	_ = yym1890
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1891 := z.DecBinary()
	_ = yym1891
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1892 := z.EncBinary()
		_ = yym1892
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1893 := !z.EncBinary()
			yy2arr1893 := z.EncBasicHandle().StructToArray
			var yyq1893 [3]bool
			_, _, _ = yysep1893, yyq1893, yy2arr1893
			const yyr1893 bool = false
			yyq1893[0] = x.NodeAffinity != nil
			yyq1893[1] = x.PodAffinity != nil
			yyq1893[2] = x.PodAntiAffinity != nil
			var yynn1893 int
			if yyr1893 || yy2arr1893 {
				r.EncodeArrayStart(3)
			} else {
				yynn1893 = 0
				for _, b := range yyq1893 {
					if b {
						yynn1893++
					}
				}
				r.EncodeMapStart(yynn1893)
				yynn1893 = 0
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1893[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1893[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1893[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1893[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1893[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1893[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1897 := z.DecBinary()
	_ = yym1897
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1898 := r.ContainerType()
		if yyct1898 == codecSelferValueTypeMap1234 {
			yyl1898 := r.ReadMapStart()
			if yyl1898 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1898, d)
			}
		} else if yyct1898 == codecSelferValueTypeArray1234 {
			yyl1898 := r.ReadArrayStart()
			if yyl1898 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1898, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1899Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1899Slc
	var yyhl1899 bool = l >= 0
	for yyj1899 := 0; ; yyj1899++ {
		if yyhl1899 {
			if yyj1899 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1899Slc = r.DecodeBytes(yys1899Slc, true, true)
		yys1899 := string(yys1899Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1899 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1899)
		} // end switch yys1899
	} // end for yyj1899
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1903 int
	var yyb1903 bool
	var yyhl1903 bool = l >= 0
	yyj1903++
	if yyhl1903 {
		yyb1903 = yyj1903 > l
	} else {
		yyb1903 = r.CheckBreak()
	}
	if yyb1903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1903++
	if yyhl1903 {
		yyb1903 = yyj1903 > l
	} else {
		yyb1903 = r.CheckBreak()
	}
	if yyb1903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1903++
	if yyhl1903 {
		yyb1903 = yyj1903 > l
	} else {
		yyb1903 = r.CheckBreak()
	}
	if yyb1903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1903++
		if yyhl1903 {
			yyb1903 = yyj1903 > l
		} else {
			yyb1903 = r.CheckBreak()
		}
		if yyb1903 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1903-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1907 := z.EncBinary()
		_ = yym1907
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1908 := !z.EncBinary()
			yy2arr1908 := z.EncBasicHandle().StructToArray
			var yyq1908 [2]bool
			_, _, _ = yysep1908, yyq1908, yy2arr1908
			const yyr1908 bool = false
			yyq1908[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1908[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1908 int
			if yyr1908 || yy2arr1908 {
				r.EncodeArrayStart(2)
			} else {
				yynn1908 = 0
				for _, b := range yyq1908 {
					if b {
						yynn1908++
					}
				}
				r.EncodeMapStart(yynn1908)
				yynn1908 = 0
			}
			if yyr1908 || yy2arr1908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1908[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1910 := z.EncBinary()
						_ = yym1910
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1908[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1911 := z.EncBinary()
						_ = yym1911
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1908 || yy2arr1908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1908[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1913 := z.EncBinary()
						_ = yym1913
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1908[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1914 := z.EncBinary()
						_ = yym1914
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1908 || yy2arr1908 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1915 := z.DecBinary()
	_ = yym1915
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1916 := r.ContainerType()
		if yyct1916 == codecSelferValueTypeMap1234 {
			yyl1916 := r.ReadMapStart()
			if yyl1916 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1916, d)
			}
		} else if yyct1916 == codecSelferValueTypeArray1234 {
			yyl1916 := r.ReadArrayStart()
			if yyl1916 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1916, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1917Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1917Slc
	var yyhl1917 bool = l >= 0
	for yyj1917 := 0; ; yyj1917++ {
		if yyhl1917 {
			if yyj1917 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1917Slc = r.DecodeBytes(yys1917Slc, true, true)
		yys1917 := string(yys1917Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1917 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1918 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1919 := z.DecBinary()
				_ = yym1919
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1918), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1920 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1921 := z.DecBinary()
				_ = yym1921
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1920), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1917)
		} // end switch yys1917
	} // end for yyj1917
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1922 int
	var yyb1922 bool
	var yyhl1922 bool = l >= 0
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1923 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1924 := z.DecBinary()
		_ = yym1924
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1923), d)
		}
	}
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1925 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1926 := z.DecBinary()
		_ = yym1926
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1925), d)
		}
	}
	for {
		yyj1922++
		if yyhl1922 {
			yyb1922 = yyj1922 > l
		} else {
			yyb1922 = r.CheckBreak()
		}
		if yyb1922 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1922-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1927 := z.EncBinary()
		_ = yym1927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1928 := !z.EncBinary()
			yy2arr1928 := z.EncBasicHandle().StructToArray
			var yyq1928 [2]bool
			_, _, _ = yysep1928, yyq1928, yy2arr1928
			const yyr1928 bool = false
			yyq1928[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1928[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1928 int
			if yyr1928 || yy2arr1928 {
				r.EncodeArrayStart(2)
			} else {
				yynn1928 = 0
				for _, b := range yyq1928 {
					if b {
						yynn1928++
					}
				}
				r.EncodeMapStart(yynn1928)
				yynn1928 = 0
			}
			if yyr1928 || yy2arr1928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1928[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1930 := z.EncBinary()
						_ = yym1930
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1928[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1931 := z.EncBinary()
						_ = yym1931
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1928 || yy2arr1928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1928[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1933 := z.EncBinary()
						_ = yym1933
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1928[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1934 := z.EncBinary()
						_ = yym1934
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1928 || yy2arr1928 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1935 := z.DecBinary()
	_ = yym1935
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1936 := r.ContainerType()
		if yyct1936 == codecSelferValueTypeMap1234 {
			yyl1936 := r.ReadMapStart()
			if yyl1936 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1936, d)
			}
		} else if yyct1936 == codecSelferValueTypeArray1234 {
			yyl1936 := r.ReadArrayStart()
			if yyl1936 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1936, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1937Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1937Slc
	var yyhl1937 bool = l >= 0
	for yyj1937 := 0; ; yyj1937++ {
		if yyhl1937 {
			if yyj1937 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1937Slc = r.DecodeBytes(yys1937Slc, true, true)
		yys1937 := string(yys1937Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1937 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1938 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1939 := z.DecBinary()
				_ = yym1939
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1938), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1940 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1941 := z.DecBinary()
				_ = yym1941
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1940), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1937)
		} // end switch yys1937
	} // end for yyj1937
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1942 int
	var yyb1942 bool
	var yyhl1942 bool = l >= 0
	yyj1942++
	if yyhl1942 {
		yyb1942 = yyj1942 > l
	} else {
		yyb1942 = r.CheckBreak()
	}
	if yyb1942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1943 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1944 := z.DecBinary()
		_ = yym1944
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1943), d)
		}
	}
	yyj1942++
	if yyhl1942 {
		yyb1942 = yyj1942 > l
	} else {
		yyb1942 = r.CheckBreak()
	}
	if yyb1942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1945 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1946 := z.DecBinary()
		_ = yym1946
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1945), d)
		}
	}
	for {
		yyj1942++
		if yyhl1942 {
			yyb1942 = yyj1942 > l
		} else {
			yyb1942 = r.CheckBreak()
		}
		if yyb1942 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1942-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1947 := z.EncBinary()
		_ = yym1947
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1948 := !z.EncBinary()
			yy2arr1948 := z.EncBasicHandle().StructToArray
			var yyq1948 [2]bool
			_, _, _ = yysep1948, yyq1948, yy2arr1948
			const yyr1948 bool = false
			var yynn1948 int
			if yyr1948 || yy2arr1948 {
				r.EncodeArrayStart(2)
			} else {
				yynn1948 = 2
				for _, b := range yyq1948 {
					if b {
						yynn1948++
					}
				}
				r.EncodeMapStart(yynn1948)
				yynn1948 = 0
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1950 := z.EncBinary()
				_ = yym1950
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1951 := z.EncBinary()
				_ = yym1951
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1953 := &x.PodAffinityTerm
				yy1953.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1954 := &x.PodAffinityTerm
				yy1954.CodecEncodeSelf(e)
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1955 := z.DecBinary()
	_ = yym1955
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1956 := r.ContainerType()
		if yyct1956 == codecSelferValueTypeMap1234 {
			yyl1956 := r.ReadMapStart()
			if yyl1956 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1956, d)
			}
		} else if yyct1956 == codecSelferValueTypeArray1234 {
			yyl1956 := r.ReadArrayStart()
			if yyl1956 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1956, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1957Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1957Slc
	var yyhl1957 bool = l >= 0
	for yyj1957 := 0; ; yyj1957++ {
		if yyhl1957 {
			if yyj1957 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1957Slc = r.DecodeBytes(yys1957Slc, true, true)
		yys1957 := string(yys1957Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1957 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1959 := &x.PodAffinityTerm
				yyv1959.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1957)
		} // end switch yys1957
	} // end for yyj1957
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1960 int
	var yyb1960 bool
	var yyhl1960 bool = l >= 0
	yyj1960++
	if yyhl1960 {
		yyb1960 = yyj1960 > l
	} else {
		yyb1960 = r.CheckBreak()
	}
	if yyb1960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1960++
	if yyhl1960 {
		yyb1960 = yyj1960 > l
	} else {
		yyb1960 = r.CheckBreak()
	}
	if yyb1960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1962 := &x.PodAffinityTerm
		yyv1962.CodecDecodeSelf(d)
	}
	for {
		yyj1960++
		if yyhl1960 {
			yyb1960 = yyj1960 > l
		} else {
			yyb1960 = r.CheckBreak()
		}
		if yyb1960 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1960-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1963 := z.EncBinary()
		_ = yym1963
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1964 := !z.EncBinary()
			yy2arr1964 := z.EncBasicHandle().StructToArray
			var yyq1964 [3]bool
			_, _, _ = yysep1964, yyq1964, yy2arr1964
			const yyr1964 bool = false
			yyq1964[0] = x.LabelSelector != nil
			yyq1964[2] = x.TopologyKey != ""
			var yynn1964 int
			if yyr1964 || yy2arr1964 {
				r.EncodeArrayStart(3)
			} else {
				yynn1964 = 1
				for _, b := range yyq1964 {
					if b {
						yynn1964++
					}
				}
				r.EncodeMapStart(yynn1964)
				yynn1964 = 0
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1964[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1966 := z.EncBinary()
						_ = yym1966
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1964[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1967 := z.EncBinary()
						_ = yym1967
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1969 := z.EncBinary()
					_ = yym1969
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1970 := z.EncBinary()
					_ = yym1970
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1964[2] {
					yym1972 := z.EncBinary()
					_ = yym1972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1964[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1973 := z.EncBinary()
					_ = yym1973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1974 := z.DecBinary()
	_ = yym1974
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1975 := r.ContainerType()
		if yyct1975 == codecSelferValueTypeMap1234 {
			yyl1975 := r.ReadMapStart()
			if yyl1975 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1975, d)
			}
		} else if yyct1975 == codecSelferValueTypeArray1234 {
			yyl1975 := r.ReadArrayStart()
			if yyl1975 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1975, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1976Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1976Slc
	var yyhl1976 bool = l >= 0
	for yyj1976 := 0; ; yyj1976++ {
		if yyhl1976 {
			if yyj1976 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1976Slc = r.DecodeBytes(yys1976Slc, true, true)
		yys1976 := string(yys1976Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1976 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1978 := z.DecBinary()
				_ = yym1978
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1979 := &x.Namespaces
				yym1980 := z.DecBinary()
				_ = yym1980
				if false {
				} else {
					z.F.DecSliceStringX(yyv1979, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1976)
		} // end switch yys1976
	} // end for yyj1976
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1982 int
	var yyb1982 bool
	var yyhl1982 bool = l >= 0
	yyj1982++
	if yyhl1982 {
		yyb1982 = yyj1982 > l
	} else {
		yyb1982 = r.CheckBreak()
	}
	if yyb1982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1984 := z.DecBinary()
		_ = yym1984
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1982++
	if yyhl1982 {
		yyb1982 = yyj1982 > l
	} else {
		yyb1982 = r.CheckBreak()
	}
	if yyb1982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1985 := &x.Namespaces
		yym1986 := z.DecBinary()
		_ = yym1986
		if false {
		} else {
			z.F.DecSliceStringX(yyv1985, false, d)
		}
	}
	yyj1982++
	if yyhl1982 {
		yyb1982 = yyj1982 > l
	} else {
		yyb1982 = r.CheckBreak()
	}
	if yyb1982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1982++
		if yyhl1982 {
			yyb1982 = yyj1982 > l
		} else {
			yyb1982 = r.CheckBreak()
		}
		if yyb1982 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1982-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1988 := z.EncBinary()
		_ = yym1988
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1989 := !z.EncBinary()
			yy2arr1989 := z.EncBasicHandle().StructToArray
			var yyq1989 [2]bool
			_, _, _ = yysep1989, yyq1989, yy2arr1989
			const yyr1989 bool = false
			yyq1989[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1989[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1989 int
			if yyr1989 || yy2arr1989 {
				r.EncodeArrayStart(2)
			} else {
				yynn1989 = 0
				for _, b := range yyq1989 {
					if b {
						yynn1989++
					}
				}
				r.EncodeMapStart(yynn1989)
				yynn1989 = 0
			}
			if yyr1989 || yy2arr1989 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1989[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1989[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1989 || yy2arr1989 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1989[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1992 := z.EncBinary()
						_ = yym1992
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1989[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1993 := z.EncBinary()
						_ = yym1993
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1989 || yy2arr1989 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1994 := z.DecBinary()
	_ = yym1994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1995 := r.ContainerType()
		if yyct1995 == codecSelferValueTypeMap1234 {
			yyl1995 := r.ReadMapStart()
			if yyl1995 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1995, d)
			}
		} else if yyct1995 == codecSelferValueTypeArray1234 {
			yyl1995 := r.ReadArrayStart()
			if yyl1995 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1995, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1996Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1996Slc
	var yyhl1996 bool = l >= 0
	for yyj1996 := 0; ; yyj1996++ {
		if yyhl1996 {
			if yyj1996 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1996Slc = r.DecodeBytes(yys1996Slc, true, true)
		yys1996 := string(yys1996Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1996 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1998 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1999 := z.DecBinary()
				_ = yym1999
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1998), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1996)
		} // end switch yys1996
	} // end for yyj1996
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2000 int
	var yyb2000 bool
	var yyhl2000 bool = l >= 0
	yyj2000++
	if yyhl2000 {
		yyb2000 = yyj2000 > l
	} else {
		yyb2000 = r.CheckBreak()
	}
	if yyb2000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj2000++
	if yyhl2000 {
		yyb2000 = yyj2000 > l
	} else {
		yyb2000 = r.CheckBreak()
	}
	if yyb2000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2002 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2003 := z.DecBinary()
		_ = yym2003
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2002), d)
		}
	}
	for {
		yyj2000++
		if yyhl2000 {
			yyb2000 = yyj2000 > l
		} else {
			yyb2000 = r.CheckBreak()
		}
		if yyb2000 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2000-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2004 := z.EncBinary()
		_ = yym2004
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2005 := !z.EncBinary()
			yy2arr2005 := z.EncBasicHandle().StructToArray
			var yyq2005 [2]bool
			_, _, _ = yysep2005, yyq2005, yy2arr2005
			const yyr2005 bool = false
			var yynn2005 int
			if yyr2005 || yy2arr2005 {
				r.EncodeArrayStart(2)
			} else {
				yynn2005 = 2
				for _, b := range yyq2005 {
					if b {
						yynn2005++
					}
				}
				r.EncodeMapStart(yynn2005)
				yynn2005 = 0
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2007 := z.EncBinary()
				_ = yym2007
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2008 := z.EncBinary()
				_ = yym2008
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2010 := &x.Preference
				yy2010.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2011 := &x.Preference
				yy2011.CodecEncodeSelf(e)
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2012 := z.DecBinary()
	_ = yym2012
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2013 := r.ContainerType()
		if yyct2013 == codecSelferValueTypeMap1234 {
			yyl2013 := r.ReadMapStart()
			if yyl2013 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2013, d)
			}
		} else if yyct2013 == codecSelferValueTypeArray1234 {
			yyl2013 := r.ReadArrayStart()
			if yyl2013 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2013, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2014Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2014Slc
	var yyhl2014 bool = l >= 0
	for yyj2014 := 0; ; yyj2014++ {
		if yyhl2014 {
			if yyj2014 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2014Slc = r.DecodeBytes(yys2014Slc, true, true)
		yys2014 := string(yys2014Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2014 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv2016 := &x.Preference
				yyv2016.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2014)
		} // end switch yys2014
	} // end for yyj2014
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2017 int
	var yyb2017 bool
	var yyhl2017 bool = l >= 0
	yyj2017++
	if yyhl2017 {
		yyb2017 = yyj2017 > l
	} else {
		yyb2017 = r.CheckBreak()
	}
	if yyb2017 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2017++
	if yyhl2017 {
		yyb2017 = yyj2017 > l
	} else {
		yyb2017 = r.CheckBreak()
	}
	if yyb2017 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv2019 := &x.Preference
		yyv2019.CodecDecodeSelf(d)
	}
	for {
		yyj2017++
		if yyhl2017 {
			yyb2017 = yyj2017 > l
		} else {
			yyb2017 = r.CheckBreak()
		}
		if yyb2017 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2017-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2020 := z.EncBinary()
		_ = yym2020
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2021 := !z.EncBinary()
			yy2arr2021 := z.EncBasicHandle().StructToArray
			var yyq2021 [3]bool
			_, _, _ = yysep2021, yyq2021, yy2arr2021
			const yyr2021 bool = false
			yyq2021[1] = x.Value != ""
			var yynn2021 int
			if yyr2021 || yy2arr2021 {
				r.EncodeArrayStart(3)
			} else {
				yynn2021 = 2
				for _, b := range yyq2021 {
					if b {
						yynn2021++
					}
				}
				r.EncodeMapStart(yynn2021)
				yynn2021 = 0
			}
			if yyr2021 || yy2arr2021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2023 := z.EncBinary()
				_ = yym2023
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2024 := z.EncBinary()
				_ = yym2024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr2021 || yy2arr2021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2021[1] {
					yym2026 := z.EncBinary()
					_ = yym2026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2021[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2021 || yy2arr2021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr2021 || yy2arr2021 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2029 := z.DecBinary()
	_ = yym2029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2030 := r.ContainerType()
		if yyct2030 == codecSelferValueTypeMap1234 {
			yyl2030 := r.ReadMapStart()
			if yyl2030 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2030, d)
			}
		} else if yyct2030 == codecSelferValueTypeArray1234 {
			yyl2030 := r.ReadArrayStart()
			if yyl2030 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2031Slc
	var yyhl2031 bool = l >= 0
	for yyj2031 := 0; ; yyj2031++ {
		if yyhl2031 {
			if yyj2031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2031Slc = r.DecodeBytes(yys2031Slc, true, true)
		yys2031 := string(yys2031Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2031 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2031)
		} // end switch yys2031
	} // end for yyj2031
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2035 int
	var yyb2035 bool
	var yyhl2035 bool = l >= 0
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2035++
		if yyhl2035 {
			yyb2035 = yyj2035 > l
		} else {
			yyb2035 = r.CheckBreak()
		}
		if yyb2035 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2035-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2039 := z.EncBinary()
	_ = yym2039
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2040 := z.DecBinary()
	_ = yym2040
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2041 := z.EncBinary()
		_ = yym2041
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2042 := !z.EncBinary()
			yy2arr2042 := z.EncBasicHandle().StructToArray
			var yyq2042 [4]bool
			_, _, _ = yysep2042, yyq2042, yy2arr2042
			const yyr2042 bool = false
			yyq2042[0] = x.Key != ""
			yyq2042[1] = x.Operator != ""
			yyq2042[2] = x.Value != ""
			yyq2042[3] = x.Effect != ""
			var yynn2042 int
			if yyr2042 || yy2arr2042 {
				r.EncodeArrayStart(4)
			} else {
				yynn2042 = 0
				for _, b := range yyq2042 {
					if b {
						yynn2042++
					}
				}
				r.EncodeMapStart(yynn2042)
				yynn2042 = 0
			}
			if yyr2042 || yy2arr2042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2042[0] {
					yym2044 := z.EncBinary()
					_ = yym2044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2042[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2045 := z.EncBinary()
					_ = yym2045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2042 || yy2arr2042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2042[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2042[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2042 || yy2arr2042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2042[2] {
					yym2048 := z.EncBinary()
					_ = yym2048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2042[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2049 := z.EncBinary()
					_ = yym2049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2042 || yy2arr2042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2042[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2042[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2042 || yy2arr2042 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2051 := z.DecBinary()
	_ = yym2051
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2052 := r.ContainerType()
		if yyct2052 == codecSelferValueTypeMap1234 {
			yyl2052 := r.ReadMapStart()
			if yyl2052 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2052, d)
			}
		} else if yyct2052 == codecSelferValueTypeArray1234 {
			yyl2052 := r.ReadArrayStart()
			if yyl2052 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2052, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2053Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2053Slc
	var yyhl2053 bool = l >= 0
	for yyj2053 := 0; ; yyj2053++ {
		if yyhl2053 {
			if yyj2053 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2053Slc = r.DecodeBytes(yys2053Slc, true, true)
		yys2053 := string(yys2053Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2053 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2053)
		} // end switch yys2053
	} // end for yyj2053
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2058 int
	var yyb2058 bool
	var yyhl2058 bool = l >= 0
	yyj2058++
	if yyhl2058 {
		yyb2058 = yyj2058 > l
	} else {
		yyb2058 = r.CheckBreak()
	}
	if yyb2058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2058++
	if yyhl2058 {
		yyb2058 = yyj2058 > l
	} else {
		yyb2058 = r.CheckBreak()
	}
	if yyb2058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2058++
	if yyhl2058 {
		yyb2058 = yyj2058 > l
	} else {
		yyb2058 = r.CheckBreak()
	}
	if yyb2058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2058++
	if yyhl2058 {
		yyb2058 = yyj2058 > l
	} else {
		yyb2058 = r.CheckBreak()
	}
	if yyb2058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2058++
		if yyhl2058 {
			yyb2058 = yyj2058 > l
		} else {
			yyb2058 = r.CheckBreak()
		}
		if yyb2058 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2058-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2063 := z.EncBinary()
	_ = yym2063
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2064 := z.DecBinary()
	_ = yym2064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2065 := z.EncBinary()
		_ = yym2065
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2066 := !z.EncBinary()
			yy2arr2066 := z.EncBasicHandle().StructToArray
			var yyq2066 [17]bool
			_, _, _ = yysep2066, yyq2066, yy2arr2066
			const yyr2066 bool = false
			yyq2066[0] = len(x.Volumes) != 0
			yyq2066[2] = x.RestartPolicy != ""
			yyq2066[3] = x.TerminationGracePeriodSeconds != nil
			yyq2066[4] = x.ActiveDeadlineSeconds != nil
			yyq2066[5] = x.DNSPolicy != ""
			yyq2066[6] = len(x.NodeSelector) != 0
			yyq2066[7] = x.ServiceAccountName != ""
			yyq2066[8] = x.DeprecatedServiceAccount != ""
			yyq2066[9] = x.NodeName != ""
			yyq2066[10] = x.HostNetwork != false
			yyq2066[11] = x.HostPID != false
			yyq2066[12] = x.HostIPC != false
			yyq2066[13] = x.SecurityContext != nil
			yyq2066[14] = len(x.ImagePullSecrets) != 0
			yyq2066[15] = x.Hostname != ""
			yyq2066[16] = x.Subdomain != ""
			var yynn2066 int
			if yyr2066 || yy2arr2066 {
				r.EncodeArrayStart(17)
			} else {
				yynn2066 = 1
				for _, b := range yyq2066 {
					if b {
						yynn2066++
					}
				}
				r.EncodeMapStart(yynn2066)
				yynn2066 = 0
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2068 := z.EncBinary()
						_ = yym2068
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2066[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2069 := z.EncBinary()
						_ = yym2069
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2066[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2075 := *x.TerminationGracePeriodSeconds
						yym2076 := z.EncBinary()
						_ = yym2076
						if false {
						} else {
							r.EncodeInt(int64(yy2075))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2066[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2077 := *x.TerminationGracePeriodSeconds
						yym2078 := z.EncBinary()
						_ = yym2078
						if false {
						} else {
							r.EncodeInt(int64(yy2077))
						}
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2080 := *x.ActiveDeadlineSeconds
						yym2081 := z.EncBinary()
						_ = yym2081
						if false {
						} else {
							r.EncodeInt(int64(yy2080))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2066[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2082 := *x.ActiveDeadlineSeconds
						yym2083 := z.EncBinary()
						_ = yym2083
						if false {
						} else {
							r.EncodeInt(int64(yy2082))
						}
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2066[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2086 := z.EncBinary()
						_ = yym2086
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2066[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2087 := z.EncBinary()
						_ = yym2087
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[7] {
					yym2089 := z.EncBinary()
					_ = yym2089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2066[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2090 := z.EncBinary()
					_ = yym2090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[8] {
					yym2092 := z.EncBinary()
					_ = yym2092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2066[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2093 := z.EncBinary()
					_ = yym2093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[9] {
					yym2095 := z.EncBinary()
					_ = yym2095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2066[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[10] {
					yym2098 := z.EncBinary()
					_ = yym2098
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2066[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[11] {
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2066[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[12] {
					yym2104 := z.EncBinary()
					_ = yym2104
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2066[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2105 := z.EncBinary()
					_ = yym2105
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2066[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2108 := z.EncBinary()
						_ = yym2108
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2066[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2109 := z.EncBinary()
						_ = yym2109
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[15] {
					yym2111 := z.EncBinary()
					_ = yym2111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2066[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2112 := z.EncBinary()
					_ = yym2112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2066[16] {
					yym2114 := z.EncBinary()
					_ = yym2114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2066[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2115 := z.EncBinary()
					_ = yym2115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2066 || yy2arr2066 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2116 := z.DecBinary()
	_ = yym2116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2117 := r.ContainerType()
		if yyct2117 == codecSelferValueTypeMap1234 {
			yyl2117 := r.ReadMapStart()
			if yyl2117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2117, d)
			}
		} else if yyct2117 == codecSelferValueTypeArray1234 {
			yyl2117 := r.ReadArrayStart()
			if yyl2117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2118Slc
	var yyhl2118 bool = l >= 0
	for yyj2118 := 0; ; yyj2118++ {
		if yyhl2118 {
			if yyj2118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2118Slc = r.DecodeBytes(yys2118Slc, true, true)
		yys2118 := string(yys2118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2118 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2119 := &x.Volumes
				yym2120 := z.DecBinary()
				_ = yym2120
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2119), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2121 := &x.Containers
				yym2122 := z.DecBinary()
				_ = yym2122
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2121), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2125 := z.DecBinary()
				_ = yym2125
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2127 := z.DecBinary()
				_ = yym2127
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2129 := &x.NodeSelector
				yym2130 := z.DecBinary()
				_ = yym2130
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2129, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2138 := &x.ImagePullSecrets
				yym2139 := z.DecBinary()
				_ = yym2139
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2138), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2118)
		} // end switch yys2118
	} // end for yyj2118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2142 int
	var yyb2142 bool
	var yyhl2142 bool = l >= 0
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2143 := &x.Volumes
		yym2144 := z.DecBinary()
		_ = yym2144
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2143), d)
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2145 := &x.Containers
		yym2146 := z.DecBinary()
		_ = yym2146
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2145), d)
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2149 := z.DecBinary()
		_ = yym2149
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2151 := z.DecBinary()
		_ = yym2151
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2153 := &x.NodeSelector
		yym2154 := z.DecBinary()
		_ = yym2154
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2153, false, d)
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2162 := &x.ImagePullSecrets
		yym2163 := z.DecBinary()
		_ = yym2163
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2162), d)
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2142++
		if yyhl2142 {
			yyb2142 = yyj2142 > l
		} else {
			yyb2142 = r.CheckBreak()
		}
		if yyb2142 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2142-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2166 := z.EncBinary()
		_ = yym2166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2167 := !z.EncBinary()
			yy2arr2167 := z.EncBasicHandle().StructToArray
			var yyq2167 [5]bool
			_, _, _ = yysep2167, yyq2167, yy2arr2167
			const yyr2167 bool = false
			yyq2167[0] = x.SELinuxOptions != nil
			yyq2167[1] = x.RunAsUser != nil
			yyq2167[2] = x.RunAsNonRoot != nil
			yyq2167[3] = len(x.SupplementalGroups) != 0
			yyq2167[4] = x.FSGroup != nil
			var yynn2167 int
			if yyr2167 || yy2arr2167 {
				r.EncodeArrayStart(5)
			} else {
				yynn2167 = 0
				for _, b := range yyq2167 {
					if b {
						yynn2167++
					}
				}
				r.EncodeMapStart(yynn2167)
				yynn2167 = 0
			}
			if yyr2167 || yy2arr2167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2167[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2167[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2167 || yy2arr2167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2167[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2170 := *x.RunAsUser
						yym2171 := z.EncBinary()
						_ = yym2171
						if false {
						} else {
							r.EncodeInt(int64(yy2170))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2167[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2172 := *x.RunAsUser
						yym2173 := z.EncBinary()
						_ = yym2173
						if false {
						} else {
							r.EncodeInt(int64(yy2172))
						}
					}
				}
			}
			if yyr2167 || yy2arr2167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2167[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2175 := *x.RunAsNonRoot
						yym2176 := z.EncBinary()
						_ = yym2176
						if false {
						} else {
							r.EncodeBool(bool(yy2175))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2167[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2177 := *x.RunAsNonRoot
						yym2178 := z.EncBinary()
						_ = yym2178
						if false {
						} else {
							r.EncodeBool(bool(yy2177))
						}
					}
				}
			}
			if yyr2167 || yy2arr2167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2167[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2180 := z.EncBinary()
						_ = yym2180
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2167[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2181 := z.EncBinary()
						_ = yym2181
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2167 || yy2arr2167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2167[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2183 := *x.FSGroup
						yym2184 := z.EncBinary()
						_ = yym2184
						if false {
						} else {
							r.EncodeInt(int64(yy2183))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2167[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2185 := *x.FSGroup
						yym2186 := z.EncBinary()
						_ = yym2186
						if false {
						} else {
							r.EncodeInt(int64(yy2185))
						}
					}
				}
			}
			if yyr2167 || yy2arr2167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2187 := z.DecBinary()
	_ = yym2187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2188 := r.ContainerType()
		if yyct2188 == codecSelferValueTypeMap1234 {
			yyl2188 := r.ReadMapStart()
			if yyl2188 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2188, d)
			}
		} else if yyct2188 == codecSelferValueTypeArray1234 {
			yyl2188 := r.ReadArrayStart()
			if yyl2188 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2189Slc
	var yyhl2189 bool = l >= 0
	for yyj2189 := 0; ; yyj2189++ {
		if yyhl2189 {
			if yyj2189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2189Slc = r.DecodeBytes(yys2189Slc, true, true)
		yys2189 := string(yys2189Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2189 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2192 := z.DecBinary()
				_ = yym2192
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2194 := z.DecBinary()
				_ = yym2194
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2195 := &x.SupplementalGroups
				yym2196 := z.DecBinary()
				_ = yym2196
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2195, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2198 := z.DecBinary()
				_ = yym2198
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2189)
		} // end switch yys2189
	} // end for yyj2189
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2199 int
	var yyb2199 bool
	var yyhl2199 bool = l >= 0
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2202 := z.DecBinary()
		_ = yym2202
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2204 := z.DecBinary()
		_ = yym2204
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2205 := &x.SupplementalGroups
		yym2206 := z.DecBinary()
		_ = yym2206
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2205, false, d)
		}
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2208 := z.DecBinary()
		_ = yym2208
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2199++
		if yyhl2199 {
			yyb2199 = yyj2199 > l
		} else {
			yyb2199 = r.CheckBreak()
		}
		if yyb2199 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2199-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2209 := z.EncBinary()
		_ = yym2209
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2210 := !z.EncBinary()
			yy2arr2210 := z.EncBasicHandle().StructToArray
			var yyq2210 [8]bool
			_, _, _ = yysep2210, yyq2210, yy2arr2210
			const yyr2210 bool = false
			yyq2210[0] = x.Phase != ""
			yyq2210[1] = len(x.Conditions) != 0
			yyq2210[2] = x.Message != ""
			yyq2210[3] = x.Reason != ""
			yyq2210[4] = x.HostIP != ""
			yyq2210[5] = x.PodIP != ""
			yyq2210[6] = x.StartTime != nil
			yyq2210[7] = len(x.ContainerStatuses) != 0
			var yynn2210 int
			if yyr2210 || yy2arr2210 {
				r.EncodeArrayStart(8)
			} else {
				yynn2210 = 0
				for _, b := range yyq2210 {
					if b {
						yynn2210++
					}
				}
				r.EncodeMapStart(yynn2210)
				yynn2210 = 0
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2213 := z.EncBinary()
						_ = yym2213
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2210[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2214 := z.EncBinary()
						_ = yym2214
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[2] {
					yym2216 := z.EncBinary()
					_ = yym2216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2217 := z.EncBinary()
					_ = yym2217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[3] {
					yym2219 := z.EncBinary()
					_ = yym2219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2220 := z.EncBinary()
					_ = yym2220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[4] {
					yym2222 := z.EncBinary()
					_ = yym2222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2223 := z.EncBinary()
					_ = yym2223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[5] {
					yym2225 := z.EncBinary()
					_ = yym2225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2226 := z.EncBinary()
					_ = yym2226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2228 := z.EncBinary()
						_ = yym2228
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2228 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2228 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2210[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2229 := z.EncBinary()
						_ = yym2229
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2229 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2229 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2231 := z.EncBinary()
						_ = yym2231
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2210[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2232 := z.EncBinary()
						_ = yym2232
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2233 := z.DecBinary()
	_ = yym2233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2234 := r.ContainerType()
		if yyct2234 == codecSelferValueTypeMap1234 {
			yyl2234 := r.ReadMapStart()
			if yyl2234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2234, d)
			}
		} else if yyct2234 == codecSelferValueTypeArray1234 {
			yyl2234 := r.ReadArrayStart()
			if yyl2234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2235Slc
	var yyhl2235 bool = l >= 0
	for yyj2235 := 0; ; yyj2235++ {
		if yyhl2235 {
			if yyj2235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2235Slc = r.DecodeBytes(yys2235Slc, true, true)
		yys2235 := string(yys2235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2235 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2237 := &x.Conditions
				yym2238 := z.DecBinary()
				_ = yym2238
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2237), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2244 := z.DecBinary()
				_ = yym2244
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2244 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2244 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2245 := &x.ContainerStatuses
				yym2246 := z.DecBinary()
				_ = yym2246
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2245), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2235)
		} // end switch yys2235
	} // end for yyj2235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2247 int
	var yyb2247 bool
	var yyhl2247 bool = l >= 0
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2249 := &x.Conditions
		yym2250 := z.DecBinary()
		_ = yym2250
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2249), d)
		}
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2256 := z.DecBinary()
		_ = yym2256
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2256 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2256 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2257 := &x.ContainerStatuses
		yym2258 := z.DecBinary()
		_ = yym2258
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2257), d)
		}
	}
	for {
		yyj2247++
		if yyhl2247 {
			yyb2247 = yyj2247 > l
		} else {
			yyb2247 = r.CheckBreak()
		}
		if yyb2247 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2247-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2259 := z.EncBinary()
		_ = yym2259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2260 := !z.EncBinary()
			yy2arr2260 := z.EncBasicHandle().StructToArray
			var yyq2260 [4]bool
			_, _, _ = yysep2260, yyq2260, yy2arr2260
			const yyr2260 bool = false
			yyq2260[0] = x.Kind != ""
			yyq2260[1] = x.APIVersion != ""
			yyq2260[2] = true
			yyq2260[3] = true
			var yynn2260 int
			if yyr2260 || yy2arr2260 {
				r.EncodeArrayStart(4)
			} else {
				yynn2260 = 0
				for _, b := range yyq2260 {
					if b {
						yynn2260++
					}
				}
				r.EncodeMapStart(yynn2260)
				yynn2260 = 0
			}
			if yyr2260 || yy2arr2260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2260[0] {
					yym2262 := z.EncBinary()
					_ = yym2262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2260[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2263 := z.EncBinary()
					_ = yym2263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2260 || yy2arr2260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2260[1] {
					yym2265 := z.EncBinary()
					_ = yym2265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2260[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2266 := z.EncBinary()
					_ = yym2266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2260 || yy2arr2260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2260[2] {
					yy2268 := &x.ObjectMeta
					yy2268.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2260[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2269 := &x.ObjectMeta
					yy2269.CodecEncodeSelf(e)
				}
			}
			if yyr2260 || yy2arr2260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2260[3] {
					yy2271 := &x.Status
					yy2271.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2260[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2272 := &x.Status
					yy2272.CodecEncodeSelf(e)
				}
			}
			if yyr2260 || yy2arr2260 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2273 := z.DecBinary()
	_ = yym2273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2274 := r.ContainerType()
		if yyct2274 == codecSelferValueTypeMap1234 {
			yyl2274 := r.ReadMapStart()
			if yyl2274 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2274, d)
			}
		} else if yyct2274 == codecSelferValueTypeArray1234 {
			yyl2274 := r.ReadArrayStart()
			if yyl2274 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2274, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2275Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2275Slc
	var yyhl2275 bool = l >= 0
	for yyj2275 := 0; ; yyj2275++ {
		if yyhl2275 {
			if yyj2275 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2275Slc = r.DecodeBytes(yys2275Slc, true, true)
		yys2275 := string(yys2275Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2275 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2278 := &x.ObjectMeta
				yyv2278.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2279 := &x.Status
				yyv2279.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2275)
		} // end switch yys2275
	} // end for yyj2275
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2280 int
	var yyb2280 bool
	var yyhl2280 bool = l >= 0
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2283 := &x.ObjectMeta
		yyv2283.CodecDecodeSelf(d)
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2284 := &x.Status
		yyv2284.CodecDecodeSelf(d)
	}
	for {
		yyj2280++
		if yyhl2280 {
			yyb2280 = yyj2280 > l
		} else {
			yyb2280 = r.CheckBreak()
		}
		if yyb2280 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2280-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2285 := z.EncBinary()
		_ = yym2285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2286 := !z.EncBinary()
			yy2arr2286 := z.EncBasicHandle().StructToArray
			var yyq2286 [5]bool
			_, _, _ = yysep2286, yyq2286, yy2arr2286
			const yyr2286 bool = false
			yyq2286[0] = x.Kind != ""
			yyq2286[1] = x.APIVersion != ""
			yyq2286[2] = true
			yyq2286[3] = true
			yyq2286[4] = true
			var yynn2286 int
			if yyr2286 || yy2arr2286 {
				r.EncodeArrayStart(5)
			} else {
				yynn2286 = 0
				for _, b := range yyq2286 {
					if b {
						yynn2286++
					}
				}
				r.EncodeMapStart(yynn2286)
				yynn2286 = 0
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[0] {
					yym2288 := z.EncBinary()
					_ = yym2288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2286[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2289 := z.EncBinary()
					_ = yym2289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[1] {
					yym2291 := z.EncBinary()
					_ = yym2291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2286[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2292 := z.EncBinary()
					_ = yym2292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[2] {
					yy2294 := &x.ObjectMeta
					yy2294.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2295 := &x.ObjectMeta
					yy2295.CodecEncodeSelf(e)
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[3] {
					yy2297 := &x.Spec
					yy2297.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2298 := &x.Spec
					yy2298.CodecEncodeSelf(e)
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[4] {
					yy2300 := &x.Status
					yy2300.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2301 := &x.Status
					yy2301.CodecEncodeSelf(e)
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2302 := z.DecBinary()
	_ = yym2302
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2303 := r.ContainerType()
		if yyct2303 == codecSelferValueTypeMap1234 {
			yyl2303 := r.ReadMapStart()
			if yyl2303 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2303, d)
			}
		} else if yyct2303 == codecSelferValueTypeArray1234 {
			yyl2303 := r.ReadArrayStart()
			if yyl2303 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2303, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2304Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2304Slc
	var yyhl2304 bool = l >= 0
	for yyj2304 := 0; ; yyj2304++ {
		if yyhl2304 {
			if yyj2304 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2304Slc = r.DecodeBytes(yys2304Slc, true, true)
		yys2304 := string(yys2304Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2304 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2307 := &x.ObjectMeta
				yyv2307.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2308 := &x.Spec
				yyv2308.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2309 := &x.Status
				yyv2309.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2304)
		} // end switch yys2304
	} // end for yyj2304
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2310 int
	var yyb2310 bool
	var yyhl2310 bool = l >= 0
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2313 := &x.ObjectMeta
		yyv2313.CodecDecodeSelf(d)
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2314 := &x.Spec
		yyv2314.CodecDecodeSelf(d)
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2315 := &x.Status
		yyv2315.CodecDecodeSelf(d)
	}
	for {
		yyj2310++
		if yyhl2310 {
			yyb2310 = yyj2310 > l
		} else {
			yyb2310 = r.CheckBreak()
		}
		if yyb2310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2316 := z.EncBinary()
		_ = yym2316
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2317 := !z.EncBinary()
			yy2arr2317 := z.EncBasicHandle().StructToArray
			var yyq2317 [4]bool
			_, _, _ = yysep2317, yyq2317, yy2arr2317
			const yyr2317 bool = false
			yyq2317[0] = x.Kind != ""
			yyq2317[1] = x.APIVersion != ""
			yyq2317[2] = true
			var yynn2317 int
			if yyr2317 || yy2arr2317 {
				r.EncodeArrayStart(4)
			} else {
				yynn2317 = 1
				for _, b := range yyq2317 {
					if b {
						yynn2317++
					}
				}
				r.EncodeMapStart(yynn2317)
				yynn2317 = 0
			}
			if yyr2317 || yy2arr2317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2317[0] {
					yym2319 := z.EncBinary()
					_ = yym2319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2317[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2320 := z.EncBinary()
					_ = yym2320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2317 || yy2arr2317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2317[1] {
					yym2322 := z.EncBinary()
					_ = yym2322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2317[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2317 || yy2arr2317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2317[2] {
					yy2325 := &x.ListMeta
					yym2326 := z.EncBinary()
					_ = yym2326
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2325) {
					} else {
						z.EncFallback(yy2325)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2317[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2327 := &x.ListMeta
					yym2328 := z.EncBinary()
					_ = yym2328
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2327) {
					} else {
						z.EncFallback(yy2327)
					}
				}
			}
			if yyr2317 || yy2arr2317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2330 := z.EncBinary()
					_ = yym2330
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2317 || yy2arr2317 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2332 := z.DecBinary()
	_ = yym2332
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2333 := r.ContainerType()
		if yyct2333 == codecSelferValueTypeMap1234 {
			yyl2333 := r.ReadMapStart()
			if yyl2333 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2333, d)
			}
		} else if yyct2333 == codecSelferValueTypeArray1234 {
			yyl2333 := r.ReadArrayStart()
			if yyl2333 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2333, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2334Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2334Slc
	var yyhl2334 bool = l >= 0
	for yyj2334 := 0; ; yyj2334++ {
		if yyhl2334 {
			if yyj2334 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2334Slc = r.DecodeBytes(yys2334Slc, true, true)
		yys2334 := string(yys2334Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2334 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2337 := &x.ListMeta
				yym2338 := z.DecBinary()
				_ = yym2338
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2337) {
				} else {
					z.DecFallback(yyv2337, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2339 := &x.Items
				yym2340 := z.DecBinary()
				_ = yym2340
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2339), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2334)
		} // end switch yys2334
	} // end for yyj2334
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2341 int
	var yyb2341 bool
	var yyhl2341 bool = l >= 0
	yyj2341++
	if yyhl2341 {
		yyb2341 = yyj2341 > l
	} else {
		yyb2341 = r.CheckBreak()
	}
	if yyb2341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2341++
	if yyhl2341 {
		yyb2341 = yyj2341 > l
	} else {
		yyb2341 = r.CheckBreak()
	}
	if yyb2341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2341++
	if yyhl2341 {
		yyb2341 = yyj2341 > l
	} else {
		yyb2341 = r.CheckBreak()
	}
	if yyb2341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2344 := &x.ListMeta
		yym2345 := z.DecBinary()
		_ = yym2345
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2344) {
		} else {
			z.DecFallback(yyv2344, false)
		}
	}
	yyj2341++
	if yyhl2341 {
		yyb2341 = yyj2341 > l
	} else {
		yyb2341 = r.CheckBreak()
	}
	if yyb2341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2346 := &x.Items
		yym2347 := z.DecBinary()
		_ = yym2347
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2346), d)
		}
	}
	for {
		yyj2341++
		if yyhl2341 {
			yyb2341 = yyj2341 > l
		} else {
			yyb2341 = r.CheckBreak()
		}
		if yyb2341 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2341-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2348 := z.EncBinary()
		_ = yym2348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2349 := !z.EncBinary()
			yy2arr2349 := z.EncBasicHandle().StructToArray
			var yyq2349 [2]bool
			_, _, _ = yysep2349, yyq2349, yy2arr2349
			const yyr2349 bool = false
			yyq2349[0] = true
			yyq2349[1] = true
			var yynn2349 int
			if yyr2349 || yy2arr2349 {
				r.EncodeArrayStart(2)
			} else {
				yynn2349 = 0
				for _, b := range yyq2349 {
					if b {
						yynn2349++
					}
				}
				r.EncodeMapStart(yynn2349)
				yynn2349 = 0
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2349[0] {
					yy2351 := &x.ObjectMeta
					yy2351.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2349[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2352 := &x.ObjectMeta
					yy2352.CodecEncodeSelf(e)
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2349[1] {
					yy2354 := &x.Spec
					yy2354.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2349[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2355 := &x.Spec
					yy2355.CodecEncodeSelf(e)
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2356 := z.DecBinary()
	_ = yym2356
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2357 := r.ContainerType()
		if yyct2357 == codecSelferValueTypeMap1234 {
			yyl2357 := r.ReadMapStart()
			if yyl2357 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2357, d)
			}
		} else if yyct2357 == codecSelferValueTypeArray1234 {
			yyl2357 := r.ReadArrayStart()
			if yyl2357 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2357, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2358Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2358Slc
	var yyhl2358 bool = l >= 0
	for yyj2358 := 0; ; yyj2358++ {
		if yyhl2358 {
			if yyj2358 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2358Slc = r.DecodeBytes(yys2358Slc, true, true)
		yys2358 := string(yys2358Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2358 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2359 := &x.ObjectMeta
				yyv2359.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2360 := &x.Spec
				yyv2360.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2358)
		} // end switch yys2358
	} // end for yyj2358
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2361 int
	var yyb2361 bool
	var yyhl2361 bool = l >= 0
	yyj2361++
	if yyhl2361 {
		yyb2361 = yyj2361 > l
	} else {
		yyb2361 = r.CheckBreak()
	}
	if yyb2361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2362 := &x.ObjectMeta
		yyv2362.CodecDecodeSelf(d)
	}
	yyj2361++
	if yyhl2361 {
		yyb2361 = yyj2361 > l
	} else {
		yyb2361 = r.CheckBreak()
	}
	if yyb2361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2363 := &x.Spec
		yyv2363.CodecDecodeSelf(d)
	}
	for {
		yyj2361++
		if yyhl2361 {
			yyb2361 = yyj2361 > l
		} else {
			yyb2361 = r.CheckBreak()
		}
		if yyb2361 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2361-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2364 := z.EncBinary()
		_ = yym2364
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2365 := !z.EncBinary()
			yy2arr2365 := z.EncBasicHandle().StructToArray
			var yyq2365 [4]bool
			_, _, _ = yysep2365, yyq2365, yy2arr2365
			const yyr2365 bool = false
			yyq2365[0] = x.Kind != ""
			yyq2365[1] = x.APIVersion != ""
			yyq2365[2] = true
			yyq2365[3] = true
			var yynn2365 int
			if yyr2365 || yy2arr2365 {
				r.EncodeArrayStart(4)
			} else {
				yynn2365 = 0
				for _, b := range yyq2365 {
					if b {
						yynn2365++
					}
				}
				r.EncodeMapStart(yynn2365)
				yynn2365 = 0
			}
			if yyr2365 || yy2arr2365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2365[0] {
					yym2367 := z.EncBinary()
					_ = yym2367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2365[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2368 := z.EncBinary()
					_ = yym2368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2365 || yy2arr2365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2365[1] {
					yym2370 := z.EncBinary()
					_ = yym2370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2365[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2371 := z.EncBinary()
					_ = yym2371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2365 || yy2arr2365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2365[2] {
					yy2373 := &x.ObjectMeta
					yy2373.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2365[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2374 := &x.ObjectMeta
					yy2374.CodecEncodeSelf(e)
				}
			}
			if yyr2365 || yy2arr2365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2365[3] {
					yy2376 := &x.Template
					yy2376.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2365[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2377 := &x.Template
					yy2377.CodecEncodeSelf(e)
				}
			}
			if yyr2365 || yy2arr2365 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2378 := z.DecBinary()
	_ = yym2378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2379 := r.ContainerType()
		if yyct2379 == codecSelferValueTypeMap1234 {
			yyl2379 := r.ReadMapStart()
			if yyl2379 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2379, d)
			}
		} else if yyct2379 == codecSelferValueTypeArray1234 {
			yyl2379 := r.ReadArrayStart()
			if yyl2379 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2380Slc
	var yyhl2380 bool = l >= 0
	for yyj2380 := 0; ; yyj2380++ {
		if yyhl2380 {
			if yyj2380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2380Slc = r.DecodeBytes(yys2380Slc, true, true)
		yys2380 := string(yys2380Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2383 := &x.ObjectMeta
				yyv2383.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2384 := &x.Template
				yyv2384.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2380)
		} // end switch yys2380
	} // end for yyj2380
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2385 int
	var yyb2385 bool
	var yyhl2385 bool = l >= 0
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2388 := &x.ObjectMeta
		yyv2388.CodecDecodeSelf(d)
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2389 := &x.Template
		yyv2389.CodecDecodeSelf(d)
	}
	for {
		yyj2385++
		if yyhl2385 {
			yyb2385 = yyj2385 > l
		} else {
			yyb2385 = r.CheckBreak()
		}
		if yyb2385 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2385-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2390 := z.EncBinary()
		_ = yym2390
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2391 := !z.EncBinary()
			yy2arr2391 := z.EncBasicHandle().StructToArray
			var yyq2391 [4]bool
			_, _, _ = yysep2391, yyq2391, yy2arr2391
			const yyr2391 bool = false
			yyq2391[0] = x.Kind != ""
			yyq2391[1] = x.APIVersion != ""
			yyq2391[2] = true
			var yynn2391 int
			if yyr2391 || yy2arr2391 {
				r.EncodeArrayStart(4)
			} else {
				yynn2391 = 1
				for _, b := range yyq2391 {
					if b {
						yynn2391++
					}
				}
				r.EncodeMapStart(yynn2391)
				yynn2391 = 0
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2391[0] {
					yym2393 := z.EncBinary()
					_ = yym2393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2391[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2394 := z.EncBinary()
					_ = yym2394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2391[1] {
					yym2396 := z.EncBinary()
					_ = yym2396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2391[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2397 := z.EncBinary()
					_ = yym2397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2391[2] {
					yy2399 := &x.ListMeta
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2399) {
					} else {
						z.EncFallback(yy2399)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2391[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2401 := &x.ListMeta
					yym2402 := z.EncBinary()
					_ = yym2402
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2401) {
					} else {
						z.EncFallback(yy2401)
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2404 := z.EncBinary()
					_ = yym2404
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2405 := z.EncBinary()
					_ = yym2405
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2406 := z.DecBinary()
	_ = yym2406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2407 := r.ContainerType()
		if yyct2407 == codecSelferValueTypeMap1234 {
			yyl2407 := r.ReadMapStart()
			if yyl2407 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2407, d)
			}
		} else if yyct2407 == codecSelferValueTypeArray1234 {
			yyl2407 := r.ReadArrayStart()
			if yyl2407 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2407, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2408Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2408Slc
	var yyhl2408 bool = l >= 0
	for yyj2408 := 0; ; yyj2408++ {
		if yyhl2408 {
			if yyj2408 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2408Slc = r.DecodeBytes(yys2408Slc, true, true)
		yys2408 := string(yys2408Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2408 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2411 := &x.ListMeta
				yym2412 := z.DecBinary()
				_ = yym2412
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2411) {
				} else {
					z.DecFallback(yyv2411, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2413 := &x.Items
				yym2414 := z.DecBinary()
				_ = yym2414
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2413), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2408)
		} // end switch yys2408
	} // end for yyj2408
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2415 int
	var yyb2415 bool
	var yyhl2415 bool = l >= 0
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2418 := &x.ListMeta
		yym2419 := z.DecBinary()
		_ = yym2419
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2418) {
		} else {
			z.DecFallback(yyv2418, false)
		}
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2420 := &x.Items
		yym2421 := z.DecBinary()
		_ = yym2421
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2420), d)
		}
	}
	for {
		yyj2415++
		if yyhl2415 {
			yyb2415 = yyj2415 > l
		} else {
			yyb2415 = r.CheckBreak()
		}
		if yyb2415 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2415-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2422 := z.EncBinary()
		_ = yym2422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2423 := !z.EncBinary()
			yy2arr2423 := z.EncBasicHandle().StructToArray
			var yyq2423 [3]bool
			_, _, _ = yysep2423, yyq2423, yy2arr2423
			const yyr2423 bool = false
			yyq2423[0] = x.Replicas != nil
			yyq2423[1] = len(x.Selector) != 0
			yyq2423[2] = x.Template != nil
			var yynn2423 int
			if yyr2423 || yy2arr2423 {
				r.EncodeArrayStart(3)
			} else {
				yynn2423 = 0
				for _, b := range yyq2423 {
					if b {
						yynn2423++
					}
				}
				r.EncodeMapStart(yynn2423)
				yynn2423 = 0
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2425 := *x.Replicas
						yym2426 := z.EncBinary()
						_ = yym2426
						if false {
						} else {
							r.EncodeInt(int64(yy2425))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2427 := *x.Replicas
						yym2428 := z.EncBinary()
						_ = yym2428
						if false {
						} else {
							r.EncodeInt(int64(yy2427))
						}
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2430 := z.EncBinary()
						_ = yym2430
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2423[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2431 := z.EncBinary()
						_ = yym2431
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2423[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2433 := z.DecBinary()
	_ = yym2433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2434 := r.ContainerType()
		if yyct2434 == codecSelferValueTypeMap1234 {
			yyl2434 := r.ReadMapStart()
			if yyl2434 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2434, d)
			}
		} else if yyct2434 == codecSelferValueTypeArray1234 {
			yyl2434 := r.ReadArrayStart()
			if yyl2434 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2434, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2435Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2435Slc
	var yyhl2435 bool = l >= 0
	for yyj2435 := 0; ; yyj2435++ {
		if yyhl2435 {
			if yyj2435 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2435Slc = r.DecodeBytes(yys2435Slc, true, true)
		yys2435 := string(yys2435Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2435 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2437 := z.DecBinary()
				_ = yym2437
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2438 := &x.Selector
				yym2439 := z.DecBinary()
				_ = yym2439
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2438, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2435)
		} // end switch yys2435
	} // end for yyj2435
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2441 int
	var yyb2441 bool
	var yyhl2441 bool = l >= 0
	yyj2441++
	if yyhl2441 {
		yyb2441 = yyj2441 > l
	} else {
		yyb2441 = r.CheckBreak()
	}
	if yyb2441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2443 := z.DecBinary()
		_ = yym2443
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2441++
	if yyhl2441 {
		yyb2441 = yyj2441 > l
	} else {
		yyb2441 = r.CheckBreak()
	}
	if yyb2441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2444 := &x.Selector
		yym2445 := z.DecBinary()
		_ = yym2445
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2444, false, d)
		}
	}
	yyj2441++
	if yyhl2441 {
		yyb2441 = yyj2441 > l
	} else {
		yyb2441 = r.CheckBreak()
	}
	if yyb2441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2441++
		if yyhl2441 {
			yyb2441 = yyj2441 > l
		} else {
			yyb2441 = r.CheckBreak()
		}
		if yyb2441 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2441-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2447 := z.EncBinary()
		_ = yym2447
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2448 := !z.EncBinary()
			yy2arr2448 := z.EncBasicHandle().StructToArray
			var yyq2448 [4]bool
			_, _, _ = yysep2448, yyq2448, yy2arr2448
			const yyr2448 bool = false
			yyq2448[1] = x.FullyLabeledReplicas != 0
			yyq2448[2] = x.ReadyReplicas != 0
			yyq2448[3] = x.ObservedGeneration != 0
			var yynn2448 int
			if yyr2448 || yy2arr2448 {
				r.EncodeArrayStart(4)
			} else {
				yynn2448 = 1
				for _, b := range yyq2448 {
					if b {
						yynn2448++
					}
				}
				r.EncodeMapStart(yynn2448)
				yynn2448 = 0
			}
			if yyr2448 || yy2arr2448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2450 := z.EncBinary()
				_ = yym2450
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2451 := z.EncBinary()
				_ = yym2451
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2448 || yy2arr2448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2448[1] {
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2448[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2454 := z.EncBinary()
					_ = yym2454
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2448 || yy2arr2448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2448[2] {
					yym2456 := z.EncBinary()
					_ = yym2456
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2448[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2457 := z.EncBinary()
					_ = yym2457
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2448 || yy2arr2448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2448[3] {
					yym2459 := z.EncBinary()
					_ = yym2459
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2448[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2460 := z.EncBinary()
					_ = yym2460
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2448 || yy2arr2448 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2461 := z.DecBinary()
	_ = yym2461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2462 := r.ContainerType()
		if yyct2462 == codecSelferValueTypeMap1234 {
			yyl2462 := r.ReadMapStart()
			if yyl2462 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2462, d)
			}
		} else if yyct2462 == codecSelferValueTypeArray1234 {
			yyl2462 := r.ReadArrayStart()
			if yyl2462 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2462, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2463Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2463Slc
	var yyhl2463 bool = l >= 0
	for yyj2463 := 0; ; yyj2463++ {
		if yyhl2463 {
			if yyj2463 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2463Slc = r.DecodeBytes(yys2463Slc, true, true)
		yys2463 := string(yys2463Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2463 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2463)
		} // end switch yys2463
	} // end for yyj2463
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2468 int
	var yyb2468 bool
	var yyhl2468 bool = l >= 0
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2468++
		if yyhl2468 {
			yyb2468 = yyj2468 > l
		} else {
			yyb2468 = r.CheckBreak()
		}
		if yyb2468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2473 := z.EncBinary()
		_ = yym2473
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2474 := !z.EncBinary()
			yy2arr2474 := z.EncBasicHandle().StructToArray
			var yyq2474 [5]bool
			_, _, _ = yysep2474, yyq2474, yy2arr2474
			const yyr2474 bool = false
			yyq2474[0] = x.Kind != ""
			yyq2474[1] = x.APIVersion != ""
			yyq2474[2] = true
			yyq2474[3] = true
			yyq2474[4] = true
			var yynn2474 int
			if yyr2474 || yy2arr2474 {
				r.EncodeArrayStart(5)
			} else {
				yynn2474 = 0
				for _, b := range yyq2474 {
					if b {
						yynn2474++
					}
				}
				r.EncodeMapStart(yynn2474)
				yynn2474 = 0
			}
			if yyr2474 || yy2arr2474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2474[0] {
					yym2476 := z.EncBinary()
					_ = yym2476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2474[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2477 := z.EncBinary()
					_ = yym2477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2474 || yy2arr2474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2474[1] {
					yym2479 := z.EncBinary()
					_ = yym2479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2474[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2480 := z.EncBinary()
					_ = yym2480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2474 || yy2arr2474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2474[2] {
					yy2482 := &x.ObjectMeta
					yy2482.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2474[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2483 := &x.ObjectMeta
					yy2483.CodecEncodeSelf(e)
				}
			}
			if yyr2474 || yy2arr2474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2474[3] {
					yy2485 := &x.Spec
					yy2485.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2474[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2486 := &x.Spec
					yy2486.CodecEncodeSelf(e)
				}
			}
			if yyr2474 || yy2arr2474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2474[4] {
					yy2488 := &x.Status
					yy2488.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2474[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2489 := &x.Status
					yy2489.CodecEncodeSelf(e)
				}
			}
			if yyr2474 || yy2arr2474 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2490 := z.DecBinary()
	_ = yym2490
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2491 := r.ContainerType()
		if yyct2491 == codecSelferValueTypeMap1234 {
			yyl2491 := r.ReadMapStart()
			if yyl2491 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2491, d)
			}
		} else if yyct2491 == codecSelferValueTypeArray1234 {
			yyl2491 := r.ReadArrayStart()
			if yyl2491 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2491, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2492Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2492Slc
	var yyhl2492 bool = l >= 0
	for yyj2492 := 0; ; yyj2492++ {
		if yyhl2492 {
			if yyj2492 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2492Slc = r.DecodeBytes(yys2492Slc, true, true)
		yys2492 := string(yys2492Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2492 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2495 := &x.ObjectMeta
				yyv2495.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2496 := &x.Spec
				yyv2496.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2497 := &x.Status
				yyv2497.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2492)
		} // end switch yys2492
	} // end for yyj2492
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2498 int
	var yyb2498 bool
	var yyhl2498 bool = l >= 0
	yyj2498++
	if yyhl2498 {
		yyb2498 = yyj2498 > l
	} else {
		yyb2498 = r.CheckBreak()
	}
	if yyb2498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2498++
	if yyhl2498 {
		yyb2498 = yyj2498 > l
	} else {
		yyb2498 = r.CheckBreak()
	}
	if yyb2498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2498++
	if yyhl2498 {
		yyb2498 = yyj2498 > l
	} else {
		yyb2498 = r.CheckBreak()
	}
	if yyb2498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2501 := &x.ObjectMeta
		yyv2501.CodecDecodeSelf(d)
	}
	yyj2498++
	if yyhl2498 {
		yyb2498 = yyj2498 > l
	} else {
		yyb2498 = r.CheckBreak()
	}
	if yyb2498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2502 := &x.Spec
		yyv2502.CodecDecodeSelf(d)
	}
	yyj2498++
	if yyhl2498 {
		yyb2498 = yyj2498 > l
	} else {
		yyb2498 = r.CheckBreak()
	}
	if yyb2498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2503 := &x.Status
		yyv2503.CodecDecodeSelf(d)
	}
	for {
		yyj2498++
		if yyhl2498 {
			yyb2498 = yyj2498 > l
		} else {
			yyb2498 = r.CheckBreak()
		}
		if yyb2498 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2498-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2504 := z.EncBinary()
		_ = yym2504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2505 := !z.EncBinary()
			yy2arr2505 := z.EncBasicHandle().StructToArray
			var yyq2505 [4]bool
			_, _, _ = yysep2505, yyq2505, yy2arr2505
			const yyr2505 bool = false
			yyq2505[0] = x.Kind != ""
			yyq2505[1] = x.APIVersion != ""
			yyq2505[2] = true
			var yynn2505 int
			if yyr2505 || yy2arr2505 {
				r.EncodeArrayStart(4)
			} else {
				yynn2505 = 1
				for _, b := range yyq2505 {
					if b {
						yynn2505++
					}
				}
				r.EncodeMapStart(yynn2505)
				yynn2505 = 0
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2505[0] {
					yym2507 := z.EncBinary()
					_ = yym2507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2505[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2505[1] {
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2505[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2511 := z.EncBinary()
					_ = yym2511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2505[2] {
					yy2513 := &x.ListMeta
					yym2514 := z.EncBinary()
					_ = yym2514
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2513) {
					} else {
						z.EncFallback(yy2513)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2505[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2515 := &x.ListMeta
					yym2516 := z.EncBinary()
					_ = yym2516
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2515) {
					} else {
						z.EncFallback(yy2515)
					}
				}
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2518 := z.EncBinary()
					_ = yym2518
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2520 := z.DecBinary()
	_ = yym2520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2521 := r.ContainerType()
		if yyct2521 == codecSelferValueTypeMap1234 {
			yyl2521 := r.ReadMapStart()
			if yyl2521 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2521, d)
			}
		} else if yyct2521 == codecSelferValueTypeArray1234 {
			yyl2521 := r.ReadArrayStart()
			if yyl2521 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2521, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2522Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2522Slc
	var yyhl2522 bool = l >= 0
	for yyj2522 := 0; ; yyj2522++ {
		if yyhl2522 {
			if yyj2522 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2522Slc = r.DecodeBytes(yys2522Slc, true, true)
		yys2522 := string(yys2522Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2522 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2525 := &x.ListMeta
				yym2526 := z.DecBinary()
				_ = yym2526
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2525) {
				} else {
					z.DecFallback(yyv2525, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2527 := &x.Items
				yym2528 := z.DecBinary()
				_ = yym2528
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2527), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2522)
		} // end switch yys2522
	} // end for yyj2522
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2529 int
	var yyb2529 bool
	var yyhl2529 bool = l >= 0
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2532 := &x.ListMeta
		yym2533 := z.DecBinary()
		_ = yym2533
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2532) {
		} else {
			z.DecFallback(yyv2532, false)
		}
	}
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2534 := &x.Items
		yym2535 := z.DecBinary()
		_ = yym2535
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2534), d)
		}
	}
	for {
		yyj2529++
		if yyhl2529 {
			yyb2529 = yyj2529 > l
		} else {
			yyb2529 = r.CheckBreak()
		}
		if yyb2529 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2529-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2536 := z.EncBinary()
	_ = yym2536
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2537 := z.DecBinary()
	_ = yym2537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2538 := z.EncBinary()
	_ = yym2538
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2539 := z.DecBinary()
	_ = yym2539
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2540 := z.EncBinary()
		_ = yym2540
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2541 := !z.EncBinary()
			yy2arr2541 := z.EncBasicHandle().StructToArray
			var yyq2541 [1]bool
			_, _, _ = yysep2541, yyq2541, yy2arr2541
			const yyr2541 bool = false
			yyq2541[0] = true
			var yynn2541 int
			if yyr2541 || yy2arr2541 {
				r.EncodeArrayStart(1)
			} else {
				yynn2541 = 0
				for _, b := range yyq2541 {
					if b {
						yynn2541++
					}
				}
				r.EncodeMapStart(yynn2541)
				yynn2541 = 0
			}
			if yyr2541 || yy2arr2541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2541[0] {
					yy2543 := &x.LoadBalancer
					yy2543.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2541[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2544 := &x.LoadBalancer
					yy2544.CodecEncodeSelf(e)
				}
			}
			if yyr2541 || yy2arr2541 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2545 := z.DecBinary()
	_ = yym2545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2546 := r.ContainerType()
		if yyct2546 == codecSelferValueTypeMap1234 {
			yyl2546 := r.ReadMapStart()
			if yyl2546 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2546, d)
			}
		} else if yyct2546 == codecSelferValueTypeArray1234 {
			yyl2546 := r.ReadArrayStart()
			if yyl2546 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2547Slc
	var yyhl2547 bool = l >= 0
	for yyj2547 := 0; ; yyj2547++ {
		if yyhl2547 {
			if yyj2547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2547Slc = r.DecodeBytes(yys2547Slc, true, true)
		yys2547 := string(yys2547Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2547 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2548 := &x.LoadBalancer
				yyv2548.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2547)
		} // end switch yys2547
	} // end for yyj2547
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2549 int
	var yyb2549 bool
	var yyhl2549 bool = l >= 0
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2550 := &x.LoadBalancer
		yyv2550.CodecDecodeSelf(d)
	}
	for {
		yyj2549++
		if yyhl2549 {
			yyb2549 = yyj2549 > l
		} else {
			yyb2549 = r.CheckBreak()
		}
		if yyb2549 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2549-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2551 := z.EncBinary()
		_ = yym2551
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2552 := !z.EncBinary()
			yy2arr2552 := z.EncBasicHandle().StructToArray
			var yyq2552 [1]bool
			_, _, _ = yysep2552, yyq2552, yy2arr2552
			const yyr2552 bool = false
			yyq2552[0] = len(x.Ingress) != 0
			var yynn2552 int
			if yyr2552 || yy2arr2552 {
				r.EncodeArrayStart(1)
			} else {
				yynn2552 = 0
				for _, b := range yyq2552 {
					if b {
						yynn2552++
					}
				}
				r.EncodeMapStart(yynn2552)
				yynn2552 = 0
			}
			if yyr2552 || yy2arr2552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2552[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2554 := z.EncBinary()
						_ = yym2554
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2552[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2555 := z.EncBinary()
						_ = yym2555
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2552 || yy2arr2552 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2556 := z.DecBinary()
	_ = yym2556
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2557 := r.ContainerType()
		if yyct2557 == codecSelferValueTypeMap1234 {
			yyl2557 := r.ReadMapStart()
			if yyl2557 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2557, d)
			}
		} else if yyct2557 == codecSelferValueTypeArray1234 {
			yyl2557 := r.ReadArrayStart()
			if yyl2557 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2557, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2558Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2558Slc
	var yyhl2558 bool = l >= 0
	for yyj2558 := 0; ; yyj2558++ {
		if yyhl2558 {
			if yyj2558 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2558Slc = r.DecodeBytes(yys2558Slc, true, true)
		yys2558 := string(yys2558Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2558 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2559 := &x.Ingress
				yym2560 := z.DecBinary()
				_ = yym2560
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2559), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2558)
		} // end switch yys2558
	} // end for yyj2558
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2561 int
	var yyb2561 bool
	var yyhl2561 bool = l >= 0
	yyj2561++
	if yyhl2561 {
		yyb2561 = yyj2561 > l
	} else {
		yyb2561 = r.CheckBreak()
	}
	if yyb2561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2562 := &x.Ingress
		yym2563 := z.DecBinary()
		_ = yym2563
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2562), d)
		}
	}
	for {
		yyj2561++
		if yyhl2561 {
			yyb2561 = yyj2561 > l
		} else {
			yyb2561 = r.CheckBreak()
		}
		if yyb2561 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2561-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2564 := z.EncBinary()
		_ = yym2564
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2565 := !z.EncBinary()
			yy2arr2565 := z.EncBasicHandle().StructToArray
			var yyq2565 [2]bool
			_, _, _ = yysep2565, yyq2565, yy2arr2565
			const yyr2565 bool = false
			yyq2565[0] = x.IP != ""
			yyq2565[1] = x.Hostname != ""
			var yynn2565 int
			if yyr2565 || yy2arr2565 {
				r.EncodeArrayStart(2)
			} else {
				yynn2565 = 0
				for _, b := range yyq2565 {
					if b {
						yynn2565++
					}
				}
				r.EncodeMapStart(yynn2565)
				yynn2565 = 0
			}
			if yyr2565 || yy2arr2565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2565[0] {
					yym2567 := z.EncBinary()
					_ = yym2567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2565[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2568 := z.EncBinary()
					_ = yym2568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2565 || yy2arr2565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2565[1] {
					yym2570 := z.EncBinary()
					_ = yym2570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2565[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2565 || yy2arr2565 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2572 := z.DecBinary()
	_ = yym2572
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2573 := r.ContainerType()
		if yyct2573 == codecSelferValueTypeMap1234 {
			yyl2573 := r.ReadMapStart()
			if yyl2573 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2573, d)
			}
		} else if yyct2573 == codecSelferValueTypeArray1234 {
			yyl2573 := r.ReadArrayStart()
			if yyl2573 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2573, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2574Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2574Slc
	var yyhl2574 bool = l >= 0
	for yyj2574 := 0; ; yyj2574++ {
		if yyhl2574 {
			if yyj2574 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2574Slc = r.DecodeBytes(yys2574Slc, true, true)
		yys2574 := string(yys2574Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2574 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2574)
		} // end switch yys2574
	} // end for yyj2574
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2577 int
	var yyb2577 bool
	var yyhl2577 bool = l >= 0
	yyj2577++
	if yyhl2577 {
		yyb2577 = yyj2577 > l
	} else {
		yyb2577 = r.CheckBreak()
	}
	if yyb2577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2577++
	if yyhl2577 {
		yyb2577 = yyj2577 > l
	} else {
		yyb2577 = r.CheckBreak()
	}
	if yyb2577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2577++
		if yyhl2577 {
			yyb2577 = yyj2577 > l
		} else {
			yyb2577 = r.CheckBreak()
		}
		if yyb2577 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2577-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2580 := z.EncBinary()
		_ = yym2580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2581 := !z.EncBinary()
			yy2arr2581 := z.EncBasicHandle().StructToArray
			var yyq2581 [10]bool
			_, _, _ = yysep2581, yyq2581, yy2arr2581
			const yyr2581 bool = false
			yyq2581[1] = len(x.Selector) != 0
			yyq2581[2] = x.ClusterIP != ""
			yyq2581[3] = x.Type != ""
			yyq2581[4] = len(x.ExternalIPs) != 0
			yyq2581[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2581[6] = x.SessionAffinity != ""
			yyq2581[7] = x.LoadBalancerIP != ""
			yyq2581[8] = len(x.LoadBalancerSourceRanges) != 0
			yyq2581[9] = x.ExternalName != ""
			var yynn2581 int
			if yyr2581 || yy2arr2581 {
				r.EncodeArrayStart(10)
			} else {
				yynn2581 = 1
				for _, b := range yyq2581 {
					if b {
						yynn2581++
					}
				}
				r.EncodeMapStart(yynn2581)
				yynn2581 = 0
			}
			if yyr2581 || yy2arr2581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2584 := z.EncBinary()
					_ = yym2584
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2581 || yy2arr2581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2581[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2586 := z.EncBinary()
						_ = yym2586
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2581[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2587 := z.EncBinary()
						_ = yym2587
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2581 || yy2arr2581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2581[2] {
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2581[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2581 || yy2arr2581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2581[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2581[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2581 || yy2arr2581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2581[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2593 := z.EncBinary()
						_ = yym2593
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2581[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2594 := z.EncBinary()
						_ = yym2594
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2581 || yy2arr2581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2581[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2596 := z.EncBinary()
						_ = yym2596
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2581[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2597 := z.EncBinary()
						_ = yym2597
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2581 || yy2arr2581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2581[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2581[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2581 || yy2arr2581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2581[7] {
					yym2600 := z.EncBinary()
					_ = yym2600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2581[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2581 || yy2arr2581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2581[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2603 := z.EncBinary()
						_ = yym2603
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2581[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2604 := z.EncBinary()
						_ = yym2604
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2581 || yy2arr2581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2581[9] {
					yym2606 := z.EncBinary()
					_ = yym2606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2581[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2607 := z.EncBinary()
					_ = yym2607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				}
			}
			if yyr2581 || yy2arr2581 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2608 := z.DecBinary()
	_ = yym2608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2609 := r.ContainerType()
		if yyct2609 == codecSelferValueTypeMap1234 {
			yyl2609 := r.ReadMapStart()
			if yyl2609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2609, d)
			}
		} else if yyct2609 == codecSelferValueTypeArray1234 {
			yyl2609 := r.ReadArrayStart()
			if yyl2609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2610Slc
	var yyhl2610 bool = l >= 0
	for yyj2610 := 0; ; yyj2610++ {
		if yyhl2610 {
			if yyj2610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2610Slc = r.DecodeBytes(yys2610Slc, true, true)
		yys2610 := string(yys2610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2610 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2611 := &x.Ports
				yym2612 := z.DecBinary()
				_ = yym2612
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2611), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2613 := &x.Selector
				yym2614 := z.DecBinary()
				_ = yym2614
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2613, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2617 := &x.ExternalIPs
				yym2618 := z.DecBinary()
				_ = yym2618
				if false {
				} else {
					z.F.DecSliceStringX(yyv2617, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2619 := &x.DeprecatedPublicIPs
				yym2620 := z.DecBinary()
				_ = yym2620
				if false {
				} else {
					z.F.DecSliceStringX(yyv2619, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2623 := &x.LoadBalancerSourceRanges
				yym2624 := z.DecBinary()
				_ = yym2624
				if false {
				} else {
					z.F.DecSliceStringX(yyv2623, false, d)
				}
			}
		case "externalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2610)
		} // end switch yys2610
	} // end for yyj2610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2626 int
	var yyb2626 bool
	var yyhl2626 bool = l >= 0
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2627 := &x.Ports
		yym2628 := z.DecBinary()
		_ = yym2628
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2627), d)
		}
	}
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2629 := &x.Selector
		yym2630 := z.DecBinary()
		_ = yym2630
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2629, false, d)
		}
	}
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2633 := &x.ExternalIPs
		yym2634 := z.DecBinary()
		_ = yym2634
		if false {
		} else {
			z.F.DecSliceStringX(yyv2633, false, d)
		}
	}
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2635 := &x.DeprecatedPublicIPs
		yym2636 := z.DecBinary()
		_ = yym2636
		if false {
		} else {
			z.F.DecSliceStringX(yyv2635, false, d)
		}
	}
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2639 := &x.LoadBalancerSourceRanges
		yym2640 := z.DecBinary()
		_ = yym2640
		if false {
		} else {
			z.F.DecSliceStringX(yyv2639, false, d)
		}
	}
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	for {
		yyj2626++
		if yyhl2626 {
			yyb2626 = yyj2626 > l
		} else {
			yyb2626 = r.CheckBreak()
		}
		if yyb2626 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2626-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2642 := z.EncBinary()
		_ = yym2642
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2643 := !z.EncBinary()
			yy2arr2643 := z.EncBasicHandle().StructToArray
			var yyq2643 [5]bool
			_, _, _ = yysep2643, yyq2643, yy2arr2643
			const yyr2643 bool = false
			yyq2643[0] = x.Name != ""
			yyq2643[1] = x.Protocol != ""
			yyq2643[3] = true
			yyq2643[4] = x.NodePort != 0
			var yynn2643 int
			if yyr2643 || yy2arr2643 {
				r.EncodeArrayStart(5)
			} else {
				yynn2643 = 1
				for _, b := range yyq2643 {
					if b {
						yynn2643++
					}
				}
				r.EncodeMapStart(yynn2643)
				yynn2643 = 0
			}
			if yyr2643 || yy2arr2643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2643[0] {
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2643[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2646 := z.EncBinary()
					_ = yym2646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2643 || yy2arr2643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2643[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2643[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2643 || yy2arr2643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2649 := z.EncBinary()
				_ = yym2649
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2650 := z.EncBinary()
				_ = yym2650
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2643 || yy2arr2643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2643[3] {
					yy2652 := &x.TargetPort
					yym2653 := z.EncBinary()
					_ = yym2653
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2652) {
					} else if !yym2653 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2652)
					} else {
						z.EncFallback(yy2652)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2643[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2654 := &x.TargetPort
					yym2655 := z.EncBinary()
					_ = yym2655
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2654) {
					} else if !yym2655 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2654)
					} else {
						z.EncFallback(yy2654)
					}
				}
			}
			if yyr2643 || yy2arr2643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2643[4] {
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2643[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2658 := z.EncBinary()
					_ = yym2658
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2643 || yy2arr2643 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2659 := z.DecBinary()
	_ = yym2659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2660 := r.ContainerType()
		if yyct2660 == codecSelferValueTypeMap1234 {
			yyl2660 := r.ReadMapStart()
			if yyl2660 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2660, d)
			}
		} else if yyct2660 == codecSelferValueTypeArray1234 {
			yyl2660 := r.ReadArrayStart()
			if yyl2660 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2660, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2661Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2661Slc
	var yyhl2661 bool = l >= 0
	for yyj2661 := 0; ; yyj2661++ {
		if yyhl2661 {
			if yyj2661 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2661Slc = r.DecodeBytes(yys2661Slc, true, true)
		yys2661 := string(yys2661Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2661 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2665 := &x.TargetPort
				yym2666 := z.DecBinary()
				_ = yym2666
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2665) {
				} else if !yym2666 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2665)
				} else {
					z.DecFallback(yyv2665, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2661)
		} // end switch yys2661
	} // end for yyj2661
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2668 int
	var yyb2668 bool
	var yyhl2668 bool = l >= 0
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2672 := &x.TargetPort
		yym2673 := z.DecBinary()
		_ = yym2673
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2672) {
		} else if !yym2673 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2672)
		} else {
			z.DecFallback(yyv2672, false)
		}
	}
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2668++
		if yyhl2668 {
			yyb2668 = yyj2668 > l
		} else {
			yyb2668 = r.CheckBreak()
		}
		if yyb2668 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2668-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2675 := z.EncBinary()
		_ = yym2675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2676 := !z.EncBinary()
			yy2arr2676 := z.EncBasicHandle().StructToArray
			var yyq2676 [5]bool
			_, _, _ = yysep2676, yyq2676, yy2arr2676
			const yyr2676 bool = false
			yyq2676[0] = x.Kind != ""
			yyq2676[1] = x.APIVersion != ""
			yyq2676[2] = true
			yyq2676[3] = true
			yyq2676[4] = true
			var yynn2676 int
			if yyr2676 || yy2arr2676 {
				r.EncodeArrayStart(5)
			} else {
				yynn2676 = 0
				for _, b := range yyq2676 {
					if b {
						yynn2676++
					}
				}
				r.EncodeMapStart(yynn2676)
				yynn2676 = 0
			}
			if yyr2676 || yy2arr2676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2676[0] {
					yym2678 := z.EncBinary()
					_ = yym2678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2676[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2679 := z.EncBinary()
					_ = yym2679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2676 || yy2arr2676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2676[1] {
					yym2681 := z.EncBinary()
					_ = yym2681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2676[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2682 := z.EncBinary()
					_ = yym2682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2676 || yy2arr2676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2676[2] {
					yy2684 := &x.ObjectMeta
					yy2684.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2676[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2685 := &x.ObjectMeta
					yy2685.CodecEncodeSelf(e)
				}
			}
			if yyr2676 || yy2arr2676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2676[3] {
					yy2687 := &x.Spec
					yy2687.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2676[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2688 := &x.Spec
					yy2688.CodecEncodeSelf(e)
				}
			}
			if yyr2676 || yy2arr2676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2676[4] {
					yy2690 := &x.Status
					yy2690.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2676[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2691 := &x.Status
					yy2691.CodecEncodeSelf(e)
				}
			}
			if yyr2676 || yy2arr2676 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2692 := z.DecBinary()
	_ = yym2692
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2693 := r.ContainerType()
		if yyct2693 == codecSelferValueTypeMap1234 {
			yyl2693 := r.ReadMapStart()
			if yyl2693 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2693, d)
			}
		} else if yyct2693 == codecSelferValueTypeArray1234 {
			yyl2693 := r.ReadArrayStart()
			if yyl2693 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2693, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2694Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2694Slc
	var yyhl2694 bool = l >= 0
	for yyj2694 := 0; ; yyj2694++ {
		if yyhl2694 {
			if yyj2694 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2694Slc = r.DecodeBytes(yys2694Slc, true, true)
		yys2694 := string(yys2694Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2694 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2697 := &x.ObjectMeta
				yyv2697.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2698 := &x.Spec
				yyv2698.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2699 := &x.Status
				yyv2699.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2694)
		} // end switch yys2694
	} // end for yyj2694
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2700 int
	var yyb2700 bool
	var yyhl2700 bool = l >= 0
	yyj2700++
	if yyhl2700 {
		yyb2700 = yyj2700 > l
	} else {
		yyb2700 = r.CheckBreak()
	}
	if yyb2700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2700++
	if yyhl2700 {
		yyb2700 = yyj2700 > l
	} else {
		yyb2700 = r.CheckBreak()
	}
	if yyb2700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2700++
	if yyhl2700 {
		yyb2700 = yyj2700 > l
	} else {
		yyb2700 = r.CheckBreak()
	}
	if yyb2700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2703 := &x.ObjectMeta
		yyv2703.CodecDecodeSelf(d)
	}
	yyj2700++
	if yyhl2700 {
		yyb2700 = yyj2700 > l
	} else {
		yyb2700 = r.CheckBreak()
	}
	if yyb2700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2704 := &x.Spec
		yyv2704.CodecDecodeSelf(d)
	}
	yyj2700++
	if yyhl2700 {
		yyb2700 = yyj2700 > l
	} else {
		yyb2700 = r.CheckBreak()
	}
	if yyb2700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2705 := &x.Status
		yyv2705.CodecDecodeSelf(d)
	}
	for {
		yyj2700++
		if yyhl2700 {
			yyb2700 = yyj2700 > l
		} else {
			yyb2700 = r.CheckBreak()
		}
		if yyb2700 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2700-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2706 := z.EncBinary()
		_ = yym2706
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2707 := !z.EncBinary()
			yy2arr2707 := z.EncBasicHandle().StructToArray
			var yyq2707 [4]bool
			_, _, _ = yysep2707, yyq2707, yy2arr2707
			const yyr2707 bool = false
			yyq2707[0] = x.Kind != ""
			yyq2707[1] = x.APIVersion != ""
			yyq2707[2] = true
			var yynn2707 int
			if yyr2707 || yy2arr2707 {
				r.EncodeArrayStart(4)
			} else {
				yynn2707 = 1
				for _, b := range yyq2707 {
					if b {
						yynn2707++
					}
				}
				r.EncodeMapStart(yynn2707)
				yynn2707 = 0
			}
			if yyr2707 || yy2arr2707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2707[0] {
					yym2709 := z.EncBinary()
					_ = yym2709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2707[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2707[1] {
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2707[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2713 := z.EncBinary()
					_ = yym2713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2707[2] {
					yy2715 := &x.ListMeta
					yym2716 := z.EncBinary()
					_ = yym2716
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2715) {
					} else {
						z.EncFallback(yy2715)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2707[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2717 := &x.ListMeta
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2717) {
					} else {
						z.EncFallback(yy2717)
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2722 := z.DecBinary()
	_ = yym2722
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2723 := r.ContainerType()
		if yyct2723 == codecSelferValueTypeMap1234 {
			yyl2723 := r.ReadMapStart()
			if yyl2723 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2723, d)
			}
		} else if yyct2723 == codecSelferValueTypeArray1234 {
			yyl2723 := r.ReadArrayStart()
			if yyl2723 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2723, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2724Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2724Slc
	var yyhl2724 bool = l >= 0
	for yyj2724 := 0; ; yyj2724++ {
		if yyhl2724 {
			if yyj2724 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2724Slc = r.DecodeBytes(yys2724Slc, true, true)
		yys2724 := string(yys2724Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2724 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2727 := &x.ListMeta
				yym2728 := z.DecBinary()
				_ = yym2728
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2727) {
				} else {
					z.DecFallback(yyv2727, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2729 := &x.Items
				yym2730 := z.DecBinary()
				_ = yym2730
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2729), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2724)
		} // end switch yys2724
	} // end for yyj2724
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2731 int
	var yyb2731 bool
	var yyhl2731 bool = l >= 0
	yyj2731++
	if yyhl2731 {
		yyb2731 = yyj2731 > l
	} else {
		yyb2731 = r.CheckBreak()
	}
	if yyb2731 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2731++
	if yyhl2731 {
		yyb2731 = yyj2731 > l
	} else {
		yyb2731 = r.CheckBreak()
	}
	if yyb2731 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2731++
	if yyhl2731 {
		yyb2731 = yyj2731 > l
	} else {
		yyb2731 = r.CheckBreak()
	}
	if yyb2731 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2734 := &x.ListMeta
		yym2735 := z.DecBinary()
		_ = yym2735
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2734) {
		} else {
			z.DecFallback(yyv2734, false)
		}
	}
	yyj2731++
	if yyhl2731 {
		yyb2731 = yyj2731 > l
	} else {
		yyb2731 = r.CheckBreak()
	}
	if yyb2731 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2736 := &x.Items
		yym2737 := z.DecBinary()
		_ = yym2737
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2736), d)
		}
	}
	for {
		yyj2731++
		if yyhl2731 {
			yyb2731 = yyj2731 > l
		} else {
			yyb2731 = r.CheckBreak()
		}
		if yyb2731 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2731-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2738 := z.EncBinary()
		_ = yym2738
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2739 := !z.EncBinary()
			yy2arr2739 := z.EncBasicHandle().StructToArray
			var yyq2739 [5]bool
			_, _, _ = yysep2739, yyq2739, yy2arr2739
			const yyr2739 bool = false
			yyq2739[0] = x.Kind != ""
			yyq2739[1] = x.APIVersion != ""
			yyq2739[2] = true
			yyq2739[3] = len(x.Secrets) != 0
			yyq2739[4] = len(x.ImagePullSecrets) != 0
			var yynn2739 int
			if yyr2739 || yy2arr2739 {
				r.EncodeArrayStart(5)
			} else {
				yynn2739 = 0
				for _, b := range yyq2739 {
					if b {
						yynn2739++
					}
				}
				r.EncodeMapStart(yynn2739)
				yynn2739 = 0
			}
			if yyr2739 || yy2arr2739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2739[0] {
					yym2741 := z.EncBinary()
					_ = yym2741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2739[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2742 := z.EncBinary()
					_ = yym2742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2739 || yy2arr2739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2739[1] {
					yym2744 := z.EncBinary()
					_ = yym2744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2739[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2745 := z.EncBinary()
					_ = yym2745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2739 || yy2arr2739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2739[2] {
					yy2747 := &x.ObjectMeta
					yy2747.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2739[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2748 := &x.ObjectMeta
					yy2748.CodecEncodeSelf(e)
				}
			}
			if yyr2739 || yy2arr2739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2739[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2750 := z.EncBinary()
						_ = yym2750
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2739[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2751 := z.EncBinary()
						_ = yym2751
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2739 || yy2arr2739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2739[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2753 := z.EncBinary()
						_ = yym2753
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2739[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2754 := z.EncBinary()
						_ = yym2754
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2739 || yy2arr2739 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2755 := z.DecBinary()
	_ = yym2755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2756 := r.ContainerType()
		if yyct2756 == codecSelferValueTypeMap1234 {
			yyl2756 := r.ReadMapStart()
			if yyl2756 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2756, d)
			}
		} else if yyct2756 == codecSelferValueTypeArray1234 {
			yyl2756 := r.ReadArrayStart()
			if yyl2756 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2756, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2757Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2757Slc
	var yyhl2757 bool = l >= 0
	for yyj2757 := 0; ; yyj2757++ {
		if yyhl2757 {
			if yyj2757 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2757Slc = r.DecodeBytes(yys2757Slc, true, true)
		yys2757 := string(yys2757Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2757 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2760 := &x.ObjectMeta
				yyv2760.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2761 := &x.Secrets
				yym2762 := z.DecBinary()
				_ = yym2762
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2761), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2763 := &x.ImagePullSecrets
				yym2764 := z.DecBinary()
				_ = yym2764
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2763), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2757)
		} // end switch yys2757
	} // end for yyj2757
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2765 int
	var yyb2765 bool
	var yyhl2765 bool = l >= 0
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2768 := &x.ObjectMeta
		yyv2768.CodecDecodeSelf(d)
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2769 := &x.Secrets
		yym2770 := z.DecBinary()
		_ = yym2770
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2769), d)
		}
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2771 := &x.ImagePullSecrets
		yym2772 := z.DecBinary()
		_ = yym2772
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2771), d)
		}
	}
	for {
		yyj2765++
		if yyhl2765 {
			yyb2765 = yyj2765 > l
		} else {
			yyb2765 = r.CheckBreak()
		}
		if yyb2765 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2765-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2773 := z.EncBinary()
		_ = yym2773
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2774 := !z.EncBinary()
			yy2arr2774 := z.EncBasicHandle().StructToArray
			var yyq2774 [4]bool
			_, _, _ = yysep2774, yyq2774, yy2arr2774
			const yyr2774 bool = false
			yyq2774[0] = x.Kind != ""
			yyq2774[1] = x.APIVersion != ""
			yyq2774[2] = true
			var yynn2774 int
			if yyr2774 || yy2arr2774 {
				r.EncodeArrayStart(4)
			} else {
				yynn2774 = 1
				for _, b := range yyq2774 {
					if b {
						yynn2774++
					}
				}
				r.EncodeMapStart(yynn2774)
				yynn2774 = 0
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2774[0] {
					yym2776 := z.EncBinary()
					_ = yym2776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2774[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2777 := z.EncBinary()
					_ = yym2777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2774[1] {
					yym2779 := z.EncBinary()
					_ = yym2779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2774[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2780 := z.EncBinary()
					_ = yym2780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2774[2] {
					yy2782 := &x.ListMeta
					yym2783 := z.EncBinary()
					_ = yym2783
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2782) {
					} else {
						z.EncFallback(yy2782)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2774[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2784 := &x.ListMeta
					yym2785 := z.EncBinary()
					_ = yym2785
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2784) {
					} else {
						z.EncFallback(yy2784)
					}
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2788 := z.EncBinary()
					_ = yym2788
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2789 := z.DecBinary()
	_ = yym2789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2790 := r.ContainerType()
		if yyct2790 == codecSelferValueTypeMap1234 {
			yyl2790 := r.ReadMapStart()
			if yyl2790 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2790, d)
			}
		} else if yyct2790 == codecSelferValueTypeArray1234 {
			yyl2790 := r.ReadArrayStart()
			if yyl2790 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2791Slc
	var yyhl2791 bool = l >= 0
	for yyj2791 := 0; ; yyj2791++ {
		if yyhl2791 {
			if yyj2791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2791Slc = r.DecodeBytes(yys2791Slc, true, true)
		yys2791 := string(yys2791Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2791 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2794 := &x.ListMeta
				yym2795 := z.DecBinary()
				_ = yym2795
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2794) {
				} else {
					z.DecFallback(yyv2794, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2796 := &x.Items
				yym2797 := z.DecBinary()
				_ = yym2797
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2796), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2791)
		} // end switch yys2791
	} // end for yyj2791
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2798 int
	var yyb2798 bool
	var yyhl2798 bool = l >= 0
	yyj2798++
	if yyhl2798 {
		yyb2798 = yyj2798 > l
	} else {
		yyb2798 = r.CheckBreak()
	}
	if yyb2798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2798++
	if yyhl2798 {
		yyb2798 = yyj2798 > l
	} else {
		yyb2798 = r.CheckBreak()
	}
	if yyb2798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2798++
	if yyhl2798 {
		yyb2798 = yyj2798 > l
	} else {
		yyb2798 = r.CheckBreak()
	}
	if yyb2798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2801 := &x.ListMeta
		yym2802 := z.DecBinary()
		_ = yym2802
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2801) {
		} else {
			z.DecFallback(yyv2801, false)
		}
	}
	yyj2798++
	if yyhl2798 {
		yyb2798 = yyj2798 > l
	} else {
		yyb2798 = r.CheckBreak()
	}
	if yyb2798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2803 := &x.Items
		yym2804 := z.DecBinary()
		_ = yym2804
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2803), d)
		}
	}
	for {
		yyj2798++
		if yyhl2798 {
			yyb2798 = yyj2798 > l
		} else {
			yyb2798 = r.CheckBreak()
		}
		if yyb2798 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2798-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2805 := z.EncBinary()
		_ = yym2805
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2806 := !z.EncBinary()
			yy2arr2806 := z.EncBasicHandle().StructToArray
			var yyq2806 [4]bool
			_, _, _ = yysep2806, yyq2806, yy2arr2806
			const yyr2806 bool = false
			yyq2806[0] = x.Kind != ""
			yyq2806[1] = x.APIVersion != ""
			yyq2806[2] = true
			var yynn2806 int
			if yyr2806 || yy2arr2806 {
				r.EncodeArrayStart(4)
			} else {
				yynn2806 = 1
				for _, b := range yyq2806 {
					if b {
						yynn2806++
					}
				}
				r.EncodeMapStart(yynn2806)
				yynn2806 = 0
			}
			if yyr2806 || yy2arr2806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2806[0] {
					yym2808 := z.EncBinary()
					_ = yym2808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2806[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2806 || yy2arr2806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2806[1] {
					yym2811 := z.EncBinary()
					_ = yym2811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2806[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2806 || yy2arr2806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2806[2] {
					yy2814 := &x.ObjectMeta
					yy2814.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2806[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2815 := &x.ObjectMeta
					yy2815.CodecEncodeSelf(e)
				}
			}
			if yyr2806 || yy2arr2806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2817 := z.EncBinary()
					_ = yym2817
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2806 || yy2arr2806 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2819 := z.DecBinary()
	_ = yym2819
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2820 := r.ContainerType()
		if yyct2820 == codecSelferValueTypeMap1234 {
			yyl2820 := r.ReadMapStart()
			if yyl2820 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2820, d)
			}
		} else if yyct2820 == codecSelferValueTypeArray1234 {
			yyl2820 := r.ReadArrayStart()
			if yyl2820 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2820, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2821Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2821Slc
	var yyhl2821 bool = l >= 0
	for yyj2821 := 0; ; yyj2821++ {
		if yyhl2821 {
			if yyj2821 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2821Slc = r.DecodeBytes(yys2821Slc, true, true)
		yys2821 := string(yys2821Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2821 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2824 := &x.ObjectMeta
				yyv2824.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2825 := &x.Subsets
				yym2826 := z.DecBinary()
				_ = yym2826
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2825), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2821)
		} // end switch yys2821
	} // end for yyj2821
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2827 int
	var yyb2827 bool
	var yyhl2827 bool = l >= 0
	yyj2827++
	if yyhl2827 {
		yyb2827 = yyj2827 > l
	} else {
		yyb2827 = r.CheckBreak()
	}
	if yyb2827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2827++
	if yyhl2827 {
		yyb2827 = yyj2827 > l
	} else {
		yyb2827 = r.CheckBreak()
	}
	if yyb2827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2827++
	if yyhl2827 {
		yyb2827 = yyj2827 > l
	} else {
		yyb2827 = r.CheckBreak()
	}
	if yyb2827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2830 := &x.ObjectMeta
		yyv2830.CodecDecodeSelf(d)
	}
	yyj2827++
	if yyhl2827 {
		yyb2827 = yyj2827 > l
	} else {
		yyb2827 = r.CheckBreak()
	}
	if yyb2827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2831 := &x.Subsets
		yym2832 := z.DecBinary()
		_ = yym2832
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2831), d)
		}
	}
	for {
		yyj2827++
		if yyhl2827 {
			yyb2827 = yyj2827 > l
		} else {
			yyb2827 = r.CheckBreak()
		}
		if yyb2827 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2827-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2833 := z.EncBinary()
		_ = yym2833
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2834 := !z.EncBinary()
			yy2arr2834 := z.EncBasicHandle().StructToArray
			var yyq2834 [3]bool
			_, _, _ = yysep2834, yyq2834, yy2arr2834
			const yyr2834 bool = false
			yyq2834[0] = len(x.Addresses) != 0
			yyq2834[1] = len(x.NotReadyAddresses) != 0
			yyq2834[2] = len(x.Ports) != 0
			var yynn2834 int
			if yyr2834 || yy2arr2834 {
				r.EncodeArrayStart(3)
			} else {
				yynn2834 = 0
				for _, b := range yyq2834 {
					if b {
						yynn2834++
					}
				}
				r.EncodeMapStart(yynn2834)
				yynn2834 = 0
			}
			if yyr2834 || yy2arr2834 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2834[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2836 := z.EncBinary()
						_ = yym2836
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2834[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2837 := z.EncBinary()
						_ = yym2837
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2834 || yy2arr2834 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2834[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2839 := z.EncBinary()
						_ = yym2839
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2834[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2840 := z.EncBinary()
						_ = yym2840
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2834 || yy2arr2834 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2834[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2842 := z.EncBinary()
						_ = yym2842
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2834[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2843 := z.EncBinary()
						_ = yym2843
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2834 || yy2arr2834 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2844 := z.DecBinary()
	_ = yym2844
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2845 := r.ContainerType()
		if yyct2845 == codecSelferValueTypeMap1234 {
			yyl2845 := r.ReadMapStart()
			if yyl2845 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2845, d)
			}
		} else if yyct2845 == codecSelferValueTypeArray1234 {
			yyl2845 := r.ReadArrayStart()
			if yyl2845 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2845, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2846Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2846Slc
	var yyhl2846 bool = l >= 0
	for yyj2846 := 0; ; yyj2846++ {
		if yyhl2846 {
			if yyj2846 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2846Slc = r.DecodeBytes(yys2846Slc, true, true)
		yys2846 := string(yys2846Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2846 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2847 := &x.Addresses
				yym2848 := z.DecBinary()
				_ = yym2848
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2847), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2849 := &x.NotReadyAddresses
				yym2850 := z.DecBinary()
				_ = yym2850
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2849), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2851 := &x.Ports
				yym2852 := z.DecBinary()
				_ = yym2852
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2851), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2846)
		} // end switch yys2846
	} // end for yyj2846
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2853 int
	var yyb2853 bool
	var yyhl2853 bool = l >= 0
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2854 := &x.Addresses
		yym2855 := z.DecBinary()
		_ = yym2855
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2854), d)
		}
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2856 := &x.NotReadyAddresses
		yym2857 := z.DecBinary()
		_ = yym2857
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2856), d)
		}
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2858 := &x.Ports
		yym2859 := z.DecBinary()
		_ = yym2859
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2858), d)
		}
	}
	for {
		yyj2853++
		if yyhl2853 {
			yyb2853 = yyj2853 > l
		} else {
			yyb2853 = r.CheckBreak()
		}
		if yyb2853 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2853-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2860 := z.EncBinary()
		_ = yym2860
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2861 := !z.EncBinary()
			yy2arr2861 := z.EncBasicHandle().StructToArray
			var yyq2861 [4]bool
			_, _, _ = yysep2861, yyq2861, yy2arr2861
			const yyr2861 bool = false
			yyq2861[1] = x.Hostname != ""
			yyq2861[2] = x.NodeName != nil
			yyq2861[3] = x.TargetRef != nil
			var yynn2861 int
			if yyr2861 || yy2arr2861 {
				r.EncodeArrayStart(4)
			} else {
				yynn2861 = 1
				for _, b := range yyq2861 {
					if b {
						yynn2861++
					}
				}
				r.EncodeMapStart(yynn2861)
				yynn2861 = 0
			}
			if yyr2861 || yy2arr2861 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2863 := z.EncBinary()
				_ = yym2863
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2864 := z.EncBinary()
				_ = yym2864
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2861 || yy2arr2861 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2861[1] {
					yym2866 := z.EncBinary()
					_ = yym2866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2861[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2867 := z.EncBinary()
					_ = yym2867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2861 || yy2arr2861 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2861[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2869 := *x.NodeName
						yym2870 := z.EncBinary()
						_ = yym2870
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2869))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2861[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2871 := *x.NodeName
						yym2872 := z.EncBinary()
						_ = yym2872
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2871))
						}
					}
				}
			}
			if yyr2861 || yy2arr2861 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2861[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2861[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2861 || yy2arr2861 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2874 := z.DecBinary()
	_ = yym2874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2875 := r.ContainerType()
		if yyct2875 == codecSelferValueTypeMap1234 {
			yyl2875 := r.ReadMapStart()
			if yyl2875 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2875, d)
			}
		} else if yyct2875 == codecSelferValueTypeArray1234 {
			yyl2875 := r.ReadArrayStart()
			if yyl2875 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2876Slc
	var yyhl2876 bool = l >= 0
	for yyj2876 := 0; ; yyj2876++ {
		if yyhl2876 {
			if yyj2876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2876Slc = r.DecodeBytes(yys2876Slc, true, true)
		yys2876 := string(yys2876Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2876 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2880 := z.DecBinary()
				_ = yym2880
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2876)
		} // end switch yys2876
	} // end for yyj2876
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2882 int
	var yyb2882 bool
	var yyhl2882 bool = l >= 0
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2886 := z.DecBinary()
		_ = yym2886
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2882++
		if yyhl2882 {
			yyb2882 = yyj2882 > l
		} else {
			yyb2882 = r.CheckBreak()
		}
		if yyb2882 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2882-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2888 := z.EncBinary()
		_ = yym2888
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2889 := !z.EncBinary()
			yy2arr2889 := z.EncBasicHandle().StructToArray
			var yyq2889 [3]bool
			_, _, _ = yysep2889, yyq2889, yy2arr2889
			const yyr2889 bool = false
			yyq2889[0] = x.Name != ""
			yyq2889[2] = x.Protocol != ""
			var yynn2889 int
			if yyr2889 || yy2arr2889 {
				r.EncodeArrayStart(3)
			} else {
				yynn2889 = 1
				for _, b := range yyq2889 {
					if b {
						yynn2889++
					}
				}
				r.EncodeMapStart(yynn2889)
				yynn2889 = 0
			}
			if yyr2889 || yy2arr2889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2889[0] {
					yym2891 := z.EncBinary()
					_ = yym2891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2889[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2892 := z.EncBinary()
					_ = yym2892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2889 || yy2arr2889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2894 := z.EncBinary()
				_ = yym2894
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2895 := z.EncBinary()
				_ = yym2895
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2889 || yy2arr2889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2889[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2889[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2889 || yy2arr2889 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2897 := z.DecBinary()
	_ = yym2897
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2898 := r.ContainerType()
		if yyct2898 == codecSelferValueTypeMap1234 {
			yyl2898 := r.ReadMapStart()
			if yyl2898 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2898, d)
			}
		} else if yyct2898 == codecSelferValueTypeArray1234 {
			yyl2898 := r.ReadArrayStart()
			if yyl2898 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2898, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2899Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2899Slc
	var yyhl2899 bool = l >= 0
	for yyj2899 := 0; ; yyj2899++ {
		if yyhl2899 {
			if yyj2899 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2899Slc = r.DecodeBytes(yys2899Slc, true, true)
		yys2899 := string(yys2899Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2899 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2899)
		} // end switch yys2899
	} // end for yyj2899
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2903 int
	var yyb2903 bool
	var yyhl2903 bool = l >= 0
	yyj2903++
	if yyhl2903 {
		yyb2903 = yyj2903 > l
	} else {
		yyb2903 = r.CheckBreak()
	}
	if yyb2903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2903++
	if yyhl2903 {
		yyb2903 = yyj2903 > l
	} else {
		yyb2903 = r.CheckBreak()
	}
	if yyb2903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2903++
	if yyhl2903 {
		yyb2903 = yyj2903 > l
	} else {
		yyb2903 = r.CheckBreak()
	}
	if yyb2903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2903++
		if yyhl2903 {
			yyb2903 = yyj2903 > l
		} else {
			yyb2903 = r.CheckBreak()
		}
		if yyb2903 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2903-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2907 := z.EncBinary()
		_ = yym2907
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2908 := !z.EncBinary()
			yy2arr2908 := z.EncBasicHandle().StructToArray
			var yyq2908 [4]bool
			_, _, _ = yysep2908, yyq2908, yy2arr2908
			const yyr2908 bool = false
			yyq2908[0] = x.Kind != ""
			yyq2908[1] = x.APIVersion != ""
			yyq2908[2] = true
			var yynn2908 int
			if yyr2908 || yy2arr2908 {
				r.EncodeArrayStart(4)
			} else {
				yynn2908 = 1
				for _, b := range yyq2908 {
					if b {
						yynn2908++
					}
				}
				r.EncodeMapStart(yynn2908)
				yynn2908 = 0
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[0] {
					yym2910 := z.EncBinary()
					_ = yym2910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2908[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2911 := z.EncBinary()
					_ = yym2911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[1] {
					yym2913 := z.EncBinary()
					_ = yym2913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2908[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[2] {
					yy2916 := &x.ListMeta
					yym2917 := z.EncBinary()
					_ = yym2917
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2916) {
					} else {
						z.EncFallback(yy2916)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2908[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2918 := &x.ListMeta
					yym2919 := z.EncBinary()
					_ = yym2919
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2918) {
					} else {
						z.EncFallback(yy2918)
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2921 := z.EncBinary()
					_ = yym2921
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2922 := z.EncBinary()
					_ = yym2922
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2923 := z.DecBinary()
	_ = yym2923
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2924 := r.ContainerType()
		if yyct2924 == codecSelferValueTypeMap1234 {
			yyl2924 := r.ReadMapStart()
			if yyl2924 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2924, d)
			}
		} else if yyct2924 == codecSelferValueTypeArray1234 {
			yyl2924 := r.ReadArrayStart()
			if yyl2924 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2924, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2925Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2925Slc
	var yyhl2925 bool = l >= 0
	for yyj2925 := 0; ; yyj2925++ {
		if yyhl2925 {
			if yyj2925 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2925Slc = r.DecodeBytes(yys2925Slc, true, true)
		yys2925 := string(yys2925Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2925 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2928 := &x.ListMeta
				yym2929 := z.DecBinary()
				_ = yym2929
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2928) {
				} else {
					z.DecFallback(yyv2928, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2930 := &x.Items
				yym2931 := z.DecBinary()
				_ = yym2931
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2930), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2925)
		} // end switch yys2925
	} // end for yyj2925
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2932 int
	var yyb2932 bool
	var yyhl2932 bool = l >= 0
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2935 := &x.ListMeta
		yym2936 := z.DecBinary()
		_ = yym2936
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2935) {
		} else {
			z.DecFallback(yyv2935, false)
		}
	}
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2937 := &x.Items
		yym2938 := z.DecBinary()
		_ = yym2938
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2937), d)
		}
	}
	for {
		yyj2932++
		if yyhl2932 {
			yyb2932 = yyj2932 > l
		} else {
			yyb2932 = r.CheckBreak()
		}
		if yyb2932 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2932-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2939 := z.EncBinary()
		_ = yym2939
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2940 := !z.EncBinary()
			yy2arr2940 := z.EncBasicHandle().StructToArray
			var yyq2940 [4]bool
			_, _, _ = yysep2940, yyq2940, yy2arr2940
			const yyr2940 bool = false
			yyq2940[0] = x.PodCIDR != ""
			yyq2940[1] = x.ExternalID != ""
			yyq2940[2] = x.ProviderID != ""
			yyq2940[3] = x.Unschedulable != false
			var yynn2940 int
			if yyr2940 || yy2arr2940 {
				r.EncodeArrayStart(4)
			} else {
				yynn2940 = 0
				for _, b := range yyq2940 {
					if b {
						yynn2940++
					}
				}
				r.EncodeMapStart(yynn2940)
				yynn2940 = 0
			}
			if yyr2940 || yy2arr2940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2940[0] {
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2940[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2940 || yy2arr2940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2940[1] {
					yym2945 := z.EncBinary()
					_ = yym2945
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2940[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2946 := z.EncBinary()
					_ = yym2946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2940 || yy2arr2940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2940[2] {
					yym2948 := z.EncBinary()
					_ = yym2948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2940[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2949 := z.EncBinary()
					_ = yym2949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2940 || yy2arr2940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2940[3] {
					yym2951 := z.EncBinary()
					_ = yym2951
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2940[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2940 || yy2arr2940 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2953 := z.DecBinary()
	_ = yym2953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2954 := r.ContainerType()
		if yyct2954 == codecSelferValueTypeMap1234 {
			yyl2954 := r.ReadMapStart()
			if yyl2954 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2954, d)
			}
		} else if yyct2954 == codecSelferValueTypeArray1234 {
			yyl2954 := r.ReadArrayStart()
			if yyl2954 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2955Slc
	var yyhl2955 bool = l >= 0
	for yyj2955 := 0; ; yyj2955++ {
		if yyhl2955 {
			if yyj2955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2955Slc = r.DecodeBytes(yys2955Slc, true, true)
		yys2955 := string(yys2955Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2955 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2955)
		} // end switch yys2955
	} // end for yyj2955
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2960 int
	var yyb2960 bool
	var yyhl2960 bool = l >= 0
	yyj2960++
	if yyhl2960 {
		yyb2960 = yyj2960 > l
	} else {
		yyb2960 = r.CheckBreak()
	}
	if yyb2960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2960++
	if yyhl2960 {
		yyb2960 = yyj2960 > l
	} else {
		yyb2960 = r.CheckBreak()
	}
	if yyb2960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2960++
	if yyhl2960 {
		yyb2960 = yyj2960 > l
	} else {
		yyb2960 = r.CheckBreak()
	}
	if yyb2960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2960++
	if yyhl2960 {
		yyb2960 = yyj2960 > l
	} else {
		yyb2960 = r.CheckBreak()
	}
	if yyb2960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2960++
		if yyhl2960 {
			yyb2960 = yyj2960 > l
		} else {
			yyb2960 = r.CheckBreak()
		}
		if yyb2960 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2960-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2965 := z.EncBinary()
		_ = yym2965
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2966 := !z.EncBinary()
			yy2arr2966 := z.EncBasicHandle().StructToArray
			var yyq2966 [1]bool
			_, _, _ = yysep2966, yyq2966, yy2arr2966
			const yyr2966 bool = false
			var yynn2966 int
			if yyr2966 || yy2arr2966 {
				r.EncodeArrayStart(1)
			} else {
				yynn2966 = 1
				for _, b := range yyq2966 {
					if b {
						yynn2966++
					}
				}
				r.EncodeMapStart(yynn2966)
				yynn2966 = 0
			}
			if yyr2966 || yy2arr2966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2968 := z.EncBinary()
				_ = yym2968
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2969 := z.EncBinary()
				_ = yym2969
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2966 || yy2arr2966 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2970 := z.DecBinary()
	_ = yym2970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2971 := r.ContainerType()
		if yyct2971 == codecSelferValueTypeMap1234 {
			yyl2971 := r.ReadMapStart()
			if yyl2971 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2971, d)
			}
		} else if yyct2971 == codecSelferValueTypeArray1234 {
			yyl2971 := r.ReadArrayStart()
			if yyl2971 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2972Slc
	var yyhl2972 bool = l >= 0
	for yyj2972 := 0; ; yyj2972++ {
		if yyhl2972 {
			if yyj2972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2972Slc = r.DecodeBytes(yys2972Slc, true, true)
		yys2972 := string(yys2972Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2972 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2972)
		} // end switch yys2972
	} // end for yyj2972
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2974 int
	var yyb2974 bool
	var yyhl2974 bool = l >= 0
	yyj2974++
	if yyhl2974 {
		yyb2974 = yyj2974 > l
	} else {
		yyb2974 = r.CheckBreak()
	}
	if yyb2974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2974++
		if yyhl2974 {
			yyb2974 = yyj2974 > l
		} else {
			yyb2974 = r.CheckBreak()
		}
		if yyb2974 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2974-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2976 := z.EncBinary()
		_ = yym2976
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2977 := !z.EncBinary()
			yy2arr2977 := z.EncBasicHandle().StructToArray
			var yyq2977 [1]bool
			_, _, _ = yysep2977, yyq2977, yy2arr2977
			const yyr2977 bool = false
			yyq2977[0] = true
			var yynn2977 int
			if yyr2977 || yy2arr2977 {
				r.EncodeArrayStart(1)
			} else {
				yynn2977 = 0
				for _, b := range yyq2977 {
					if b {
						yynn2977++
					}
				}
				r.EncodeMapStart(yynn2977)
				yynn2977 = 0
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2977[0] {
					yy2979 := &x.KubeletEndpoint
					yy2979.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2977[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2980 := &x.KubeletEndpoint
					yy2980.CodecEncodeSelf(e)
				}
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2981 := z.DecBinary()
	_ = yym2981
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2982 := r.ContainerType()
		if yyct2982 == codecSelferValueTypeMap1234 {
			yyl2982 := r.ReadMapStart()
			if yyl2982 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2982, d)
			}
		} else if yyct2982 == codecSelferValueTypeArray1234 {
			yyl2982 := r.ReadArrayStart()
			if yyl2982 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2982, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2983Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2983Slc
	var yyhl2983 bool = l >= 0
	for yyj2983 := 0; ; yyj2983++ {
		if yyhl2983 {
			if yyj2983 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2983Slc = r.DecodeBytes(yys2983Slc, true, true)
		yys2983 := string(yys2983Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2983 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2984 := &x.KubeletEndpoint
				yyv2984.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2983)
		} // end switch yys2983
	} // end for yyj2983
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2985 int
	var yyb2985 bool
	var yyhl2985 bool = l >= 0
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2986 := &x.KubeletEndpoint
		yyv2986.CodecDecodeSelf(d)
	}
	for {
		yyj2985++
		if yyhl2985 {
			yyb2985 = yyj2985 > l
		} else {
			yyb2985 = r.CheckBreak()
		}
		if yyb2985 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2985-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2987 := z.EncBinary()
		_ = yym2987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2988 := !z.EncBinary()
			yy2arr2988 := z.EncBasicHandle().StructToArray
			var yyq2988 [10]bool
			_, _, _ = yysep2988, yyq2988, yy2arr2988
			const yyr2988 bool = false
			var yynn2988 int
			if yyr2988 || yy2arr2988 {
				r.EncodeArrayStart(10)
			} else {
				yynn2988 = 10
				for _, b := range yyq2988 {
					if b {
						yynn2988++
					}
				}
				r.EncodeMapStart(yynn2988)
				yynn2988 = 0
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2990 := z.EncBinary()
				_ = yym2990
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2991 := z.EncBinary()
				_ = yym2991
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2993 := z.EncBinary()
				_ = yym2993
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2994 := z.EncBinary()
				_ = yym2994
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2996 := z.EncBinary()
				_ = yym2996
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2997 := z.EncBinary()
				_ = yym2997
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2999 := z.EncBinary()
				_ = yym2999
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3000 := z.EncBinary()
				_ = yym3000
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3002 := z.EncBinary()
				_ = yym3002
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3003 := z.EncBinary()
				_ = yym3003
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3005 := z.EncBinary()
				_ = yym3005
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3006 := z.EncBinary()
				_ = yym3006
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3008 := z.EncBinary()
				_ = yym3008
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3009 := z.EncBinary()
				_ = yym3009
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3011 := z.EncBinary()
				_ = yym3011
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3012 := z.EncBinary()
				_ = yym3012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3014 := z.EncBinary()
				_ = yym3014
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3015 := z.EncBinary()
				_ = yym3015
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3017 := z.EncBinary()
				_ = yym3017
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3018 := z.EncBinary()
				_ = yym3018
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3019 := z.DecBinary()
	_ = yym3019
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3020 := r.ContainerType()
		if yyct3020 == codecSelferValueTypeMap1234 {
			yyl3020 := r.ReadMapStart()
			if yyl3020 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3020, d)
			}
		} else if yyct3020 == codecSelferValueTypeArray1234 {
			yyl3020 := r.ReadArrayStart()
			if yyl3020 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3020, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3021Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3021Slc
	var yyhl3021 bool = l >= 0
	for yyj3021 := 0; ; yyj3021++ {
		if yyhl3021 {
			if yyj3021 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3021Slc = r.DecodeBytes(yys3021Slc, true, true)
		yys3021 := string(yys3021Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3021 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3021)
		} // end switch yys3021
	} // end for yyj3021
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3032 int
	var yyb3032 bool
	var yyhl3032 bool = l >= 0
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3032++
		if yyhl3032 {
			yyb3032 = yyj3032 > l
		} else {
			yyb3032 = r.CheckBreak()
		}
		if yyb3032 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3032-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3043 := z.EncBinary()
		_ = yym3043
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3044 := !z.EncBinary()
			yy2arr3044 := z.EncBasicHandle().StructToArray
			var yyq3044 [10]bool
			_, _, _ = yysep3044, yyq3044, yy2arr3044
			const yyr3044 bool = false
			yyq3044[0] = len(x.Capacity) != 0
			yyq3044[1] = len(x.Allocatable) != 0
			yyq3044[2] = x.Phase != ""
			yyq3044[3] = len(x.Conditions) != 0
			yyq3044[4] = len(x.Addresses) != 0
			yyq3044[5] = true
			yyq3044[6] = true
			yyq3044[7] = len(x.Images) != 0
			yyq3044[8] = len(x.VolumesInUse) != 0
			yyq3044[9] = len(x.VolumesAttached) != 0
			var yynn3044 int
			if yyr3044 || yy2arr3044 {
				r.EncodeArrayStart(10)
			} else {
				yynn3044 = 0
				for _, b := range yyq3044 {
					if b {
						yynn3044++
					}
				}
				r.EncodeMapStart(yynn3044)
				yynn3044 = 0
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3044[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3044[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3044[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3044[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3044[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3049 := z.EncBinary()
						_ = yym3049
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3050 := z.EncBinary()
						_ = yym3050
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3044[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3052 := z.EncBinary()
						_ = yym3052
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3053 := z.EncBinary()
						_ = yym3053
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3044[5] {
					yy3055 := &x.DaemonEndpoints
					yy3055.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3056 := &x.DaemonEndpoints
					yy3056.CodecEncodeSelf(e)
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3044[6] {
					yy3058 := &x.NodeInfo
					yy3058.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3059 := &x.NodeInfo
					yy3059.CodecEncodeSelf(e)
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3044[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3061 := z.EncBinary()
						_ = yym3061
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3062 := z.EncBinary()
						_ = yym3062
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3044[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3064 := z.EncBinary()
						_ = yym3064
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3065 := z.EncBinary()
						_ = yym3065
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3044[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3067 := z.EncBinary()
						_ = yym3067
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3068 := z.EncBinary()
						_ = yym3068
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3069 := z.DecBinary()
	_ = yym3069
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3070 := r.ContainerType()
		if yyct3070 == codecSelferValueTypeMap1234 {
			yyl3070 := r.ReadMapStart()
			if yyl3070 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3070, d)
			}
		} else if yyct3070 == codecSelferValueTypeArray1234 {
			yyl3070 := r.ReadArrayStart()
			if yyl3070 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3070, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3071Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3071Slc
	var yyhl3071 bool = l >= 0
	for yyj3071 := 0; ; yyj3071++ {
		if yyhl3071 {
			if yyj3071 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3071Slc = r.DecodeBytes(yys3071Slc, true, true)
		yys3071 := string(yys3071Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3071 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3072 := &x.Capacity
				yyv3072.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3073 := &x.Allocatable
				yyv3073.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3075 := &x.Conditions
				yym3076 := z.DecBinary()
				_ = yym3076
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3075), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3077 := &x.Addresses
				yym3078 := z.DecBinary()
				_ = yym3078
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3077), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3079 := &x.DaemonEndpoints
				yyv3079.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3080 := &x.NodeInfo
				yyv3080.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3081 := &x.Images
				yym3082 := z.DecBinary()
				_ = yym3082
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3081), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3083 := &x.VolumesInUse
				yym3084 := z.DecBinary()
				_ = yym3084
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3083), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3085 := &x.VolumesAttached
				yym3086 := z.DecBinary()
				_ = yym3086
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3085), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3071)
		} // end switch yys3071
	} // end for yyj3071
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3087 int
	var yyb3087 bool
	var yyhl3087 bool = l >= 0
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3088 := &x.Capacity
		yyv3088.CodecDecodeSelf(d)
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3089 := &x.Allocatable
		yyv3089.CodecDecodeSelf(d)
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3091 := &x.Conditions
		yym3092 := z.DecBinary()
		_ = yym3092
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3091), d)
		}
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3093 := &x.Addresses
		yym3094 := z.DecBinary()
		_ = yym3094
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3093), d)
		}
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3095 := &x.DaemonEndpoints
		yyv3095.CodecDecodeSelf(d)
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3096 := &x.NodeInfo
		yyv3096.CodecDecodeSelf(d)
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3097 := &x.Images
		yym3098 := z.DecBinary()
		_ = yym3098
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3097), d)
		}
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3099 := &x.VolumesInUse
		yym3100 := z.DecBinary()
		_ = yym3100
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3099), d)
		}
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3101 := &x.VolumesAttached
		yym3102 := z.DecBinary()
		_ = yym3102
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3101), d)
		}
	}
	for {
		yyj3087++
		if yyhl3087 {
			yyb3087 = yyj3087 > l
		} else {
			yyb3087 = r.CheckBreak()
		}
		if yyb3087 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3087-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3103 := z.EncBinary()
	_ = yym3103
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3104 := z.DecBinary()
	_ = yym3104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3105 := z.EncBinary()
		_ = yym3105
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3106 := !z.EncBinary()
			yy2arr3106 := z.EncBasicHandle().StructToArray
			var yyq3106 [2]bool
			_, _, _ = yysep3106, yyq3106, yy2arr3106
			const yyr3106 bool = false
			var yynn3106 int
			if yyr3106 || yy2arr3106 {
				r.EncodeArrayStart(2)
			} else {
				yynn3106 = 2
				for _, b := range yyq3106 {
					if b {
						yynn3106++
					}
				}
				r.EncodeMapStart(yynn3106)
				yynn3106 = 0
			}
			if yyr3106 || yy2arr3106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3106 || yy2arr3106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3109 := z.EncBinary()
				_ = yym3109
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3110 := z.EncBinary()
				_ = yym3110
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3106 || yy2arr3106 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3111 := z.DecBinary()
	_ = yym3111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3112 := r.ContainerType()
		if yyct3112 == codecSelferValueTypeMap1234 {
			yyl3112 := r.ReadMapStart()
			if yyl3112 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3112, d)
			}
		} else if yyct3112 == codecSelferValueTypeArray1234 {
			yyl3112 := r.ReadArrayStart()
			if yyl3112 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3112, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3113Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3113Slc
	var yyhl3113 bool = l >= 0
	for yyj3113 := 0; ; yyj3113++ {
		if yyhl3113 {
			if yyj3113 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3113Slc = r.DecodeBytes(yys3113Slc, true, true)
		yys3113 := string(yys3113Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3113 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3113)
		} // end switch yys3113
	} // end for yyj3113
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3116 int
	var yyb3116 bool
	var yyhl3116 bool = l >= 0
	yyj3116++
	if yyhl3116 {
		yyb3116 = yyj3116 > l
	} else {
		yyb3116 = r.CheckBreak()
	}
	if yyb3116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3116++
	if yyhl3116 {
		yyb3116 = yyj3116 > l
	} else {
		yyb3116 = r.CheckBreak()
	}
	if yyb3116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3116++
		if yyhl3116 {
			yyb3116 = yyj3116 > l
		} else {
			yyb3116 = r.CheckBreak()
		}
		if yyb3116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3119 := z.EncBinary()
		_ = yym3119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3120 := !z.EncBinary()
			yy2arr3120 := z.EncBasicHandle().StructToArray
			var yyq3120 [1]bool
			_, _, _ = yysep3120, yyq3120, yy2arr3120
			const yyr3120 bool = false
			yyq3120[0] = len(x.PreferAvoidPods) != 0
			var yynn3120 int
			if yyr3120 || yy2arr3120 {
				r.EncodeArrayStart(1)
			} else {
				yynn3120 = 0
				for _, b := range yyq3120 {
					if b {
						yynn3120++
					}
				}
				r.EncodeMapStart(yynn3120)
				yynn3120 = 0
			}
			if yyr3120 || yy2arr3120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3120[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3122 := z.EncBinary()
						_ = yym3122
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3120[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3123 := z.EncBinary()
						_ = yym3123
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3120 || yy2arr3120 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3124 := z.DecBinary()
	_ = yym3124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3125 := r.ContainerType()
		if yyct3125 == codecSelferValueTypeMap1234 {
			yyl3125 := r.ReadMapStart()
			if yyl3125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3125, d)
			}
		} else if yyct3125 == codecSelferValueTypeArray1234 {
			yyl3125 := r.ReadArrayStart()
			if yyl3125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3126Slc
	var yyhl3126 bool = l >= 0
	for yyj3126 := 0; ; yyj3126++ {
		if yyhl3126 {
			if yyj3126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3126Slc = r.DecodeBytes(yys3126Slc, true, true)
		yys3126 := string(yys3126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3126 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3127 := &x.PreferAvoidPods
				yym3128 := z.DecBinary()
				_ = yym3128
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3127), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3126)
		} // end switch yys3126
	} // end for yyj3126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3129 int
	var yyb3129 bool
	var yyhl3129 bool = l >= 0
	yyj3129++
	if yyhl3129 {
		yyb3129 = yyj3129 > l
	} else {
		yyb3129 = r.CheckBreak()
	}
	if yyb3129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3130 := &x.PreferAvoidPods
		yym3131 := z.DecBinary()
		_ = yym3131
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3130), d)
		}
	}
	for {
		yyj3129++
		if yyhl3129 {
			yyb3129 = yyj3129 > l
		} else {
			yyb3129 = r.CheckBreak()
		}
		if yyb3129 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3129-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3132 := z.EncBinary()
		_ = yym3132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3133 := !z.EncBinary()
			yy2arr3133 := z.EncBasicHandle().StructToArray
			var yyq3133 [4]bool
			_, _, _ = yysep3133, yyq3133, yy2arr3133
			const yyr3133 bool = false
			yyq3133[1] = true
			yyq3133[2] = x.Reason != ""
			yyq3133[3] = x.Message != ""
			var yynn3133 int
			if yyr3133 || yy2arr3133 {
				r.EncodeArrayStart(4)
			} else {
				yynn3133 = 1
				for _, b := range yyq3133 {
					if b {
						yynn3133++
					}
				}
				r.EncodeMapStart(yynn3133)
				yynn3133 = 0
			}
			if yyr3133 || yy2arr3133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3135 := &x.PodSignature
				yy3135.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3136 := &x.PodSignature
				yy3136.CodecEncodeSelf(e)
			}
			if yyr3133 || yy2arr3133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3133[1] {
					yy3138 := &x.EvictionTime
					yym3139 := z.EncBinary()
					_ = yym3139
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3138) {
					} else if yym3139 {
						z.EncBinaryMarshal(yy3138)
					} else if !yym3139 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3138)
					} else {
						z.EncFallback(yy3138)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3133[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3140 := &x.EvictionTime
					yym3141 := z.EncBinary()
					_ = yym3141
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3140) {
					} else if yym3141 {
						z.EncBinaryMarshal(yy3140)
					} else if !yym3141 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3140)
					} else {
						z.EncFallback(yy3140)
					}
				}
			}
			if yyr3133 || yy2arr3133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3133[2] {
					yym3143 := z.EncBinary()
					_ = yym3143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3133[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3144 := z.EncBinary()
					_ = yym3144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3133 || yy2arr3133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3133[3] {
					yym3146 := z.EncBinary()
					_ = yym3146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3133[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3147 := z.EncBinary()
					_ = yym3147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3133 || yy2arr3133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3148 := z.DecBinary()
	_ = yym3148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3149 := r.ContainerType()
		if yyct3149 == codecSelferValueTypeMap1234 {
			yyl3149 := r.ReadMapStart()
			if yyl3149 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3149, d)
			}
		} else if yyct3149 == codecSelferValueTypeArray1234 {
			yyl3149 := r.ReadArrayStart()
			if yyl3149 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3150Slc
	var yyhl3150 bool = l >= 0
	for yyj3150 := 0; ; yyj3150++ {
		if yyhl3150 {
			if yyj3150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3150Slc = r.DecodeBytes(yys3150Slc, true, true)
		yys3150 := string(yys3150Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3150 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3151 := &x.PodSignature
				yyv3151.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3152 := &x.EvictionTime
				yym3153 := z.DecBinary()
				_ = yym3153
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3152) {
				} else if yym3153 {
					z.DecBinaryUnmarshal(yyv3152)
				} else if !yym3153 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3152)
				} else {
					z.DecFallback(yyv3152, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3150)
		} // end switch yys3150
	} // end for yyj3150
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3156 int
	var yyb3156 bool
	var yyhl3156 bool = l >= 0
	yyj3156++
	if yyhl3156 {
		yyb3156 = yyj3156 > l
	} else {
		yyb3156 = r.CheckBreak()
	}
	if yyb3156 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3157 := &x.PodSignature
		yyv3157.CodecDecodeSelf(d)
	}
	yyj3156++
	if yyhl3156 {
		yyb3156 = yyj3156 > l
	} else {
		yyb3156 = r.CheckBreak()
	}
	if yyb3156 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3158 := &x.EvictionTime
		yym3159 := z.DecBinary()
		_ = yym3159
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3158) {
		} else if yym3159 {
			z.DecBinaryUnmarshal(yyv3158)
		} else if !yym3159 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3158)
		} else {
			z.DecFallback(yyv3158, false)
		}
	}
	yyj3156++
	if yyhl3156 {
		yyb3156 = yyj3156 > l
	} else {
		yyb3156 = r.CheckBreak()
	}
	if yyb3156 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3156++
	if yyhl3156 {
		yyb3156 = yyj3156 > l
	} else {
		yyb3156 = r.CheckBreak()
	}
	if yyb3156 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3156++
		if yyhl3156 {
			yyb3156 = yyj3156 > l
		} else {
			yyb3156 = r.CheckBreak()
		}
		if yyb3156 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3156-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3162 := z.EncBinary()
		_ = yym3162
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3163 := !z.EncBinary()
			yy2arr3163 := z.EncBasicHandle().StructToArray
			var yyq3163 [1]bool
			_, _, _ = yysep3163, yyq3163, yy2arr3163
			const yyr3163 bool = false
			yyq3163[0] = x.PodController != nil
			var yynn3163 int
			if yyr3163 || yy2arr3163 {
				r.EncodeArrayStart(1)
			} else {
				yynn3163 = 0
				for _, b := range yyq3163 {
					if b {
						yynn3163++
					}
				}
				r.EncodeMapStart(yynn3163)
				yynn3163 = 0
			}
			if yyr3163 || yy2arr3163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3163[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3163[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3163 || yy2arr3163 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3165 := z.DecBinary()
	_ = yym3165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3166 := r.ContainerType()
		if yyct3166 == codecSelferValueTypeMap1234 {
			yyl3166 := r.ReadMapStart()
			if yyl3166 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3166, d)
			}
		} else if yyct3166 == codecSelferValueTypeArray1234 {
			yyl3166 := r.ReadArrayStart()
			if yyl3166 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3166, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3167Slc
	var yyhl3167 bool = l >= 0
	for yyj3167 := 0; ; yyj3167++ {
		if yyhl3167 {
			if yyj3167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3167Slc = r.DecodeBytes(yys3167Slc, true, true)
		yys3167 := string(yys3167Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3167 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3167)
		} // end switch yys3167
	} // end for yyj3167
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3169 int
	var yyb3169 bool
	var yyhl3169 bool = l >= 0
	yyj3169++
	if yyhl3169 {
		yyb3169 = yyj3169 > l
	} else {
		yyb3169 = r.CheckBreak()
	}
	if yyb3169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3169++
		if yyhl3169 {
			yyb3169 = yyj3169 > l
		} else {
			yyb3169 = r.CheckBreak()
		}
		if yyb3169 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3169-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3171 := z.EncBinary()
		_ = yym3171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3172 := !z.EncBinary()
			yy2arr3172 := z.EncBasicHandle().StructToArray
			var yyq3172 [2]bool
			_, _, _ = yysep3172, yyq3172, yy2arr3172
			const yyr3172 bool = false
			yyq3172[1] = x.SizeBytes != 0
			var yynn3172 int
			if yyr3172 || yy2arr3172 {
				r.EncodeArrayStart(2)
			} else {
				yynn3172 = 1
				for _, b := range yyq3172 {
					if b {
						yynn3172++
					}
				}
				r.EncodeMapStart(yynn3172)
				yynn3172 = 0
			}
			if yyr3172 || yy2arr3172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3174 := z.EncBinary()
					_ = yym3174
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3175 := z.EncBinary()
					_ = yym3175
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3172 || yy2arr3172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3172[1] {
					yym3177 := z.EncBinary()
					_ = yym3177
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3172[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3178 := z.EncBinary()
					_ = yym3178
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3172 || yy2arr3172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3179 := z.DecBinary()
	_ = yym3179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3180 := r.ContainerType()
		if yyct3180 == codecSelferValueTypeMap1234 {
			yyl3180 := r.ReadMapStart()
			if yyl3180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3180, d)
			}
		} else if yyct3180 == codecSelferValueTypeArray1234 {
			yyl3180 := r.ReadArrayStart()
			if yyl3180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3181Slc
	var yyhl3181 bool = l >= 0
	for yyj3181 := 0; ; yyj3181++ {
		if yyhl3181 {
			if yyj3181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3181Slc = r.DecodeBytes(yys3181Slc, true, true)
		yys3181 := string(yys3181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3181 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3182 := &x.Names
				yym3183 := z.DecBinary()
				_ = yym3183
				if false {
				} else {
					z.F.DecSliceStringX(yyv3182, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3181)
		} // end switch yys3181
	} // end for yyj3181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3185 int
	var yyb3185 bool
	var yyhl3185 bool = l >= 0
	yyj3185++
	if yyhl3185 {
		yyb3185 = yyj3185 > l
	} else {
		yyb3185 = r.CheckBreak()
	}
	if yyb3185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3186 := &x.Names
		yym3187 := z.DecBinary()
		_ = yym3187
		if false {
		} else {
			z.F.DecSliceStringX(yyv3186, false, d)
		}
	}
	yyj3185++
	if yyhl3185 {
		yyb3185 = yyj3185 > l
	} else {
		yyb3185 = r.CheckBreak()
	}
	if yyb3185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3185++
		if yyhl3185 {
			yyb3185 = yyj3185 > l
		} else {
			yyb3185 = r.CheckBreak()
		}
		if yyb3185 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3185-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3189 := z.EncBinary()
	_ = yym3189
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3190 := z.DecBinary()
	_ = yym3190
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3191 := z.EncBinary()
	_ = yym3191
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3192 := z.DecBinary()
	_ = yym3192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3193 := z.EncBinary()
		_ = yym3193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3194 := !z.EncBinary()
			yy2arr3194 := z.EncBasicHandle().StructToArray
			var yyq3194 [6]bool
			_, _, _ = yysep3194, yyq3194, yy2arr3194
			const yyr3194 bool = false
			yyq3194[2] = true
			yyq3194[3] = true
			yyq3194[4] = x.Reason != ""
			yyq3194[5] = x.Message != ""
			var yynn3194 int
			if yyr3194 || yy2arr3194 {
				r.EncodeArrayStart(6)
			} else {
				yynn3194 = 2
				for _, b := range yyq3194 {
					if b {
						yynn3194++
					}
				}
				r.EncodeMapStart(yynn3194)
				yynn3194 = 0
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3194[2] {
					yy3198 := &x.LastHeartbeatTime
					yym3199 := z.EncBinary()
					_ = yym3199
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3198) {
					} else if yym3199 {
						z.EncBinaryMarshal(yy3198)
					} else if !yym3199 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3198)
					} else {
						z.EncFallback(yy3198)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3194[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3200 := &x.LastHeartbeatTime
					yym3201 := z.EncBinary()
					_ = yym3201
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3200) {
					} else if yym3201 {
						z.EncBinaryMarshal(yy3200)
					} else if !yym3201 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3200)
					} else {
						z.EncFallback(yy3200)
					}
				}
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3194[3] {
					yy3203 := &x.LastTransitionTime
					yym3204 := z.EncBinary()
					_ = yym3204
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3203) {
					} else if yym3204 {
						z.EncBinaryMarshal(yy3203)
					} else if !yym3204 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3203)
					} else {
						z.EncFallback(yy3203)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3194[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3205 := &x.LastTransitionTime
					yym3206 := z.EncBinary()
					_ = yym3206
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3205) {
					} else if yym3206 {
						z.EncBinaryMarshal(yy3205)
					} else if !yym3206 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3205)
					} else {
						z.EncFallback(yy3205)
					}
				}
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3194[4] {
					yym3208 := z.EncBinary()
					_ = yym3208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3194[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3194[5] {
					yym3211 := z.EncBinary()
					_ = yym3211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3194[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3212 := z.EncBinary()
					_ = yym3212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3213 := z.DecBinary()
	_ = yym3213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3214 := r.ContainerType()
		if yyct3214 == codecSelferValueTypeMap1234 {
			yyl3214 := r.ReadMapStart()
			if yyl3214 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3214, d)
			}
		} else if yyct3214 == codecSelferValueTypeArray1234 {
			yyl3214 := r.ReadArrayStart()
			if yyl3214 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3215Slc
	var yyhl3215 bool = l >= 0
	for yyj3215 := 0; ; yyj3215++ {
		if yyhl3215 {
			if yyj3215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3215Slc = r.DecodeBytes(yys3215Slc, true, true)
		yys3215 := string(yys3215Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3215 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3218 := &x.LastHeartbeatTime
				yym3219 := z.DecBinary()
				_ = yym3219
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3218) {
				} else if yym3219 {
					z.DecBinaryUnmarshal(yyv3218)
				} else if !yym3219 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3218)
				} else {
					z.DecFallback(yyv3218, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3220 := &x.LastTransitionTime
				yym3221 := z.DecBinary()
				_ = yym3221
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3220) {
				} else if yym3221 {
					z.DecBinaryUnmarshal(yyv3220)
				} else if !yym3221 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3220)
				} else {
					z.DecFallback(yyv3220, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3215)
		} // end switch yys3215
	} // end for yyj3215
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3224 int
	var yyb3224 bool
	var yyhl3224 bool = l >= 0
	yyj3224++
	if yyhl3224 {
		yyb3224 = yyj3224 > l
	} else {
		yyb3224 = r.CheckBreak()
	}
	if yyb3224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3224++
	if yyhl3224 {
		yyb3224 = yyj3224 > l
	} else {
		yyb3224 = r.CheckBreak()
	}
	if yyb3224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3224++
	if yyhl3224 {
		yyb3224 = yyj3224 > l
	} else {
		yyb3224 = r.CheckBreak()
	}
	if yyb3224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3227 := &x.LastHeartbeatTime
		yym3228 := z.DecBinary()
		_ = yym3228
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3227) {
		} else if yym3228 {
			z.DecBinaryUnmarshal(yyv3227)
		} else if !yym3228 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3227)
		} else {
			z.DecFallback(yyv3227, false)
		}
	}
	yyj3224++
	if yyhl3224 {
		yyb3224 = yyj3224 > l
	} else {
		yyb3224 = r.CheckBreak()
	}
	if yyb3224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3229 := &x.LastTransitionTime
		yym3230 := z.DecBinary()
		_ = yym3230
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3229) {
		} else if yym3230 {
			z.DecBinaryUnmarshal(yyv3229)
		} else if !yym3230 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3229)
		} else {
			z.DecFallback(yyv3229, false)
		}
	}
	yyj3224++
	if yyhl3224 {
		yyb3224 = yyj3224 > l
	} else {
		yyb3224 = r.CheckBreak()
	}
	if yyb3224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3224++
	if yyhl3224 {
		yyb3224 = yyj3224 > l
	} else {
		yyb3224 = r.CheckBreak()
	}
	if yyb3224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3224++
		if yyhl3224 {
			yyb3224 = yyj3224 > l
		} else {
			yyb3224 = r.CheckBreak()
		}
		if yyb3224 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3224-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3233 := z.EncBinary()
	_ = yym3233
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3234 := z.DecBinary()
	_ = yym3234
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3235 := z.EncBinary()
		_ = yym3235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3236 := !z.EncBinary()
			yy2arr3236 := z.EncBasicHandle().StructToArray
			var yyq3236 [2]bool
			_, _, _ = yysep3236, yyq3236, yy2arr3236
			const yyr3236 bool = false
			var yynn3236 int
			if yyr3236 || yy2arr3236 {
				r.EncodeArrayStart(2)
			} else {
				yynn3236 = 2
				for _, b := range yyq3236 {
					if b {
						yynn3236++
					}
				}
				r.EncodeMapStart(yynn3236)
				yynn3236 = 0
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3239 := z.EncBinary()
				_ = yym3239
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3240 := z.EncBinary()
				_ = yym3240
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3241 := z.DecBinary()
	_ = yym3241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3242 := r.ContainerType()
		if yyct3242 == codecSelferValueTypeMap1234 {
			yyl3242 := r.ReadMapStart()
			if yyl3242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3242, d)
			}
		} else if yyct3242 == codecSelferValueTypeArray1234 {
			yyl3242 := r.ReadArrayStart()
			if yyl3242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3243Slc
	var yyhl3243 bool = l >= 0
	for yyj3243 := 0; ; yyj3243++ {
		if yyhl3243 {
			if yyj3243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3243Slc = r.DecodeBytes(yys3243Slc, true, true)
		yys3243 := string(yys3243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3243 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3243)
		} // end switch yys3243
	} // end for yyj3243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3246 int
	var yyb3246 bool
	var yyhl3246 bool = l >= 0
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3246++
		if yyhl3246 {
			yyb3246 = yyj3246 > l
		} else {
			yyb3246 = r.CheckBreak()
		}
		if yyb3246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3249 := z.EncBinary()
	_ = yym3249
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3250 := z.DecBinary()
	_ = yym3250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3251 := z.EncBinary()
		_ = yym3251
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3252 := z.DecBinary()
	_ = yym3252
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3253 := z.EncBinary()
		_ = yym3253
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3254 := !z.EncBinary()
			yy2arr3254 := z.EncBasicHandle().StructToArray
			var yyq3254 [5]bool
			_, _, _ = yysep3254, yyq3254, yy2arr3254
			const yyr3254 bool = false
			yyq3254[0] = x.Kind != ""
			yyq3254[1] = x.APIVersion != ""
			yyq3254[2] = true
			yyq3254[3] = true
			yyq3254[4] = true
			var yynn3254 int
			if yyr3254 || yy2arr3254 {
				r.EncodeArrayStart(5)
			} else {
				yynn3254 = 0
				for _, b := range yyq3254 {
					if b {
						yynn3254++
					}
				}
				r.EncodeMapStart(yynn3254)
				yynn3254 = 0
			}
			if yyr3254 || yy2arr3254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3254[0] {
					yym3256 := z.EncBinary()
					_ = yym3256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3254[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3257 := z.EncBinary()
					_ = yym3257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3254 || yy2arr3254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3254[1] {
					yym3259 := z.EncBinary()
					_ = yym3259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3254[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3254 || yy2arr3254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3254[2] {
					yy3262 := &x.ObjectMeta
					yy3262.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3254[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3263 := &x.ObjectMeta
					yy3263.CodecEncodeSelf(e)
				}
			}
			if yyr3254 || yy2arr3254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3254[3] {
					yy3265 := &x.Spec
					yy3265.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3254[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3266 := &x.Spec
					yy3266.CodecEncodeSelf(e)
				}
			}
			if yyr3254 || yy2arr3254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3254[4] {
					yy3268 := &x.Status
					yy3268.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3254[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3269 := &x.Status
					yy3269.CodecEncodeSelf(e)
				}
			}
			if yyr3254 || yy2arr3254 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3270 := z.DecBinary()
	_ = yym3270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3271 := r.ContainerType()
		if yyct3271 == codecSelferValueTypeMap1234 {
			yyl3271 := r.ReadMapStart()
			if yyl3271 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3271, d)
			}
		} else if yyct3271 == codecSelferValueTypeArray1234 {
			yyl3271 := r.ReadArrayStart()
			if yyl3271 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3272Slc
	var yyhl3272 bool = l >= 0
	for yyj3272 := 0; ; yyj3272++ {
		if yyhl3272 {
			if yyj3272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3272Slc = r.DecodeBytes(yys3272Slc, true, true)
		yys3272 := string(yys3272Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3272 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3275 := &x.ObjectMeta
				yyv3275.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3276 := &x.Spec
				yyv3276.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3277 := &x.Status
				yyv3277.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3272)
		} // end switch yys3272
	} // end for yyj3272
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3278 int
	var yyb3278 bool
	var yyhl3278 bool = l >= 0
	yyj3278++
	if yyhl3278 {
		yyb3278 = yyj3278 > l
	} else {
		yyb3278 = r.CheckBreak()
	}
	if yyb3278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3278++
	if yyhl3278 {
		yyb3278 = yyj3278 > l
	} else {
		yyb3278 = r.CheckBreak()
	}
	if yyb3278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3278++
	if yyhl3278 {
		yyb3278 = yyj3278 > l
	} else {
		yyb3278 = r.CheckBreak()
	}
	if yyb3278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3281 := &x.ObjectMeta
		yyv3281.CodecDecodeSelf(d)
	}
	yyj3278++
	if yyhl3278 {
		yyb3278 = yyj3278 > l
	} else {
		yyb3278 = r.CheckBreak()
	}
	if yyb3278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3282 := &x.Spec
		yyv3282.CodecDecodeSelf(d)
	}
	yyj3278++
	if yyhl3278 {
		yyb3278 = yyj3278 > l
	} else {
		yyb3278 = r.CheckBreak()
	}
	if yyb3278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3283 := &x.Status
		yyv3283.CodecDecodeSelf(d)
	}
	for {
		yyj3278++
		if yyhl3278 {
			yyb3278 = yyj3278 > l
		} else {
			yyb3278 = r.CheckBreak()
		}
		if yyb3278 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3278-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3284 := z.EncBinary()
		_ = yym3284
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3285 := !z.EncBinary()
			yy2arr3285 := z.EncBasicHandle().StructToArray
			var yyq3285 [4]bool
			_, _, _ = yysep3285, yyq3285, yy2arr3285
			const yyr3285 bool = false
			yyq3285[0] = x.Kind != ""
			yyq3285[1] = x.APIVersion != ""
			yyq3285[2] = true
			var yynn3285 int
			if yyr3285 || yy2arr3285 {
				r.EncodeArrayStart(4)
			} else {
				yynn3285 = 1
				for _, b := range yyq3285 {
					if b {
						yynn3285++
					}
				}
				r.EncodeMapStart(yynn3285)
				yynn3285 = 0
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3285[0] {
					yym3287 := z.EncBinary()
					_ = yym3287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3285[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3288 := z.EncBinary()
					_ = yym3288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3285[1] {
					yym3290 := z.EncBinary()
					_ = yym3290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3285[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3291 := z.EncBinary()
					_ = yym3291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3285[2] {
					yy3293 := &x.ListMeta
					yym3294 := z.EncBinary()
					_ = yym3294
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3293) {
					} else {
						z.EncFallback(yy3293)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3285[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3295 := &x.ListMeta
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3295) {
					} else {
						z.EncFallback(yy3295)
					}
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3298 := z.EncBinary()
					_ = yym3298
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3300 := z.DecBinary()
	_ = yym3300
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3301 := r.ContainerType()
		if yyct3301 == codecSelferValueTypeMap1234 {
			yyl3301 := r.ReadMapStart()
			if yyl3301 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3301, d)
			}
		} else if yyct3301 == codecSelferValueTypeArray1234 {
			yyl3301 := r.ReadArrayStart()
			if yyl3301 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3301, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3302Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3302Slc
	var yyhl3302 bool = l >= 0
	for yyj3302 := 0; ; yyj3302++ {
		if yyhl3302 {
			if yyj3302 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3302Slc = r.DecodeBytes(yys3302Slc, true, true)
		yys3302 := string(yys3302Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3302 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3305 := &x.ListMeta
				yym3306 := z.DecBinary()
				_ = yym3306
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3305) {
				} else {
					z.DecFallback(yyv3305, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3307 := &x.Items
				yym3308 := z.DecBinary()
				_ = yym3308
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3307), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3302)
		} // end switch yys3302
	} // end for yyj3302
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3309 int
	var yyb3309 bool
	var yyhl3309 bool = l >= 0
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3312 := &x.ListMeta
		yym3313 := z.DecBinary()
		_ = yym3313
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3312) {
		} else {
			z.DecFallback(yyv3312, false)
		}
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3314 := &x.Items
		yym3315 := z.DecBinary()
		_ = yym3315
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3314), d)
		}
	}
	for {
		yyj3309++
		if yyhl3309 {
			yyb3309 = yyj3309 > l
		} else {
			yyb3309 = r.CheckBreak()
		}
		if yyb3309 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3309-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3316 := z.EncBinary()
	_ = yym3316
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3317 := z.DecBinary()
	_ = yym3317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3318 := z.EncBinary()
		_ = yym3318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3319 := !z.EncBinary()
			yy2arr3319 := z.EncBasicHandle().StructToArray
			var yyq3319 [1]bool
			_, _, _ = yysep3319, yyq3319, yy2arr3319
			const yyr3319 bool = false
			yyq3319[0] = len(x.Finalizers) != 0
			var yynn3319 int
			if yyr3319 || yy2arr3319 {
				r.EncodeArrayStart(1)
			} else {
				yynn3319 = 0
				for _, b := range yyq3319 {
					if b {
						yynn3319++
					}
				}
				r.EncodeMapStart(yynn3319)
				yynn3319 = 0
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3319[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3321 := z.EncBinary()
						_ = yym3321
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3319[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3322 := z.EncBinary()
						_ = yym3322
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3323 := z.DecBinary()
	_ = yym3323
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3324 := r.ContainerType()
		if yyct3324 == codecSelferValueTypeMap1234 {
			yyl3324 := r.ReadMapStart()
			if yyl3324 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3324, d)
			}
		} else if yyct3324 == codecSelferValueTypeArray1234 {
			yyl3324 := r.ReadArrayStart()
			if yyl3324 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3324, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3325Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3325Slc
	var yyhl3325 bool = l >= 0
	for yyj3325 := 0; ; yyj3325++ {
		if yyhl3325 {
			if yyj3325 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3325Slc = r.DecodeBytes(yys3325Slc, true, true)
		yys3325 := string(yys3325Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3325 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3326 := &x.Finalizers
				yym3327 := z.DecBinary()
				_ = yym3327
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3326), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3325)
		} // end switch yys3325
	} // end for yyj3325
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3328 int
	var yyb3328 bool
	var yyhl3328 bool = l >= 0
	yyj3328++
	if yyhl3328 {
		yyb3328 = yyj3328 > l
	} else {
		yyb3328 = r.CheckBreak()
	}
	if yyb3328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3329 := &x.Finalizers
		yym3330 := z.DecBinary()
		_ = yym3330
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3329), d)
		}
	}
	for {
		yyj3328++
		if yyhl3328 {
			yyb3328 = yyj3328 > l
		} else {
			yyb3328 = r.CheckBreak()
		}
		if yyb3328 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3328-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3331 := z.EncBinary()
		_ = yym3331
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3332 := !z.EncBinary()
			yy2arr3332 := z.EncBasicHandle().StructToArray
			var yyq3332 [1]bool
			_, _, _ = yysep3332, yyq3332, yy2arr3332
			const yyr3332 bool = false
			yyq3332[0] = x.Phase != ""
			var yynn3332 int
			if yyr3332 || yy2arr3332 {
				r.EncodeArrayStart(1)
			} else {
				yynn3332 = 0
				for _, b := range yyq3332 {
					if b {
						yynn3332++
					}
				}
				r.EncodeMapStart(yynn3332)
				yynn3332 = 0
			}
			if yyr3332 || yy2arr3332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3332[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3332[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3332 || yy2arr3332 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3334 := z.DecBinary()
	_ = yym3334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3335 := r.ContainerType()
		if yyct3335 == codecSelferValueTypeMap1234 {
			yyl3335 := r.ReadMapStart()
			if yyl3335 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3335, d)
			}
		} else if yyct3335 == codecSelferValueTypeArray1234 {
			yyl3335 := r.ReadArrayStart()
			if yyl3335 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3335, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3336Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3336Slc
	var yyhl3336 bool = l >= 0
	for yyj3336 := 0; ; yyj3336++ {
		if yyhl3336 {
			if yyj3336 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3336Slc = r.DecodeBytes(yys3336Slc, true, true)
		yys3336 := string(yys3336Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3336 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3336)
		} // end switch yys3336
	} // end for yyj3336
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3338 int
	var yyb3338 bool
	var yyhl3338 bool = l >= 0
	yyj3338++
	if yyhl3338 {
		yyb3338 = yyj3338 > l
	} else {
		yyb3338 = r.CheckBreak()
	}
	if yyb3338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3338++
		if yyhl3338 {
			yyb3338 = yyj3338 > l
		} else {
			yyb3338 = r.CheckBreak()
		}
		if yyb3338 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3338-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3340 := z.EncBinary()
	_ = yym3340
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3341 := z.DecBinary()
	_ = yym3341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3342 := z.EncBinary()
		_ = yym3342
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3343 := !z.EncBinary()
			yy2arr3343 := z.EncBasicHandle().StructToArray
			var yyq3343 [5]bool
			_, _, _ = yysep3343, yyq3343, yy2arr3343
			const yyr3343 bool = false
			yyq3343[0] = x.Kind != ""
			yyq3343[1] = x.APIVersion != ""
			yyq3343[2] = true
			yyq3343[3] = true
			yyq3343[4] = true
			var yynn3343 int
			if yyr3343 || yy2arr3343 {
				r.EncodeArrayStart(5)
			} else {
				yynn3343 = 0
				for _, b := range yyq3343 {
					if b {
						yynn3343++
					}
				}
				r.EncodeMapStart(yynn3343)
				yynn3343 = 0
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[0] {
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3343[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3346 := z.EncBinary()
					_ = yym3346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[1] {
					yym3348 := z.EncBinary()
					_ = yym3348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3343[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3349 := z.EncBinary()
					_ = yym3349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[2] {
					yy3351 := &x.ObjectMeta
					yy3351.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3343[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3352 := &x.ObjectMeta
					yy3352.CodecEncodeSelf(e)
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[3] {
					yy3354 := &x.Spec
					yy3354.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3343[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3355 := &x.Spec
					yy3355.CodecEncodeSelf(e)
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[4] {
					yy3357 := &x.Status
					yy3357.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3343[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3358 := &x.Status
					yy3358.CodecEncodeSelf(e)
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3359 := z.DecBinary()
	_ = yym3359
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3360 := r.ContainerType()
		if yyct3360 == codecSelferValueTypeMap1234 {
			yyl3360 := r.ReadMapStart()
			if yyl3360 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3360, d)
			}
		} else if yyct3360 == codecSelferValueTypeArray1234 {
			yyl3360 := r.ReadArrayStart()
			if yyl3360 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3360, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3361Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3361Slc
	var yyhl3361 bool = l >= 0
	for yyj3361 := 0; ; yyj3361++ {
		if yyhl3361 {
			if yyj3361 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3361Slc = r.DecodeBytes(yys3361Slc, true, true)
		yys3361 := string(yys3361Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3361 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3364 := &x.ObjectMeta
				yyv3364.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3365 := &x.Spec
				yyv3365.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3366 := &x.Status
				yyv3366.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3361)
		} // end switch yys3361
	} // end for yyj3361
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3367 int
	var yyb3367 bool
	var yyhl3367 bool = l >= 0
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3370 := &x.ObjectMeta
		yyv3370.CodecDecodeSelf(d)
	}
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3371 := &x.Spec
		yyv3371.CodecDecodeSelf(d)
	}
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3372 := &x.Status
		yyv3372.CodecDecodeSelf(d)
	}
	for {
		yyj3367++
		if yyhl3367 {
			yyb3367 = yyj3367 > l
		} else {
			yyb3367 = r.CheckBreak()
		}
		if yyb3367 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3367-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3373 := z.EncBinary()
		_ = yym3373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3374 := !z.EncBinary()
			yy2arr3374 := z.EncBasicHandle().StructToArray
			var yyq3374 [4]bool
			_, _, _ = yysep3374, yyq3374, yy2arr3374
			const yyr3374 bool = false
			yyq3374[0] = x.Kind != ""
			yyq3374[1] = x.APIVersion != ""
			yyq3374[2] = true
			var yynn3374 int
			if yyr3374 || yy2arr3374 {
				r.EncodeArrayStart(4)
			} else {
				yynn3374 = 1
				for _, b := range yyq3374 {
					if b {
						yynn3374++
					}
				}
				r.EncodeMapStart(yynn3374)
				yynn3374 = 0
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3374[0] {
					yym3376 := z.EncBinary()
					_ = yym3376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3374[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3377 := z.EncBinary()
					_ = yym3377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3374[1] {
					yym3379 := z.EncBinary()
					_ = yym3379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3374[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3380 := z.EncBinary()
					_ = yym3380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3374[2] {
					yy3382 := &x.ListMeta
					yym3383 := z.EncBinary()
					_ = yym3383
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3382) {
					} else {
						z.EncFallback(yy3382)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3374[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3384 := &x.ListMeta
					yym3385 := z.EncBinary()
					_ = yym3385
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3384) {
					} else {
						z.EncFallback(yy3384)
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3387 := z.EncBinary()
					_ = yym3387
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3388 := z.EncBinary()
					_ = yym3388
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3389 := z.DecBinary()
	_ = yym3389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3390 := r.ContainerType()
		if yyct3390 == codecSelferValueTypeMap1234 {
			yyl3390 := r.ReadMapStart()
			if yyl3390 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3390, d)
			}
		} else if yyct3390 == codecSelferValueTypeArray1234 {
			yyl3390 := r.ReadArrayStart()
			if yyl3390 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3390, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3391Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3391Slc
	var yyhl3391 bool = l >= 0
	for yyj3391 := 0; ; yyj3391++ {
		if yyhl3391 {
			if yyj3391 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3391Slc = r.DecodeBytes(yys3391Slc, true, true)
		yys3391 := string(yys3391Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3391 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3394 := &x.ListMeta
				yym3395 := z.DecBinary()
				_ = yym3395
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3394) {
				} else {
					z.DecFallback(yyv3394, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3396 := &x.Items
				yym3397 := z.DecBinary()
				_ = yym3397
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3396), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3391)
		} // end switch yys3391
	} // end for yyj3391
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3398 int
	var yyb3398 bool
	var yyhl3398 bool = l >= 0
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3401 := &x.ListMeta
		yym3402 := z.DecBinary()
		_ = yym3402
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3401) {
		} else {
			z.DecFallback(yyv3401, false)
		}
	}
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3403 := &x.Items
		yym3404 := z.DecBinary()
		_ = yym3404
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3403), d)
		}
	}
	for {
		yyj3398++
		if yyhl3398 {
			yyb3398 = yyj3398 > l
		} else {
			yyb3398 = r.CheckBreak()
		}
		if yyb3398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3405 := z.EncBinary()
		_ = yym3405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3406 := !z.EncBinary()
			yy2arr3406 := z.EncBasicHandle().StructToArray
			var yyq3406 [4]bool
			_, _, _ = yysep3406, yyq3406, yy2arr3406
			const yyr3406 bool = false
			yyq3406[0] = x.Kind != ""
			yyq3406[1] = x.APIVersion != ""
			yyq3406[2] = true
			var yynn3406 int
			if yyr3406 || yy2arr3406 {
				r.EncodeArrayStart(4)
			} else {
				yynn3406 = 1
				for _, b := range yyq3406 {
					if b {
						yynn3406++
					}
				}
				r.EncodeMapStart(yynn3406)
				yynn3406 = 0
			}
			if yyr3406 || yy2arr3406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3406[0] {
					yym3408 := z.EncBinary()
					_ = yym3408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3409 := z.EncBinary()
					_ = yym3409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3406 || yy2arr3406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3406[1] {
					yym3411 := z.EncBinary()
					_ = yym3411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3406 || yy2arr3406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3406[2] {
					yy3414 := &x.ObjectMeta
					yy3414.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3406[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3415 := &x.ObjectMeta
					yy3415.CodecEncodeSelf(e)
				}
			}
			if yyr3406 || yy2arr3406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3417 := &x.Target
				yy3417.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3418 := &x.Target
				yy3418.CodecEncodeSelf(e)
			}
			if yyr3406 || yy2arr3406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3419 := z.DecBinary()
	_ = yym3419
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3420 := r.ContainerType()
		if yyct3420 == codecSelferValueTypeMap1234 {
			yyl3420 := r.ReadMapStart()
			if yyl3420 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3420, d)
			}
		} else if yyct3420 == codecSelferValueTypeArray1234 {
			yyl3420 := r.ReadArrayStart()
			if yyl3420 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3420, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3421Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3421Slc
	var yyhl3421 bool = l >= 0
	for yyj3421 := 0; ; yyj3421++ {
		if yyhl3421 {
			if yyj3421 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3421Slc = r.DecodeBytes(yys3421Slc, true, true)
		yys3421 := string(yys3421Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3421 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3424 := &x.ObjectMeta
				yyv3424.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3425 := &x.Target
				yyv3425.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3421)
		} // end switch yys3421
	} // end for yyj3421
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3426 int
	var yyb3426 bool
	var yyhl3426 bool = l >= 0
	yyj3426++
	if yyhl3426 {
		yyb3426 = yyj3426 > l
	} else {
		yyb3426 = r.CheckBreak()
	}
	if yyb3426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3426++
	if yyhl3426 {
		yyb3426 = yyj3426 > l
	} else {
		yyb3426 = r.CheckBreak()
	}
	if yyb3426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3426++
	if yyhl3426 {
		yyb3426 = yyj3426 > l
	} else {
		yyb3426 = r.CheckBreak()
	}
	if yyb3426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3429 := &x.ObjectMeta
		yyv3429.CodecDecodeSelf(d)
	}
	yyj3426++
	if yyhl3426 {
		yyb3426 = yyj3426 > l
	} else {
		yyb3426 = r.CheckBreak()
	}
	if yyb3426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3430 := &x.Target
		yyv3430.CodecDecodeSelf(d)
	}
	for {
		yyj3426++
		if yyhl3426 {
			yyb3426 = yyj3426 > l
		} else {
			yyb3426 = r.CheckBreak()
		}
		if yyb3426 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3426-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3431 := z.EncBinary()
		_ = yym3431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3432 := !z.EncBinary()
			yy2arr3432 := z.EncBasicHandle().StructToArray
			var yyq3432 [1]bool
			_, _, _ = yysep3432, yyq3432, yy2arr3432
			const yyr3432 bool = false
			yyq3432[0] = x.UID != nil
			var yynn3432 int
			if yyr3432 || yy2arr3432 {
				r.EncodeArrayStart(1)
			} else {
				yynn3432 = 0
				for _, b := range yyq3432 {
					if b {
						yynn3432++
					}
				}
				r.EncodeMapStart(yynn3432)
				yynn3432 = 0
			}
			if yyr3432 || yy2arr3432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3432[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3434 := *x.UID
						yym3435 := z.EncBinary()
						_ = yym3435
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3434) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3434))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3432[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3436 := *x.UID
						yym3437 := z.EncBinary()
						_ = yym3437
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3436) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3436))
						}
					}
				}
			}
			if yyr3432 || yy2arr3432 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3438 := z.DecBinary()
	_ = yym3438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3439 := r.ContainerType()
		if yyct3439 == codecSelferValueTypeMap1234 {
			yyl3439 := r.ReadMapStart()
			if yyl3439 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3439, d)
			}
		} else if yyct3439 == codecSelferValueTypeArray1234 {
			yyl3439 := r.ReadArrayStart()
			if yyl3439 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3439, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3440Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3440Slc
	var yyhl3440 bool = l >= 0
	for yyj3440 := 0; ; yyj3440++ {
		if yyhl3440 {
			if yyj3440 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3440Slc = r.DecodeBytes(yys3440Slc, true, true)
		yys3440 := string(yys3440Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3440 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3442 := z.DecBinary()
				_ = yym3442
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3440)
		} // end switch yys3440
	} // end for yyj3440
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3443 int
	var yyb3443 bool
	var yyhl3443 bool = l >= 0
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3445 := z.DecBinary()
		_ = yym3445
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3443++
		if yyhl3443 {
			yyb3443 = yyj3443 > l
		} else {
			yyb3443 = r.CheckBreak()
		}
		if yyb3443 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3443-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3446 := z.EncBinary()
		_ = yym3446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3447 := !z.EncBinary()
			yy2arr3447 := z.EncBasicHandle().StructToArray
			var yyq3447 [5]bool
			_, _, _ = yysep3447, yyq3447, yy2arr3447
			const yyr3447 bool = false
			yyq3447[0] = x.Kind != ""
			yyq3447[1] = x.APIVersion != ""
			yyq3447[2] = x.GracePeriodSeconds != nil
			yyq3447[3] = x.Preconditions != nil
			yyq3447[4] = x.OrphanDependents != nil
			var yynn3447 int
			if yyr3447 || yy2arr3447 {
				r.EncodeArrayStart(5)
			} else {
				yynn3447 = 0
				for _, b := range yyq3447 {
					if b {
						yynn3447++
					}
				}
				r.EncodeMapStart(yynn3447)
				yynn3447 = 0
			}
			if yyr3447 || yy2arr3447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3447[0] {
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3447[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3447 || yy2arr3447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3447[1] {
					yym3452 := z.EncBinary()
					_ = yym3452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3447[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3453 := z.EncBinary()
					_ = yym3453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3447 || yy2arr3447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3447[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3455 := *x.GracePeriodSeconds
						yym3456 := z.EncBinary()
						_ = yym3456
						if false {
						} else {
							r.EncodeInt(int64(yy3455))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3447[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3457 := *x.GracePeriodSeconds
						yym3458 := z.EncBinary()
						_ = yym3458
						if false {
						} else {
							r.EncodeInt(int64(yy3457))
						}
					}
				}
			}
			if yyr3447 || yy2arr3447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3447[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3447[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3447 || yy2arr3447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3447[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3461 := *x.OrphanDependents
						yym3462 := z.EncBinary()
						_ = yym3462
						if false {
						} else {
							r.EncodeBool(bool(yy3461))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3447[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3463 := *x.OrphanDependents
						yym3464 := z.EncBinary()
						_ = yym3464
						if false {
						} else {
							r.EncodeBool(bool(yy3463))
						}
					}
				}
			}
			if yyr3447 || yy2arr3447 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3465 := z.DecBinary()
	_ = yym3465
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3466 := r.ContainerType()
		if yyct3466 == codecSelferValueTypeMap1234 {
			yyl3466 := r.ReadMapStart()
			if yyl3466 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3466, d)
			}
		} else if yyct3466 == codecSelferValueTypeArray1234 {
			yyl3466 := r.ReadArrayStart()
			if yyl3466 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3466, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3467Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3467Slc
	var yyhl3467 bool = l >= 0
	for yyj3467 := 0; ; yyj3467++ {
		if yyhl3467 {
			if yyj3467 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3467Slc = r.DecodeBytes(yys3467Slc, true, true)
		yys3467 := string(yys3467Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3467 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3471 := z.DecBinary()
				_ = yym3471
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3474 := z.DecBinary()
				_ = yym3474
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3467)
		} // end switch yys3467
	} // end for yyj3467
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3475 int
	var yyb3475 bool
	var yyhl3475 bool = l >= 0
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3479 := z.DecBinary()
		_ = yym3479
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3482 := z.DecBinary()
		_ = yym3482
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3475++
		if yyhl3475 {
			yyb3475 = yyj3475 > l
		} else {
			yyb3475 = r.CheckBreak()
		}
		if yyb3475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3483 := z.EncBinary()
		_ = yym3483
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3484 := !z.EncBinary()
			yy2arr3484 := z.EncBasicHandle().StructToArray
			var yyq3484 [4]bool
			_, _, _ = yysep3484, yyq3484, yy2arr3484
			const yyr3484 bool = false
			yyq3484[0] = x.Kind != ""
			yyq3484[1] = x.APIVersion != ""
			var yynn3484 int
			if yyr3484 || yy2arr3484 {
				r.EncodeArrayStart(4)
			} else {
				yynn3484 = 2
				for _, b := range yyq3484 {
					if b {
						yynn3484++
					}
				}
				r.EncodeMapStart(yynn3484)
				yynn3484 = 0
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3484[0] {
					yym3486 := z.EncBinary()
					_ = yym3486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3484[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3487 := z.EncBinary()
					_ = yym3487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3484[1] {
					yym3489 := z.EncBinary()
					_ = yym3489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3484[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3490 := z.EncBinary()
					_ = yym3490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3492 := z.EncBinary()
				_ = yym3492
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3493 := z.EncBinary()
				_ = yym3493
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3495 := z.EncBinary()
				_ = yym3495
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3496 := z.EncBinary()
				_ = yym3496
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3497 := z.DecBinary()
	_ = yym3497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3498 := r.ContainerType()
		if yyct3498 == codecSelferValueTypeMap1234 {
			yyl3498 := r.ReadMapStart()
			if yyl3498 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3498, d)
			}
		} else if yyct3498 == codecSelferValueTypeArray1234 {
			yyl3498 := r.ReadArrayStart()
			if yyl3498 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3498, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3499Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3499Slc
	var yyhl3499 bool = l >= 0
	for yyj3499 := 0; ; yyj3499++ {
		if yyhl3499 {
			if yyj3499 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3499Slc = r.DecodeBytes(yys3499Slc, true, true)
		yys3499 := string(yys3499Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3499 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3499)
		} // end switch yys3499
	} // end for yyj3499
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3504 int
	var yyb3504 bool
	var yyhl3504 bool = l >= 0
	yyj3504++
	if yyhl3504 {
		yyb3504 = yyj3504 > l
	} else {
		yyb3504 = r.CheckBreak()
	}
	if yyb3504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3504++
	if yyhl3504 {
		yyb3504 = yyj3504 > l
	} else {
		yyb3504 = r.CheckBreak()
	}
	if yyb3504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3504++
	if yyhl3504 {
		yyb3504 = yyj3504 > l
	} else {
		yyb3504 = r.CheckBreak()
	}
	if yyb3504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3504++
	if yyhl3504 {
		yyb3504 = yyj3504 > l
	} else {
		yyb3504 = r.CheckBreak()
	}
	if yyb3504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3504++
		if yyhl3504 {
			yyb3504 = yyj3504 > l
		} else {
			yyb3504 = r.CheckBreak()
		}
		if yyb3504 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3504-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3509 := z.EncBinary()
		_ = yym3509
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3510 := !z.EncBinary()
			yy2arr3510 := z.EncBasicHandle().StructToArray
			var yyq3510 [7]bool
			_, _, _ = yysep3510, yyq3510, yy2arr3510
			const yyr3510 bool = false
			yyq3510[0] = x.Kind != ""
			yyq3510[1] = x.APIVersion != ""
			yyq3510[2] = x.LabelSelector != ""
			yyq3510[3] = x.FieldSelector != ""
			yyq3510[4] = x.Watch != false
			yyq3510[5] = x.ResourceVersion != ""
			yyq3510[6] = x.TimeoutSeconds != nil
			var yynn3510 int
			if yyr3510 || yy2arr3510 {
				r.EncodeArrayStart(7)
			} else {
				yynn3510 = 0
				for _, b := range yyq3510 {
					if b {
						yynn3510++
					}
				}
				r.EncodeMapStart(yynn3510)
				yynn3510 = 0
			}
			if yyr3510 || yy2arr3510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3510[0] {
					yym3512 := z.EncBinary()
					_ = yym3512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3510[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3513 := z.EncBinary()
					_ = yym3513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3510 || yy2arr3510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3510[1] {
					yym3515 := z.EncBinary()
					_ = yym3515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3510[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3516 := z.EncBinary()
					_ = yym3516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3510 || yy2arr3510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3510[2] {
					yym3518 := z.EncBinary()
					_ = yym3518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3510[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3519 := z.EncBinary()
					_ = yym3519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3510 || yy2arr3510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3510[3] {
					yym3521 := z.EncBinary()
					_ = yym3521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3510[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3522 := z.EncBinary()
					_ = yym3522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3510 || yy2arr3510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3510[4] {
					yym3524 := z.EncBinary()
					_ = yym3524
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3510[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3525 := z.EncBinary()
					_ = yym3525
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3510 || yy2arr3510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3510[5] {
					yym3527 := z.EncBinary()
					_ = yym3527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3510[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3528 := z.EncBinary()
					_ = yym3528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3510 || yy2arr3510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3510[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3530 := *x.TimeoutSeconds
						yym3531 := z.EncBinary()
						_ = yym3531
						if false {
						} else {
							r.EncodeInt(int64(yy3530))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3510[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3532 := *x.TimeoutSeconds
						yym3533 := z.EncBinary()
						_ = yym3533
						if false {
						} else {
							r.EncodeInt(int64(yy3532))
						}
					}
				}
			}
			if yyr3510 || yy2arr3510 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3534 := z.DecBinary()
	_ = yym3534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3535 := r.ContainerType()
		if yyct3535 == codecSelferValueTypeMap1234 {
			yyl3535 := r.ReadMapStart()
			if yyl3535 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3535, d)
			}
		} else if yyct3535 == codecSelferValueTypeArray1234 {
			yyl3535 := r.ReadArrayStart()
			if yyl3535 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3535, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3536Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3536Slc
	var yyhl3536 bool = l >= 0
	for yyj3536 := 0; ; yyj3536++ {
		if yyhl3536 {
			if yyj3536 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3536Slc = r.DecodeBytes(yys3536Slc, true, true)
		yys3536 := string(yys3536Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3536 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3544 := z.DecBinary()
				_ = yym3544
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3536)
		} // end switch yys3536
	} // end for yyj3536
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3545 int
	var yyb3545 bool
	var yyhl3545 bool = l >= 0
	yyj3545++
	if yyhl3545 {
		yyb3545 = yyj3545 > l
	} else {
		yyb3545 = r.CheckBreak()
	}
	if yyb3545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3545++
	if yyhl3545 {
		yyb3545 = yyj3545 > l
	} else {
		yyb3545 = r.CheckBreak()
	}
	if yyb3545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3545++
	if yyhl3545 {
		yyb3545 = yyj3545 > l
	} else {
		yyb3545 = r.CheckBreak()
	}
	if yyb3545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3545++
	if yyhl3545 {
		yyb3545 = yyj3545 > l
	} else {
		yyb3545 = r.CheckBreak()
	}
	if yyb3545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3545++
	if yyhl3545 {
		yyb3545 = yyj3545 > l
	} else {
		yyb3545 = r.CheckBreak()
	}
	if yyb3545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3545++
	if yyhl3545 {
		yyb3545 = yyj3545 > l
	} else {
		yyb3545 = r.CheckBreak()
	}
	if yyb3545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3545++
	if yyhl3545 {
		yyb3545 = yyj3545 > l
	} else {
		yyb3545 = r.CheckBreak()
	}
	if yyb3545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3553 := z.DecBinary()
		_ = yym3553
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3545++
		if yyhl3545 {
			yyb3545 = yyj3545 > l
		} else {
			yyb3545 = r.CheckBreak()
		}
		if yyb3545 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3545-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3554 := z.EncBinary()
		_ = yym3554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3555 := !z.EncBinary()
			yy2arr3555 := z.EncBasicHandle().StructToArray
			var yyq3555 [10]bool
			_, _, _ = yysep3555, yyq3555, yy2arr3555
			const yyr3555 bool = false
			yyq3555[0] = x.Kind != ""
			yyq3555[1] = x.APIVersion != ""
			yyq3555[2] = x.Container != ""
			yyq3555[3] = x.Follow != false
			yyq3555[4] = x.Previous != false
			yyq3555[5] = x.SinceSeconds != nil
			yyq3555[6] = x.SinceTime != nil
			yyq3555[7] = x.Timestamps != false
			yyq3555[8] = x.TailLines != nil
			yyq3555[9] = x.LimitBytes != nil
			var yynn3555 int
			if yyr3555 || yy2arr3555 {
				r.EncodeArrayStart(10)
			} else {
				yynn3555 = 0
				for _, b := range yyq3555 {
					if b {
						yynn3555++
					}
				}
				r.EncodeMapStart(yynn3555)
				yynn3555 = 0
			}
			if yyr3555 || yy2arr3555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3555[0] {
					yym3557 := z.EncBinary()
					_ = yym3557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3555[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3558 := z.EncBinary()
					_ = yym3558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3555 || yy2arr3555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3555[1] {
					yym3560 := z.EncBinary()
					_ = yym3560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3555[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3561 := z.EncBinary()
					_ = yym3561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3555 || yy2arr3555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3555[2] {
					yym3563 := z.EncBinary()
					_ = yym3563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3555[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3564 := z.EncBinary()
					_ = yym3564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3555 || yy2arr3555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3555[3] {
					yym3566 := z.EncBinary()
					_ = yym3566
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3555[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3567 := z.EncBinary()
					_ = yym3567
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3555 || yy2arr3555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3555[4] {
					yym3569 := z.EncBinary()
					_ = yym3569
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3555[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3570 := z.EncBinary()
					_ = yym3570
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3555 || yy2arr3555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3555[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3572 := *x.SinceSeconds
						yym3573 := z.EncBinary()
						_ = yym3573
						if false {
						} else {
							r.EncodeInt(int64(yy3572))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3555[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3574 := *x.SinceSeconds
						yym3575 := z.EncBinary()
						_ = yym3575
						if false {
						} else {
							r.EncodeInt(int64(yy3574))
						}
					}
				}
			}
			if yyr3555 || yy2arr3555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3555[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3577 := z.EncBinary()
						_ = yym3577
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3577 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3577 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3555[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3578 := z.EncBinary()
						_ = yym3578
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3578 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3578 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3555 || yy2arr3555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3555[7] {
					yym3580 := z.EncBinary()
					_ = yym3580
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3555[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3581 := z.EncBinary()
					_ = yym3581
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3555 || yy2arr3555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3555[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3583 := *x.TailLines
						yym3584 := z.EncBinary()
						_ = yym3584
						if false {
						} else {
							r.EncodeInt(int64(yy3583))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3555[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3585 := *x.TailLines
						yym3586 := z.EncBinary()
						_ = yym3586
						if false {
						} else {
							r.EncodeInt(int64(yy3585))
						}
					}
				}
			}
			if yyr3555 || yy2arr3555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3555[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3588 := *x.LimitBytes
						yym3589 := z.EncBinary()
						_ = yym3589
						if false {
						} else {
							r.EncodeInt(int64(yy3588))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3555[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3590 := *x.LimitBytes
						yym3591 := z.EncBinary()
						_ = yym3591
						if false {
						} else {
							r.EncodeInt(int64(yy3590))
						}
					}
				}
			}
			if yyr3555 || yy2arr3555 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3592 := z.DecBinary()
	_ = yym3592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3593 := r.ContainerType()
		if yyct3593 == codecSelferValueTypeMap1234 {
			yyl3593 := r.ReadMapStart()
			if yyl3593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3593, d)
			}
		} else if yyct3593 == codecSelferValueTypeArray1234 {
			yyl3593 := r.ReadArrayStart()
			if yyl3593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3594Slc
	var yyhl3594 bool = l >= 0
	for yyj3594 := 0; ; yyj3594++ {
		if yyhl3594 {
			if yyj3594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3594Slc = r.DecodeBytes(yys3594Slc, true, true)
		yys3594 := string(yys3594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3594 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3601 := z.DecBinary()
				_ = yym3601
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3603 := z.DecBinary()
				_ = yym3603
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3603 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3603 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3606 := z.DecBinary()
				_ = yym3606
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3608 := z.DecBinary()
				_ = yym3608
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3594)
		} // end switch yys3594
	} // end for yyj3594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3609 int
	var yyb3609 bool
	var yyhl3609 bool = l >= 0
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3616 := z.DecBinary()
		_ = yym3616
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3618 := z.DecBinary()
		_ = yym3618
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3618 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3618 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3621 := z.DecBinary()
		_ = yym3621
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3623 := z.DecBinary()
		_ = yym3623
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3609++
		if yyhl3609 {
			yyb3609 = yyj3609 > l
		} else {
			yyb3609 = r.CheckBreak()
		}
		if yyb3609 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3609-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3624 := z.EncBinary()
		_ = yym3624
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3625 := !z.EncBinary()
			yy2arr3625 := z.EncBasicHandle().StructToArray
			var yyq3625 [7]bool
			_, _, _ = yysep3625, yyq3625, yy2arr3625
			const yyr3625 bool = false
			yyq3625[0] = x.Kind != ""
			yyq3625[1] = x.APIVersion != ""
			yyq3625[2] = x.Stdin != false
			yyq3625[3] = x.Stdout != false
			yyq3625[4] = x.Stderr != false
			yyq3625[5] = x.TTY != false
			yyq3625[6] = x.Container != ""
			var yynn3625 int
			if yyr3625 || yy2arr3625 {
				r.EncodeArrayStart(7)
			} else {
				yynn3625 = 0
				for _, b := range yyq3625 {
					if b {
						yynn3625++
					}
				}
				r.EncodeMapStart(yynn3625)
				yynn3625 = 0
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[0] {
					yym3627 := z.EncBinary()
					_ = yym3627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3625[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[1] {
					yym3630 := z.EncBinary()
					_ = yym3630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3625[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3631 := z.EncBinary()
					_ = yym3631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[2] {
					yym3633 := z.EncBinary()
					_ = yym3633
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3625[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3634 := z.EncBinary()
					_ = yym3634
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[3] {
					yym3636 := z.EncBinary()
					_ = yym3636
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3625[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3637 := z.EncBinary()
					_ = yym3637
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[4] {
					yym3639 := z.EncBinary()
					_ = yym3639
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3625[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3640 := z.EncBinary()
					_ = yym3640
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[5] {
					yym3642 := z.EncBinary()
					_ = yym3642
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3625[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3643 := z.EncBinary()
					_ = yym3643
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[6] {
					yym3645 := z.EncBinary()
					_ = yym3645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3625[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3646 := z.EncBinary()
					_ = yym3646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3647 := z.DecBinary()
	_ = yym3647
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3648 := r.ContainerType()
		if yyct3648 == codecSelferValueTypeMap1234 {
			yyl3648 := r.ReadMapStart()
			if yyl3648 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3648, d)
			}
		} else if yyct3648 == codecSelferValueTypeArray1234 {
			yyl3648 := r.ReadArrayStart()
			if yyl3648 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3648, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3649Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3649Slc
	var yyhl3649 bool = l >= 0
	for yyj3649 := 0; ; yyj3649++ {
		if yyhl3649 {
			if yyj3649 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3649Slc = r.DecodeBytes(yys3649Slc, true, true)
		yys3649 := string(yys3649Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3649 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3649)
		} // end switch yys3649
	} // end for yyj3649
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3657 int
	var yyb3657 bool
	var yyhl3657 bool = l >= 0
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3657++
		if yyhl3657 {
			yyb3657 = yyj3657 > l
		} else {
			yyb3657 = r.CheckBreak()
		}
		if yyb3657 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3657-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3665 := z.EncBinary()
		_ = yym3665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3666 := !z.EncBinary()
			yy2arr3666 := z.EncBasicHandle().StructToArray
			var yyq3666 [8]bool
			_, _, _ = yysep3666, yyq3666, yy2arr3666
			const yyr3666 bool = false
			yyq3666[0] = x.Kind != ""
			yyq3666[1] = x.APIVersion != ""
			yyq3666[2] = x.Stdin != false
			yyq3666[3] = x.Stdout != false
			yyq3666[4] = x.Stderr != false
			yyq3666[5] = x.TTY != false
			yyq3666[6] = x.Container != ""
			var yynn3666 int
			if yyr3666 || yy2arr3666 {
				r.EncodeArrayStart(8)
			} else {
				yynn3666 = 1
				for _, b := range yyq3666 {
					if b {
						yynn3666++
					}
				}
				r.EncodeMapStart(yynn3666)
				yynn3666 = 0
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[0] {
					yym3668 := z.EncBinary()
					_ = yym3668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3666[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[1] {
					yym3671 := z.EncBinary()
					_ = yym3671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3666[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3672 := z.EncBinary()
					_ = yym3672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[2] {
					yym3674 := z.EncBinary()
					_ = yym3674
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3666[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3675 := z.EncBinary()
					_ = yym3675
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[3] {
					yym3677 := z.EncBinary()
					_ = yym3677
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3666[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[4] {
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3666[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3681 := z.EncBinary()
					_ = yym3681
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[5] {
					yym3683 := z.EncBinary()
					_ = yym3683
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3666[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3684 := z.EncBinary()
					_ = yym3684
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[6] {
					yym3686 := z.EncBinary()
					_ = yym3686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3666[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3687 := z.EncBinary()
					_ = yym3687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3689 := z.EncBinary()
					_ = yym3689
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3690 := z.EncBinary()
					_ = yym3690
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3691 := z.DecBinary()
	_ = yym3691
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3692 := r.ContainerType()
		if yyct3692 == codecSelferValueTypeMap1234 {
			yyl3692 := r.ReadMapStart()
			if yyl3692 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3692, d)
			}
		} else if yyct3692 == codecSelferValueTypeArray1234 {
			yyl3692 := r.ReadArrayStart()
			if yyl3692 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3692, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3693Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3693Slc
	var yyhl3693 bool = l >= 0
	for yyj3693 := 0; ; yyj3693++ {
		if yyhl3693 {
			if yyj3693 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3693Slc = r.DecodeBytes(yys3693Slc, true, true)
		yys3693 := string(yys3693Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3693 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3701 := &x.Command
				yym3702 := z.DecBinary()
				_ = yym3702
				if false {
				} else {
					z.F.DecSliceStringX(yyv3701, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3693)
		} // end switch yys3693
	} // end for yyj3693
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3703 int
	var yyb3703 bool
	var yyhl3703 bool = l >= 0
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3711 := &x.Command
		yym3712 := z.DecBinary()
		_ = yym3712
		if false {
		} else {
			z.F.DecSliceStringX(yyv3711, false, d)
		}
	}
	for {
		yyj3703++
		if yyhl3703 {
			yyb3703 = yyj3703 > l
		} else {
			yyb3703 = r.CheckBreak()
		}
		if yyb3703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3713 := z.EncBinary()
		_ = yym3713
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3714 := !z.EncBinary()
			yy2arr3714 := z.EncBasicHandle().StructToArray
			var yyq3714 [3]bool
			_, _, _ = yysep3714, yyq3714, yy2arr3714
			const yyr3714 bool = false
			yyq3714[0] = x.Kind != ""
			yyq3714[1] = x.APIVersion != ""
			yyq3714[2] = x.Path != ""
			var yynn3714 int
			if yyr3714 || yy2arr3714 {
				r.EncodeArrayStart(3)
			} else {
				yynn3714 = 0
				for _, b := range yyq3714 {
					if b {
						yynn3714++
					}
				}
				r.EncodeMapStart(yynn3714)
				yynn3714 = 0
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[0] {
					yym3716 := z.EncBinary()
					_ = yym3716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3714[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3717 := z.EncBinary()
					_ = yym3717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[1] {
					yym3719 := z.EncBinary()
					_ = yym3719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3714[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3720 := z.EncBinary()
					_ = yym3720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[2] {
					yym3722 := z.EncBinary()
					_ = yym3722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3714[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3723 := z.EncBinary()
					_ = yym3723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3724 := z.DecBinary()
	_ = yym3724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3725 := r.ContainerType()
		if yyct3725 == codecSelferValueTypeMap1234 {
			yyl3725 := r.ReadMapStart()
			if yyl3725 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3725, d)
			}
		} else if yyct3725 == codecSelferValueTypeArray1234 {
			yyl3725 := r.ReadArrayStart()
			if yyl3725 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3726Slc
	var yyhl3726 bool = l >= 0
	for yyj3726 := 0; ; yyj3726++ {
		if yyhl3726 {
			if yyj3726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3726Slc = r.DecodeBytes(yys3726Slc, true, true)
		yys3726 := string(yys3726Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3726 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3726)
		} // end switch yys3726
	} // end for yyj3726
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3730 int
	var yyb3730 bool
	var yyhl3730 bool = l >= 0
	yyj3730++
	if yyhl3730 {
		yyb3730 = yyj3730 > l
	} else {
		yyb3730 = r.CheckBreak()
	}
	if yyb3730 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3730++
	if yyhl3730 {
		yyb3730 = yyj3730 > l
	} else {
		yyb3730 = r.CheckBreak()
	}
	if yyb3730 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3730++
	if yyhl3730 {
		yyb3730 = yyj3730 > l
	} else {
		yyb3730 = r.CheckBreak()
	}
	if yyb3730 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3730++
		if yyhl3730 {
			yyb3730 = yyj3730 > l
		} else {
			yyb3730 = r.CheckBreak()
		}
		if yyb3730 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3730-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3734 := z.EncBinary()
		_ = yym3734
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3735 := !z.EncBinary()
			yy2arr3735 := z.EncBasicHandle().StructToArray
			var yyq3735 [3]bool
			_, _, _ = yysep3735, yyq3735, yy2arr3735
			const yyr3735 bool = false
			yyq3735[0] = x.Kind != ""
			yyq3735[1] = x.APIVersion != ""
			yyq3735[2] = x.Path != ""
			var yynn3735 int
			if yyr3735 || yy2arr3735 {
				r.EncodeArrayStart(3)
			} else {
				yynn3735 = 0
				for _, b := range yyq3735 {
					if b {
						yynn3735++
					}
				}
				r.EncodeMapStart(yynn3735)
				yynn3735 = 0
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[0] {
					yym3737 := z.EncBinary()
					_ = yym3737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3735[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3738 := z.EncBinary()
					_ = yym3738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[1] {
					yym3740 := z.EncBinary()
					_ = yym3740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3735[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3741 := z.EncBinary()
					_ = yym3741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[2] {
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3735[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3744 := z.EncBinary()
					_ = yym3744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3745 := z.DecBinary()
	_ = yym3745
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3746 := r.ContainerType()
		if yyct3746 == codecSelferValueTypeMap1234 {
			yyl3746 := r.ReadMapStart()
			if yyl3746 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3746, d)
			}
		} else if yyct3746 == codecSelferValueTypeArray1234 {
			yyl3746 := r.ReadArrayStart()
			if yyl3746 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3746, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3747Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3747Slc
	var yyhl3747 bool = l >= 0
	for yyj3747 := 0; ; yyj3747++ {
		if yyhl3747 {
			if yyj3747 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3747Slc = r.DecodeBytes(yys3747Slc, true, true)
		yys3747 := string(yys3747Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3747 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3747)
		} // end switch yys3747
	} // end for yyj3747
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3751 int
	var yyb3751 bool
	var yyhl3751 bool = l >= 0
	yyj3751++
	if yyhl3751 {
		yyb3751 = yyj3751 > l
	} else {
		yyb3751 = r.CheckBreak()
	}
	if yyb3751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3751++
	if yyhl3751 {
		yyb3751 = yyj3751 > l
	} else {
		yyb3751 = r.CheckBreak()
	}
	if yyb3751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3751++
	if yyhl3751 {
		yyb3751 = yyj3751 > l
	} else {
		yyb3751 = r.CheckBreak()
	}
	if yyb3751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3751++
		if yyhl3751 {
			yyb3751 = yyj3751 > l
		} else {
			yyb3751 = r.CheckBreak()
		}
		if yyb3751 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3751-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3755 := z.EncBinary()
		_ = yym3755
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3756 := !z.EncBinary()
			yy2arr3756 := z.EncBasicHandle().StructToArray
			var yyq3756 [3]bool
			_, _, _ = yysep3756, yyq3756, yy2arr3756
			const yyr3756 bool = false
			yyq3756[0] = x.Kind != ""
			yyq3756[1] = x.APIVersion != ""
			yyq3756[2] = x.Path != ""
			var yynn3756 int
			if yyr3756 || yy2arr3756 {
				r.EncodeArrayStart(3)
			} else {
				yynn3756 = 0
				for _, b := range yyq3756 {
					if b {
						yynn3756++
					}
				}
				r.EncodeMapStart(yynn3756)
				yynn3756 = 0
			}
			if yyr3756 || yy2arr3756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3756[0] {
					yym3758 := z.EncBinary()
					_ = yym3758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3756[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3759 := z.EncBinary()
					_ = yym3759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3756 || yy2arr3756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3756[1] {
					yym3761 := z.EncBinary()
					_ = yym3761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3756[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3762 := z.EncBinary()
					_ = yym3762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3756 || yy2arr3756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3756[2] {
					yym3764 := z.EncBinary()
					_ = yym3764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3756[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3765 := z.EncBinary()
					_ = yym3765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3756 || yy2arr3756 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3766 := z.DecBinary()
	_ = yym3766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3767 := r.ContainerType()
		if yyct3767 == codecSelferValueTypeMap1234 {
			yyl3767 := r.ReadMapStart()
			if yyl3767 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3767, d)
			}
		} else if yyct3767 == codecSelferValueTypeArray1234 {
			yyl3767 := r.ReadArrayStart()
			if yyl3767 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3767, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3768Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3768Slc
	var yyhl3768 bool = l >= 0
	for yyj3768 := 0; ; yyj3768++ {
		if yyhl3768 {
			if yyj3768 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3768Slc = r.DecodeBytes(yys3768Slc, true, true)
		yys3768 := string(yys3768Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3768 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3768)
		} // end switch yys3768
	} // end for yyj3768
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3772 int
	var yyb3772 bool
	var yyhl3772 bool = l >= 0
	yyj3772++
	if yyhl3772 {
		yyb3772 = yyj3772 > l
	} else {
		yyb3772 = r.CheckBreak()
	}
	if yyb3772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3772++
	if yyhl3772 {
		yyb3772 = yyj3772 > l
	} else {
		yyb3772 = r.CheckBreak()
	}
	if yyb3772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3772++
	if yyhl3772 {
		yyb3772 = yyj3772 > l
	} else {
		yyb3772 = r.CheckBreak()
	}
	if yyb3772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3772++
		if yyhl3772 {
			yyb3772 = yyj3772 > l
		} else {
			yyb3772 = r.CheckBreak()
		}
		if yyb3772 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3772-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3776 := z.EncBinary()
		_ = yym3776
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3777 := !z.EncBinary()
			yy2arr3777 := z.EncBasicHandle().StructToArray
			var yyq3777 [5]bool
			_, _, _ = yysep3777, yyq3777, yy2arr3777
			const yyr3777 bool = false
			yyq3777[4] = x.Controller != nil
			var yynn3777 int
			if yyr3777 || yy2arr3777 {
				r.EncodeArrayStart(5)
			} else {
				yynn3777 = 4
				for _, b := range yyq3777 {
					if b {
						yynn3777++
					}
				}
				r.EncodeMapStart(yynn3777)
				yynn3777 = 0
			}
			if yyr3777 || yy2arr3777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3779 := z.EncBinary()
				_ = yym3779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3780 := z.EncBinary()
				_ = yym3780
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3777 || yy2arr3777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3782 := z.EncBinary()
				_ = yym3782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3783 := z.EncBinary()
				_ = yym3783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3777 || yy2arr3777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3785 := z.EncBinary()
				_ = yym3785
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3786 := z.EncBinary()
				_ = yym3786
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3777 || yy2arr3777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3788 := z.EncBinary()
				_ = yym3788
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3789 := z.EncBinary()
				_ = yym3789
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3777 || yy2arr3777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3777[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3791 := *x.Controller
						yym3792 := z.EncBinary()
						_ = yym3792
						if false {
						} else {
							r.EncodeBool(bool(yy3791))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3777[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3793 := *x.Controller
						yym3794 := z.EncBinary()
						_ = yym3794
						if false {
						} else {
							r.EncodeBool(bool(yy3793))
						}
					}
				}
			}
			if yyr3777 || yy2arr3777 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3795 := z.DecBinary()
	_ = yym3795
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3796 := r.ContainerType()
		if yyct3796 == codecSelferValueTypeMap1234 {
			yyl3796 := r.ReadMapStart()
			if yyl3796 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3796, d)
			}
		} else if yyct3796 == codecSelferValueTypeArray1234 {
			yyl3796 := r.ReadArrayStart()
			if yyl3796 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3796, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3797Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3797Slc
	var yyhl3797 bool = l >= 0
	for yyj3797 := 0; ; yyj3797++ {
		if yyhl3797 {
			if yyj3797 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3797Slc = r.DecodeBytes(yys3797Slc, true, true)
		yys3797 := string(yys3797Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3797 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3803 := z.DecBinary()
				_ = yym3803
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3797)
		} // end switch yys3797
	} // end for yyj3797
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3804 int
	var yyb3804 bool
	var yyhl3804 bool = l >= 0
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3810 := z.DecBinary()
		_ = yym3810
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3804++
		if yyhl3804 {
			yyb3804 = yyj3804 > l
		} else {
			yyb3804 = r.CheckBreak()
		}
		if yyb3804 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3804-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3811 := z.EncBinary()
		_ = yym3811
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3812 := !z.EncBinary()
			yy2arr3812 := z.EncBasicHandle().StructToArray
			var yyq3812 [7]bool
			_, _, _ = yysep3812, yyq3812, yy2arr3812
			const yyr3812 bool = false
			yyq3812[0] = x.Kind != ""
			yyq3812[1] = x.Namespace != ""
			yyq3812[2] = x.Name != ""
			yyq3812[3] = x.UID != ""
			yyq3812[4] = x.APIVersion != ""
			yyq3812[5] = x.ResourceVersion != ""
			yyq3812[6] = x.FieldPath != ""
			var yynn3812 int
			if yyr3812 || yy2arr3812 {
				r.EncodeArrayStart(7)
			} else {
				yynn3812 = 0
				for _, b := range yyq3812 {
					if b {
						yynn3812++
					}
				}
				r.EncodeMapStart(yynn3812)
				yynn3812 = 0
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[0] {
					yym3814 := z.EncBinary()
					_ = yym3814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3812[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3815 := z.EncBinary()
					_ = yym3815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[1] {
					yym3817 := z.EncBinary()
					_ = yym3817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3812[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[2] {
					yym3820 := z.EncBinary()
					_ = yym3820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3812[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3821 := z.EncBinary()
					_ = yym3821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[3] {
					yym3823 := z.EncBinary()
					_ = yym3823
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3812[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3824 := z.EncBinary()
					_ = yym3824
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[4] {
					yym3826 := z.EncBinary()
					_ = yym3826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3812[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3827 := z.EncBinary()
					_ = yym3827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[5] {
					yym3829 := z.EncBinary()
					_ = yym3829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3812[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3830 := z.EncBinary()
					_ = yym3830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[6] {
					yym3832 := z.EncBinary()
					_ = yym3832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3812[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3833 := z.EncBinary()
					_ = yym3833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3834 := z.DecBinary()
	_ = yym3834
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3835 := r.ContainerType()
		if yyct3835 == codecSelferValueTypeMap1234 {
			yyl3835 := r.ReadMapStart()
			if yyl3835 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3835, d)
			}
		} else if yyct3835 == codecSelferValueTypeArray1234 {
			yyl3835 := r.ReadArrayStart()
			if yyl3835 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3835, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3836Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3836Slc
	var yyhl3836 bool = l >= 0
	for yyj3836 := 0; ; yyj3836++ {
		if yyhl3836 {
			if yyj3836 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3836Slc = r.DecodeBytes(yys3836Slc, true, true)
		yys3836 := string(yys3836Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3836 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3836)
		} // end switch yys3836
	} // end for yyj3836
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3844 int
	var yyb3844 bool
	var yyhl3844 bool = l >= 0
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3844++
		if yyhl3844 {
			yyb3844 = yyj3844 > l
		} else {
			yyb3844 = r.CheckBreak()
		}
		if yyb3844 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3844-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3852 := z.EncBinary()
		_ = yym3852
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3853 := !z.EncBinary()
			yy2arr3853 := z.EncBasicHandle().StructToArray
			var yyq3853 [1]bool
			_, _, _ = yysep3853, yyq3853, yy2arr3853
			const yyr3853 bool = false
			yyq3853[0] = x.Name != ""
			var yynn3853 int
			if yyr3853 || yy2arr3853 {
				r.EncodeArrayStart(1)
			} else {
				yynn3853 = 0
				for _, b := range yyq3853 {
					if b {
						yynn3853++
					}
				}
				r.EncodeMapStart(yynn3853)
				yynn3853 = 0
			}
			if yyr3853 || yy2arr3853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3853[0] {
					yym3855 := z.EncBinary()
					_ = yym3855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3853[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3856 := z.EncBinary()
					_ = yym3856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3853 || yy2arr3853 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3857 := z.DecBinary()
	_ = yym3857
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3858 := r.ContainerType()
		if yyct3858 == codecSelferValueTypeMap1234 {
			yyl3858 := r.ReadMapStart()
			if yyl3858 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3858, d)
			}
		} else if yyct3858 == codecSelferValueTypeArray1234 {
			yyl3858 := r.ReadArrayStart()
			if yyl3858 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3858, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3859Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3859Slc
	var yyhl3859 bool = l >= 0
	for yyj3859 := 0; ; yyj3859++ {
		if yyhl3859 {
			if yyj3859 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3859Slc = r.DecodeBytes(yys3859Slc, true, true)
		yys3859 := string(yys3859Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3859 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3859)
		} // end switch yys3859
	} // end for yyj3859
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3861 int
	var yyb3861 bool
	var yyhl3861 bool = l >= 0
	yyj3861++
	if yyhl3861 {
		yyb3861 = yyj3861 > l
	} else {
		yyb3861 = r.CheckBreak()
	}
	if yyb3861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3861++
		if yyhl3861 {
			yyb3861 = yyj3861 > l
		} else {
			yyb3861 = r.CheckBreak()
		}
		if yyb3861 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3861-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3863 := z.EncBinary()
		_ = yym3863
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3864 := !z.EncBinary()
			yy2arr3864 := z.EncBasicHandle().StructToArray
			var yyq3864 [3]bool
			_, _, _ = yysep3864, yyq3864, yy2arr3864
			const yyr3864 bool = false
			yyq3864[0] = x.Kind != ""
			yyq3864[1] = x.APIVersion != ""
			yyq3864[2] = true
			var yynn3864 int
			if yyr3864 || yy2arr3864 {
				r.EncodeArrayStart(3)
			} else {
				yynn3864 = 0
				for _, b := range yyq3864 {
					if b {
						yynn3864++
					}
				}
				r.EncodeMapStart(yynn3864)
				yynn3864 = 0
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3864[0] {
					yym3866 := z.EncBinary()
					_ = yym3866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3864[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3867 := z.EncBinary()
					_ = yym3867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3864[1] {
					yym3869 := z.EncBinary()
					_ = yym3869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3864[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3870 := z.EncBinary()
					_ = yym3870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3864[2] {
					yy3872 := &x.Reference
					yy3872.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3864[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3873 := &x.Reference
					yy3873.CodecEncodeSelf(e)
				}
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3874 := z.DecBinary()
	_ = yym3874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3875 := r.ContainerType()
		if yyct3875 == codecSelferValueTypeMap1234 {
			yyl3875 := r.ReadMapStart()
			if yyl3875 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3875, d)
			}
		} else if yyct3875 == codecSelferValueTypeArray1234 {
			yyl3875 := r.ReadArrayStart()
			if yyl3875 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3876Slc
	var yyhl3876 bool = l >= 0
	for yyj3876 := 0; ; yyj3876++ {
		if yyhl3876 {
			if yyj3876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3876Slc = r.DecodeBytes(yys3876Slc, true, true)
		yys3876 := string(yys3876Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3876 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3879 := &x.Reference
				yyv3879.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3876)
		} // end switch yys3876
	} // end for yyj3876
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3880 int
	var yyb3880 bool
	var yyhl3880 bool = l >= 0
	yyj3880++
	if yyhl3880 {
		yyb3880 = yyj3880 > l
	} else {
		yyb3880 = r.CheckBreak()
	}
	if yyb3880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3880++
	if yyhl3880 {
		yyb3880 = yyj3880 > l
	} else {
		yyb3880 = r.CheckBreak()
	}
	if yyb3880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3880++
	if yyhl3880 {
		yyb3880 = yyj3880 > l
	} else {
		yyb3880 = r.CheckBreak()
	}
	if yyb3880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3883 := &x.Reference
		yyv3883.CodecDecodeSelf(d)
	}
	for {
		yyj3880++
		if yyhl3880 {
			yyb3880 = yyj3880 > l
		} else {
			yyb3880 = r.CheckBreak()
		}
		if yyb3880 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3880-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3884 := z.EncBinary()
		_ = yym3884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3885 := !z.EncBinary()
			yy2arr3885 := z.EncBasicHandle().StructToArray
			var yyq3885 [2]bool
			_, _, _ = yysep3885, yyq3885, yy2arr3885
			const yyr3885 bool = false
			yyq3885[0] = x.Component != ""
			yyq3885[1] = x.Host != ""
			var yynn3885 int
			if yyr3885 || yy2arr3885 {
				r.EncodeArrayStart(2)
			} else {
				yynn3885 = 0
				for _, b := range yyq3885 {
					if b {
						yynn3885++
					}
				}
				r.EncodeMapStart(yynn3885)
				yynn3885 = 0
			}
			if yyr3885 || yy2arr3885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3885[0] {
					yym3887 := z.EncBinary()
					_ = yym3887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3885[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3888 := z.EncBinary()
					_ = yym3888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3885 || yy2arr3885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3885[1] {
					yym3890 := z.EncBinary()
					_ = yym3890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3885[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3891 := z.EncBinary()
					_ = yym3891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3885 || yy2arr3885 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3892 := z.DecBinary()
	_ = yym3892
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3893 := r.ContainerType()
		if yyct3893 == codecSelferValueTypeMap1234 {
			yyl3893 := r.ReadMapStart()
			if yyl3893 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3893, d)
			}
		} else if yyct3893 == codecSelferValueTypeArray1234 {
			yyl3893 := r.ReadArrayStart()
			if yyl3893 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3893, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3894Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3894Slc
	var yyhl3894 bool = l >= 0
	for yyj3894 := 0; ; yyj3894++ {
		if yyhl3894 {
			if yyj3894 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3894Slc = r.DecodeBytes(yys3894Slc, true, true)
		yys3894 := string(yys3894Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3894 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3894)
		} // end switch yys3894
	} // end for yyj3894
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3897 int
	var yyb3897 bool
	var yyhl3897 bool = l >= 0
	yyj3897++
	if yyhl3897 {
		yyb3897 = yyj3897 > l
	} else {
		yyb3897 = r.CheckBreak()
	}
	if yyb3897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3897++
	if yyhl3897 {
		yyb3897 = yyj3897 > l
	} else {
		yyb3897 = r.CheckBreak()
	}
	if yyb3897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3897++
		if yyhl3897 {
			yyb3897 = yyj3897 > l
		} else {
			yyb3897 = r.CheckBreak()
		}
		if yyb3897 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3897-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3900 := z.EncBinary()
		_ = yym3900
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3901 := !z.EncBinary()
			yy2arr3901 := z.EncBasicHandle().StructToArray
			var yyq3901 [11]bool
			_, _, _ = yysep3901, yyq3901, yy2arr3901
			const yyr3901 bool = false
			yyq3901[0] = x.Kind != ""
			yyq3901[1] = x.APIVersion != ""
			yyq3901[4] = x.Reason != ""
			yyq3901[5] = x.Message != ""
			yyq3901[6] = true
			yyq3901[7] = true
			yyq3901[8] = true
			yyq3901[9] = x.Count != 0
			yyq3901[10] = x.Type != ""
			var yynn3901 int
			if yyr3901 || yy2arr3901 {
				r.EncodeArrayStart(11)
			} else {
				yynn3901 = 2
				for _, b := range yyq3901 {
					if b {
						yynn3901++
					}
				}
				r.EncodeMapStart(yynn3901)
				yynn3901 = 0
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3901[0] {
					yym3903 := z.EncBinary()
					_ = yym3903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3901[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3904 := z.EncBinary()
					_ = yym3904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3901[1] {
					yym3906 := z.EncBinary()
					_ = yym3906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3901[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3907 := z.EncBinary()
					_ = yym3907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3909 := &x.ObjectMeta
				yy3909.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3910 := &x.ObjectMeta
				yy3910.CodecEncodeSelf(e)
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3912 := &x.InvolvedObject
				yy3912.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3913 := &x.InvolvedObject
				yy3913.CodecEncodeSelf(e)
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3901[4] {
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3901[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3916 := z.EncBinary()
					_ = yym3916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3901[5] {
					yym3918 := z.EncBinary()
					_ = yym3918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3901[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3919 := z.EncBinary()
					_ = yym3919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3901[6] {
					yy3921 := &x.Source
					yy3921.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3901[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3922 := &x.Source
					yy3922.CodecEncodeSelf(e)
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3901[7] {
					yy3924 := &x.FirstTimestamp
					yym3925 := z.EncBinary()
					_ = yym3925
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3924) {
					} else if yym3925 {
						z.EncBinaryMarshal(yy3924)
					} else if !yym3925 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3924)
					} else {
						z.EncFallback(yy3924)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3901[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3926 := &x.FirstTimestamp
					yym3927 := z.EncBinary()
					_ = yym3927
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3926) {
					} else if yym3927 {
						z.EncBinaryMarshal(yy3926)
					} else if !yym3927 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3926)
					} else {
						z.EncFallback(yy3926)
					}
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3901[8] {
					yy3929 := &x.LastTimestamp
					yym3930 := z.EncBinary()
					_ = yym3930
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3929) {
					} else if yym3930 {
						z.EncBinaryMarshal(yy3929)
					} else if !yym3930 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3929)
					} else {
						z.EncFallback(yy3929)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3901[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3931 := &x.LastTimestamp
					yym3932 := z.EncBinary()
					_ = yym3932
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3931) {
					} else if yym3932 {
						z.EncBinaryMarshal(yy3931)
					} else if !yym3932 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3931)
					} else {
						z.EncFallback(yy3931)
					}
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3901[9] {
					yym3934 := z.EncBinary()
					_ = yym3934
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3901[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3935 := z.EncBinary()
					_ = yym3935
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3901[10] {
					yym3937 := z.EncBinary()
					_ = yym3937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3901[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3938 := z.EncBinary()
					_ = yym3938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3939 := z.DecBinary()
	_ = yym3939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3940 := r.ContainerType()
		if yyct3940 == codecSelferValueTypeMap1234 {
			yyl3940 := r.ReadMapStart()
			if yyl3940 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3940, d)
			}
		} else if yyct3940 == codecSelferValueTypeArray1234 {
			yyl3940 := r.ReadArrayStart()
			if yyl3940 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3940, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3941Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3941Slc
	var yyhl3941 bool = l >= 0
	for yyj3941 := 0; ; yyj3941++ {
		if yyhl3941 {
			if yyj3941 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3941Slc = r.DecodeBytes(yys3941Slc, true, true)
		yys3941 := string(yys3941Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3941 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3944 := &x.ObjectMeta
				yyv3944.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3945 := &x.InvolvedObject
				yyv3945.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3948 := &x.Source
				yyv3948.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3949 := &x.FirstTimestamp
				yym3950 := z.DecBinary()
				_ = yym3950
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3949) {
				} else if yym3950 {
					z.DecBinaryUnmarshal(yyv3949)
				} else if !yym3950 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3949)
				} else {
					z.DecFallback(yyv3949, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3951 := &x.LastTimestamp
				yym3952 := z.DecBinary()
				_ = yym3952
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3951) {
				} else if yym3952 {
					z.DecBinaryUnmarshal(yyv3951)
				} else if !yym3952 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3951)
				} else {
					z.DecFallback(yyv3951, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3941)
		} // end switch yys3941
	} // end for yyj3941
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3955 int
	var yyb3955 bool
	var yyhl3955 bool = l >= 0
	yyj3955++
	if yyhl3955 {
		yyb3955 = yyj3955 > l
	} else {
		yyb3955 = r.CheckBreak()
	}
	if yyb3955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3955++
	if yyhl3955 {
		yyb3955 = yyj3955 > l
	} else {
		yyb3955 = r.CheckBreak()
	}
	if yyb3955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3955++
	if yyhl3955 {
		yyb3955 = yyj3955 > l
	} else {
		yyb3955 = r.CheckBreak()
	}
	if yyb3955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3958 := &x.ObjectMeta
		yyv3958.CodecDecodeSelf(d)
	}
	yyj3955++
	if yyhl3955 {
		yyb3955 = yyj3955 > l
	} else {
		yyb3955 = r.CheckBreak()
	}
	if yyb3955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3959 := &x.InvolvedObject
		yyv3959.CodecDecodeSelf(d)
	}
	yyj3955++
	if yyhl3955 {
		yyb3955 = yyj3955 > l
	} else {
		yyb3955 = r.CheckBreak()
	}
	if yyb3955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3955++
	if yyhl3955 {
		yyb3955 = yyj3955 > l
	} else {
		yyb3955 = r.CheckBreak()
	}
	if yyb3955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3955++
	if yyhl3955 {
		yyb3955 = yyj3955 > l
	} else {
		yyb3955 = r.CheckBreak()
	}
	if yyb3955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3962 := &x.Source
		yyv3962.CodecDecodeSelf(d)
	}
	yyj3955++
	if yyhl3955 {
		yyb3955 = yyj3955 > l
	} else {
		yyb3955 = r.CheckBreak()
	}
	if yyb3955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3963 := &x.FirstTimestamp
		yym3964 := z.DecBinary()
		_ = yym3964
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3963) {
		} else if yym3964 {
			z.DecBinaryUnmarshal(yyv3963)
		} else if !yym3964 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3963)
		} else {
			z.DecFallback(yyv3963, false)
		}
	}
	yyj3955++
	if yyhl3955 {
		yyb3955 = yyj3955 > l
	} else {
		yyb3955 = r.CheckBreak()
	}
	if yyb3955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3965 := &x.LastTimestamp
		yym3966 := z.DecBinary()
		_ = yym3966
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3965) {
		} else if yym3966 {
			z.DecBinaryUnmarshal(yyv3965)
		} else if !yym3966 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3965)
		} else {
			z.DecFallback(yyv3965, false)
		}
	}
	yyj3955++
	if yyhl3955 {
		yyb3955 = yyj3955 > l
	} else {
		yyb3955 = r.CheckBreak()
	}
	if yyb3955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3955++
	if yyhl3955 {
		yyb3955 = yyj3955 > l
	} else {
		yyb3955 = r.CheckBreak()
	}
	if yyb3955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3955++
		if yyhl3955 {
			yyb3955 = yyj3955 > l
		} else {
			yyb3955 = r.CheckBreak()
		}
		if yyb3955 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3955-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3969 := z.EncBinary()
		_ = yym3969
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3970 := !z.EncBinary()
			yy2arr3970 := z.EncBasicHandle().StructToArray
			var yyq3970 [4]bool
			_, _, _ = yysep3970, yyq3970, yy2arr3970
			const yyr3970 bool = false
			yyq3970[0] = x.Kind != ""
			yyq3970[1] = x.APIVersion != ""
			yyq3970[2] = true
			var yynn3970 int
			if yyr3970 || yy2arr3970 {
				r.EncodeArrayStart(4)
			} else {
				yynn3970 = 1
				for _, b := range yyq3970 {
					if b {
						yynn3970++
					}
				}
				r.EncodeMapStart(yynn3970)
				yynn3970 = 0
			}
			if yyr3970 || yy2arr3970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3970[0] {
					yym3972 := z.EncBinary()
					_ = yym3972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3970[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3973 := z.EncBinary()
					_ = yym3973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3970 || yy2arr3970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3970[1] {
					yym3975 := z.EncBinary()
					_ = yym3975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3970[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3976 := z.EncBinary()
					_ = yym3976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3970 || yy2arr3970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3970[2] {
					yy3978 := &x.ListMeta
					yym3979 := z.EncBinary()
					_ = yym3979
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3978) {
					} else {
						z.EncFallback(yy3978)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3970[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3980 := &x.ListMeta
					yym3981 := z.EncBinary()
					_ = yym3981
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3980) {
					} else {
						z.EncFallback(yy3980)
					}
				}
			}
			if yyr3970 || yy2arr3970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3983 := z.EncBinary()
					_ = yym3983
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3984 := z.EncBinary()
					_ = yym3984
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3970 || yy2arr3970 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3985 := z.DecBinary()
	_ = yym3985
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3986 := r.ContainerType()
		if yyct3986 == codecSelferValueTypeMap1234 {
			yyl3986 := r.ReadMapStart()
			if yyl3986 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3986, d)
			}
		} else if yyct3986 == codecSelferValueTypeArray1234 {
			yyl3986 := r.ReadArrayStart()
			if yyl3986 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3986, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3987Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3987Slc
	var yyhl3987 bool = l >= 0
	for yyj3987 := 0; ; yyj3987++ {
		if yyhl3987 {
			if yyj3987 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3987Slc = r.DecodeBytes(yys3987Slc, true, true)
		yys3987 := string(yys3987Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3987 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3990 := &x.ListMeta
				yym3991 := z.DecBinary()
				_ = yym3991
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3990) {
				} else {
					z.DecFallback(yyv3990, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3992 := &x.Items
				yym3993 := z.DecBinary()
				_ = yym3993
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3992), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3987)
		} // end switch yys3987
	} // end for yyj3987
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3994 int
	var yyb3994 bool
	var yyhl3994 bool = l >= 0
	yyj3994++
	if yyhl3994 {
		yyb3994 = yyj3994 > l
	} else {
		yyb3994 = r.CheckBreak()
	}
	if yyb3994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3994++
	if yyhl3994 {
		yyb3994 = yyj3994 > l
	} else {
		yyb3994 = r.CheckBreak()
	}
	if yyb3994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3994++
	if yyhl3994 {
		yyb3994 = yyj3994 > l
	} else {
		yyb3994 = r.CheckBreak()
	}
	if yyb3994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3997 := &x.ListMeta
		yym3998 := z.DecBinary()
		_ = yym3998
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3997) {
		} else {
			z.DecFallback(yyv3997, false)
		}
	}
	yyj3994++
	if yyhl3994 {
		yyb3994 = yyj3994 > l
	} else {
		yyb3994 = r.CheckBreak()
	}
	if yyb3994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3999 := &x.Items
		yym4000 := z.DecBinary()
		_ = yym4000
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3999), d)
		}
	}
	for {
		yyj3994++
		if yyhl3994 {
			yyb3994 = yyj3994 > l
		} else {
			yyb3994 = r.CheckBreak()
		}
		if yyb3994 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3994-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4001 := z.EncBinary()
		_ = yym4001
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4002 := !z.EncBinary()
			yy2arr4002 := z.EncBasicHandle().StructToArray
			var yyq4002 [4]bool
			_, _, _ = yysep4002, yyq4002, yy2arr4002
			const yyr4002 bool = false
			yyq4002[0] = x.Kind != ""
			yyq4002[1] = x.APIVersion != ""
			yyq4002[2] = true
			var yynn4002 int
			if yyr4002 || yy2arr4002 {
				r.EncodeArrayStart(4)
			} else {
				yynn4002 = 1
				for _, b := range yyq4002 {
					if b {
						yynn4002++
					}
				}
				r.EncodeMapStart(yynn4002)
				yynn4002 = 0
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[0] {
					yym4004 := z.EncBinary()
					_ = yym4004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4002[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4005 := z.EncBinary()
					_ = yym4005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[1] {
					yym4007 := z.EncBinary()
					_ = yym4007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4002[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4008 := z.EncBinary()
					_ = yym4008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[2] {
					yy4010 := &x.ListMeta
					yym4011 := z.EncBinary()
					_ = yym4011
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4010) {
					} else {
						z.EncFallback(yy4010)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4002[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4012 := &x.ListMeta
					yym4013 := z.EncBinary()
					_ = yym4013
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4012) {
					} else {
						z.EncFallback(yy4012)
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4015 := z.EncBinary()
					_ = yym4015
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4016 := z.EncBinary()
					_ = yym4016
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4017 := z.DecBinary()
	_ = yym4017
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4018 := r.ContainerType()
		if yyct4018 == codecSelferValueTypeMap1234 {
			yyl4018 := r.ReadMapStart()
			if yyl4018 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4018, d)
			}
		} else if yyct4018 == codecSelferValueTypeArray1234 {
			yyl4018 := r.ReadArrayStart()
			if yyl4018 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4018, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4019Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4019Slc
	var yyhl4019 bool = l >= 0
	for yyj4019 := 0; ; yyj4019++ {
		if yyhl4019 {
			if yyj4019 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4019Slc = r.DecodeBytes(yys4019Slc, true, true)
		yys4019 := string(yys4019Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4019 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4022 := &x.ListMeta
				yym4023 := z.DecBinary()
				_ = yym4023
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4022) {
				} else {
					z.DecFallback(yyv4022, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4024 := &x.Items
				yym4025 := z.DecBinary()
				_ = yym4025
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv4024), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4019)
		} // end switch yys4019
	} // end for yyj4019
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4026 int
	var yyb4026 bool
	var yyhl4026 bool = l >= 0
	yyj4026++
	if yyhl4026 {
		yyb4026 = yyj4026 > l
	} else {
		yyb4026 = r.CheckBreak()
	}
	if yyb4026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4026++
	if yyhl4026 {
		yyb4026 = yyj4026 > l
	} else {
		yyb4026 = r.CheckBreak()
	}
	if yyb4026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4026++
	if yyhl4026 {
		yyb4026 = yyj4026 > l
	} else {
		yyb4026 = r.CheckBreak()
	}
	if yyb4026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4029 := &x.ListMeta
		yym4030 := z.DecBinary()
		_ = yym4030
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4029) {
		} else {
			z.DecFallback(yyv4029, false)
		}
	}
	yyj4026++
	if yyhl4026 {
		yyb4026 = yyj4026 > l
	} else {
		yyb4026 = r.CheckBreak()
	}
	if yyb4026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4031 := &x.Items
		yym4032 := z.DecBinary()
		_ = yym4032
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv4031), d)
		}
	}
	for {
		yyj4026++
		if yyhl4026 {
			yyb4026 = yyj4026 > l
		} else {
			yyb4026 = r.CheckBreak()
		}
		if yyb4026 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4026-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4033 := z.EncBinary()
	_ = yym4033
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4034 := z.DecBinary()
	_ = yym4034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4035 := z.EncBinary()
		_ = yym4035
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4036 := !z.EncBinary()
			yy2arr4036 := z.EncBasicHandle().StructToArray
			var yyq4036 [6]bool
			_, _, _ = yysep4036, yyq4036, yy2arr4036
			const yyr4036 bool = false
			yyq4036[0] = x.Type != ""
			yyq4036[1] = len(x.Max) != 0
			yyq4036[2] = len(x.Min) != 0
			yyq4036[3] = len(x.Default) != 0
			yyq4036[4] = len(x.DefaultRequest) != 0
			yyq4036[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4036 int
			if yyr4036 || yy2arr4036 {
				r.EncodeArrayStart(6)
			} else {
				yynn4036 = 0
				for _, b := range yyq4036 {
					if b {
						yynn4036++
					}
				}
				r.EncodeMapStart(yynn4036)
				yynn4036 = 0
			}
			if yyr4036 || yy2arr4036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4036[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4036[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4036 || yy2arr4036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4036[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4036[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4036 || yy2arr4036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4036[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4036[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4036 || yy2arr4036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4036[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4036[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4036 || yy2arr4036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4036[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4036[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4036 || yy2arr4036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4036[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4036[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4036 || yy2arr4036 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4043 := z.DecBinary()
	_ = yym4043
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4044 := r.ContainerType()
		if yyct4044 == codecSelferValueTypeMap1234 {
			yyl4044 := r.ReadMapStart()
			if yyl4044 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4044, d)
			}
		} else if yyct4044 == codecSelferValueTypeArray1234 {
			yyl4044 := r.ReadArrayStart()
			if yyl4044 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4044, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4045Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4045Slc
	var yyhl4045 bool = l >= 0
	for yyj4045 := 0; ; yyj4045++ {
		if yyhl4045 {
			if yyj4045 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4045Slc = r.DecodeBytes(yys4045Slc, true, true)
		yys4045 := string(yys4045Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4045 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4047 := &x.Max
				yyv4047.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4048 := &x.Min
				yyv4048.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4049 := &x.Default
				yyv4049.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4050 := &x.DefaultRequest
				yyv4050.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4051 := &x.MaxLimitRequestRatio
				yyv4051.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4045)
		} // end switch yys4045
	} // end for yyj4045
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4052 int
	var yyb4052 bool
	var yyhl4052 bool = l >= 0
	yyj4052++
	if yyhl4052 {
		yyb4052 = yyj4052 > l
	} else {
		yyb4052 = r.CheckBreak()
	}
	if yyb4052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4052++
	if yyhl4052 {
		yyb4052 = yyj4052 > l
	} else {
		yyb4052 = r.CheckBreak()
	}
	if yyb4052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4054 := &x.Max
		yyv4054.CodecDecodeSelf(d)
	}
	yyj4052++
	if yyhl4052 {
		yyb4052 = yyj4052 > l
	} else {
		yyb4052 = r.CheckBreak()
	}
	if yyb4052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4055 := &x.Min
		yyv4055.CodecDecodeSelf(d)
	}
	yyj4052++
	if yyhl4052 {
		yyb4052 = yyj4052 > l
	} else {
		yyb4052 = r.CheckBreak()
	}
	if yyb4052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4056 := &x.Default
		yyv4056.CodecDecodeSelf(d)
	}
	yyj4052++
	if yyhl4052 {
		yyb4052 = yyj4052 > l
	} else {
		yyb4052 = r.CheckBreak()
	}
	if yyb4052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4057 := &x.DefaultRequest
		yyv4057.CodecDecodeSelf(d)
	}
	yyj4052++
	if yyhl4052 {
		yyb4052 = yyj4052 > l
	} else {
		yyb4052 = r.CheckBreak()
	}
	if yyb4052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4058 := &x.MaxLimitRequestRatio
		yyv4058.CodecDecodeSelf(d)
	}
	for {
		yyj4052++
		if yyhl4052 {
			yyb4052 = yyj4052 > l
		} else {
			yyb4052 = r.CheckBreak()
		}
		if yyb4052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4059 := z.EncBinary()
		_ = yym4059
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4060 := !z.EncBinary()
			yy2arr4060 := z.EncBasicHandle().StructToArray
			var yyq4060 [1]bool
			_, _, _ = yysep4060, yyq4060, yy2arr4060
			const yyr4060 bool = false
			var yynn4060 int
			if yyr4060 || yy2arr4060 {
				r.EncodeArrayStart(1)
			} else {
				yynn4060 = 1
				for _, b := range yyq4060 {
					if b {
						yynn4060++
					}
				}
				r.EncodeMapStart(yynn4060)
				yynn4060 = 0
			}
			if yyr4060 || yy2arr4060 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4062 := z.EncBinary()
					_ = yym4062
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4063 := z.EncBinary()
					_ = yym4063
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4060 || yy2arr4060 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4064 := z.DecBinary()
	_ = yym4064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4065 := r.ContainerType()
		if yyct4065 == codecSelferValueTypeMap1234 {
			yyl4065 := r.ReadMapStart()
			if yyl4065 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4065, d)
			}
		} else if yyct4065 == codecSelferValueTypeArray1234 {
			yyl4065 := r.ReadArrayStart()
			if yyl4065 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4065, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4066Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4066Slc
	var yyhl4066 bool = l >= 0
	for yyj4066 := 0; ; yyj4066++ {
		if yyhl4066 {
			if yyj4066 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4066Slc = r.DecodeBytes(yys4066Slc, true, true)
		yys4066 := string(yys4066Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4066 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4067 := &x.Limits
				yym4068 := z.DecBinary()
				_ = yym4068
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4067), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4066)
		} // end switch yys4066
	} // end for yyj4066
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4069 int
	var yyb4069 bool
	var yyhl4069 bool = l >= 0
	yyj4069++
	if yyhl4069 {
		yyb4069 = yyj4069 > l
	} else {
		yyb4069 = r.CheckBreak()
	}
	if yyb4069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4070 := &x.Limits
		yym4071 := z.DecBinary()
		_ = yym4071
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4070), d)
		}
	}
	for {
		yyj4069++
		if yyhl4069 {
			yyb4069 = yyj4069 > l
		} else {
			yyb4069 = r.CheckBreak()
		}
		if yyb4069 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4069-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4072 := z.EncBinary()
		_ = yym4072
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4073 := !z.EncBinary()
			yy2arr4073 := z.EncBasicHandle().StructToArray
			var yyq4073 [4]bool
			_, _, _ = yysep4073, yyq4073, yy2arr4073
			const yyr4073 bool = false
			yyq4073[0] = x.Kind != ""
			yyq4073[1] = x.APIVersion != ""
			yyq4073[2] = true
			yyq4073[3] = true
			var yynn4073 int
			if yyr4073 || yy2arr4073 {
				r.EncodeArrayStart(4)
			} else {
				yynn4073 = 0
				for _, b := range yyq4073 {
					if b {
						yynn4073++
					}
				}
				r.EncodeMapStart(yynn4073)
				yynn4073 = 0
			}
			if yyr4073 || yy2arr4073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4073[0] {
					yym4075 := z.EncBinary()
					_ = yym4075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4073[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4076 := z.EncBinary()
					_ = yym4076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4073 || yy2arr4073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4073[1] {
					yym4078 := z.EncBinary()
					_ = yym4078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4073[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4079 := z.EncBinary()
					_ = yym4079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4073 || yy2arr4073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4073[2] {
					yy4081 := &x.ObjectMeta
					yy4081.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4073[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4082 := &x.ObjectMeta
					yy4082.CodecEncodeSelf(e)
				}
			}
			if yyr4073 || yy2arr4073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4073[3] {
					yy4084 := &x.Spec
					yy4084.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4073[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4085 := &x.Spec
					yy4085.CodecEncodeSelf(e)
				}
			}
			if yyr4073 || yy2arr4073 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4086 := z.DecBinary()
	_ = yym4086
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4087 := r.ContainerType()
		if yyct4087 == codecSelferValueTypeMap1234 {
			yyl4087 := r.ReadMapStart()
			if yyl4087 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4087, d)
			}
		} else if yyct4087 == codecSelferValueTypeArray1234 {
			yyl4087 := r.ReadArrayStart()
			if yyl4087 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4087, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4088Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4088Slc
	var yyhl4088 bool = l >= 0
	for yyj4088 := 0; ; yyj4088++ {
		if yyhl4088 {
			if yyj4088 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4088Slc = r.DecodeBytes(yys4088Slc, true, true)
		yys4088 := string(yys4088Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4088 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4091 := &x.ObjectMeta
				yyv4091.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4092 := &x.Spec
				yyv4092.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4088)
		} // end switch yys4088
	} // end for yyj4088
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4093 int
	var yyb4093 bool
	var yyhl4093 bool = l >= 0
	yyj4093++
	if yyhl4093 {
		yyb4093 = yyj4093 > l
	} else {
		yyb4093 = r.CheckBreak()
	}
	if yyb4093 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4093++
	if yyhl4093 {
		yyb4093 = yyj4093 > l
	} else {
		yyb4093 = r.CheckBreak()
	}
	if yyb4093 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4093++
	if yyhl4093 {
		yyb4093 = yyj4093 > l
	} else {
		yyb4093 = r.CheckBreak()
	}
	if yyb4093 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4096 := &x.ObjectMeta
		yyv4096.CodecDecodeSelf(d)
	}
	yyj4093++
	if yyhl4093 {
		yyb4093 = yyj4093 > l
	} else {
		yyb4093 = r.CheckBreak()
	}
	if yyb4093 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4097 := &x.Spec
		yyv4097.CodecDecodeSelf(d)
	}
	for {
		yyj4093++
		if yyhl4093 {
			yyb4093 = yyj4093 > l
		} else {
			yyb4093 = r.CheckBreak()
		}
		if yyb4093 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4093-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4098 := z.EncBinary()
		_ = yym4098
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4099 := !z.EncBinary()
			yy2arr4099 := z.EncBasicHandle().StructToArray
			var yyq4099 [4]bool
			_, _, _ = yysep4099, yyq4099, yy2arr4099
			const yyr4099 bool = false
			yyq4099[0] = x.Kind != ""
			yyq4099[1] = x.APIVersion != ""
			yyq4099[2] = true
			var yynn4099 int
			if yyr4099 || yy2arr4099 {
				r.EncodeArrayStart(4)
			} else {
				yynn4099 = 1
				for _, b := range yyq4099 {
					if b {
						yynn4099++
					}
				}
				r.EncodeMapStart(yynn4099)
				yynn4099 = 0
			}
			if yyr4099 || yy2arr4099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4099[0] {
					yym4101 := z.EncBinary()
					_ = yym4101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4099[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4102 := z.EncBinary()
					_ = yym4102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4099 || yy2arr4099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4099[1] {
					yym4104 := z.EncBinary()
					_ = yym4104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4099[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4105 := z.EncBinary()
					_ = yym4105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4099 || yy2arr4099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4099[2] {
					yy4107 := &x.ListMeta
					yym4108 := z.EncBinary()
					_ = yym4108
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4107) {
					} else {
						z.EncFallback(yy4107)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4099[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4109 := &x.ListMeta
					yym4110 := z.EncBinary()
					_ = yym4110
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4109) {
					} else {
						z.EncFallback(yy4109)
					}
				}
			}
			if yyr4099 || yy2arr4099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4112 := z.EncBinary()
					_ = yym4112
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4113 := z.EncBinary()
					_ = yym4113
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4099 || yy2arr4099 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4114 := z.DecBinary()
	_ = yym4114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4115 := r.ContainerType()
		if yyct4115 == codecSelferValueTypeMap1234 {
			yyl4115 := r.ReadMapStart()
			if yyl4115 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4115, d)
			}
		} else if yyct4115 == codecSelferValueTypeArray1234 {
			yyl4115 := r.ReadArrayStart()
			if yyl4115 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4115, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4116Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4116Slc
	var yyhl4116 bool = l >= 0
	for yyj4116 := 0; ; yyj4116++ {
		if yyhl4116 {
			if yyj4116 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4116Slc = r.DecodeBytes(yys4116Slc, true, true)
		yys4116 := string(yys4116Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4116 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4119 := &x.ListMeta
				yym4120 := z.DecBinary()
				_ = yym4120
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4119) {
				} else {
					z.DecFallback(yyv4119, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4121 := &x.Items
				yym4122 := z.DecBinary()
				_ = yym4122
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4121), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4116)
		} // end switch yys4116
	} // end for yyj4116
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4123 int
	var yyb4123 bool
	var yyhl4123 bool = l >= 0
	yyj4123++
	if yyhl4123 {
		yyb4123 = yyj4123 > l
	} else {
		yyb4123 = r.CheckBreak()
	}
	if yyb4123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4123++
	if yyhl4123 {
		yyb4123 = yyj4123 > l
	} else {
		yyb4123 = r.CheckBreak()
	}
	if yyb4123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4123++
	if yyhl4123 {
		yyb4123 = yyj4123 > l
	} else {
		yyb4123 = r.CheckBreak()
	}
	if yyb4123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4126 := &x.ListMeta
		yym4127 := z.DecBinary()
		_ = yym4127
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4126) {
		} else {
			z.DecFallback(yyv4126, false)
		}
	}
	yyj4123++
	if yyhl4123 {
		yyb4123 = yyj4123 > l
	} else {
		yyb4123 = r.CheckBreak()
	}
	if yyb4123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4128 := &x.Items
		yym4129 := z.DecBinary()
		_ = yym4129
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4128), d)
		}
	}
	for {
		yyj4123++
		if yyhl4123 {
			yyb4123 = yyj4123 > l
		} else {
			yyb4123 = r.CheckBreak()
		}
		if yyb4123 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4123-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4130 := z.EncBinary()
	_ = yym4130
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4131 := z.DecBinary()
	_ = yym4131
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4132 := z.EncBinary()
		_ = yym4132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4133 := !z.EncBinary()
			yy2arr4133 := z.EncBasicHandle().StructToArray
			var yyq4133 [2]bool
			_, _, _ = yysep4133, yyq4133, yy2arr4133
			const yyr4133 bool = false
			yyq4133[0] = len(x.Hard) != 0
			yyq4133[1] = len(x.Scopes) != 0
			var yynn4133 int
			if yyr4133 || yy2arr4133 {
				r.EncodeArrayStart(2)
			} else {
				yynn4133 = 0
				for _, b := range yyq4133 {
					if b {
						yynn4133++
					}
				}
				r.EncodeMapStart(yynn4133)
				yynn4133 = 0
			}
			if yyr4133 || yy2arr4133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4133[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4133[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4133 || yy2arr4133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4133[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4136 := z.EncBinary()
						_ = yym4136
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4133[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4137 := z.EncBinary()
						_ = yym4137
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4133 || yy2arr4133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4138 := z.DecBinary()
	_ = yym4138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4139 := r.ContainerType()
		if yyct4139 == codecSelferValueTypeMap1234 {
			yyl4139 := r.ReadMapStart()
			if yyl4139 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4139, d)
			}
		} else if yyct4139 == codecSelferValueTypeArray1234 {
			yyl4139 := r.ReadArrayStart()
			if yyl4139 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4140Slc
	var yyhl4140 bool = l >= 0
	for yyj4140 := 0; ; yyj4140++ {
		if yyhl4140 {
			if yyj4140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4140Slc = r.DecodeBytes(yys4140Slc, true, true)
		yys4140 := string(yys4140Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4140 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4141 := &x.Hard
				yyv4141.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4142 := &x.Scopes
				yym4143 := z.DecBinary()
				_ = yym4143
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4142), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4140)
		} // end switch yys4140
	} // end for yyj4140
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4144 int
	var yyb4144 bool
	var yyhl4144 bool = l >= 0
	yyj4144++
	if yyhl4144 {
		yyb4144 = yyj4144 > l
	} else {
		yyb4144 = r.CheckBreak()
	}
	if yyb4144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4145 := &x.Hard
		yyv4145.CodecDecodeSelf(d)
	}
	yyj4144++
	if yyhl4144 {
		yyb4144 = yyj4144 > l
	} else {
		yyb4144 = r.CheckBreak()
	}
	if yyb4144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4146 := &x.Scopes
		yym4147 := z.DecBinary()
		_ = yym4147
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4146), d)
		}
	}
	for {
		yyj4144++
		if yyhl4144 {
			yyb4144 = yyj4144 > l
		} else {
			yyb4144 = r.CheckBreak()
		}
		if yyb4144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4148 := z.EncBinary()
		_ = yym4148
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4149 := !z.EncBinary()
			yy2arr4149 := z.EncBasicHandle().StructToArray
			var yyq4149 [2]bool
			_, _, _ = yysep4149, yyq4149, yy2arr4149
			const yyr4149 bool = false
			yyq4149[0] = len(x.Hard) != 0
			yyq4149[1] = len(x.Used) != 0
			var yynn4149 int
			if yyr4149 || yy2arr4149 {
				r.EncodeArrayStart(2)
			} else {
				yynn4149 = 0
				for _, b := range yyq4149 {
					if b {
						yynn4149++
					}
				}
				r.EncodeMapStart(yynn4149)
				yynn4149 = 0
			}
			if yyr4149 || yy2arr4149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4149[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4149[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4149 || yy2arr4149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4149[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4149[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4149 || yy2arr4149 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4152 := z.DecBinary()
	_ = yym4152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4153 := r.ContainerType()
		if yyct4153 == codecSelferValueTypeMap1234 {
			yyl4153 := r.ReadMapStart()
			if yyl4153 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4153, d)
			}
		} else if yyct4153 == codecSelferValueTypeArray1234 {
			yyl4153 := r.ReadArrayStart()
			if yyl4153 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4154Slc
	var yyhl4154 bool = l >= 0
	for yyj4154 := 0; ; yyj4154++ {
		if yyhl4154 {
			if yyj4154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4154Slc = r.DecodeBytes(yys4154Slc, true, true)
		yys4154 := string(yys4154Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4154 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4155 := &x.Hard
				yyv4155.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4156 := &x.Used
				yyv4156.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4154)
		} // end switch yys4154
	} // end for yyj4154
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4157 int
	var yyb4157 bool
	var yyhl4157 bool = l >= 0
	yyj4157++
	if yyhl4157 {
		yyb4157 = yyj4157 > l
	} else {
		yyb4157 = r.CheckBreak()
	}
	if yyb4157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4158 := &x.Hard
		yyv4158.CodecDecodeSelf(d)
	}
	yyj4157++
	if yyhl4157 {
		yyb4157 = yyj4157 > l
	} else {
		yyb4157 = r.CheckBreak()
	}
	if yyb4157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4159 := &x.Used
		yyv4159.CodecDecodeSelf(d)
	}
	for {
		yyj4157++
		if yyhl4157 {
			yyb4157 = yyj4157 > l
		} else {
			yyb4157 = r.CheckBreak()
		}
		if yyb4157 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4157-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4160 := z.EncBinary()
		_ = yym4160
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4161 := !z.EncBinary()
			yy2arr4161 := z.EncBasicHandle().StructToArray
			var yyq4161 [5]bool
			_, _, _ = yysep4161, yyq4161, yy2arr4161
			const yyr4161 bool = false
			yyq4161[0] = x.Kind != ""
			yyq4161[1] = x.APIVersion != ""
			yyq4161[2] = true
			yyq4161[3] = true
			yyq4161[4] = true
			var yynn4161 int
			if yyr4161 || yy2arr4161 {
				r.EncodeArrayStart(5)
			} else {
				yynn4161 = 0
				for _, b := range yyq4161 {
					if b {
						yynn4161++
					}
				}
				r.EncodeMapStart(yynn4161)
				yynn4161 = 0
			}
			if yyr4161 || yy2arr4161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4161[0] {
					yym4163 := z.EncBinary()
					_ = yym4163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4161[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4164 := z.EncBinary()
					_ = yym4164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4161 || yy2arr4161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4161[1] {
					yym4166 := z.EncBinary()
					_ = yym4166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4161[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4167 := z.EncBinary()
					_ = yym4167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4161 || yy2arr4161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4161[2] {
					yy4169 := &x.ObjectMeta
					yy4169.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4161[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4170 := &x.ObjectMeta
					yy4170.CodecEncodeSelf(e)
				}
			}
			if yyr4161 || yy2arr4161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4161[3] {
					yy4172 := &x.Spec
					yy4172.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4161[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4173 := &x.Spec
					yy4173.CodecEncodeSelf(e)
				}
			}
			if yyr4161 || yy2arr4161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4161[4] {
					yy4175 := &x.Status
					yy4175.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4161[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4176 := &x.Status
					yy4176.CodecEncodeSelf(e)
				}
			}
			if yyr4161 || yy2arr4161 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4177 := z.DecBinary()
	_ = yym4177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4178 := r.ContainerType()
		if yyct4178 == codecSelferValueTypeMap1234 {
			yyl4178 := r.ReadMapStart()
			if yyl4178 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4178, d)
			}
		} else if yyct4178 == codecSelferValueTypeArray1234 {
			yyl4178 := r.ReadArrayStart()
			if yyl4178 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4179Slc
	var yyhl4179 bool = l >= 0
	for yyj4179 := 0; ; yyj4179++ {
		if yyhl4179 {
			if yyj4179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4179Slc = r.DecodeBytes(yys4179Slc, true, true)
		yys4179 := string(yys4179Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4179 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4182 := &x.ObjectMeta
				yyv4182.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4183 := &x.Spec
				yyv4183.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4184 := &x.Status
				yyv4184.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4179)
		} // end switch yys4179
	} // end for yyj4179
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4185 int
	var yyb4185 bool
	var yyhl4185 bool = l >= 0
	yyj4185++
	if yyhl4185 {
		yyb4185 = yyj4185 > l
	} else {
		yyb4185 = r.CheckBreak()
	}
	if yyb4185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4185++
	if yyhl4185 {
		yyb4185 = yyj4185 > l
	} else {
		yyb4185 = r.CheckBreak()
	}
	if yyb4185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4185++
	if yyhl4185 {
		yyb4185 = yyj4185 > l
	} else {
		yyb4185 = r.CheckBreak()
	}
	if yyb4185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4188 := &x.ObjectMeta
		yyv4188.CodecDecodeSelf(d)
	}
	yyj4185++
	if yyhl4185 {
		yyb4185 = yyj4185 > l
	} else {
		yyb4185 = r.CheckBreak()
	}
	if yyb4185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4189 := &x.Spec
		yyv4189.CodecDecodeSelf(d)
	}
	yyj4185++
	if yyhl4185 {
		yyb4185 = yyj4185 > l
	} else {
		yyb4185 = r.CheckBreak()
	}
	if yyb4185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4190 := &x.Status
		yyv4190.CodecDecodeSelf(d)
	}
	for {
		yyj4185++
		if yyhl4185 {
			yyb4185 = yyj4185 > l
		} else {
			yyb4185 = r.CheckBreak()
		}
		if yyb4185 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4185-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4191 := z.EncBinary()
		_ = yym4191
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4192 := !z.EncBinary()
			yy2arr4192 := z.EncBasicHandle().StructToArray
			var yyq4192 [4]bool
			_, _, _ = yysep4192, yyq4192, yy2arr4192
			const yyr4192 bool = false
			yyq4192[0] = x.Kind != ""
			yyq4192[1] = x.APIVersion != ""
			yyq4192[2] = true
			var yynn4192 int
			if yyr4192 || yy2arr4192 {
				r.EncodeArrayStart(4)
			} else {
				yynn4192 = 1
				for _, b := range yyq4192 {
					if b {
						yynn4192++
					}
				}
				r.EncodeMapStart(yynn4192)
				yynn4192 = 0
			}
			if yyr4192 || yy2arr4192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4192[0] {
					yym4194 := z.EncBinary()
					_ = yym4194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4192[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4195 := z.EncBinary()
					_ = yym4195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4192 || yy2arr4192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4192[1] {
					yym4197 := z.EncBinary()
					_ = yym4197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4192[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4198 := z.EncBinary()
					_ = yym4198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4192 || yy2arr4192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4192[2] {
					yy4200 := &x.ListMeta
					yym4201 := z.EncBinary()
					_ = yym4201
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4200) {
					} else {
						z.EncFallback(yy4200)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4192[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4202 := &x.ListMeta
					yym4203 := z.EncBinary()
					_ = yym4203
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4202) {
					} else {
						z.EncFallback(yy4202)
					}
				}
			}
			if yyr4192 || yy2arr4192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4205 := z.EncBinary()
					_ = yym4205
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4206 := z.EncBinary()
					_ = yym4206
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4192 || yy2arr4192 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4207 := z.DecBinary()
	_ = yym4207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4208 := r.ContainerType()
		if yyct4208 == codecSelferValueTypeMap1234 {
			yyl4208 := r.ReadMapStart()
			if yyl4208 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4208, d)
			}
		} else if yyct4208 == codecSelferValueTypeArray1234 {
			yyl4208 := r.ReadArrayStart()
			if yyl4208 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4209Slc
	var yyhl4209 bool = l >= 0
	for yyj4209 := 0; ; yyj4209++ {
		if yyhl4209 {
			if yyj4209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4209Slc = r.DecodeBytes(yys4209Slc, true, true)
		yys4209 := string(yys4209Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4209 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4212 := &x.ListMeta
				yym4213 := z.DecBinary()
				_ = yym4213
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4212) {
				} else {
					z.DecFallback(yyv4212, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4214 := &x.Items
				yym4215 := z.DecBinary()
				_ = yym4215
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4214), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4209)
		} // end switch yys4209
	} // end for yyj4209
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4216 int
	var yyb4216 bool
	var yyhl4216 bool = l >= 0
	yyj4216++
	if yyhl4216 {
		yyb4216 = yyj4216 > l
	} else {
		yyb4216 = r.CheckBreak()
	}
	if yyb4216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4216++
	if yyhl4216 {
		yyb4216 = yyj4216 > l
	} else {
		yyb4216 = r.CheckBreak()
	}
	if yyb4216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4216++
	if yyhl4216 {
		yyb4216 = yyj4216 > l
	} else {
		yyb4216 = r.CheckBreak()
	}
	if yyb4216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4219 := &x.ListMeta
		yym4220 := z.DecBinary()
		_ = yym4220
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4219) {
		} else {
			z.DecFallback(yyv4219, false)
		}
	}
	yyj4216++
	if yyhl4216 {
		yyb4216 = yyj4216 > l
	} else {
		yyb4216 = r.CheckBreak()
	}
	if yyb4216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4221 := &x.Items
		yym4222 := z.DecBinary()
		_ = yym4222
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4221), d)
		}
	}
	for {
		yyj4216++
		if yyhl4216 {
			yyb4216 = yyj4216 > l
		} else {
			yyb4216 = r.CheckBreak()
		}
		if yyb4216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4223 := z.EncBinary()
		_ = yym4223
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4224 := !z.EncBinary()
			yy2arr4224 := z.EncBasicHandle().StructToArray
			var yyq4224 [6]bool
			_, _, _ = yysep4224, yyq4224, yy2arr4224
			const yyr4224 bool = false
			yyq4224[0] = x.Kind != ""
			yyq4224[1] = x.APIVersion != ""
			yyq4224[2] = true
			yyq4224[3] = len(x.Data) != 0
			yyq4224[4] = len(x.StringData) != 0
			yyq4224[5] = x.Type != ""
			var yynn4224 int
			if yyr4224 || yy2arr4224 {
				r.EncodeArrayStart(6)
			} else {
				yynn4224 = 0
				for _, b := range yyq4224 {
					if b {
						yynn4224++
					}
				}
				r.EncodeMapStart(yynn4224)
				yynn4224 = 0
			}
			if yyr4224 || yy2arr4224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4224[0] {
					yym4226 := z.EncBinary()
					_ = yym4226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4224[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4227 := z.EncBinary()
					_ = yym4227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4224 || yy2arr4224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4224[1] {
					yym4229 := z.EncBinary()
					_ = yym4229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4224[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4230 := z.EncBinary()
					_ = yym4230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4224 || yy2arr4224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4224[2] {
					yy4232 := &x.ObjectMeta
					yy4232.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4224[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4233 := &x.ObjectMeta
					yy4233.CodecEncodeSelf(e)
				}
			}
			if yyr4224 || yy2arr4224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4224[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4235 := z.EncBinary()
						_ = yym4235
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4224[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4236 := z.EncBinary()
						_ = yym4236
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4224 || yy2arr4224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4224[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4238 := z.EncBinary()
						_ = yym4238
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4224[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4239 := z.EncBinary()
						_ = yym4239
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4224 || yy2arr4224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4224[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4224[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4224 || yy2arr4224 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4241 := z.DecBinary()
	_ = yym4241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4242 := r.ContainerType()
		if yyct4242 == codecSelferValueTypeMap1234 {
			yyl4242 := r.ReadMapStart()
			if yyl4242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4242, d)
			}
		} else if yyct4242 == codecSelferValueTypeArray1234 {
			yyl4242 := r.ReadArrayStart()
			if yyl4242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4243Slc
	var yyhl4243 bool = l >= 0
	for yyj4243 := 0; ; yyj4243++ {
		if yyhl4243 {
			if yyj4243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4243Slc = r.DecodeBytes(yys4243Slc, true, true)
		yys4243 := string(yys4243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4243 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4246 := &x.ObjectMeta
				yyv4246.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4247 := &x.Data
				yym4248 := z.DecBinary()
				_ = yym4248
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4247), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4249 := &x.StringData
				yym4250 := z.DecBinary()
				_ = yym4250
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4249, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4243)
		} // end switch yys4243
	} // end for yyj4243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4252 int
	var yyb4252 bool
	var yyhl4252 bool = l >= 0
	yyj4252++
	if yyhl4252 {
		yyb4252 = yyj4252 > l
	} else {
		yyb4252 = r.CheckBreak()
	}
	if yyb4252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4252++
	if yyhl4252 {
		yyb4252 = yyj4252 > l
	} else {
		yyb4252 = r.CheckBreak()
	}
	if yyb4252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4252++
	if yyhl4252 {
		yyb4252 = yyj4252 > l
	} else {
		yyb4252 = r.CheckBreak()
	}
	if yyb4252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4255 := &x.ObjectMeta
		yyv4255.CodecDecodeSelf(d)
	}
	yyj4252++
	if yyhl4252 {
		yyb4252 = yyj4252 > l
	} else {
		yyb4252 = r.CheckBreak()
	}
	if yyb4252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4256 := &x.Data
		yym4257 := z.DecBinary()
		_ = yym4257
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4256), d)
		}
	}
	yyj4252++
	if yyhl4252 {
		yyb4252 = yyj4252 > l
	} else {
		yyb4252 = r.CheckBreak()
	}
	if yyb4252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4258 := &x.StringData
		yym4259 := z.DecBinary()
		_ = yym4259
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4258, false, d)
		}
	}
	yyj4252++
	if yyhl4252 {
		yyb4252 = yyj4252 > l
	} else {
		yyb4252 = r.CheckBreak()
	}
	if yyb4252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4252++
		if yyhl4252 {
			yyb4252 = yyj4252 > l
		} else {
			yyb4252 = r.CheckBreak()
		}
		if yyb4252 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4252-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4261 := z.EncBinary()
	_ = yym4261
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4262 := z.DecBinary()
	_ = yym4262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4263 := z.EncBinary()
		_ = yym4263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4264 := !z.EncBinary()
			yy2arr4264 := z.EncBasicHandle().StructToArray
			var yyq4264 [4]bool
			_, _, _ = yysep4264, yyq4264, yy2arr4264
			const yyr4264 bool = false
			yyq4264[0] = x.Kind != ""
			yyq4264[1] = x.APIVersion != ""
			yyq4264[2] = true
			var yynn4264 int
			if yyr4264 || yy2arr4264 {
				r.EncodeArrayStart(4)
			} else {
				yynn4264 = 1
				for _, b := range yyq4264 {
					if b {
						yynn4264++
					}
				}
				r.EncodeMapStart(yynn4264)
				yynn4264 = 0
			}
			if yyr4264 || yy2arr4264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4264[0] {
					yym4266 := z.EncBinary()
					_ = yym4266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4264[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4267 := z.EncBinary()
					_ = yym4267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4264 || yy2arr4264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4264[1] {
					yym4269 := z.EncBinary()
					_ = yym4269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4264[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4270 := z.EncBinary()
					_ = yym4270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4264 || yy2arr4264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4264[2] {
					yy4272 := &x.ListMeta
					yym4273 := z.EncBinary()
					_ = yym4273
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4272) {
					} else {
						z.EncFallback(yy4272)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4264[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4274 := &x.ListMeta
					yym4275 := z.EncBinary()
					_ = yym4275
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4274) {
					} else {
						z.EncFallback(yy4274)
					}
				}
			}
			if yyr4264 || yy2arr4264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4277 := z.EncBinary()
					_ = yym4277
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4278 := z.EncBinary()
					_ = yym4278
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4264 || yy2arr4264 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4279 := z.DecBinary()
	_ = yym4279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4280 := r.ContainerType()
		if yyct4280 == codecSelferValueTypeMap1234 {
			yyl4280 := r.ReadMapStart()
			if yyl4280 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4280, d)
			}
		} else if yyct4280 == codecSelferValueTypeArray1234 {
			yyl4280 := r.ReadArrayStart()
			if yyl4280 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4280, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4281Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4281Slc
	var yyhl4281 bool = l >= 0
	for yyj4281 := 0; ; yyj4281++ {
		if yyhl4281 {
			if yyj4281 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4281Slc = r.DecodeBytes(yys4281Slc, true, true)
		yys4281 := string(yys4281Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4281 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4284 := &x.ListMeta
				yym4285 := z.DecBinary()
				_ = yym4285
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4284) {
				} else {
					z.DecFallback(yyv4284, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4286 := &x.Items
				yym4287 := z.DecBinary()
				_ = yym4287
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4286), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4281)
		} // end switch yys4281
	} // end for yyj4281
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4288 int
	var yyb4288 bool
	var yyhl4288 bool = l >= 0
	yyj4288++
	if yyhl4288 {
		yyb4288 = yyj4288 > l
	} else {
		yyb4288 = r.CheckBreak()
	}
	if yyb4288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4288++
	if yyhl4288 {
		yyb4288 = yyj4288 > l
	} else {
		yyb4288 = r.CheckBreak()
	}
	if yyb4288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4288++
	if yyhl4288 {
		yyb4288 = yyj4288 > l
	} else {
		yyb4288 = r.CheckBreak()
	}
	if yyb4288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4291 := &x.ListMeta
		yym4292 := z.DecBinary()
		_ = yym4292
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4291) {
		} else {
			z.DecFallback(yyv4291, false)
		}
	}
	yyj4288++
	if yyhl4288 {
		yyb4288 = yyj4288 > l
	} else {
		yyb4288 = r.CheckBreak()
	}
	if yyb4288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4293 := &x.Items
		yym4294 := z.DecBinary()
		_ = yym4294
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4293), d)
		}
	}
	for {
		yyj4288++
		if yyhl4288 {
			yyb4288 = yyj4288 > l
		} else {
			yyb4288 = r.CheckBreak()
		}
		if yyb4288 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4288-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4295 := z.EncBinary()
		_ = yym4295
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4296 := !z.EncBinary()
			yy2arr4296 := z.EncBasicHandle().StructToArray
			var yyq4296 [4]bool
			_, _, _ = yysep4296, yyq4296, yy2arr4296
			const yyr4296 bool = false
			yyq4296[0] = x.Kind != ""
			yyq4296[1] = x.APIVersion != ""
			yyq4296[2] = true
			yyq4296[3] = len(x.Data) != 0
			var yynn4296 int
			if yyr4296 || yy2arr4296 {
				r.EncodeArrayStart(4)
			} else {
				yynn4296 = 0
				for _, b := range yyq4296 {
					if b {
						yynn4296++
					}
				}
				r.EncodeMapStart(yynn4296)
				yynn4296 = 0
			}
			if yyr4296 || yy2arr4296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4296[0] {
					yym4298 := z.EncBinary()
					_ = yym4298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4296[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4299 := z.EncBinary()
					_ = yym4299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4296 || yy2arr4296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4296[1] {
					yym4301 := z.EncBinary()
					_ = yym4301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4296[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4302 := z.EncBinary()
					_ = yym4302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4296 || yy2arr4296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4296[2] {
					yy4304 := &x.ObjectMeta
					yy4304.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4296[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4305 := &x.ObjectMeta
					yy4305.CodecEncodeSelf(e)
				}
			}
			if yyr4296 || yy2arr4296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4296[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4307 := z.EncBinary()
						_ = yym4307
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4296[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4308 := z.EncBinary()
						_ = yym4308
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4296 || yy2arr4296 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4309 := z.DecBinary()
	_ = yym4309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4310 := r.ContainerType()
		if yyct4310 == codecSelferValueTypeMap1234 {
			yyl4310 := r.ReadMapStart()
			if yyl4310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4310, d)
			}
		} else if yyct4310 == codecSelferValueTypeArray1234 {
			yyl4310 := r.ReadArrayStart()
			if yyl4310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4311Slc
	var yyhl4311 bool = l >= 0
	for yyj4311 := 0; ; yyj4311++ {
		if yyhl4311 {
			if yyj4311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4311Slc = r.DecodeBytes(yys4311Slc, true, true)
		yys4311 := string(yys4311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4311 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4314 := &x.ObjectMeta
				yyv4314.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4315 := &x.Data
				yym4316 := z.DecBinary()
				_ = yym4316
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4315, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4311)
		} // end switch yys4311
	} // end for yyj4311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4317 int
	var yyb4317 bool
	var yyhl4317 bool = l >= 0
	yyj4317++
	if yyhl4317 {
		yyb4317 = yyj4317 > l
	} else {
		yyb4317 = r.CheckBreak()
	}
	if yyb4317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4317++
	if yyhl4317 {
		yyb4317 = yyj4317 > l
	} else {
		yyb4317 = r.CheckBreak()
	}
	if yyb4317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4317++
	if yyhl4317 {
		yyb4317 = yyj4317 > l
	} else {
		yyb4317 = r.CheckBreak()
	}
	if yyb4317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4320 := &x.ObjectMeta
		yyv4320.CodecDecodeSelf(d)
	}
	yyj4317++
	if yyhl4317 {
		yyb4317 = yyj4317 > l
	} else {
		yyb4317 = r.CheckBreak()
	}
	if yyb4317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4321 := &x.Data
		yym4322 := z.DecBinary()
		_ = yym4322
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4321, false, d)
		}
	}
	for {
		yyj4317++
		if yyhl4317 {
			yyb4317 = yyj4317 > l
		} else {
			yyb4317 = r.CheckBreak()
		}
		if yyb4317 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4317-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4323 := z.EncBinary()
		_ = yym4323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4324 := !z.EncBinary()
			yy2arr4324 := z.EncBasicHandle().StructToArray
			var yyq4324 [4]bool
			_, _, _ = yysep4324, yyq4324, yy2arr4324
			const yyr4324 bool = false
			yyq4324[0] = x.Kind != ""
			yyq4324[1] = x.APIVersion != ""
			yyq4324[2] = true
			var yynn4324 int
			if yyr4324 || yy2arr4324 {
				r.EncodeArrayStart(4)
			} else {
				yynn4324 = 1
				for _, b := range yyq4324 {
					if b {
						yynn4324++
					}
				}
				r.EncodeMapStart(yynn4324)
				yynn4324 = 0
			}
			if yyr4324 || yy2arr4324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4324[0] {
					yym4326 := z.EncBinary()
					_ = yym4326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4324[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4327 := z.EncBinary()
					_ = yym4327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4324 || yy2arr4324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4324[1] {
					yym4329 := z.EncBinary()
					_ = yym4329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4324[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4330 := z.EncBinary()
					_ = yym4330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4324 || yy2arr4324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4324[2] {
					yy4332 := &x.ListMeta
					yym4333 := z.EncBinary()
					_ = yym4333
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4332) {
					} else {
						z.EncFallback(yy4332)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4324[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4334 := &x.ListMeta
					yym4335 := z.EncBinary()
					_ = yym4335
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4334) {
					} else {
						z.EncFallback(yy4334)
					}
				}
			}
			if yyr4324 || yy2arr4324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4337 := z.EncBinary()
					_ = yym4337
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4338 := z.EncBinary()
					_ = yym4338
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4324 || yy2arr4324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4339 := z.DecBinary()
	_ = yym4339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4340 := r.ContainerType()
		if yyct4340 == codecSelferValueTypeMap1234 {
			yyl4340 := r.ReadMapStart()
			if yyl4340 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4340, d)
			}
		} else if yyct4340 == codecSelferValueTypeArray1234 {
			yyl4340 := r.ReadArrayStart()
			if yyl4340 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4341Slc
	var yyhl4341 bool = l >= 0
	for yyj4341 := 0; ; yyj4341++ {
		if yyhl4341 {
			if yyj4341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4341Slc = r.DecodeBytes(yys4341Slc, true, true)
		yys4341 := string(yys4341Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4341 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4344 := &x.ListMeta
				yym4345 := z.DecBinary()
				_ = yym4345
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4344) {
				} else {
					z.DecFallback(yyv4344, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4346 := &x.Items
				yym4347 := z.DecBinary()
				_ = yym4347
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4346), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4341)
		} // end switch yys4341
	} // end for yyj4341
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4348 int
	var yyb4348 bool
	var yyhl4348 bool = l >= 0
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4351 := &x.ListMeta
		yym4352 := z.DecBinary()
		_ = yym4352
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4351) {
		} else {
			z.DecFallback(yyv4351, false)
		}
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4353 := &x.Items
		yym4354 := z.DecBinary()
		_ = yym4354
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4353), d)
		}
	}
	for {
		yyj4348++
		if yyhl4348 {
			yyb4348 = yyj4348 > l
		} else {
			yyb4348 = r.CheckBreak()
		}
		if yyb4348 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4348-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4355 := z.EncBinary()
	_ = yym4355
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4356 := z.DecBinary()
	_ = yym4356
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4357 := z.EncBinary()
		_ = yym4357
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4358 := !z.EncBinary()
			yy2arr4358 := z.EncBasicHandle().StructToArray
			var yyq4358 [4]bool
			_, _, _ = yysep4358, yyq4358, yy2arr4358
			const yyr4358 bool = false
			yyq4358[2] = x.Message != ""
			yyq4358[3] = x.Error != ""
			var yynn4358 int
			if yyr4358 || yy2arr4358 {
				r.EncodeArrayStart(4)
			} else {
				yynn4358 = 2
				for _, b := range yyq4358 {
					if b {
						yynn4358++
					}
				}
				r.EncodeMapStart(yynn4358)
				yynn4358 = 0
			}
			if yyr4358 || yy2arr4358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4358 || yy2arr4358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4358 || yy2arr4358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4358[2] {
					yym4362 := z.EncBinary()
					_ = yym4362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4358[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4363 := z.EncBinary()
					_ = yym4363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4358 || yy2arr4358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4358[3] {
					yym4365 := z.EncBinary()
					_ = yym4365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4358[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4366 := z.EncBinary()
					_ = yym4366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4358 || yy2arr4358 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4367 := z.DecBinary()
	_ = yym4367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4368 := r.ContainerType()
		if yyct4368 == codecSelferValueTypeMap1234 {
			yyl4368 := r.ReadMapStart()
			if yyl4368 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4368, d)
			}
		} else if yyct4368 == codecSelferValueTypeArray1234 {
			yyl4368 := r.ReadArrayStart()
			if yyl4368 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4369Slc
	var yyhl4369 bool = l >= 0
	for yyj4369 := 0; ; yyj4369++ {
		if yyhl4369 {
			if yyj4369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4369Slc = r.DecodeBytes(yys4369Slc, true, true)
		yys4369 := string(yys4369Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4369 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4369)
		} // end switch yys4369
	} // end for yyj4369
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4374 int
	var yyb4374 bool
	var yyhl4374 bool = l >= 0
	yyj4374++
	if yyhl4374 {
		yyb4374 = yyj4374 > l
	} else {
		yyb4374 = r.CheckBreak()
	}
	if yyb4374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4374++
	if yyhl4374 {
		yyb4374 = yyj4374 > l
	} else {
		yyb4374 = r.CheckBreak()
	}
	if yyb4374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4374++
	if yyhl4374 {
		yyb4374 = yyj4374 > l
	} else {
		yyb4374 = r.CheckBreak()
	}
	if yyb4374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4374++
	if yyhl4374 {
		yyb4374 = yyj4374 > l
	} else {
		yyb4374 = r.CheckBreak()
	}
	if yyb4374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4374++
		if yyhl4374 {
			yyb4374 = yyj4374 > l
		} else {
			yyb4374 = r.CheckBreak()
		}
		if yyb4374 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4374-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4379 := z.EncBinary()
		_ = yym4379
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4380 := !z.EncBinary()
			yy2arr4380 := z.EncBasicHandle().StructToArray
			var yyq4380 [4]bool
			_, _, _ = yysep4380, yyq4380, yy2arr4380
			const yyr4380 bool = false
			yyq4380[0] = x.Kind != ""
			yyq4380[1] = x.APIVersion != ""
			yyq4380[2] = true
			yyq4380[3] = len(x.Conditions) != 0
			var yynn4380 int
			if yyr4380 || yy2arr4380 {
				r.EncodeArrayStart(4)
			} else {
				yynn4380 = 0
				for _, b := range yyq4380 {
					if b {
						yynn4380++
					}
				}
				r.EncodeMapStart(yynn4380)
				yynn4380 = 0
			}
			if yyr4380 || yy2arr4380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4380[0] {
					yym4382 := z.EncBinary()
					_ = yym4382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4380[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4383 := z.EncBinary()
					_ = yym4383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4380 || yy2arr4380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4380[1] {
					yym4385 := z.EncBinary()
					_ = yym4385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4380[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4386 := z.EncBinary()
					_ = yym4386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4380 || yy2arr4380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4380[2] {
					yy4388 := &x.ObjectMeta
					yy4388.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4380[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4389 := &x.ObjectMeta
					yy4389.CodecEncodeSelf(e)
				}
			}
			if yyr4380 || yy2arr4380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4380[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4391 := z.EncBinary()
						_ = yym4391
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4380[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4392 := z.EncBinary()
						_ = yym4392
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4380 || yy2arr4380 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4393 := z.DecBinary()
	_ = yym4393
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4394 := r.ContainerType()
		if yyct4394 == codecSelferValueTypeMap1234 {
			yyl4394 := r.ReadMapStart()
			if yyl4394 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4394, d)
			}
		} else if yyct4394 == codecSelferValueTypeArray1234 {
			yyl4394 := r.ReadArrayStart()
			if yyl4394 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4394, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4395Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4395Slc
	var yyhl4395 bool = l >= 0
	for yyj4395 := 0; ; yyj4395++ {
		if yyhl4395 {
			if yyj4395 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4395Slc = r.DecodeBytes(yys4395Slc, true, true)
		yys4395 := string(yys4395Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4395 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4398 := &x.ObjectMeta
				yyv4398.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4399 := &x.Conditions
				yym4400 := z.DecBinary()
				_ = yym4400
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4399), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4395)
		} // end switch yys4395
	} // end for yyj4395
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4401 int
	var yyb4401 bool
	var yyhl4401 bool = l >= 0
	yyj4401++
	if yyhl4401 {
		yyb4401 = yyj4401 > l
	} else {
		yyb4401 = r.CheckBreak()
	}
	if yyb4401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4401++
	if yyhl4401 {
		yyb4401 = yyj4401 > l
	} else {
		yyb4401 = r.CheckBreak()
	}
	if yyb4401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4401++
	if yyhl4401 {
		yyb4401 = yyj4401 > l
	} else {
		yyb4401 = r.CheckBreak()
	}
	if yyb4401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4404 := &x.ObjectMeta
		yyv4404.CodecDecodeSelf(d)
	}
	yyj4401++
	if yyhl4401 {
		yyb4401 = yyj4401 > l
	} else {
		yyb4401 = r.CheckBreak()
	}
	if yyb4401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4405 := &x.Conditions
		yym4406 := z.DecBinary()
		_ = yym4406
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4405), d)
		}
	}
	for {
		yyj4401++
		if yyhl4401 {
			yyb4401 = yyj4401 > l
		} else {
			yyb4401 = r.CheckBreak()
		}
		if yyb4401 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4401-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4407 := z.EncBinary()
		_ = yym4407
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4408 := !z.EncBinary()
			yy2arr4408 := z.EncBasicHandle().StructToArray
			var yyq4408 [4]bool
			_, _, _ = yysep4408, yyq4408, yy2arr4408
			const yyr4408 bool = false
			yyq4408[0] = x.Kind != ""
			yyq4408[1] = x.APIVersion != ""
			yyq4408[2] = true
			var yynn4408 int
			if yyr4408 || yy2arr4408 {
				r.EncodeArrayStart(4)
			} else {
				yynn4408 = 1
				for _, b := range yyq4408 {
					if b {
						yynn4408++
					}
				}
				r.EncodeMapStart(yynn4408)
				yynn4408 = 0
			}
			if yyr4408 || yy2arr4408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4408[0] {
					yym4410 := z.EncBinary()
					_ = yym4410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4408[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4411 := z.EncBinary()
					_ = yym4411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4408 || yy2arr4408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4408[1] {
					yym4413 := z.EncBinary()
					_ = yym4413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4408[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4414 := z.EncBinary()
					_ = yym4414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4408 || yy2arr4408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4408[2] {
					yy4416 := &x.ListMeta
					yym4417 := z.EncBinary()
					_ = yym4417
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4416) {
					} else {
						z.EncFallback(yy4416)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4408[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4418 := &x.ListMeta
					yym4419 := z.EncBinary()
					_ = yym4419
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4418) {
					} else {
						z.EncFallback(yy4418)
					}
				}
			}
			if yyr4408 || yy2arr4408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4421 := z.EncBinary()
					_ = yym4421
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4422 := z.EncBinary()
					_ = yym4422
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4408 || yy2arr4408 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4423 := z.DecBinary()
	_ = yym4423
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4424 := r.ContainerType()
		if yyct4424 == codecSelferValueTypeMap1234 {
			yyl4424 := r.ReadMapStart()
			if yyl4424 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4424, d)
			}
		} else if yyct4424 == codecSelferValueTypeArray1234 {
			yyl4424 := r.ReadArrayStart()
			if yyl4424 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4424, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4425Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4425Slc
	var yyhl4425 bool = l >= 0
	for yyj4425 := 0; ; yyj4425++ {
		if yyhl4425 {
			if yyj4425 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4425Slc = r.DecodeBytes(yys4425Slc, true, true)
		yys4425 := string(yys4425Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4425 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4428 := &x.ListMeta
				yym4429 := z.DecBinary()
				_ = yym4429
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4428) {
				} else {
					z.DecFallback(yyv4428, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4430 := &x.Items
				yym4431 := z.DecBinary()
				_ = yym4431
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4430), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4425)
		} // end switch yys4425
	} // end for yyj4425
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4432 int
	var yyb4432 bool
	var yyhl4432 bool = l >= 0
	yyj4432++
	if yyhl4432 {
		yyb4432 = yyj4432 > l
	} else {
		yyb4432 = r.CheckBreak()
	}
	if yyb4432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4432++
	if yyhl4432 {
		yyb4432 = yyj4432 > l
	} else {
		yyb4432 = r.CheckBreak()
	}
	if yyb4432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4432++
	if yyhl4432 {
		yyb4432 = yyj4432 > l
	} else {
		yyb4432 = r.CheckBreak()
	}
	if yyb4432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4435 := &x.ListMeta
		yym4436 := z.DecBinary()
		_ = yym4436
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4435) {
		} else {
			z.DecFallback(yyv4435, false)
		}
	}
	yyj4432++
	if yyhl4432 {
		yyb4432 = yyj4432 > l
	} else {
		yyb4432 = r.CheckBreak()
	}
	if yyb4432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4437 := &x.Items
		yym4438 := z.DecBinary()
		_ = yym4438
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4437), d)
		}
	}
	for {
		yyj4432++
		if yyhl4432 {
			yyb4432 = yyj4432 > l
		} else {
			yyb4432 = r.CheckBreak()
		}
		if yyb4432 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4432-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4439 := z.EncBinary()
		_ = yym4439
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4440 := !z.EncBinary()
			yy2arr4440 := z.EncBasicHandle().StructToArray
			var yyq4440 [2]bool
			_, _, _ = yysep4440, yyq4440, yy2arr4440
			const yyr4440 bool = false
			yyq4440[0] = len(x.Items) != 0
			yyq4440[1] = x.DefaultMode != nil
			var yynn4440 int
			if yyr4440 || yy2arr4440 {
				r.EncodeArrayStart(2)
			} else {
				yynn4440 = 0
				for _, b := range yyq4440 {
					if b {
						yynn4440++
					}
				}
				r.EncodeMapStart(yynn4440)
				yynn4440 = 0
			}
			if yyr4440 || yy2arr4440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4440[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4442 := z.EncBinary()
						_ = yym4442
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4440[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4443 := z.EncBinary()
						_ = yym4443
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4440 || yy2arr4440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4440[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4445 := *x.DefaultMode
						yym4446 := z.EncBinary()
						_ = yym4446
						if false {
						} else {
							r.EncodeInt(int64(yy4445))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4440[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4447 := *x.DefaultMode
						yym4448 := z.EncBinary()
						_ = yym4448
						if false {
						} else {
							r.EncodeInt(int64(yy4447))
						}
					}
				}
			}
			if yyr4440 || yy2arr4440 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4449 := z.DecBinary()
	_ = yym4449
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4450 := r.ContainerType()
		if yyct4450 == codecSelferValueTypeMap1234 {
			yyl4450 := r.ReadMapStart()
			if yyl4450 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4450, d)
			}
		} else if yyct4450 == codecSelferValueTypeArray1234 {
			yyl4450 := r.ReadArrayStart()
			if yyl4450 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4450, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4451Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4451Slc
	var yyhl4451 bool = l >= 0
	for yyj4451 := 0; ; yyj4451++ {
		if yyhl4451 {
			if yyj4451 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4451Slc = r.DecodeBytes(yys4451Slc, true, true)
		yys4451 := string(yys4451Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4451 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4452 := &x.Items
				yym4453 := z.DecBinary()
				_ = yym4453
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4452), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym4455 := z.DecBinary()
				_ = yym4455
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4451)
		} // end switch yys4451
	} // end for yyj4451
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4456 int
	var yyb4456 bool
	var yyhl4456 bool = l >= 0
	yyj4456++
	if yyhl4456 {
		yyb4456 = yyj4456 > l
	} else {
		yyb4456 = r.CheckBreak()
	}
	if yyb4456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4457 := &x.Items
		yym4458 := z.DecBinary()
		_ = yym4458
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4457), d)
		}
	}
	yyj4456++
	if yyhl4456 {
		yyb4456 = yyj4456 > l
	} else {
		yyb4456 = r.CheckBreak()
	}
	if yyb4456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym4460 := z.DecBinary()
		_ = yym4460
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4456++
		if yyhl4456 {
			yyb4456 = yyj4456 > l
		} else {
			yyb4456 = r.CheckBreak()
		}
		if yyb4456 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4456-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4461 := z.EncBinary()
		_ = yym4461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4462 := !z.EncBinary()
			yy2arr4462 := z.EncBasicHandle().StructToArray
			var yyq4462 [4]bool
			_, _, _ = yysep4462, yyq4462, yy2arr4462
			const yyr4462 bool = false
			yyq4462[1] = x.FieldRef != nil
			yyq4462[2] = x.ResourceFieldRef != nil
			yyq4462[3] = x.Mode != nil
			var yynn4462 int
			if yyr4462 || yy2arr4462 {
				r.EncodeArrayStart(4)
			} else {
				yynn4462 = 1
				for _, b := range yyq4462 {
					if b {
						yynn4462++
					}
				}
				r.EncodeMapStart(yynn4462)
				yynn4462 = 0
			}
			if yyr4462 || yy2arr4462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4464 := z.EncBinary()
				_ = yym4464
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4465 := z.EncBinary()
				_ = yym4465
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4462 || yy2arr4462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4462[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4462[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4462 || yy2arr4462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4462[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4462[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4462 || yy2arr4462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4462[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4469 := *x.Mode
						yym4470 := z.EncBinary()
						_ = yym4470
						if false {
						} else {
							r.EncodeInt(int64(yy4469))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4462[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4471 := *x.Mode
						yym4472 := z.EncBinary()
						_ = yym4472
						if false {
						} else {
							r.EncodeInt(int64(yy4471))
						}
					}
				}
			}
			if yyr4462 || yy2arr4462 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4473 := z.DecBinary()
	_ = yym4473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4474 := r.ContainerType()
		if yyct4474 == codecSelferValueTypeMap1234 {
			yyl4474 := r.ReadMapStart()
			if yyl4474 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4474, d)
			}
		} else if yyct4474 == codecSelferValueTypeArray1234 {
			yyl4474 := r.ReadArrayStart()
			if yyl4474 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4474, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4475Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4475Slc
	var yyhl4475 bool = l >= 0
	for yyj4475 := 0; ; yyj4475++ {
		if yyhl4475 {
			if yyj4475 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4475Slc = r.DecodeBytes(yys4475Slc, true, true)
		yys4475 := string(yys4475Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4475 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym4480 := z.DecBinary()
				_ = yym4480
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4475)
		} // end switch yys4475
	} // end for yyj4475
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4481 int
	var yyb4481 bool
	var yyhl4481 bool = l >= 0
	yyj4481++
	if yyhl4481 {
		yyb4481 = yyj4481 > l
	} else {
		yyb4481 = r.CheckBreak()
	}
	if yyb4481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4481++
	if yyhl4481 {
		yyb4481 = yyj4481 > l
	} else {
		yyb4481 = r.CheckBreak()
	}
	if yyb4481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4481++
	if yyhl4481 {
		yyb4481 = yyj4481 > l
	} else {
		yyb4481 = r.CheckBreak()
	}
	if yyb4481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj4481++
	if yyhl4481 {
		yyb4481 = yyj4481 > l
	} else {
		yyb4481 = r.CheckBreak()
	}
	if yyb4481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym4486 := z.DecBinary()
		_ = yym4486
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4481++
		if yyhl4481 {
			yyb4481 = yyj4481 > l
		} else {
			yyb4481 = r.CheckBreak()
		}
		if yyb4481 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4481-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4487 := z.EncBinary()
		_ = yym4487
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4488 := !z.EncBinary()
			yy2arr4488 := z.EncBasicHandle().StructToArray
			var yyq4488 [6]bool
			_, _, _ = yysep4488, yyq4488, yy2arr4488
			const yyr4488 bool = false
			yyq4488[0] = x.Capabilities != nil
			yyq4488[1] = x.Privileged != nil
			yyq4488[2] = x.SELinuxOptions != nil
			yyq4488[3] = x.RunAsUser != nil
			yyq4488[4] = x.RunAsNonRoot != nil
			yyq4488[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4488 int
			if yyr4488 || yy2arr4488 {
				r.EncodeArrayStart(6)
			} else {
				yynn4488 = 0
				for _, b := range yyq4488 {
					if b {
						yynn4488++
					}
				}
				r.EncodeMapStart(yynn4488)
				yynn4488 = 0
			}
			if yyr4488 || yy2arr4488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4488[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4488[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4488 || yy2arr4488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4488[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4491 := *x.Privileged
						yym4492 := z.EncBinary()
						_ = yym4492
						if false {
						} else {
							r.EncodeBool(bool(yy4491))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4488[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4493 := *x.Privileged
						yym4494 := z.EncBinary()
						_ = yym4494
						if false {
						} else {
							r.EncodeBool(bool(yy4493))
						}
					}
				}
			}
			if yyr4488 || yy2arr4488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4488[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4488[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4488 || yy2arr4488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4488[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4497 := *x.RunAsUser
						yym4498 := z.EncBinary()
						_ = yym4498
						if false {
						} else {
							r.EncodeInt(int64(yy4497))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4488[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4499 := *x.RunAsUser
						yym4500 := z.EncBinary()
						_ = yym4500
						if false {
						} else {
							r.EncodeInt(int64(yy4499))
						}
					}
				}
			}
			if yyr4488 || yy2arr4488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4488[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4502 := *x.RunAsNonRoot
						yym4503 := z.EncBinary()
						_ = yym4503
						if false {
						} else {
							r.EncodeBool(bool(yy4502))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4488[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4504 := *x.RunAsNonRoot
						yym4505 := z.EncBinary()
						_ = yym4505
						if false {
						} else {
							r.EncodeBool(bool(yy4504))
						}
					}
				}
			}
			if yyr4488 || yy2arr4488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4488[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4507 := *x.ReadOnlyRootFilesystem
						yym4508 := z.EncBinary()
						_ = yym4508
						if false {
						} else {
							r.EncodeBool(bool(yy4507))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4488[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4509 := *x.ReadOnlyRootFilesystem
						yym4510 := z.EncBinary()
						_ = yym4510
						if false {
						} else {
							r.EncodeBool(bool(yy4509))
						}
					}
				}
			}
			if yyr4488 || yy2arr4488 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4511 := z.DecBinary()
	_ = yym4511
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4512 := r.ContainerType()
		if yyct4512 == codecSelferValueTypeMap1234 {
			yyl4512 := r.ReadMapStart()
			if yyl4512 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4512, d)
			}
		} else if yyct4512 == codecSelferValueTypeArray1234 {
			yyl4512 := r.ReadArrayStart()
			if yyl4512 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4512, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4513Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4513Slc
	var yyhl4513 bool = l >= 0
	for yyj4513 := 0; ; yyj4513++ {
		if yyhl4513 {
			if yyj4513 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4513Slc = r.DecodeBytes(yys4513Slc, true, true)
		yys4513 := string(yys4513Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4513 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4516 := z.DecBinary()
				_ = yym4516
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4519 := z.DecBinary()
				_ = yym4519
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4521 := z.DecBinary()
				_ = yym4521
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4523 := z.DecBinary()
				_ = yym4523
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4513)
		} // end switch yys4513
	} // end for yyj4513
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4524 int
	var yyb4524 bool
	var yyhl4524 bool = l >= 0
	yyj4524++
	if yyhl4524 {
		yyb4524 = yyj4524 > l
	} else {
		yyb4524 = r.CheckBreak()
	}
	if yyb4524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4524++
	if yyhl4524 {
		yyb4524 = yyj4524 > l
	} else {
		yyb4524 = r.CheckBreak()
	}
	if yyb4524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4527 := z.DecBinary()
		_ = yym4527
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4524++
	if yyhl4524 {
		yyb4524 = yyj4524 > l
	} else {
		yyb4524 = r.CheckBreak()
	}
	if yyb4524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4524++
	if yyhl4524 {
		yyb4524 = yyj4524 > l
	} else {
		yyb4524 = r.CheckBreak()
	}
	if yyb4524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4530 := z.DecBinary()
		_ = yym4530
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4524++
	if yyhl4524 {
		yyb4524 = yyj4524 > l
	} else {
		yyb4524 = r.CheckBreak()
	}
	if yyb4524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4532 := z.DecBinary()
		_ = yym4532
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4524++
	if yyhl4524 {
		yyb4524 = yyj4524 > l
	} else {
		yyb4524 = r.CheckBreak()
	}
	if yyb4524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4534 := z.DecBinary()
		_ = yym4534
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4524++
		if yyhl4524 {
			yyb4524 = yyj4524 > l
		} else {
			yyb4524 = r.CheckBreak()
		}
		if yyb4524 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4524-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4535 := z.EncBinary()
		_ = yym4535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4536 := !z.EncBinary()
			yy2arr4536 := z.EncBasicHandle().StructToArray
			var yyq4536 [4]bool
			_, _, _ = yysep4536, yyq4536, yy2arr4536
			const yyr4536 bool = false
			yyq4536[0] = x.User != ""
			yyq4536[1] = x.Role != ""
			yyq4536[2] = x.Type != ""
			yyq4536[3] = x.Level != ""
			var yynn4536 int
			if yyr4536 || yy2arr4536 {
				r.EncodeArrayStart(4)
			} else {
				yynn4536 = 0
				for _, b := range yyq4536 {
					if b {
						yynn4536++
					}
				}
				r.EncodeMapStart(yynn4536)
				yynn4536 = 0
			}
			if yyr4536 || yy2arr4536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4536[0] {
					yym4538 := z.EncBinary()
					_ = yym4538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4536[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4539 := z.EncBinary()
					_ = yym4539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4536 || yy2arr4536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4536[1] {
					yym4541 := z.EncBinary()
					_ = yym4541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4536[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4542 := z.EncBinary()
					_ = yym4542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4536 || yy2arr4536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4536[2] {
					yym4544 := z.EncBinary()
					_ = yym4544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4536[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4545 := z.EncBinary()
					_ = yym4545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4536 || yy2arr4536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4536[3] {
					yym4547 := z.EncBinary()
					_ = yym4547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4536[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4548 := z.EncBinary()
					_ = yym4548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4536 || yy2arr4536 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4549 := z.DecBinary()
	_ = yym4549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4550 := r.ContainerType()
		if yyct4550 == codecSelferValueTypeMap1234 {
			yyl4550 := r.ReadMapStart()
			if yyl4550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4550, d)
			}
		} else if yyct4550 == codecSelferValueTypeArray1234 {
			yyl4550 := r.ReadArrayStart()
			if yyl4550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4551Slc
	var yyhl4551 bool = l >= 0
	for yyj4551 := 0; ; yyj4551++ {
		if yyhl4551 {
			if yyj4551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4551Slc = r.DecodeBytes(yys4551Slc, true, true)
		yys4551 := string(yys4551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4551 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4551)
		} // end switch yys4551
	} // end for yyj4551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4556 int
	var yyb4556 bool
	var yyhl4556 bool = l >= 0
	yyj4556++
	if yyhl4556 {
		yyb4556 = yyj4556 > l
	} else {
		yyb4556 = r.CheckBreak()
	}
	if yyb4556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4556++
	if yyhl4556 {
		yyb4556 = yyj4556 > l
	} else {
		yyb4556 = r.CheckBreak()
	}
	if yyb4556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4556++
	if yyhl4556 {
		yyb4556 = yyj4556 > l
	} else {
		yyb4556 = r.CheckBreak()
	}
	if yyb4556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4556++
	if yyhl4556 {
		yyb4556 = yyj4556 > l
	} else {
		yyb4556 = r.CheckBreak()
	}
	if yyb4556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4556++
		if yyhl4556 {
			yyb4556 = yyj4556 > l
		} else {
			yyb4556 = r.CheckBreak()
		}
		if yyb4556 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4556-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4561 := z.EncBinary()
		_ = yym4561
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4562 := !z.EncBinary()
			yy2arr4562 := z.EncBasicHandle().StructToArray
			var yyq4562 [5]bool
			_, _, _ = yysep4562, yyq4562, yy2arr4562
			const yyr4562 bool = false
			yyq4562[0] = x.Kind != ""
			yyq4562[1] = x.APIVersion != ""
			yyq4562[2] = true
			var yynn4562 int
			if yyr4562 || yy2arr4562 {
				r.EncodeArrayStart(5)
			} else {
				yynn4562 = 2
				for _, b := range yyq4562 {
					if b {
						yynn4562++
					}
				}
				r.EncodeMapStart(yynn4562)
				yynn4562 = 0
			}
			if yyr4562 || yy2arr4562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4562[0] {
					yym4564 := z.EncBinary()
					_ = yym4564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4562[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4565 := z.EncBinary()
					_ = yym4565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4562 || yy2arr4562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4562[1] {
					yym4567 := z.EncBinary()
					_ = yym4567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4562[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4568 := z.EncBinary()
					_ = yym4568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4562 || yy2arr4562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4562[2] {
					yy4570 := &x.ObjectMeta
					yy4570.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4562[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4571 := &x.ObjectMeta
					yy4571.CodecEncodeSelf(e)
				}
			}
			if yyr4562 || yy2arr4562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4573 := z.EncBinary()
				_ = yym4573
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4574 := z.EncBinary()
				_ = yym4574
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4562 || yy2arr4562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4576 := z.EncBinary()
					_ = yym4576
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4577 := z.EncBinary()
					_ = yym4577
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4562 || yy2arr4562 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4578 := z.DecBinary()
	_ = yym4578
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4579 := r.ContainerType()
		if yyct4579 == codecSelferValueTypeMap1234 {
			yyl4579 := r.ReadMapStart()
			if yyl4579 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4579, d)
			}
		} else if yyct4579 == codecSelferValueTypeArray1234 {
			yyl4579 := r.ReadArrayStart()
			if yyl4579 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4579, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4580Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4580Slc
	var yyhl4580 bool = l >= 0
	for yyj4580 := 0; ; yyj4580++ {
		if yyhl4580 {
			if yyj4580 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4580Slc = r.DecodeBytes(yys4580Slc, true, true)
		yys4580 := string(yys4580Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4580 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4583 := &x.ObjectMeta
				yyv4583.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4585 := &x.Data
				yym4586 := z.DecBinary()
				_ = yym4586
				if false {
				} else {
					*yyv4585 = r.DecodeBytes(*(*[]byte)(yyv4585), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4580)
		} // end switch yys4580
	} // end for yyj4580
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4587 int
	var yyb4587 bool
	var yyhl4587 bool = l >= 0
	yyj4587++
	if yyhl4587 {
		yyb4587 = yyj4587 > l
	} else {
		yyb4587 = r.CheckBreak()
	}
	if yyb4587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4587++
	if yyhl4587 {
		yyb4587 = yyj4587 > l
	} else {
		yyb4587 = r.CheckBreak()
	}
	if yyb4587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4587++
	if yyhl4587 {
		yyb4587 = yyj4587 > l
	} else {
		yyb4587 = r.CheckBreak()
	}
	if yyb4587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4590 := &x.ObjectMeta
		yyv4590.CodecDecodeSelf(d)
	}
	yyj4587++
	if yyhl4587 {
		yyb4587 = yyj4587 > l
	} else {
		yyb4587 = r.CheckBreak()
	}
	if yyb4587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4587++
	if yyhl4587 {
		yyb4587 = yyj4587 > l
	} else {
		yyb4587 = r.CheckBreak()
	}
	if yyb4587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4592 := &x.Data
		yym4593 := z.DecBinary()
		_ = yym4593
		if false {
		} else {
			*yyv4592 = r.DecodeBytes(*(*[]byte)(yyv4592), false, false)
		}
	}
	for {
		yyj4587++
		if yyhl4587 {
			yyb4587 = yyj4587 > l
		} else {
			yyb4587 = r.CheckBreak()
		}
		if yyb4587 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4587-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4594 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4595 := &yyv4594
		yy4595.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4596 := *v
	yyh4596, yyl4596 := z.DecSliceHelperStart()
	var yyc4596 bool
	if yyl4596 == 0 {
		if yyv4596 == nil {
			yyv4596 = []OwnerReference{}
			yyc4596 = true
		} else if len(yyv4596) != 0 {
			yyv4596 = yyv4596[:0]
			yyc4596 = true
		}
	} else if yyl4596 > 0 {
		var yyrr4596, yyrl4596 int
		var yyrt4596 bool
		if yyl4596 > cap(yyv4596) {

			yyrg4596 := len(yyv4596) > 0
			yyv24596 := yyv4596
			yyrl4596, yyrt4596 = z.DecInferLen(yyl4596, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4596 {
				if yyrl4596 <= cap(yyv4596) {
					yyv4596 = yyv4596[:yyrl4596]
				} else {
					yyv4596 = make([]OwnerReference, yyrl4596)
				}
			} else {
				yyv4596 = make([]OwnerReference, yyrl4596)
			}
			yyc4596 = true
			yyrr4596 = len(yyv4596)
			if yyrg4596 {
				copy(yyv4596, yyv24596)
			}
		} else if yyl4596 != len(yyv4596) {
			yyv4596 = yyv4596[:yyl4596]
			yyc4596 = true
		}
		yyj4596 := 0
		for ; yyj4596 < yyrr4596; yyj4596++ {
			yyh4596.ElemContainerState(yyj4596)
			if r.TryDecodeAsNil() {
				yyv4596[yyj4596] = OwnerReference{}
			} else {
				yyv4597 := &yyv4596[yyj4596]
				yyv4597.CodecDecodeSelf(d)
			}

		}
		if yyrt4596 {
			for ; yyj4596 < yyl4596; yyj4596++ {
				yyv4596 = append(yyv4596, OwnerReference{})
				yyh4596.ElemContainerState(yyj4596)
				if r.TryDecodeAsNil() {
					yyv4596[yyj4596] = OwnerReference{}
				} else {
					yyv4598 := &yyv4596[yyj4596]
					yyv4598.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4596 := 0
		for ; !r.CheckBreak(); yyj4596++ {

			if yyj4596 >= len(yyv4596) {
				yyv4596 = append(yyv4596, OwnerReference{}) // var yyz4596 OwnerReference
				yyc4596 = true
			}
			yyh4596.ElemContainerState(yyj4596)
			if yyj4596 < len(yyv4596) {
				if r.TryDecodeAsNil() {
					yyv4596[yyj4596] = OwnerReference{}
				} else {
					yyv4599 := &yyv4596[yyj4596]
					yyv4599.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4596 < len(yyv4596) {
			yyv4596 = yyv4596[:yyj4596]
			yyc4596 = true
		} else if yyj4596 == 0 && yyv4596 == nil {
			yyv4596 = []OwnerReference{}
			yyc4596 = true
		}
	}
	yyh4596.End()
	if yyc4596 {
		*v = yyv4596
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4600 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4600.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4601 := *v
	yyh4601, yyl4601 := z.DecSliceHelperStart()
	var yyc4601 bool
	if yyl4601 == 0 {
		if yyv4601 == nil {
			yyv4601 = []PersistentVolumeAccessMode{}
			yyc4601 = true
		} else if len(yyv4601) != 0 {
			yyv4601 = yyv4601[:0]
			yyc4601 = true
		}
	} else if yyl4601 > 0 {
		var yyrr4601, yyrl4601 int
		var yyrt4601 bool
		if yyl4601 > cap(yyv4601) {

			yyrl4601, yyrt4601 = z.DecInferLen(yyl4601, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4601 {
				if yyrl4601 <= cap(yyv4601) {
					yyv4601 = yyv4601[:yyrl4601]
				} else {
					yyv4601 = make([]PersistentVolumeAccessMode, yyrl4601)
				}
			} else {
				yyv4601 = make([]PersistentVolumeAccessMode, yyrl4601)
			}
			yyc4601 = true
			yyrr4601 = len(yyv4601)
		} else if yyl4601 != len(yyv4601) {
			yyv4601 = yyv4601[:yyl4601]
			yyc4601 = true
		}
		yyj4601 := 0
		for ; yyj4601 < yyrr4601; yyj4601++ {
			yyh4601.ElemContainerState(yyj4601)
			if r.TryDecodeAsNil() {
				yyv4601[yyj4601] = ""
			} else {
				yyv4601[yyj4601] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4601 {
			for ; yyj4601 < yyl4601; yyj4601++ {
				yyv4601 = append(yyv4601, "")
				yyh4601.ElemContainerState(yyj4601)
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = ""
				} else {
					yyv4601[yyj4601] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4601 := 0
		for ; !r.CheckBreak(); yyj4601++ {

			if yyj4601 >= len(yyv4601) {
				yyv4601 = append(yyv4601, "") // var yyz4601 PersistentVolumeAccessMode
				yyc4601 = true
			}
			yyh4601.ElemContainerState(yyj4601)
			if yyj4601 < len(yyv4601) {
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = ""
				} else {
					yyv4601[yyj4601] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4601 < len(yyv4601) {
			yyv4601 = yyv4601[:yyj4601]
			yyc4601 = true
		} else if yyj4601 == 0 && yyv4601 == nil {
			yyv4601 = []PersistentVolumeAccessMode{}
			yyc4601 = true
		}
	}
	yyh4601.End()
	if yyc4601 {
		*v = yyv4601
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4605 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4606 := &yyv4605
		yy4606.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4607 := *v
	yyh4607, yyl4607 := z.DecSliceHelperStart()
	var yyc4607 bool
	if yyl4607 == 0 {
		if yyv4607 == nil {
			yyv4607 = []PersistentVolume{}
			yyc4607 = true
		} else if len(yyv4607) != 0 {
			yyv4607 = yyv4607[:0]
			yyc4607 = true
		}
	} else if yyl4607 > 0 {
		var yyrr4607, yyrl4607 int
		var yyrt4607 bool
		if yyl4607 > cap(yyv4607) {

			yyrg4607 := len(yyv4607) > 0
			yyv24607 := yyv4607
			yyrl4607, yyrt4607 = z.DecInferLen(yyl4607, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4607 {
				if yyrl4607 <= cap(yyv4607) {
					yyv4607 = yyv4607[:yyrl4607]
				} else {
					yyv4607 = make([]PersistentVolume, yyrl4607)
				}
			} else {
				yyv4607 = make([]PersistentVolume, yyrl4607)
			}
			yyc4607 = true
			yyrr4607 = len(yyv4607)
			if yyrg4607 {
				copy(yyv4607, yyv24607)
			}
		} else if yyl4607 != len(yyv4607) {
			yyv4607 = yyv4607[:yyl4607]
			yyc4607 = true
		}
		yyj4607 := 0
		for ; yyj4607 < yyrr4607; yyj4607++ {
			yyh4607.ElemContainerState(yyj4607)
			if r.TryDecodeAsNil() {
				yyv4607[yyj4607] = PersistentVolume{}
			} else {
				yyv4608 := &yyv4607[yyj4607]
				yyv4608.CodecDecodeSelf(d)
			}

		}
		if yyrt4607 {
			for ; yyj4607 < yyl4607; yyj4607++ {
				yyv4607 = append(yyv4607, PersistentVolume{})
				yyh4607.ElemContainerState(yyj4607)
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = PersistentVolume{}
				} else {
					yyv4609 := &yyv4607[yyj4607]
					yyv4609.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4607 := 0
		for ; !r.CheckBreak(); yyj4607++ {

			if yyj4607 >= len(yyv4607) {
				yyv4607 = append(yyv4607, PersistentVolume{}) // var yyz4607 PersistentVolume
				yyc4607 = true
			}
			yyh4607.ElemContainerState(yyj4607)
			if yyj4607 < len(yyv4607) {
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = PersistentVolume{}
				} else {
					yyv4610 := &yyv4607[yyj4607]
					yyv4610.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4607 < len(yyv4607) {
			yyv4607 = yyv4607[:yyj4607]
			yyc4607 = true
		} else if yyj4607 == 0 && yyv4607 == nil {
			yyv4607 = []PersistentVolume{}
			yyc4607 = true
		}
	}
	yyh4607.End()
	if yyc4607 {
		*v = yyv4607
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4611 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4612 := &yyv4611
		yy4612.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4613 := *v
	yyh4613, yyl4613 := z.DecSliceHelperStart()
	var yyc4613 bool
	if yyl4613 == 0 {
		if yyv4613 == nil {
			yyv4613 = []PersistentVolumeClaim{}
			yyc4613 = true
		} else if len(yyv4613) != 0 {
			yyv4613 = yyv4613[:0]
			yyc4613 = true
		}
	} else if yyl4613 > 0 {
		var yyrr4613, yyrl4613 int
		var yyrt4613 bool
		if yyl4613 > cap(yyv4613) {

			yyrg4613 := len(yyv4613) > 0
			yyv24613 := yyv4613
			yyrl4613, yyrt4613 = z.DecInferLen(yyl4613, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4613 {
				if yyrl4613 <= cap(yyv4613) {
					yyv4613 = yyv4613[:yyrl4613]
				} else {
					yyv4613 = make([]PersistentVolumeClaim, yyrl4613)
				}
			} else {
				yyv4613 = make([]PersistentVolumeClaim, yyrl4613)
			}
			yyc4613 = true
			yyrr4613 = len(yyv4613)
			if yyrg4613 {
				copy(yyv4613, yyv24613)
			}
		} else if yyl4613 != len(yyv4613) {
			yyv4613 = yyv4613[:yyl4613]
			yyc4613 = true
		}
		yyj4613 := 0
		for ; yyj4613 < yyrr4613; yyj4613++ {
			yyh4613.ElemContainerState(yyj4613)
			if r.TryDecodeAsNil() {
				yyv4613[yyj4613] = PersistentVolumeClaim{}
			} else {
				yyv4614 := &yyv4613[yyj4613]
				yyv4614.CodecDecodeSelf(d)
			}

		}
		if yyrt4613 {
			for ; yyj4613 < yyl4613; yyj4613++ {
				yyv4613 = append(yyv4613, PersistentVolumeClaim{})
				yyh4613.ElemContainerState(yyj4613)
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = PersistentVolumeClaim{}
				} else {
					yyv4615 := &yyv4613[yyj4613]
					yyv4615.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4613 := 0
		for ; !r.CheckBreak(); yyj4613++ {

			if yyj4613 >= len(yyv4613) {
				yyv4613 = append(yyv4613, PersistentVolumeClaim{}) // var yyz4613 PersistentVolumeClaim
				yyc4613 = true
			}
			yyh4613.ElemContainerState(yyj4613)
			if yyj4613 < len(yyv4613) {
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = PersistentVolumeClaim{}
				} else {
					yyv4616 := &yyv4613[yyj4613]
					yyv4616.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4613 < len(yyv4613) {
			yyv4613 = yyv4613[:yyj4613]
			yyc4613 = true
		} else if yyj4613 == 0 && yyv4613 == nil {
			yyv4613 = []PersistentVolumeClaim{}
			yyc4613 = true
		}
	}
	yyh4613.End()
	if yyc4613 {
		*v = yyv4613
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4617 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4618 := &yyv4617
		yy4618.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4619 := *v
	yyh4619, yyl4619 := z.DecSliceHelperStart()
	var yyc4619 bool
	if yyl4619 == 0 {
		if yyv4619 == nil {
			yyv4619 = []KeyToPath{}
			yyc4619 = true
		} else if len(yyv4619) != 0 {
			yyv4619 = yyv4619[:0]
			yyc4619 = true
		}
	} else if yyl4619 > 0 {
		var yyrr4619, yyrl4619 int
		var yyrt4619 bool
		if yyl4619 > cap(yyv4619) {

			yyrg4619 := len(yyv4619) > 0
			yyv24619 := yyv4619
			yyrl4619, yyrt4619 = z.DecInferLen(yyl4619, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4619 {
				if yyrl4619 <= cap(yyv4619) {
					yyv4619 = yyv4619[:yyrl4619]
				} else {
					yyv4619 = make([]KeyToPath, yyrl4619)
				}
			} else {
				yyv4619 = make([]KeyToPath, yyrl4619)
			}
			yyc4619 = true
			yyrr4619 = len(yyv4619)
			if yyrg4619 {
				copy(yyv4619, yyv24619)
			}
		} else if yyl4619 != len(yyv4619) {
			yyv4619 = yyv4619[:yyl4619]
			yyc4619 = true
		}
		yyj4619 := 0
		for ; yyj4619 < yyrr4619; yyj4619++ {
			yyh4619.ElemContainerState(yyj4619)
			if r.TryDecodeAsNil() {
				yyv4619[yyj4619] = KeyToPath{}
			} else {
				yyv4620 := &yyv4619[yyj4619]
				yyv4620.CodecDecodeSelf(d)
			}

		}
		if yyrt4619 {
			for ; yyj4619 < yyl4619; yyj4619++ {
				yyv4619 = append(yyv4619, KeyToPath{})
				yyh4619.ElemContainerState(yyj4619)
				if r.TryDecodeAsNil() {
					yyv4619[yyj4619] = KeyToPath{}
				} else {
					yyv4621 := &yyv4619[yyj4619]
					yyv4621.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4619 := 0
		for ; !r.CheckBreak(); yyj4619++ {

			if yyj4619 >= len(yyv4619) {
				yyv4619 = append(yyv4619, KeyToPath{}) // var yyz4619 KeyToPath
				yyc4619 = true
			}
			yyh4619.ElemContainerState(yyj4619)
			if yyj4619 < len(yyv4619) {
				if r.TryDecodeAsNil() {
					yyv4619[yyj4619] = KeyToPath{}
				} else {
					yyv4622 := &yyv4619[yyj4619]
					yyv4622.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4619 < len(yyv4619) {
			yyv4619 = yyv4619[:yyj4619]
			yyc4619 = true
		} else if yyj4619 == 0 && yyv4619 == nil {
			yyv4619 = []KeyToPath{}
			yyc4619 = true
		}
	}
	yyh4619.End()
	if yyc4619 {
		*v = yyv4619
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4623 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4624 := &yyv4623
		yy4624.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4625 := *v
	yyh4625, yyl4625 := z.DecSliceHelperStart()
	var yyc4625 bool
	if yyl4625 == 0 {
		if yyv4625 == nil {
			yyv4625 = []HTTPHeader{}
			yyc4625 = true
		} else if len(yyv4625) != 0 {
			yyv4625 = yyv4625[:0]
			yyc4625 = true
		}
	} else if yyl4625 > 0 {
		var yyrr4625, yyrl4625 int
		var yyrt4625 bool
		if yyl4625 > cap(yyv4625) {

			yyrg4625 := len(yyv4625) > 0
			yyv24625 := yyv4625
			yyrl4625, yyrt4625 = z.DecInferLen(yyl4625, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4625 {
				if yyrl4625 <= cap(yyv4625) {
					yyv4625 = yyv4625[:yyrl4625]
				} else {
					yyv4625 = make([]HTTPHeader, yyrl4625)
				}
			} else {
				yyv4625 = make([]HTTPHeader, yyrl4625)
			}
			yyc4625 = true
			yyrr4625 = len(yyv4625)
			if yyrg4625 {
				copy(yyv4625, yyv24625)
			}
		} else if yyl4625 != len(yyv4625) {
			yyv4625 = yyv4625[:yyl4625]
			yyc4625 = true
		}
		yyj4625 := 0
		for ; yyj4625 < yyrr4625; yyj4625++ {
			yyh4625.ElemContainerState(yyj4625)
			if r.TryDecodeAsNil() {
				yyv4625[yyj4625] = HTTPHeader{}
			} else {
				yyv4626 := &yyv4625[yyj4625]
				yyv4626.CodecDecodeSelf(d)
			}

		}
		if yyrt4625 {
			for ; yyj4625 < yyl4625; yyj4625++ {
				yyv4625 = append(yyv4625, HTTPHeader{})
				yyh4625.ElemContainerState(yyj4625)
				if r.TryDecodeAsNil() {
					yyv4625[yyj4625] = HTTPHeader{}
				} else {
					yyv4627 := &yyv4625[yyj4625]
					yyv4627.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4625 := 0
		for ; !r.CheckBreak(); yyj4625++ {

			if yyj4625 >= len(yyv4625) {
				yyv4625 = append(yyv4625, HTTPHeader{}) // var yyz4625 HTTPHeader
				yyc4625 = true
			}
			yyh4625.ElemContainerState(yyj4625)
			if yyj4625 < len(yyv4625) {
				if r.TryDecodeAsNil() {
					yyv4625[yyj4625] = HTTPHeader{}
				} else {
					yyv4628 := &yyv4625[yyj4625]
					yyv4628.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4625 < len(yyv4625) {
			yyv4625 = yyv4625[:yyj4625]
			yyc4625 = true
		} else if yyj4625 == 0 && yyv4625 == nil {
			yyv4625 = []HTTPHeader{}
			yyc4625 = true
		}
	}
	yyh4625.End()
	if yyc4625 {
		*v = yyv4625
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4629 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4629.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4630 := *v
	yyh4630, yyl4630 := z.DecSliceHelperStart()
	var yyc4630 bool
	if yyl4630 == 0 {
		if yyv4630 == nil {
			yyv4630 = []Capability{}
			yyc4630 = true
		} else if len(yyv4630) != 0 {
			yyv4630 = yyv4630[:0]
			yyc4630 = true
		}
	} else if yyl4630 > 0 {
		var yyrr4630, yyrl4630 int
		var yyrt4630 bool
		if yyl4630 > cap(yyv4630) {

			yyrl4630, yyrt4630 = z.DecInferLen(yyl4630, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4630 {
				if yyrl4630 <= cap(yyv4630) {
					yyv4630 = yyv4630[:yyrl4630]
				} else {
					yyv4630 = make([]Capability, yyrl4630)
				}
			} else {
				yyv4630 = make([]Capability, yyrl4630)
			}
			yyc4630 = true
			yyrr4630 = len(yyv4630)
		} else if yyl4630 != len(yyv4630) {
			yyv4630 = yyv4630[:yyl4630]
			yyc4630 = true
		}
		yyj4630 := 0
		for ; yyj4630 < yyrr4630; yyj4630++ {
			yyh4630.ElemContainerState(yyj4630)
			if r.TryDecodeAsNil() {
				yyv4630[yyj4630] = ""
			} else {
				yyv4630[yyj4630] = Capability(r.DecodeString())
			}

		}
		if yyrt4630 {
			for ; yyj4630 < yyl4630; yyj4630++ {
				yyv4630 = append(yyv4630, "")
				yyh4630.ElemContainerState(yyj4630)
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = ""
				} else {
					yyv4630[yyj4630] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4630 := 0
		for ; !r.CheckBreak(); yyj4630++ {

			if yyj4630 >= len(yyv4630) {
				yyv4630 = append(yyv4630, "") // var yyz4630 Capability
				yyc4630 = true
			}
			yyh4630.ElemContainerState(yyj4630)
			if yyj4630 < len(yyv4630) {
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = ""
				} else {
					yyv4630[yyj4630] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4630 < len(yyv4630) {
			yyv4630 = yyv4630[:yyj4630]
			yyc4630 = true
		} else if yyj4630 == 0 && yyv4630 == nil {
			yyv4630 = []Capability{}
			yyc4630 = true
		}
	}
	yyh4630.End()
	if yyc4630 {
		*v = yyv4630
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4634 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4635 := &yyv4634
		yy4635.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4636 := *v
	yyh4636, yyl4636 := z.DecSliceHelperStart()
	var yyc4636 bool
	if yyl4636 == 0 {
		if yyv4636 == nil {
			yyv4636 = []ContainerPort{}
			yyc4636 = true
		} else if len(yyv4636) != 0 {
			yyv4636 = yyv4636[:0]
			yyc4636 = true
		}
	} else if yyl4636 > 0 {
		var yyrr4636, yyrl4636 int
		var yyrt4636 bool
		if yyl4636 > cap(yyv4636) {

			yyrg4636 := len(yyv4636) > 0
			yyv24636 := yyv4636
			yyrl4636, yyrt4636 = z.DecInferLen(yyl4636, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4636 {
				if yyrl4636 <= cap(yyv4636) {
					yyv4636 = yyv4636[:yyrl4636]
				} else {
					yyv4636 = make([]ContainerPort, yyrl4636)
				}
			} else {
				yyv4636 = make([]ContainerPort, yyrl4636)
			}
			yyc4636 = true
			yyrr4636 = len(yyv4636)
			if yyrg4636 {
				copy(yyv4636, yyv24636)
			}
		} else if yyl4636 != len(yyv4636) {
			yyv4636 = yyv4636[:yyl4636]
			yyc4636 = true
		}
		yyj4636 := 0
		for ; yyj4636 < yyrr4636; yyj4636++ {
			yyh4636.ElemContainerState(yyj4636)
			if r.TryDecodeAsNil() {
				yyv4636[yyj4636] = ContainerPort{}
			} else {
				yyv4637 := &yyv4636[yyj4636]
				yyv4637.CodecDecodeSelf(d)
			}

		}
		if yyrt4636 {
			for ; yyj4636 < yyl4636; yyj4636++ {
				yyv4636 = append(yyv4636, ContainerPort{})
				yyh4636.ElemContainerState(yyj4636)
				if r.TryDecodeAsNil() {
					yyv4636[yyj4636] = ContainerPort{}
				} else {
					yyv4638 := &yyv4636[yyj4636]
					yyv4638.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4636 := 0
		for ; !r.CheckBreak(); yyj4636++ {

			if yyj4636 >= len(yyv4636) {
				yyv4636 = append(yyv4636, ContainerPort{}) // var yyz4636 ContainerPort
				yyc4636 = true
			}
			yyh4636.ElemContainerState(yyj4636)
			if yyj4636 < len(yyv4636) {
				if r.TryDecodeAsNil() {
					yyv4636[yyj4636] = ContainerPort{}
				} else {
					yyv4639 := &yyv4636[yyj4636]
					yyv4639.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4636 < len(yyv4636) {
			yyv4636 = yyv4636[:yyj4636]
			yyc4636 = true
		} else if yyj4636 == 0 && yyv4636 == nil {
			yyv4636 = []ContainerPort{}
			yyc4636 = true
		}
	}
	yyh4636.End()
	if yyc4636 {
		*v = yyv4636
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4640 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4641 := &yyv4640
		yy4641.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4642 := *v
	yyh4642, yyl4642 := z.DecSliceHelperStart()
	var yyc4642 bool
	if yyl4642 == 0 {
		if yyv4642 == nil {
			yyv4642 = []EnvVar{}
			yyc4642 = true
		} else if len(yyv4642) != 0 {
			yyv4642 = yyv4642[:0]
			yyc4642 = true
		}
	} else if yyl4642 > 0 {
		var yyrr4642, yyrl4642 int
		var yyrt4642 bool
		if yyl4642 > cap(yyv4642) {

			yyrg4642 := len(yyv4642) > 0
			yyv24642 := yyv4642
			yyrl4642, yyrt4642 = z.DecInferLen(yyl4642, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4642 {
				if yyrl4642 <= cap(yyv4642) {
					yyv4642 = yyv4642[:yyrl4642]
				} else {
					yyv4642 = make([]EnvVar, yyrl4642)
				}
			} else {
				yyv4642 = make([]EnvVar, yyrl4642)
			}
			yyc4642 = true
			yyrr4642 = len(yyv4642)
			if yyrg4642 {
				copy(yyv4642, yyv24642)
			}
		} else if yyl4642 != len(yyv4642) {
			yyv4642 = yyv4642[:yyl4642]
			yyc4642 = true
		}
		yyj4642 := 0
		for ; yyj4642 < yyrr4642; yyj4642++ {
			yyh4642.ElemContainerState(yyj4642)
			if r.TryDecodeAsNil() {
				yyv4642[yyj4642] = EnvVar{}
			} else {
				yyv4643 := &yyv4642[yyj4642]
				yyv4643.CodecDecodeSelf(d)
			}

		}
		if yyrt4642 {
			for ; yyj4642 < yyl4642; yyj4642++ {
				yyv4642 = append(yyv4642, EnvVar{})
				yyh4642.ElemContainerState(yyj4642)
				if r.TryDecodeAsNil() {
					yyv4642[yyj4642] = EnvVar{}
				} else {
					yyv4644 := &yyv4642[yyj4642]
					yyv4644.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4642 := 0
		for ; !r.CheckBreak(); yyj4642++ {

			if yyj4642 >= len(yyv4642) {
				yyv4642 = append(yyv4642, EnvVar{}) // var yyz4642 EnvVar
				yyc4642 = true
			}
			yyh4642.ElemContainerState(yyj4642)
			if yyj4642 < len(yyv4642) {
				if r.TryDecodeAsNil() {
					yyv4642[yyj4642] = EnvVar{}
				} else {
					yyv4645 := &yyv4642[yyj4642]
					yyv4645.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4642 < len(yyv4642) {
			yyv4642 = yyv4642[:yyj4642]
			yyc4642 = true
		} else if yyj4642 == 0 && yyv4642 == nil {
			yyv4642 = []EnvVar{}
			yyc4642 = true
		}
	}
	yyh4642.End()
	if yyc4642 {
		*v = yyv4642
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4646 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4647 := &yyv4646
		yy4647.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4648 := *v
	yyh4648, yyl4648 := z.DecSliceHelperStart()
	var yyc4648 bool
	if yyl4648 == 0 {
		if yyv4648 == nil {
			yyv4648 = []VolumeMount{}
			yyc4648 = true
		} else if len(yyv4648) != 0 {
			yyv4648 = yyv4648[:0]
			yyc4648 = true
		}
	} else if yyl4648 > 0 {
		var yyrr4648, yyrl4648 int
		var yyrt4648 bool
		if yyl4648 > cap(yyv4648) {

			yyrg4648 := len(yyv4648) > 0
			yyv24648 := yyv4648
			yyrl4648, yyrt4648 = z.DecInferLen(yyl4648, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4648 {
				if yyrl4648 <= cap(yyv4648) {
					yyv4648 = yyv4648[:yyrl4648]
				} else {
					yyv4648 = make([]VolumeMount, yyrl4648)
				}
			} else {
				yyv4648 = make([]VolumeMount, yyrl4648)
			}
			yyc4648 = true
			yyrr4648 = len(yyv4648)
			if yyrg4648 {
				copy(yyv4648, yyv24648)
			}
		} else if yyl4648 != len(yyv4648) {
			yyv4648 = yyv4648[:yyl4648]
			yyc4648 = true
		}
		yyj4648 := 0
		for ; yyj4648 < yyrr4648; yyj4648++ {
			yyh4648.ElemContainerState(yyj4648)
			if r.TryDecodeAsNil() {
				yyv4648[yyj4648] = VolumeMount{}
			} else {
				yyv4649 := &yyv4648[yyj4648]
				yyv4649.CodecDecodeSelf(d)
			}

		}
		if yyrt4648 {
			for ; yyj4648 < yyl4648; yyj4648++ {
				yyv4648 = append(yyv4648, VolumeMount{})
				yyh4648.ElemContainerState(yyj4648)
				if r.TryDecodeAsNil() {
					yyv4648[yyj4648] = VolumeMount{}
				} else {
					yyv4650 := &yyv4648[yyj4648]
					yyv4650.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4648 := 0
		for ; !r.CheckBreak(); yyj4648++ {

			if yyj4648 >= len(yyv4648) {
				yyv4648 = append(yyv4648, VolumeMount{}) // var yyz4648 VolumeMount
				yyc4648 = true
			}
			yyh4648.ElemContainerState(yyj4648)
			if yyj4648 < len(yyv4648) {
				if r.TryDecodeAsNil() {
					yyv4648[yyj4648] = VolumeMount{}
				} else {
					yyv4651 := &yyv4648[yyj4648]
					yyv4651.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4648 < len(yyv4648) {
			yyv4648 = yyv4648[:yyj4648]
			yyc4648 = true
		} else if yyj4648 == 0 && yyv4648 == nil {
			yyv4648 = []VolumeMount{}
			yyc4648 = true
		}
	}
	yyh4648.End()
	if yyc4648 {
		*v = yyv4648
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4652 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4653 := &yyv4652
		yy4653.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4654 := *v
	yyh4654, yyl4654 := z.DecSliceHelperStart()
	var yyc4654 bool
	if yyl4654 == 0 {
		if yyv4654 == nil {
			yyv4654 = []NodeSelectorTerm{}
			yyc4654 = true
		} else if len(yyv4654) != 0 {
			yyv4654 = yyv4654[:0]
			yyc4654 = true
		}
	} else if yyl4654 > 0 {
		var yyrr4654, yyrl4654 int
		var yyrt4654 bool
		if yyl4654 > cap(yyv4654) {

			yyrg4654 := len(yyv4654) > 0
			yyv24654 := yyv4654
			yyrl4654, yyrt4654 = z.DecInferLen(yyl4654, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4654 {
				if yyrl4654 <= cap(yyv4654) {
					yyv4654 = yyv4654[:yyrl4654]
				} else {
					yyv4654 = make([]NodeSelectorTerm, yyrl4654)
				}
			} else {
				yyv4654 = make([]NodeSelectorTerm, yyrl4654)
			}
			yyc4654 = true
			yyrr4654 = len(yyv4654)
			if yyrg4654 {
				copy(yyv4654, yyv24654)
			}
		} else if yyl4654 != len(yyv4654) {
			yyv4654 = yyv4654[:yyl4654]
			yyc4654 = true
		}
		yyj4654 := 0
		for ; yyj4654 < yyrr4654; yyj4654++ {
			yyh4654.ElemContainerState(yyj4654)
			if r.TryDecodeAsNil() {
				yyv4654[yyj4654] = NodeSelectorTerm{}
			} else {
				yyv4655 := &yyv4654[yyj4654]
				yyv4655.CodecDecodeSelf(d)
			}

		}
		if yyrt4654 {
			for ; yyj4654 < yyl4654; yyj4654++ {
				yyv4654 = append(yyv4654, NodeSelectorTerm{})
				yyh4654.ElemContainerState(yyj4654)
				if r.TryDecodeAsNil() {
					yyv4654[yyj4654] = NodeSelectorTerm{}
				} else {
					yyv4656 := &yyv4654[yyj4654]
					yyv4656.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4654 := 0
		for ; !r.CheckBreak(); yyj4654++ {

			if yyj4654 >= len(yyv4654) {
				yyv4654 = append(yyv4654, NodeSelectorTerm{}) // var yyz4654 NodeSelectorTerm
				yyc4654 = true
			}
			yyh4654.ElemContainerState(yyj4654)
			if yyj4654 < len(yyv4654) {
				if r.TryDecodeAsNil() {
					yyv4654[yyj4654] = NodeSelectorTerm{}
				} else {
					yyv4657 := &yyv4654[yyj4654]
					yyv4657.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4654 < len(yyv4654) {
			yyv4654 = yyv4654[:yyj4654]
			yyc4654 = true
		} else if yyj4654 == 0 && yyv4654 == nil {
			yyv4654 = []NodeSelectorTerm{}
			yyc4654 = true
		}
	}
	yyh4654.End()
	if yyc4654 {
		*v = yyv4654
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4658 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4659 := &yyv4658
		yy4659.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4660 := *v
	yyh4660, yyl4660 := z.DecSliceHelperStart()
	var yyc4660 bool
	if yyl4660 == 0 {
		if yyv4660 == nil {
			yyv4660 = []NodeSelectorRequirement{}
			yyc4660 = true
		} else if len(yyv4660) != 0 {
			yyv4660 = yyv4660[:0]
			yyc4660 = true
		}
	} else if yyl4660 > 0 {
		var yyrr4660, yyrl4660 int
		var yyrt4660 bool
		if yyl4660 > cap(yyv4660) {

			yyrg4660 := len(yyv4660) > 0
			yyv24660 := yyv4660
			yyrl4660, yyrt4660 = z.DecInferLen(yyl4660, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4660 {
				if yyrl4660 <= cap(yyv4660) {
					yyv4660 = yyv4660[:yyrl4660]
				} else {
					yyv4660 = make([]NodeSelectorRequirement, yyrl4660)
				}
			} else {
				yyv4660 = make([]NodeSelectorRequirement, yyrl4660)
			}
			yyc4660 = true
			yyrr4660 = len(yyv4660)
			if yyrg4660 {
				copy(yyv4660, yyv24660)
			}
		} else if yyl4660 != len(yyv4660) {
			yyv4660 = yyv4660[:yyl4660]
			yyc4660 = true
		}
		yyj4660 := 0
		for ; yyj4660 < yyrr4660; yyj4660++ {
			yyh4660.ElemContainerState(yyj4660)
			if r.TryDecodeAsNil() {
				yyv4660[yyj4660] = NodeSelectorRequirement{}
			} else {
				yyv4661 := &yyv4660[yyj4660]
				yyv4661.CodecDecodeSelf(d)
			}

		}
		if yyrt4660 {
			for ; yyj4660 < yyl4660; yyj4660++ {
				yyv4660 = append(yyv4660, NodeSelectorRequirement{})
				yyh4660.ElemContainerState(yyj4660)
				if r.TryDecodeAsNil() {
					yyv4660[yyj4660] = NodeSelectorRequirement{}
				} else {
					yyv4662 := &yyv4660[yyj4660]
					yyv4662.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4660 := 0
		for ; !r.CheckBreak(); yyj4660++ {

			if yyj4660 >= len(yyv4660) {
				yyv4660 = append(yyv4660, NodeSelectorRequirement{}) // var yyz4660 NodeSelectorRequirement
				yyc4660 = true
			}
			yyh4660.ElemContainerState(yyj4660)
			if yyj4660 < len(yyv4660) {
				if r.TryDecodeAsNil() {
					yyv4660[yyj4660] = NodeSelectorRequirement{}
				} else {
					yyv4663 := &yyv4660[yyj4660]
					yyv4663.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4660 < len(yyv4660) {
			yyv4660 = yyv4660[:yyj4660]
			yyc4660 = true
		} else if yyj4660 == 0 && yyv4660 == nil {
			yyv4660 = []NodeSelectorRequirement{}
			yyc4660 = true
		}
	}
	yyh4660.End()
	if yyc4660 {
		*v = yyv4660
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4664 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4665 := &yyv4664
		yy4665.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4666 := *v
	yyh4666, yyl4666 := z.DecSliceHelperStart()
	var yyc4666 bool
	if yyl4666 == 0 {
		if yyv4666 == nil {
			yyv4666 = []PodAffinityTerm{}
			yyc4666 = true
		} else if len(yyv4666) != 0 {
			yyv4666 = yyv4666[:0]
			yyc4666 = true
		}
	} else if yyl4666 > 0 {
		var yyrr4666, yyrl4666 int
		var yyrt4666 bool
		if yyl4666 > cap(yyv4666) {

			yyrg4666 := len(yyv4666) > 0
			yyv24666 := yyv4666
			yyrl4666, yyrt4666 = z.DecInferLen(yyl4666, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4666 {
				if yyrl4666 <= cap(yyv4666) {
					yyv4666 = yyv4666[:yyrl4666]
				} else {
					yyv4666 = make([]PodAffinityTerm, yyrl4666)
				}
			} else {
				yyv4666 = make([]PodAffinityTerm, yyrl4666)
			}
			yyc4666 = true
			yyrr4666 = len(yyv4666)
			if yyrg4666 {
				copy(yyv4666, yyv24666)
			}
		} else if yyl4666 != len(yyv4666) {
			yyv4666 = yyv4666[:yyl4666]
			yyc4666 = true
		}
		yyj4666 := 0
		for ; yyj4666 < yyrr4666; yyj4666++ {
			yyh4666.ElemContainerState(yyj4666)
			if r.TryDecodeAsNil() {
				yyv4666[yyj4666] = PodAffinityTerm{}
			} else {
				yyv4667 := &yyv4666[yyj4666]
				yyv4667.CodecDecodeSelf(d)
			}

		}
		if yyrt4666 {
			for ; yyj4666 < yyl4666; yyj4666++ {
				yyv4666 = append(yyv4666, PodAffinityTerm{})
				yyh4666.ElemContainerState(yyj4666)
				if r.TryDecodeAsNil() {
					yyv4666[yyj4666] = PodAffinityTerm{}
				} else {
					yyv4668 := &yyv4666[yyj4666]
					yyv4668.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4666 := 0
		for ; !r.CheckBreak(); yyj4666++ {

			if yyj4666 >= len(yyv4666) {
				yyv4666 = append(yyv4666, PodAffinityTerm{}) // var yyz4666 PodAffinityTerm
				yyc4666 = true
			}
			yyh4666.ElemContainerState(yyj4666)
			if yyj4666 < len(yyv4666) {
				if r.TryDecodeAsNil() {
					yyv4666[yyj4666] = PodAffinityTerm{}
				} else {
					yyv4669 := &yyv4666[yyj4666]
					yyv4669.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4666 < len(yyv4666) {
			yyv4666 = yyv4666[:yyj4666]
			yyc4666 = true
		} else if yyj4666 == 0 && yyv4666 == nil {
			yyv4666 = []PodAffinityTerm{}
			yyc4666 = true
		}
	}
	yyh4666.End()
	if yyc4666 {
		*v = yyv4666
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4670 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4671 := &yyv4670
		yy4671.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4672 := *v
	yyh4672, yyl4672 := z.DecSliceHelperStart()
	var yyc4672 bool
	if yyl4672 == 0 {
		if yyv4672 == nil {
			yyv4672 = []WeightedPodAffinityTerm{}
			yyc4672 = true
		} else if len(yyv4672) != 0 {
			yyv4672 = yyv4672[:0]
			yyc4672 = true
		}
	} else if yyl4672 > 0 {
		var yyrr4672, yyrl4672 int
		var yyrt4672 bool
		if yyl4672 > cap(yyv4672) {

			yyrg4672 := len(yyv4672) > 0
			yyv24672 := yyv4672
			yyrl4672, yyrt4672 = z.DecInferLen(yyl4672, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4672 {
				if yyrl4672 <= cap(yyv4672) {
					yyv4672 = yyv4672[:yyrl4672]
				} else {
					yyv4672 = make([]WeightedPodAffinityTerm, yyrl4672)
				}
			} else {
				yyv4672 = make([]WeightedPodAffinityTerm, yyrl4672)
			}
			yyc4672 = true
			yyrr4672 = len(yyv4672)
			if yyrg4672 {
				copy(yyv4672, yyv24672)
			}
		} else if yyl4672 != len(yyv4672) {
			yyv4672 = yyv4672[:yyl4672]
			yyc4672 = true
		}
		yyj4672 := 0
		for ; yyj4672 < yyrr4672; yyj4672++ {
			yyh4672.ElemContainerState(yyj4672)
			if r.TryDecodeAsNil() {
				yyv4672[yyj4672] = WeightedPodAffinityTerm{}
			} else {
				yyv4673 := &yyv4672[yyj4672]
				yyv4673.CodecDecodeSelf(d)
			}

		}
		if yyrt4672 {
			for ; yyj4672 < yyl4672; yyj4672++ {
				yyv4672 = append(yyv4672, WeightedPodAffinityTerm{})
				yyh4672.ElemContainerState(yyj4672)
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = WeightedPodAffinityTerm{}
				} else {
					yyv4674 := &yyv4672[yyj4672]
					yyv4674.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4672 := 0
		for ; !r.CheckBreak(); yyj4672++ {

			if yyj4672 >= len(yyv4672) {
				yyv4672 = append(yyv4672, WeightedPodAffinityTerm{}) // var yyz4672 WeightedPodAffinityTerm
				yyc4672 = true
			}
			yyh4672.ElemContainerState(yyj4672)
			if yyj4672 < len(yyv4672) {
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = WeightedPodAffinityTerm{}
				} else {
					yyv4675 := &yyv4672[yyj4672]
					yyv4675.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4672 < len(yyv4672) {
			yyv4672 = yyv4672[:yyj4672]
			yyc4672 = true
		} else if yyj4672 == 0 && yyv4672 == nil {
			yyv4672 = []WeightedPodAffinityTerm{}
			yyc4672 = true
		}
	}
	yyh4672.End()
	if yyc4672 {
		*v = yyv4672
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4676 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4677 := &yyv4676
		yy4677.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4678 := *v
	yyh4678, yyl4678 := z.DecSliceHelperStart()
	var yyc4678 bool
	if yyl4678 == 0 {
		if yyv4678 == nil {
			yyv4678 = []PreferredSchedulingTerm{}
			yyc4678 = true
		} else if len(yyv4678) != 0 {
			yyv4678 = yyv4678[:0]
			yyc4678 = true
		}
	} else if yyl4678 > 0 {
		var yyrr4678, yyrl4678 int
		var yyrt4678 bool
		if yyl4678 > cap(yyv4678) {

			yyrg4678 := len(yyv4678) > 0
			yyv24678 := yyv4678
			yyrl4678, yyrt4678 = z.DecInferLen(yyl4678, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4678 {
				if yyrl4678 <= cap(yyv4678) {
					yyv4678 = yyv4678[:yyrl4678]
				} else {
					yyv4678 = make([]PreferredSchedulingTerm, yyrl4678)
				}
			} else {
				yyv4678 = make([]PreferredSchedulingTerm, yyrl4678)
			}
			yyc4678 = true
			yyrr4678 = len(yyv4678)
			if yyrg4678 {
				copy(yyv4678, yyv24678)
			}
		} else if yyl4678 != len(yyv4678) {
			yyv4678 = yyv4678[:yyl4678]
			yyc4678 = true
		}
		yyj4678 := 0
		for ; yyj4678 < yyrr4678; yyj4678++ {
			yyh4678.ElemContainerState(yyj4678)
			if r.TryDecodeAsNil() {
				yyv4678[yyj4678] = PreferredSchedulingTerm{}
			} else {
				yyv4679 := &yyv4678[yyj4678]
				yyv4679.CodecDecodeSelf(d)
			}

		}
		if yyrt4678 {
			for ; yyj4678 < yyl4678; yyj4678++ {
				yyv4678 = append(yyv4678, PreferredSchedulingTerm{})
				yyh4678.ElemContainerState(yyj4678)
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = PreferredSchedulingTerm{}
				} else {
					yyv4680 := &yyv4678[yyj4678]
					yyv4680.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4678 := 0
		for ; !r.CheckBreak(); yyj4678++ {

			if yyj4678 >= len(yyv4678) {
				yyv4678 = append(yyv4678, PreferredSchedulingTerm{}) // var yyz4678 PreferredSchedulingTerm
				yyc4678 = true
			}
			yyh4678.ElemContainerState(yyj4678)
			if yyj4678 < len(yyv4678) {
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = PreferredSchedulingTerm{}
				} else {
					yyv4681 := &yyv4678[yyj4678]
					yyv4681.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4678 < len(yyv4678) {
			yyv4678 = yyv4678[:yyj4678]
			yyc4678 = true
		} else if yyj4678 == 0 && yyv4678 == nil {
			yyv4678 = []PreferredSchedulingTerm{}
			yyc4678 = true
		}
	}
	yyh4678.End()
	if yyc4678 {
		*v = yyv4678
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4682 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4683 := &yyv4682
		yy4683.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4684 := *v
	yyh4684, yyl4684 := z.DecSliceHelperStart()
	var yyc4684 bool
	if yyl4684 == 0 {
		if yyv4684 == nil {
			yyv4684 = []Volume{}
			yyc4684 = true
		} else if len(yyv4684) != 0 {
			yyv4684 = yyv4684[:0]
			yyc4684 = true
		}
	} else if yyl4684 > 0 {
		var yyrr4684, yyrl4684 int
		var yyrt4684 bool
		if yyl4684 > cap(yyv4684) {

			yyrg4684 := len(yyv4684) > 0
			yyv24684 := yyv4684
			yyrl4684, yyrt4684 = z.DecInferLen(yyl4684, z.DecBasicHandle().MaxInitLen, 208)
			if yyrt4684 {
				if yyrl4684 <= cap(yyv4684) {
					yyv4684 = yyv4684[:yyrl4684]
				} else {
					yyv4684 = make([]Volume, yyrl4684)
				}
			} else {
				yyv4684 = make([]Volume, yyrl4684)
			}
			yyc4684 = true
			yyrr4684 = len(yyv4684)
			if yyrg4684 {
				copy(yyv4684, yyv24684)
			}
		} else if yyl4684 != len(yyv4684) {
			yyv4684 = yyv4684[:yyl4684]
			yyc4684 = true
		}
		yyj4684 := 0
		for ; yyj4684 < yyrr4684; yyj4684++ {
			yyh4684.ElemContainerState(yyj4684)
			if r.TryDecodeAsNil() {
				yyv4684[yyj4684] = Volume{}
			} else {
				yyv4685 := &yyv4684[yyj4684]
				yyv4685.CodecDecodeSelf(d)
			}

		}
		if yyrt4684 {
			for ; yyj4684 < yyl4684; yyj4684++ {
				yyv4684 = append(yyv4684, Volume{})
				yyh4684.ElemContainerState(yyj4684)
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = Volume{}
				} else {
					yyv4686 := &yyv4684[yyj4684]
					yyv4686.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4684 := 0
		for ; !r.CheckBreak(); yyj4684++ {

			if yyj4684 >= len(yyv4684) {
				yyv4684 = append(yyv4684, Volume{}) // var yyz4684 Volume
				yyc4684 = true
			}
			yyh4684.ElemContainerState(yyj4684)
			if yyj4684 < len(yyv4684) {
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = Volume{}
				} else {
					yyv4687 := &yyv4684[yyj4684]
					yyv4687.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4684 < len(yyv4684) {
			yyv4684 = yyv4684[:yyj4684]
			yyc4684 = true
		} else if yyj4684 == 0 && yyv4684 == nil {
			yyv4684 = []Volume{}
			yyc4684 = true
		}
	}
	yyh4684.End()
	if yyc4684 {
		*v = yyv4684
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4688 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4689 := &yyv4688
		yy4689.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4690 := *v
	yyh4690, yyl4690 := z.DecSliceHelperStart()
	var yyc4690 bool
	if yyl4690 == 0 {
		if yyv4690 == nil {
			yyv4690 = []Container{}
			yyc4690 = true
		} else if len(yyv4690) != 0 {
			yyv4690 = yyv4690[:0]
			yyc4690 = true
		}
	} else if yyl4690 > 0 {
		var yyrr4690, yyrl4690 int
		var yyrt4690 bool
		if yyl4690 > cap(yyv4690) {

			yyrg4690 := len(yyv4690) > 0
			yyv24690 := yyv4690
			yyrl4690, yyrt4690 = z.DecInferLen(yyl4690, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4690 {
				if yyrl4690 <= cap(yyv4690) {
					yyv4690 = yyv4690[:yyrl4690]
				} else {
					yyv4690 = make([]Container, yyrl4690)
				}
			} else {
				yyv4690 = make([]Container, yyrl4690)
			}
			yyc4690 = true
			yyrr4690 = len(yyv4690)
			if yyrg4690 {
				copy(yyv4690, yyv24690)
			}
		} else if yyl4690 != len(yyv4690) {
			yyv4690 = yyv4690[:yyl4690]
			yyc4690 = true
		}
		yyj4690 := 0
		for ; yyj4690 < yyrr4690; yyj4690++ {
			yyh4690.ElemContainerState(yyj4690)
			if r.TryDecodeAsNil() {
				yyv4690[yyj4690] = Container{}
			} else {
				yyv4691 := &yyv4690[yyj4690]
				yyv4691.CodecDecodeSelf(d)
			}

		}
		if yyrt4690 {
			for ; yyj4690 < yyl4690; yyj4690++ {
				yyv4690 = append(yyv4690, Container{})
				yyh4690.ElemContainerState(yyj4690)
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = Container{}
				} else {
					yyv4692 := &yyv4690[yyj4690]
					yyv4692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4690 := 0
		for ; !r.CheckBreak(); yyj4690++ {

			if yyj4690 >= len(yyv4690) {
				yyv4690 = append(yyv4690, Container{}) // var yyz4690 Container
				yyc4690 = true
			}
			yyh4690.ElemContainerState(yyj4690)
			if yyj4690 < len(yyv4690) {
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = Container{}
				} else {
					yyv4693 := &yyv4690[yyj4690]
					yyv4693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4690 < len(yyv4690) {
			yyv4690 = yyv4690[:yyj4690]
			yyc4690 = true
		} else if yyj4690 == 0 && yyv4690 == nil {
			yyv4690 = []Container{}
			yyc4690 = true
		}
	}
	yyh4690.End()
	if yyc4690 {
		*v = yyv4690
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4694 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4695 := &yyv4694
		yy4695.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4696 := *v
	yyh4696, yyl4696 := z.DecSliceHelperStart()
	var yyc4696 bool
	if yyl4696 == 0 {
		if yyv4696 == nil {
			yyv4696 = []LocalObjectReference{}
			yyc4696 = true
		} else if len(yyv4696) != 0 {
			yyv4696 = yyv4696[:0]
			yyc4696 = true
		}
	} else if yyl4696 > 0 {
		var yyrr4696, yyrl4696 int
		var yyrt4696 bool
		if yyl4696 > cap(yyv4696) {

			yyrg4696 := len(yyv4696) > 0
			yyv24696 := yyv4696
			yyrl4696, yyrt4696 = z.DecInferLen(yyl4696, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4696 {
				if yyrl4696 <= cap(yyv4696) {
					yyv4696 = yyv4696[:yyrl4696]
				} else {
					yyv4696 = make([]LocalObjectReference, yyrl4696)
				}
			} else {
				yyv4696 = make([]LocalObjectReference, yyrl4696)
			}
			yyc4696 = true
			yyrr4696 = len(yyv4696)
			if yyrg4696 {
				copy(yyv4696, yyv24696)
			}
		} else if yyl4696 != len(yyv4696) {
			yyv4696 = yyv4696[:yyl4696]
			yyc4696 = true
		}
		yyj4696 := 0
		for ; yyj4696 < yyrr4696; yyj4696++ {
			yyh4696.ElemContainerState(yyj4696)
			if r.TryDecodeAsNil() {
				yyv4696[yyj4696] = LocalObjectReference{}
			} else {
				yyv4697 := &yyv4696[yyj4696]
				yyv4697.CodecDecodeSelf(d)
			}

		}
		if yyrt4696 {
			for ; yyj4696 < yyl4696; yyj4696++ {
				yyv4696 = append(yyv4696, LocalObjectReference{})
				yyh4696.ElemContainerState(yyj4696)
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = LocalObjectReference{}
				} else {
					yyv4698 := &yyv4696[yyj4696]
					yyv4698.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4696 := 0
		for ; !r.CheckBreak(); yyj4696++ {

			if yyj4696 >= len(yyv4696) {
				yyv4696 = append(yyv4696, LocalObjectReference{}) // var yyz4696 LocalObjectReference
				yyc4696 = true
			}
			yyh4696.ElemContainerState(yyj4696)
			if yyj4696 < len(yyv4696) {
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = LocalObjectReference{}
				} else {
					yyv4699 := &yyv4696[yyj4696]
					yyv4699.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4696 < len(yyv4696) {
			yyv4696 = yyv4696[:yyj4696]
			yyc4696 = true
		} else if yyj4696 == 0 && yyv4696 == nil {
			yyv4696 = []LocalObjectReference{}
			yyc4696 = true
		}
	}
	yyh4696.End()
	if yyc4696 {
		*v = yyv4696
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4700 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4701 := &yyv4700
		yy4701.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4702 := *v
	yyh4702, yyl4702 := z.DecSliceHelperStart()
	var yyc4702 bool
	if yyl4702 == 0 {
		if yyv4702 == nil {
			yyv4702 = []PodCondition{}
			yyc4702 = true
		} else if len(yyv4702) != 0 {
			yyv4702 = yyv4702[:0]
			yyc4702 = true
		}
	} else if yyl4702 > 0 {
		var yyrr4702, yyrl4702 int
		var yyrt4702 bool
		if yyl4702 > cap(yyv4702) {

			yyrg4702 := len(yyv4702) > 0
			yyv24702 := yyv4702
			yyrl4702, yyrt4702 = z.DecInferLen(yyl4702, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4702 {
				if yyrl4702 <= cap(yyv4702) {
					yyv4702 = yyv4702[:yyrl4702]
				} else {
					yyv4702 = make([]PodCondition, yyrl4702)
				}
			} else {
				yyv4702 = make([]PodCondition, yyrl4702)
			}
			yyc4702 = true
			yyrr4702 = len(yyv4702)
			if yyrg4702 {
				copy(yyv4702, yyv24702)
			}
		} else if yyl4702 != len(yyv4702) {
			yyv4702 = yyv4702[:yyl4702]
			yyc4702 = true
		}
		yyj4702 := 0
		for ; yyj4702 < yyrr4702; yyj4702++ {
			yyh4702.ElemContainerState(yyj4702)
			if r.TryDecodeAsNil() {
				yyv4702[yyj4702] = PodCondition{}
			} else {
				yyv4703 := &yyv4702[yyj4702]
				yyv4703.CodecDecodeSelf(d)
			}

		}
		if yyrt4702 {
			for ; yyj4702 < yyl4702; yyj4702++ {
				yyv4702 = append(yyv4702, PodCondition{})
				yyh4702.ElemContainerState(yyj4702)
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = PodCondition{}
				} else {
					yyv4704 := &yyv4702[yyj4702]
					yyv4704.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4702 := 0
		for ; !r.CheckBreak(); yyj4702++ {

			if yyj4702 >= len(yyv4702) {
				yyv4702 = append(yyv4702, PodCondition{}) // var yyz4702 PodCondition
				yyc4702 = true
			}
			yyh4702.ElemContainerState(yyj4702)
			if yyj4702 < len(yyv4702) {
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = PodCondition{}
				} else {
					yyv4705 := &yyv4702[yyj4702]
					yyv4705.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4702 < len(yyv4702) {
			yyv4702 = yyv4702[:yyj4702]
			yyc4702 = true
		} else if yyj4702 == 0 && yyv4702 == nil {
			yyv4702 = []PodCondition{}
			yyc4702 = true
		}
	}
	yyh4702.End()
	if yyc4702 {
		*v = yyv4702
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4706 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4707 := &yyv4706
		yy4707.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4708 := *v
	yyh4708, yyl4708 := z.DecSliceHelperStart()
	var yyc4708 bool
	if yyl4708 == 0 {
		if yyv4708 == nil {
			yyv4708 = []ContainerStatus{}
			yyc4708 = true
		} else if len(yyv4708) != 0 {
			yyv4708 = yyv4708[:0]
			yyc4708 = true
		}
	} else if yyl4708 > 0 {
		var yyrr4708, yyrl4708 int
		var yyrt4708 bool
		if yyl4708 > cap(yyv4708) {

			yyrg4708 := len(yyv4708) > 0
			yyv24708 := yyv4708
			yyrl4708, yyrt4708 = z.DecInferLen(yyl4708, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4708 {
				if yyrl4708 <= cap(yyv4708) {
					yyv4708 = yyv4708[:yyrl4708]
				} else {
					yyv4708 = make([]ContainerStatus, yyrl4708)
				}
			} else {
				yyv4708 = make([]ContainerStatus, yyrl4708)
			}
			yyc4708 = true
			yyrr4708 = len(yyv4708)
			if yyrg4708 {
				copy(yyv4708, yyv24708)
			}
		} else if yyl4708 != len(yyv4708) {
			yyv4708 = yyv4708[:yyl4708]
			yyc4708 = true
		}
		yyj4708 := 0
		for ; yyj4708 < yyrr4708; yyj4708++ {
			yyh4708.ElemContainerState(yyj4708)
			if r.TryDecodeAsNil() {
				yyv4708[yyj4708] = ContainerStatus{}
			} else {
				yyv4709 := &yyv4708[yyj4708]
				yyv4709.CodecDecodeSelf(d)
			}

		}
		if yyrt4708 {
			for ; yyj4708 < yyl4708; yyj4708++ {
				yyv4708 = append(yyv4708, ContainerStatus{})
				yyh4708.ElemContainerState(yyj4708)
				if r.TryDecodeAsNil() {
					yyv4708[yyj4708] = ContainerStatus{}
				} else {
					yyv4710 := &yyv4708[yyj4708]
					yyv4710.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4708 := 0
		for ; !r.CheckBreak(); yyj4708++ {

			if yyj4708 >= len(yyv4708) {
				yyv4708 = append(yyv4708, ContainerStatus{}) // var yyz4708 ContainerStatus
				yyc4708 = true
			}
			yyh4708.ElemContainerState(yyj4708)
			if yyj4708 < len(yyv4708) {
				if r.TryDecodeAsNil() {
					yyv4708[yyj4708] = ContainerStatus{}
				} else {
					yyv4711 := &yyv4708[yyj4708]
					yyv4711.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4708 < len(yyv4708) {
			yyv4708 = yyv4708[:yyj4708]
			yyc4708 = true
		} else if yyj4708 == 0 && yyv4708 == nil {
			yyv4708 = []ContainerStatus{}
			yyc4708 = true
		}
	}
	yyh4708.End()
	if yyc4708 {
		*v = yyv4708
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4712 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4713 := &yyv4712
		yy4713.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4714 := *v
	yyh4714, yyl4714 := z.DecSliceHelperStart()
	var yyc4714 bool
	if yyl4714 == 0 {
		if yyv4714 == nil {
			yyv4714 = []Pod{}
			yyc4714 = true
		} else if len(yyv4714) != 0 {
			yyv4714 = yyv4714[:0]
			yyc4714 = true
		}
	} else if yyl4714 > 0 {
		var yyrr4714, yyrl4714 int
		var yyrt4714 bool
		if yyl4714 > cap(yyv4714) {

			yyrg4714 := len(yyv4714) > 0
			yyv24714 := yyv4714
			yyrl4714, yyrt4714 = z.DecInferLen(yyl4714, z.DecBasicHandle().MaxInitLen, 664)
			if yyrt4714 {
				if yyrl4714 <= cap(yyv4714) {
					yyv4714 = yyv4714[:yyrl4714]
				} else {
					yyv4714 = make([]Pod, yyrl4714)
				}
			} else {
				yyv4714 = make([]Pod, yyrl4714)
			}
			yyc4714 = true
			yyrr4714 = len(yyv4714)
			if yyrg4714 {
				copy(yyv4714, yyv24714)
			}
		} else if yyl4714 != len(yyv4714) {
			yyv4714 = yyv4714[:yyl4714]
			yyc4714 = true
		}
		yyj4714 := 0
		for ; yyj4714 < yyrr4714; yyj4714++ {
			yyh4714.ElemContainerState(yyj4714)
			if r.TryDecodeAsNil() {
				yyv4714[yyj4714] = Pod{}
			} else {
				yyv4715 := &yyv4714[yyj4714]
				yyv4715.CodecDecodeSelf(d)
			}

		}
		if yyrt4714 {
			for ; yyj4714 < yyl4714; yyj4714++ {
				yyv4714 = append(yyv4714, Pod{})
				yyh4714.ElemContainerState(yyj4714)
				if r.TryDecodeAsNil() {
					yyv4714[yyj4714] = Pod{}
				} else {
					yyv4716 := &yyv4714[yyj4714]
					yyv4716.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4714 := 0
		for ; !r.CheckBreak(); yyj4714++ {

			if yyj4714 >= len(yyv4714) {
				yyv4714 = append(yyv4714, Pod{}) // var yyz4714 Pod
				yyc4714 = true
			}
			yyh4714.ElemContainerState(yyj4714)
			if yyj4714 < len(yyv4714) {
				if r.TryDecodeAsNil() {
					yyv4714[yyj4714] = Pod{}
				} else {
					yyv4717 := &yyv4714[yyj4714]
					yyv4717.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4714 < len(yyv4714) {
			yyv4714 = yyv4714[:yyj4714]
			yyc4714 = true
		} else if yyj4714 == 0 && yyv4714 == nil {
			yyv4714 = []Pod{}
			yyc4714 = true
		}
	}
	yyh4714.End()
	if yyc4714 {
		*v = yyv4714
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4718 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4719 := &yyv4718
		yy4719.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4720 := *v
	yyh4720, yyl4720 := z.DecSliceHelperStart()
	var yyc4720 bool
	if yyl4720 == 0 {
		if yyv4720 == nil {
			yyv4720 = []PodTemplate{}
			yyc4720 = true
		} else if len(yyv4720) != 0 {
			yyv4720 = yyv4720[:0]
			yyc4720 = true
		}
	} else if yyl4720 > 0 {
		var yyrr4720, yyrl4720 int
		var yyrt4720 bool
		if yyl4720 > cap(yyv4720) {

			yyrg4720 := len(yyv4720) > 0
			yyv24720 := yyv4720
			yyrl4720, yyrt4720 = z.DecInferLen(yyl4720, z.DecBasicHandle().MaxInitLen, 728)
			if yyrt4720 {
				if yyrl4720 <= cap(yyv4720) {
					yyv4720 = yyv4720[:yyrl4720]
				} else {
					yyv4720 = make([]PodTemplate, yyrl4720)
				}
			} else {
				yyv4720 = make([]PodTemplate, yyrl4720)
			}
			yyc4720 = true
			yyrr4720 = len(yyv4720)
			if yyrg4720 {
				copy(yyv4720, yyv24720)
			}
		} else if yyl4720 != len(yyv4720) {
			yyv4720 = yyv4720[:yyl4720]
			yyc4720 = true
		}
		yyj4720 := 0
		for ; yyj4720 < yyrr4720; yyj4720++ {
			yyh4720.ElemContainerState(yyj4720)
			if r.TryDecodeAsNil() {
				yyv4720[yyj4720] = PodTemplate{}
			} else {
				yyv4721 := &yyv4720[yyj4720]
				yyv4721.CodecDecodeSelf(d)
			}

		}
		if yyrt4720 {
			for ; yyj4720 < yyl4720; yyj4720++ {
				yyv4720 = append(yyv4720, PodTemplate{})
				yyh4720.ElemContainerState(yyj4720)
				if r.TryDecodeAsNil() {
					yyv4720[yyj4720] = PodTemplate{}
				} else {
					yyv4722 := &yyv4720[yyj4720]
					yyv4722.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4720 := 0
		for ; !r.CheckBreak(); yyj4720++ {

			if yyj4720 >= len(yyv4720) {
				yyv4720 = append(yyv4720, PodTemplate{}) // var yyz4720 PodTemplate
				yyc4720 = true
			}
			yyh4720.ElemContainerState(yyj4720)
			if yyj4720 < len(yyv4720) {
				if r.TryDecodeAsNil() {
					yyv4720[yyj4720] = PodTemplate{}
				} else {
					yyv4723 := &yyv4720[yyj4720]
					yyv4723.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4720 < len(yyv4720) {
			yyv4720 = yyv4720[:yyj4720]
			yyc4720 = true
		} else if yyj4720 == 0 && yyv4720 == nil {
			yyv4720 = []PodTemplate{}
			yyc4720 = true
		}
	}
	yyh4720.End()
	if yyc4720 {
		*v = yyv4720
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4724 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4725 := &yyv4724
		yy4725.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4726 := *v
	yyh4726, yyl4726 := z.DecSliceHelperStart()
	var yyc4726 bool
	if yyl4726 == 0 {
		if yyv4726 == nil {
			yyv4726 = []ReplicationController{}
			yyc4726 = true
		} else if len(yyv4726) != 0 {
			yyv4726 = yyv4726[:0]
			yyc4726 = true
		}
	} else if yyl4726 > 0 {
		var yyrr4726, yyrl4726 int
		var yyrt4726 bool
		if yyl4726 > cap(yyv4726) {

			yyrg4726 := len(yyv4726) > 0
			yyv24726 := yyv4726
			yyrl4726, yyrt4726 = z.DecInferLen(yyl4726, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4726 {
				if yyrl4726 <= cap(yyv4726) {
					yyv4726 = yyv4726[:yyrl4726]
				} else {
					yyv4726 = make([]ReplicationController, yyrl4726)
				}
			} else {
				yyv4726 = make([]ReplicationController, yyrl4726)
			}
			yyc4726 = true
			yyrr4726 = len(yyv4726)
			if yyrg4726 {
				copy(yyv4726, yyv24726)
			}
		} else if yyl4726 != len(yyv4726) {
			yyv4726 = yyv4726[:yyl4726]
			yyc4726 = true
		}
		yyj4726 := 0
		for ; yyj4726 < yyrr4726; yyj4726++ {
			yyh4726.ElemContainerState(yyj4726)
			if r.TryDecodeAsNil() {
				yyv4726[yyj4726] = ReplicationController{}
			} else {
				yyv4727 := &yyv4726[yyj4726]
				yyv4727.CodecDecodeSelf(d)
			}

		}
		if yyrt4726 {
			for ; yyj4726 < yyl4726; yyj4726++ {
				yyv4726 = append(yyv4726, ReplicationController{})
				yyh4726.ElemContainerState(yyj4726)
				if r.TryDecodeAsNil() {
					yyv4726[yyj4726] = ReplicationController{}
				} else {
					yyv4728 := &yyv4726[yyj4726]
					yyv4728.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4726 := 0
		for ; !r.CheckBreak(); yyj4726++ {

			if yyj4726 >= len(yyv4726) {
				yyv4726 = append(yyv4726, ReplicationController{}) // var yyz4726 ReplicationController
				yyc4726 = true
			}
			yyh4726.ElemContainerState(yyj4726)
			if yyj4726 < len(yyv4726) {
				if r.TryDecodeAsNil() {
					yyv4726[yyj4726] = ReplicationController{}
				} else {
					yyv4729 := &yyv4726[yyj4726]
					yyv4729.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4726 < len(yyv4726) {
			yyv4726 = yyv4726[:yyj4726]
			yyc4726 = true
		} else if yyj4726 == 0 && yyv4726 == nil {
			yyv4726 = []ReplicationController{}
			yyc4726 = true
		}
	}
	yyh4726.End()
	if yyc4726 {
		*v = yyv4726
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4730 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4731 := &yyv4730
		yy4731.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4732 := *v
	yyh4732, yyl4732 := z.DecSliceHelperStart()
	var yyc4732 bool
	if yyl4732 == 0 {
		if yyv4732 == nil {
			yyv4732 = []LoadBalancerIngress{}
			yyc4732 = true
		} else if len(yyv4732) != 0 {
			yyv4732 = yyv4732[:0]
			yyc4732 = true
		}
	} else if yyl4732 > 0 {
		var yyrr4732, yyrl4732 int
		var yyrt4732 bool
		if yyl4732 > cap(yyv4732) {

			yyrg4732 := len(yyv4732) > 0
			yyv24732 := yyv4732
			yyrl4732, yyrt4732 = z.DecInferLen(yyl4732, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4732 {
				if yyrl4732 <= cap(yyv4732) {
					yyv4732 = yyv4732[:yyrl4732]
				} else {
					yyv4732 = make([]LoadBalancerIngress, yyrl4732)
				}
			} else {
				yyv4732 = make([]LoadBalancerIngress, yyrl4732)
			}
			yyc4732 = true
			yyrr4732 = len(yyv4732)
			if yyrg4732 {
				copy(yyv4732, yyv24732)
			}
		} else if yyl4732 != len(yyv4732) {
			yyv4732 = yyv4732[:yyl4732]
			yyc4732 = true
		}
		yyj4732 := 0
		for ; yyj4732 < yyrr4732; yyj4732++ {
			yyh4732.ElemContainerState(yyj4732)
			if r.TryDecodeAsNil() {
				yyv4732[yyj4732] = LoadBalancerIngress{}
			} else {
				yyv4733 := &yyv4732[yyj4732]
				yyv4733.CodecDecodeSelf(d)
			}

		}
		if yyrt4732 {
			for ; yyj4732 < yyl4732; yyj4732++ {
				yyv4732 = append(yyv4732, LoadBalancerIngress{})
				yyh4732.ElemContainerState(yyj4732)
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = LoadBalancerIngress{}
				} else {
					yyv4734 := &yyv4732[yyj4732]
					yyv4734.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4732 := 0
		for ; !r.CheckBreak(); yyj4732++ {

			if yyj4732 >= len(yyv4732) {
				yyv4732 = append(yyv4732, LoadBalancerIngress{}) // var yyz4732 LoadBalancerIngress
				yyc4732 = true
			}
			yyh4732.ElemContainerState(yyj4732)
			if yyj4732 < len(yyv4732) {
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = LoadBalancerIngress{}
				} else {
					yyv4735 := &yyv4732[yyj4732]
					yyv4735.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4732 < len(yyv4732) {
			yyv4732 = yyv4732[:yyj4732]
			yyc4732 = true
		} else if yyj4732 == 0 && yyv4732 == nil {
			yyv4732 = []LoadBalancerIngress{}
			yyc4732 = true
		}
	}
	yyh4732.End()
	if yyc4732 {
		*v = yyv4732
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4736 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4737 := &yyv4736
		yy4737.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4738 := *v
	yyh4738, yyl4738 := z.DecSliceHelperStart()
	var yyc4738 bool
	if yyl4738 == 0 {
		if yyv4738 == nil {
			yyv4738 = []ServicePort{}
			yyc4738 = true
		} else if len(yyv4738) != 0 {
			yyv4738 = yyv4738[:0]
			yyc4738 = true
		}
	} else if yyl4738 > 0 {
		var yyrr4738, yyrl4738 int
		var yyrt4738 bool
		if yyl4738 > cap(yyv4738) {

			yyrg4738 := len(yyv4738) > 0
			yyv24738 := yyv4738
			yyrl4738, yyrt4738 = z.DecInferLen(yyl4738, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4738 {
				if yyrl4738 <= cap(yyv4738) {
					yyv4738 = yyv4738[:yyrl4738]
				} else {
					yyv4738 = make([]ServicePort, yyrl4738)
				}
			} else {
				yyv4738 = make([]ServicePort, yyrl4738)
			}
			yyc4738 = true
			yyrr4738 = len(yyv4738)
			if yyrg4738 {
				copy(yyv4738, yyv24738)
			}
		} else if yyl4738 != len(yyv4738) {
			yyv4738 = yyv4738[:yyl4738]
			yyc4738 = true
		}
		yyj4738 := 0
		for ; yyj4738 < yyrr4738; yyj4738++ {
			yyh4738.ElemContainerState(yyj4738)
			if r.TryDecodeAsNil() {
				yyv4738[yyj4738] = ServicePort{}
			} else {
				yyv4739 := &yyv4738[yyj4738]
				yyv4739.CodecDecodeSelf(d)
			}

		}
		if yyrt4738 {
			for ; yyj4738 < yyl4738; yyj4738++ {
				yyv4738 = append(yyv4738, ServicePort{})
				yyh4738.ElemContainerState(yyj4738)
				if r.TryDecodeAsNil() {
					yyv4738[yyj4738] = ServicePort{}
				} else {
					yyv4740 := &yyv4738[yyj4738]
					yyv4740.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4738 := 0
		for ; !r.CheckBreak(); yyj4738++ {

			if yyj4738 >= len(yyv4738) {
				yyv4738 = append(yyv4738, ServicePort{}) // var yyz4738 ServicePort
				yyc4738 = true
			}
			yyh4738.ElemContainerState(yyj4738)
			if yyj4738 < len(yyv4738) {
				if r.TryDecodeAsNil() {
					yyv4738[yyj4738] = ServicePort{}
				} else {
					yyv4741 := &yyv4738[yyj4738]
					yyv4741.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4738 < len(yyv4738) {
			yyv4738 = yyv4738[:yyj4738]
			yyc4738 = true
		} else if yyj4738 == 0 && yyv4738 == nil {
			yyv4738 = []ServicePort{}
			yyc4738 = true
		}
	}
	yyh4738.End()
	if yyc4738 {
		*v = yyv4738
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4742 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4743 := &yyv4742
		yy4743.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4744 := *v
	yyh4744, yyl4744 := z.DecSliceHelperStart()
	var yyc4744 bool
	if yyl4744 == 0 {
		if yyv4744 == nil {
			yyv4744 = []Service{}
			yyc4744 = true
		} else if len(yyv4744) != 0 {
			yyv4744 = yyv4744[:0]
			yyc4744 = true
		}
	} else if yyl4744 > 0 {
		var yyrr4744, yyrl4744 int
		var yyrt4744 bool
		if yyl4744 > cap(yyv4744) {

			yyrg4744 := len(yyv4744) > 0
			yyv24744 := yyv4744
			yyrl4744, yyrt4744 = z.DecInferLen(yyl4744, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4744 {
				if yyrl4744 <= cap(yyv4744) {
					yyv4744 = yyv4744[:yyrl4744]
				} else {
					yyv4744 = make([]Service, yyrl4744)
				}
			} else {
				yyv4744 = make([]Service, yyrl4744)
			}
			yyc4744 = true
			yyrr4744 = len(yyv4744)
			if yyrg4744 {
				copy(yyv4744, yyv24744)
			}
		} else if yyl4744 != len(yyv4744) {
			yyv4744 = yyv4744[:yyl4744]
			yyc4744 = true
		}
		yyj4744 := 0
		for ; yyj4744 < yyrr4744; yyj4744++ {
			yyh4744.ElemContainerState(yyj4744)
			if r.TryDecodeAsNil() {
				yyv4744[yyj4744] = Service{}
			} else {
				yyv4745 := &yyv4744[yyj4744]
				yyv4745.CodecDecodeSelf(d)
			}

		}
		if yyrt4744 {
			for ; yyj4744 < yyl4744; yyj4744++ {
				yyv4744 = append(yyv4744, Service{})
				yyh4744.ElemContainerState(yyj4744)
				if r.TryDecodeAsNil() {
					yyv4744[yyj4744] = Service{}
				} else {
					yyv4746 := &yyv4744[yyj4744]
					yyv4746.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4744 := 0
		for ; !r.CheckBreak(); yyj4744++ {

			if yyj4744 >= len(yyv4744) {
				yyv4744 = append(yyv4744, Service{}) // var yyz4744 Service
				yyc4744 = true
			}
			yyh4744.ElemContainerState(yyj4744)
			if yyj4744 < len(yyv4744) {
				if r.TryDecodeAsNil() {
					yyv4744[yyj4744] = Service{}
				} else {
					yyv4747 := &yyv4744[yyj4744]
					yyv4747.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4744 < len(yyv4744) {
			yyv4744 = yyv4744[:yyj4744]
			yyc4744 = true
		} else if yyj4744 == 0 && yyv4744 == nil {
			yyv4744 = []Service{}
			yyc4744 = true
		}
	}
	yyh4744.End()
	if yyc4744 {
		*v = yyv4744
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4748 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4749 := &yyv4748
		yy4749.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4750 := *v
	yyh4750, yyl4750 := z.DecSliceHelperStart()
	var yyc4750 bool
	if yyl4750 == 0 {
		if yyv4750 == nil {
			yyv4750 = []ObjectReference{}
			yyc4750 = true
		} else if len(yyv4750) != 0 {
			yyv4750 = yyv4750[:0]
			yyc4750 = true
		}
	} else if yyl4750 > 0 {
		var yyrr4750, yyrl4750 int
		var yyrt4750 bool
		if yyl4750 > cap(yyv4750) {

			yyrg4750 := len(yyv4750) > 0
			yyv24750 := yyv4750
			yyrl4750, yyrt4750 = z.DecInferLen(yyl4750, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4750 {
				if yyrl4750 <= cap(yyv4750) {
					yyv4750 = yyv4750[:yyrl4750]
				} else {
					yyv4750 = make([]ObjectReference, yyrl4750)
				}
			} else {
				yyv4750 = make([]ObjectReference, yyrl4750)
			}
			yyc4750 = true
			yyrr4750 = len(yyv4750)
			if yyrg4750 {
				copy(yyv4750, yyv24750)
			}
		} else if yyl4750 != len(yyv4750) {
			yyv4750 = yyv4750[:yyl4750]
			yyc4750 = true
		}
		yyj4750 := 0
		for ; yyj4750 < yyrr4750; yyj4750++ {
			yyh4750.ElemContainerState(yyj4750)
			if r.TryDecodeAsNil() {
				yyv4750[yyj4750] = ObjectReference{}
			} else {
				yyv4751 := &yyv4750[yyj4750]
				yyv4751.CodecDecodeSelf(d)
			}

		}
		if yyrt4750 {
			for ; yyj4750 < yyl4750; yyj4750++ {
				yyv4750 = append(yyv4750, ObjectReference{})
				yyh4750.ElemContainerState(yyj4750)
				if r.TryDecodeAsNil() {
					yyv4750[yyj4750] = ObjectReference{}
				} else {
					yyv4752 := &yyv4750[yyj4750]
					yyv4752.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4750 := 0
		for ; !r.CheckBreak(); yyj4750++ {

			if yyj4750 >= len(yyv4750) {
				yyv4750 = append(yyv4750, ObjectReference{}) // var yyz4750 ObjectReference
				yyc4750 = true
			}
			yyh4750.ElemContainerState(yyj4750)
			if yyj4750 < len(yyv4750) {
				if r.TryDecodeAsNil() {
					yyv4750[yyj4750] = ObjectReference{}
				} else {
					yyv4753 := &yyv4750[yyj4750]
					yyv4753.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4750 < len(yyv4750) {
			yyv4750 = yyv4750[:yyj4750]
			yyc4750 = true
		} else if yyj4750 == 0 && yyv4750 == nil {
			yyv4750 = []ObjectReference{}
			yyc4750 = true
		}
	}
	yyh4750.End()
	if yyc4750 {
		*v = yyv4750
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4754 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4755 := &yyv4754
		yy4755.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4756 := *v
	yyh4756, yyl4756 := z.DecSliceHelperStart()
	var yyc4756 bool
	if yyl4756 == 0 {
		if yyv4756 == nil {
			yyv4756 = []ServiceAccount{}
			yyc4756 = true
		} else if len(yyv4756) != 0 {
			yyv4756 = yyv4756[:0]
			yyc4756 = true
		}
	} else if yyl4756 > 0 {
		var yyrr4756, yyrl4756 int
		var yyrt4756 bool
		if yyl4756 > cap(yyv4756) {

			yyrg4756 := len(yyv4756) > 0
			yyv24756 := yyv4756
			yyrl4756, yyrt4756 = z.DecInferLen(yyl4756, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4756 {
				if yyrl4756 <= cap(yyv4756) {
					yyv4756 = yyv4756[:yyrl4756]
				} else {
					yyv4756 = make([]ServiceAccount, yyrl4756)
				}
			} else {
				yyv4756 = make([]ServiceAccount, yyrl4756)
			}
			yyc4756 = true
			yyrr4756 = len(yyv4756)
			if yyrg4756 {
				copy(yyv4756, yyv24756)
			}
		} else if yyl4756 != len(yyv4756) {
			yyv4756 = yyv4756[:yyl4756]
			yyc4756 = true
		}
		yyj4756 := 0
		for ; yyj4756 < yyrr4756; yyj4756++ {
			yyh4756.ElemContainerState(yyj4756)
			if r.TryDecodeAsNil() {
				yyv4756[yyj4756] = ServiceAccount{}
			} else {
				yyv4757 := &yyv4756[yyj4756]
				yyv4757.CodecDecodeSelf(d)
			}

		}
		if yyrt4756 {
			for ; yyj4756 < yyl4756; yyj4756++ {
				yyv4756 = append(yyv4756, ServiceAccount{})
				yyh4756.ElemContainerState(yyj4756)
				if r.TryDecodeAsNil() {
					yyv4756[yyj4756] = ServiceAccount{}
				} else {
					yyv4758 := &yyv4756[yyj4756]
					yyv4758.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4756 := 0
		for ; !r.CheckBreak(); yyj4756++ {

			if yyj4756 >= len(yyv4756) {
				yyv4756 = append(yyv4756, ServiceAccount{}) // var yyz4756 ServiceAccount
				yyc4756 = true
			}
			yyh4756.ElemContainerState(yyj4756)
			if yyj4756 < len(yyv4756) {
				if r.TryDecodeAsNil() {
					yyv4756[yyj4756] = ServiceAccount{}
				} else {
					yyv4759 := &yyv4756[yyj4756]
					yyv4759.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4756 < len(yyv4756) {
			yyv4756 = yyv4756[:yyj4756]
			yyc4756 = true
		} else if yyj4756 == 0 && yyv4756 == nil {
			yyv4756 = []ServiceAccount{}
			yyc4756 = true
		}
	}
	yyh4756.End()
	if yyc4756 {
		*v = yyv4756
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4760 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4761 := &yyv4760
		yy4761.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4762 := *v
	yyh4762, yyl4762 := z.DecSliceHelperStart()
	var yyc4762 bool
	if yyl4762 == 0 {
		if yyv4762 == nil {
			yyv4762 = []EndpointSubset{}
			yyc4762 = true
		} else if len(yyv4762) != 0 {
			yyv4762 = yyv4762[:0]
			yyc4762 = true
		}
	} else if yyl4762 > 0 {
		var yyrr4762, yyrl4762 int
		var yyrt4762 bool
		if yyl4762 > cap(yyv4762) {

			yyrg4762 := len(yyv4762) > 0
			yyv24762 := yyv4762
			yyrl4762, yyrt4762 = z.DecInferLen(yyl4762, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4762 {
				if yyrl4762 <= cap(yyv4762) {
					yyv4762 = yyv4762[:yyrl4762]
				} else {
					yyv4762 = make([]EndpointSubset, yyrl4762)
				}
			} else {
				yyv4762 = make([]EndpointSubset, yyrl4762)
			}
			yyc4762 = true
			yyrr4762 = len(yyv4762)
			if yyrg4762 {
				copy(yyv4762, yyv24762)
			}
		} else if yyl4762 != len(yyv4762) {
			yyv4762 = yyv4762[:yyl4762]
			yyc4762 = true
		}
		yyj4762 := 0
		for ; yyj4762 < yyrr4762; yyj4762++ {
			yyh4762.ElemContainerState(yyj4762)
			if r.TryDecodeAsNil() {
				yyv4762[yyj4762] = EndpointSubset{}
			} else {
				yyv4763 := &yyv4762[yyj4762]
				yyv4763.CodecDecodeSelf(d)
			}

		}
		if yyrt4762 {
			for ; yyj4762 < yyl4762; yyj4762++ {
				yyv4762 = append(yyv4762, EndpointSubset{})
				yyh4762.ElemContainerState(yyj4762)
				if r.TryDecodeAsNil() {
					yyv4762[yyj4762] = EndpointSubset{}
				} else {
					yyv4764 := &yyv4762[yyj4762]
					yyv4764.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4762 := 0
		for ; !r.CheckBreak(); yyj4762++ {

			if yyj4762 >= len(yyv4762) {
				yyv4762 = append(yyv4762, EndpointSubset{}) // var yyz4762 EndpointSubset
				yyc4762 = true
			}
			yyh4762.ElemContainerState(yyj4762)
			if yyj4762 < len(yyv4762) {
				if r.TryDecodeAsNil() {
					yyv4762[yyj4762] = EndpointSubset{}
				} else {
					yyv4765 := &yyv4762[yyj4762]
					yyv4765.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4762 < len(yyv4762) {
			yyv4762 = yyv4762[:yyj4762]
			yyc4762 = true
		} else if yyj4762 == 0 && yyv4762 == nil {
			yyv4762 = []EndpointSubset{}
			yyc4762 = true
		}
	}
	yyh4762.End()
	if yyc4762 {
		*v = yyv4762
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4766 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4767 := &yyv4766
		yy4767.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4768 := *v
	yyh4768, yyl4768 := z.DecSliceHelperStart()
	var yyc4768 bool
	if yyl4768 == 0 {
		if yyv4768 == nil {
			yyv4768 = []EndpointAddress{}
			yyc4768 = true
		} else if len(yyv4768) != 0 {
			yyv4768 = yyv4768[:0]
			yyc4768 = true
		}
	} else if yyl4768 > 0 {
		var yyrr4768, yyrl4768 int
		var yyrt4768 bool
		if yyl4768 > cap(yyv4768) {

			yyrg4768 := len(yyv4768) > 0
			yyv24768 := yyv4768
			yyrl4768, yyrt4768 = z.DecInferLen(yyl4768, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4768 {
				if yyrl4768 <= cap(yyv4768) {
					yyv4768 = yyv4768[:yyrl4768]
				} else {
					yyv4768 = make([]EndpointAddress, yyrl4768)
				}
			} else {
				yyv4768 = make([]EndpointAddress, yyrl4768)
			}
			yyc4768 = true
			yyrr4768 = len(yyv4768)
			if yyrg4768 {
				copy(yyv4768, yyv24768)
			}
		} else if yyl4768 != len(yyv4768) {
			yyv4768 = yyv4768[:yyl4768]
			yyc4768 = true
		}
		yyj4768 := 0
		for ; yyj4768 < yyrr4768; yyj4768++ {
			yyh4768.ElemContainerState(yyj4768)
			if r.TryDecodeAsNil() {
				yyv4768[yyj4768] = EndpointAddress{}
			} else {
				yyv4769 := &yyv4768[yyj4768]
				yyv4769.CodecDecodeSelf(d)
			}

		}
		if yyrt4768 {
			for ; yyj4768 < yyl4768; yyj4768++ {
				yyv4768 = append(yyv4768, EndpointAddress{})
				yyh4768.ElemContainerState(yyj4768)
				if r.TryDecodeAsNil() {
					yyv4768[yyj4768] = EndpointAddress{}
				} else {
					yyv4770 := &yyv4768[yyj4768]
					yyv4770.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4768 := 0
		for ; !r.CheckBreak(); yyj4768++ {

			if yyj4768 >= len(yyv4768) {
				yyv4768 = append(yyv4768, EndpointAddress{}) // var yyz4768 EndpointAddress
				yyc4768 = true
			}
			yyh4768.ElemContainerState(yyj4768)
			if yyj4768 < len(yyv4768) {
				if r.TryDecodeAsNil() {
					yyv4768[yyj4768] = EndpointAddress{}
				} else {
					yyv4771 := &yyv4768[yyj4768]
					yyv4771.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4768 < len(yyv4768) {
			yyv4768 = yyv4768[:yyj4768]
			yyc4768 = true
		} else if yyj4768 == 0 && yyv4768 == nil {
			yyv4768 = []EndpointAddress{}
			yyc4768 = true
		}
	}
	yyh4768.End()
	if yyc4768 {
		*v = yyv4768
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4772 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4773 := &yyv4772
		yy4773.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4774 := *v
	yyh4774, yyl4774 := z.DecSliceHelperStart()
	var yyc4774 bool
	if yyl4774 == 0 {
		if yyv4774 == nil {
			yyv4774 = []EndpointPort{}
			yyc4774 = true
		} else if len(yyv4774) != 0 {
			yyv4774 = yyv4774[:0]
			yyc4774 = true
		}
	} else if yyl4774 > 0 {
		var yyrr4774, yyrl4774 int
		var yyrt4774 bool
		if yyl4774 > cap(yyv4774) {

			yyrg4774 := len(yyv4774) > 0
			yyv24774 := yyv4774
			yyrl4774, yyrt4774 = z.DecInferLen(yyl4774, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4774 {
				if yyrl4774 <= cap(yyv4774) {
					yyv4774 = yyv4774[:yyrl4774]
				} else {
					yyv4774 = make([]EndpointPort, yyrl4774)
				}
			} else {
				yyv4774 = make([]EndpointPort, yyrl4774)
			}
			yyc4774 = true
			yyrr4774 = len(yyv4774)
			if yyrg4774 {
				copy(yyv4774, yyv24774)
			}
		} else if yyl4774 != len(yyv4774) {
			yyv4774 = yyv4774[:yyl4774]
			yyc4774 = true
		}
		yyj4774 := 0
		for ; yyj4774 < yyrr4774; yyj4774++ {
			yyh4774.ElemContainerState(yyj4774)
			if r.TryDecodeAsNil() {
				yyv4774[yyj4774] = EndpointPort{}
			} else {
				yyv4775 := &yyv4774[yyj4774]
				yyv4775.CodecDecodeSelf(d)
			}

		}
		if yyrt4774 {
			for ; yyj4774 < yyl4774; yyj4774++ {
				yyv4774 = append(yyv4774, EndpointPort{})
				yyh4774.ElemContainerState(yyj4774)
				if r.TryDecodeAsNil() {
					yyv4774[yyj4774] = EndpointPort{}
				} else {
					yyv4776 := &yyv4774[yyj4774]
					yyv4776.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4774 := 0
		for ; !r.CheckBreak(); yyj4774++ {

			if yyj4774 >= len(yyv4774) {
				yyv4774 = append(yyv4774, EndpointPort{}) // var yyz4774 EndpointPort
				yyc4774 = true
			}
			yyh4774.ElemContainerState(yyj4774)
			if yyj4774 < len(yyv4774) {
				if r.TryDecodeAsNil() {
					yyv4774[yyj4774] = EndpointPort{}
				} else {
					yyv4777 := &yyv4774[yyj4774]
					yyv4777.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4774 < len(yyv4774) {
			yyv4774 = yyv4774[:yyj4774]
			yyc4774 = true
		} else if yyj4774 == 0 && yyv4774 == nil {
			yyv4774 = []EndpointPort{}
			yyc4774 = true
		}
	}
	yyh4774.End()
	if yyc4774 {
		*v = yyv4774
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4778 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4779 := &yyv4778
		yy4779.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4780 := *v
	yyh4780, yyl4780 := z.DecSliceHelperStart()
	var yyc4780 bool
	if yyl4780 == 0 {
		if yyv4780 == nil {
			yyv4780 = []Endpoints{}
			yyc4780 = true
		} else if len(yyv4780) != 0 {
			yyv4780 = yyv4780[:0]
			yyc4780 = true
		}
	} else if yyl4780 > 0 {
		var yyrr4780, yyrl4780 int
		var yyrt4780 bool
		if yyl4780 > cap(yyv4780) {

			yyrg4780 := len(yyv4780) > 0
			yyv24780 := yyv4780
			yyrl4780, yyrt4780 = z.DecInferLen(yyl4780, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4780 {
				if yyrl4780 <= cap(yyv4780) {
					yyv4780 = yyv4780[:yyrl4780]
				} else {
					yyv4780 = make([]Endpoints, yyrl4780)
				}
			} else {
				yyv4780 = make([]Endpoints, yyrl4780)
			}
			yyc4780 = true
			yyrr4780 = len(yyv4780)
			if yyrg4780 {
				copy(yyv4780, yyv24780)
			}
		} else if yyl4780 != len(yyv4780) {
			yyv4780 = yyv4780[:yyl4780]
			yyc4780 = true
		}
		yyj4780 := 0
		for ; yyj4780 < yyrr4780; yyj4780++ {
			yyh4780.ElemContainerState(yyj4780)
			if r.TryDecodeAsNil() {
				yyv4780[yyj4780] = Endpoints{}
			} else {
				yyv4781 := &yyv4780[yyj4780]
				yyv4781.CodecDecodeSelf(d)
			}

		}
		if yyrt4780 {
			for ; yyj4780 < yyl4780; yyj4780++ {
				yyv4780 = append(yyv4780, Endpoints{})
				yyh4780.ElemContainerState(yyj4780)
				if r.TryDecodeAsNil() {
					yyv4780[yyj4780] = Endpoints{}
				} else {
					yyv4782 := &yyv4780[yyj4780]
					yyv4782.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4780 := 0
		for ; !r.CheckBreak(); yyj4780++ {

			if yyj4780 >= len(yyv4780) {
				yyv4780 = append(yyv4780, Endpoints{}) // var yyz4780 Endpoints
				yyc4780 = true
			}
			yyh4780.ElemContainerState(yyj4780)
			if yyj4780 < len(yyv4780) {
				if r.TryDecodeAsNil() {
					yyv4780[yyj4780] = Endpoints{}
				} else {
					yyv4783 := &yyv4780[yyj4780]
					yyv4783.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4780 < len(yyv4780) {
			yyv4780 = yyv4780[:yyj4780]
			yyc4780 = true
		} else if yyj4780 == 0 && yyv4780 == nil {
			yyv4780 = []Endpoints{}
			yyc4780 = true
		}
	}
	yyh4780.End()
	if yyc4780 {
		*v = yyv4780
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4784 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4785 := &yyv4784
		yy4785.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4786 := *v
	yyh4786, yyl4786 := z.DecSliceHelperStart()
	var yyc4786 bool
	if yyl4786 == 0 {
		if yyv4786 == nil {
			yyv4786 = []NodeCondition{}
			yyc4786 = true
		} else if len(yyv4786) != 0 {
			yyv4786 = yyv4786[:0]
			yyc4786 = true
		}
	} else if yyl4786 > 0 {
		var yyrr4786, yyrl4786 int
		var yyrt4786 bool
		if yyl4786 > cap(yyv4786) {

			yyrg4786 := len(yyv4786) > 0
			yyv24786 := yyv4786
			yyrl4786, yyrt4786 = z.DecInferLen(yyl4786, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4786 {
				if yyrl4786 <= cap(yyv4786) {
					yyv4786 = yyv4786[:yyrl4786]
				} else {
					yyv4786 = make([]NodeCondition, yyrl4786)
				}
			} else {
				yyv4786 = make([]NodeCondition, yyrl4786)
			}
			yyc4786 = true
			yyrr4786 = len(yyv4786)
			if yyrg4786 {
				copy(yyv4786, yyv24786)
			}
		} else if yyl4786 != len(yyv4786) {
			yyv4786 = yyv4786[:yyl4786]
			yyc4786 = true
		}
		yyj4786 := 0
		for ; yyj4786 < yyrr4786; yyj4786++ {
			yyh4786.ElemContainerState(yyj4786)
			if r.TryDecodeAsNil() {
				yyv4786[yyj4786] = NodeCondition{}
			} else {
				yyv4787 := &yyv4786[yyj4786]
				yyv4787.CodecDecodeSelf(d)
			}

		}
		if yyrt4786 {
			for ; yyj4786 < yyl4786; yyj4786++ {
				yyv4786 = append(yyv4786, NodeCondition{})
				yyh4786.ElemContainerState(yyj4786)
				if r.TryDecodeAsNil() {
					yyv4786[yyj4786] = NodeCondition{}
				} else {
					yyv4788 := &yyv4786[yyj4786]
					yyv4788.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4786 := 0
		for ; !r.CheckBreak(); yyj4786++ {

			if yyj4786 >= len(yyv4786) {
				yyv4786 = append(yyv4786, NodeCondition{}) // var yyz4786 NodeCondition
				yyc4786 = true
			}
			yyh4786.ElemContainerState(yyj4786)
			if yyj4786 < len(yyv4786) {
				if r.TryDecodeAsNil() {
					yyv4786[yyj4786] = NodeCondition{}
				} else {
					yyv4789 := &yyv4786[yyj4786]
					yyv4789.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4786 < len(yyv4786) {
			yyv4786 = yyv4786[:yyj4786]
			yyc4786 = true
		} else if yyj4786 == 0 && yyv4786 == nil {
			yyv4786 = []NodeCondition{}
			yyc4786 = true
		}
	}
	yyh4786.End()
	if yyc4786 {
		*v = yyv4786
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4790 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4791 := &yyv4790
		yy4791.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4792 := *v
	yyh4792, yyl4792 := z.DecSliceHelperStart()
	var yyc4792 bool
	if yyl4792 == 0 {
		if yyv4792 == nil {
			yyv4792 = []NodeAddress{}
			yyc4792 = true
		} else if len(yyv4792) != 0 {
			yyv4792 = yyv4792[:0]
			yyc4792 = true
		}
	} else if yyl4792 > 0 {
		var yyrr4792, yyrl4792 int
		var yyrt4792 bool
		if yyl4792 > cap(yyv4792) {

			yyrg4792 := len(yyv4792) > 0
			yyv24792 := yyv4792
			yyrl4792, yyrt4792 = z.DecInferLen(yyl4792, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4792 {
				if yyrl4792 <= cap(yyv4792) {
					yyv4792 = yyv4792[:yyrl4792]
				} else {
					yyv4792 = make([]NodeAddress, yyrl4792)
				}
			} else {
				yyv4792 = make([]NodeAddress, yyrl4792)
			}
			yyc4792 = true
			yyrr4792 = len(yyv4792)
			if yyrg4792 {
				copy(yyv4792, yyv24792)
			}
		} else if yyl4792 != len(yyv4792) {
			yyv4792 = yyv4792[:yyl4792]
			yyc4792 = true
		}
		yyj4792 := 0
		for ; yyj4792 < yyrr4792; yyj4792++ {
			yyh4792.ElemContainerState(yyj4792)
			if r.TryDecodeAsNil() {
				yyv4792[yyj4792] = NodeAddress{}
			} else {
				yyv4793 := &yyv4792[yyj4792]
				yyv4793.CodecDecodeSelf(d)
			}

		}
		if yyrt4792 {
			for ; yyj4792 < yyl4792; yyj4792++ {
				yyv4792 = append(yyv4792, NodeAddress{})
				yyh4792.ElemContainerState(yyj4792)
				if r.TryDecodeAsNil() {
					yyv4792[yyj4792] = NodeAddress{}
				} else {
					yyv4794 := &yyv4792[yyj4792]
					yyv4794.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4792 := 0
		for ; !r.CheckBreak(); yyj4792++ {

			if yyj4792 >= len(yyv4792) {
				yyv4792 = append(yyv4792, NodeAddress{}) // var yyz4792 NodeAddress
				yyc4792 = true
			}
			yyh4792.ElemContainerState(yyj4792)
			if yyj4792 < len(yyv4792) {
				if r.TryDecodeAsNil() {
					yyv4792[yyj4792] = NodeAddress{}
				} else {
					yyv4795 := &yyv4792[yyj4792]
					yyv4795.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4792 < len(yyv4792) {
			yyv4792 = yyv4792[:yyj4792]
			yyc4792 = true
		} else if yyj4792 == 0 && yyv4792 == nil {
			yyv4792 = []NodeAddress{}
			yyc4792 = true
		}
	}
	yyh4792.End()
	if yyc4792 {
		*v = yyv4792
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4796 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4797 := &yyv4796
		yy4797.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4798 := *v
	yyh4798, yyl4798 := z.DecSliceHelperStart()
	var yyc4798 bool
	if yyl4798 == 0 {
		if yyv4798 == nil {
			yyv4798 = []ContainerImage{}
			yyc4798 = true
		} else if len(yyv4798) != 0 {
			yyv4798 = yyv4798[:0]
			yyc4798 = true
		}
	} else if yyl4798 > 0 {
		var yyrr4798, yyrl4798 int
		var yyrt4798 bool
		if yyl4798 > cap(yyv4798) {

			yyrg4798 := len(yyv4798) > 0
			yyv24798 := yyv4798
			yyrl4798, yyrt4798 = z.DecInferLen(yyl4798, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4798 {
				if yyrl4798 <= cap(yyv4798) {
					yyv4798 = yyv4798[:yyrl4798]
				} else {
					yyv4798 = make([]ContainerImage, yyrl4798)
				}
			} else {
				yyv4798 = make([]ContainerImage, yyrl4798)
			}
			yyc4798 = true
			yyrr4798 = len(yyv4798)
			if yyrg4798 {
				copy(yyv4798, yyv24798)
			}
		} else if yyl4798 != len(yyv4798) {
			yyv4798 = yyv4798[:yyl4798]
			yyc4798 = true
		}
		yyj4798 := 0
		for ; yyj4798 < yyrr4798; yyj4798++ {
			yyh4798.ElemContainerState(yyj4798)
			if r.TryDecodeAsNil() {
				yyv4798[yyj4798] = ContainerImage{}
			} else {
				yyv4799 := &yyv4798[yyj4798]
				yyv4799.CodecDecodeSelf(d)
			}

		}
		if yyrt4798 {
			for ; yyj4798 < yyl4798; yyj4798++ {
				yyv4798 = append(yyv4798, ContainerImage{})
				yyh4798.ElemContainerState(yyj4798)
				if r.TryDecodeAsNil() {
					yyv4798[yyj4798] = ContainerImage{}
				} else {
					yyv4800 := &yyv4798[yyj4798]
					yyv4800.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4798 := 0
		for ; !r.CheckBreak(); yyj4798++ {

			if yyj4798 >= len(yyv4798) {
				yyv4798 = append(yyv4798, ContainerImage{}) // var yyz4798 ContainerImage
				yyc4798 = true
			}
			yyh4798.ElemContainerState(yyj4798)
			if yyj4798 < len(yyv4798) {
				if r.TryDecodeAsNil() {
					yyv4798[yyj4798] = ContainerImage{}
				} else {
					yyv4801 := &yyv4798[yyj4798]
					yyv4801.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4798 < len(yyv4798) {
			yyv4798 = yyv4798[:yyj4798]
			yyc4798 = true
		} else if yyj4798 == 0 && yyv4798 == nil {
			yyv4798 = []ContainerImage{}
			yyc4798 = true
		}
	}
	yyh4798.End()
	if yyc4798 {
		*v = yyv4798
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4802 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4802.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4803 := *v
	yyh4803, yyl4803 := z.DecSliceHelperStart()
	var yyc4803 bool
	if yyl4803 == 0 {
		if yyv4803 == nil {
			yyv4803 = []UniqueVolumeName{}
			yyc4803 = true
		} else if len(yyv4803) != 0 {
			yyv4803 = yyv4803[:0]
			yyc4803 = true
		}
	} else if yyl4803 > 0 {
		var yyrr4803, yyrl4803 int
		var yyrt4803 bool
		if yyl4803 > cap(yyv4803) {

			yyrl4803, yyrt4803 = z.DecInferLen(yyl4803, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4803 {
				if yyrl4803 <= cap(yyv4803) {
					yyv4803 = yyv4803[:yyrl4803]
				} else {
					yyv4803 = make([]UniqueVolumeName, yyrl4803)
				}
			} else {
				yyv4803 = make([]UniqueVolumeName, yyrl4803)
			}
			yyc4803 = true
			yyrr4803 = len(yyv4803)
		} else if yyl4803 != len(yyv4803) {
			yyv4803 = yyv4803[:yyl4803]
			yyc4803 = true
		}
		yyj4803 := 0
		for ; yyj4803 < yyrr4803; yyj4803++ {
			yyh4803.ElemContainerState(yyj4803)
			if r.TryDecodeAsNil() {
				yyv4803[yyj4803] = ""
			} else {
				yyv4803[yyj4803] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4803 {
			for ; yyj4803 < yyl4803; yyj4803++ {
				yyv4803 = append(yyv4803, "")
				yyh4803.ElemContainerState(yyj4803)
				if r.TryDecodeAsNil() {
					yyv4803[yyj4803] = ""
				} else {
					yyv4803[yyj4803] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4803 := 0
		for ; !r.CheckBreak(); yyj4803++ {

			if yyj4803 >= len(yyv4803) {
				yyv4803 = append(yyv4803, "") // var yyz4803 UniqueVolumeName
				yyc4803 = true
			}
			yyh4803.ElemContainerState(yyj4803)
			if yyj4803 < len(yyv4803) {
				if r.TryDecodeAsNil() {
					yyv4803[yyj4803] = ""
				} else {
					yyv4803[yyj4803] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4803 < len(yyv4803) {
			yyv4803 = yyv4803[:yyj4803]
			yyc4803 = true
		} else if yyj4803 == 0 && yyv4803 == nil {
			yyv4803 = []UniqueVolumeName{}
			yyc4803 = true
		}
	}
	yyh4803.End()
	if yyc4803 {
		*v = yyv4803
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4807 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4808 := &yyv4807
		yy4808.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4809 := *v
	yyh4809, yyl4809 := z.DecSliceHelperStart()
	var yyc4809 bool
	if yyl4809 == 0 {
		if yyv4809 == nil {
			yyv4809 = []AttachedVolume{}
			yyc4809 = true
		} else if len(yyv4809) != 0 {
			yyv4809 = yyv4809[:0]
			yyc4809 = true
		}
	} else if yyl4809 > 0 {
		var yyrr4809, yyrl4809 int
		var yyrt4809 bool
		if yyl4809 > cap(yyv4809) {

			yyrg4809 := len(yyv4809) > 0
			yyv24809 := yyv4809
			yyrl4809, yyrt4809 = z.DecInferLen(yyl4809, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4809 {
				if yyrl4809 <= cap(yyv4809) {
					yyv4809 = yyv4809[:yyrl4809]
				} else {
					yyv4809 = make([]AttachedVolume, yyrl4809)
				}
			} else {
				yyv4809 = make([]AttachedVolume, yyrl4809)
			}
			yyc4809 = true
			yyrr4809 = len(yyv4809)
			if yyrg4809 {
				copy(yyv4809, yyv24809)
			}
		} else if yyl4809 != len(yyv4809) {
			yyv4809 = yyv4809[:yyl4809]
			yyc4809 = true
		}
		yyj4809 := 0
		for ; yyj4809 < yyrr4809; yyj4809++ {
			yyh4809.ElemContainerState(yyj4809)
			if r.TryDecodeAsNil() {
				yyv4809[yyj4809] = AttachedVolume{}
			} else {
				yyv4810 := &yyv4809[yyj4809]
				yyv4810.CodecDecodeSelf(d)
			}

		}
		if yyrt4809 {
			for ; yyj4809 < yyl4809; yyj4809++ {
				yyv4809 = append(yyv4809, AttachedVolume{})
				yyh4809.ElemContainerState(yyj4809)
				if r.TryDecodeAsNil() {
					yyv4809[yyj4809] = AttachedVolume{}
				} else {
					yyv4811 := &yyv4809[yyj4809]
					yyv4811.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4809 := 0
		for ; !r.CheckBreak(); yyj4809++ {

			if yyj4809 >= len(yyv4809) {
				yyv4809 = append(yyv4809, AttachedVolume{}) // var yyz4809 AttachedVolume
				yyc4809 = true
			}
			yyh4809.ElemContainerState(yyj4809)
			if yyj4809 < len(yyv4809) {
				if r.TryDecodeAsNil() {
					yyv4809[yyj4809] = AttachedVolume{}
				} else {
					yyv4812 := &yyv4809[yyj4809]
					yyv4812.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4809 < len(yyv4809) {
			yyv4809 = yyv4809[:yyj4809]
			yyc4809 = true
		} else if yyj4809 == 0 && yyv4809 == nil {
			yyv4809 = []AttachedVolume{}
			yyc4809 = true
		}
	}
	yyh4809.End()
	if yyc4809 {
		*v = yyv4809
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4813 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4814 := &yyv4813
		yy4814.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4815 := *v
	yyh4815, yyl4815 := z.DecSliceHelperStart()
	var yyc4815 bool
	if yyl4815 == 0 {
		if yyv4815 == nil {
			yyv4815 = []PreferAvoidPodsEntry{}
			yyc4815 = true
		} else if len(yyv4815) != 0 {
			yyv4815 = yyv4815[:0]
			yyc4815 = true
		}
	} else if yyl4815 > 0 {
		var yyrr4815, yyrl4815 int
		var yyrt4815 bool
		if yyl4815 > cap(yyv4815) {

			yyrg4815 := len(yyv4815) > 0
			yyv24815 := yyv4815
			yyrl4815, yyrt4815 = z.DecInferLen(yyl4815, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4815 {
				if yyrl4815 <= cap(yyv4815) {
					yyv4815 = yyv4815[:yyrl4815]
				} else {
					yyv4815 = make([]PreferAvoidPodsEntry, yyrl4815)
				}
			} else {
				yyv4815 = make([]PreferAvoidPodsEntry, yyrl4815)
			}
			yyc4815 = true
			yyrr4815 = len(yyv4815)
			if yyrg4815 {
				copy(yyv4815, yyv24815)
			}
		} else if yyl4815 != len(yyv4815) {
			yyv4815 = yyv4815[:yyl4815]
			yyc4815 = true
		}
		yyj4815 := 0
		for ; yyj4815 < yyrr4815; yyj4815++ {
			yyh4815.ElemContainerState(yyj4815)
			if r.TryDecodeAsNil() {
				yyv4815[yyj4815] = PreferAvoidPodsEntry{}
			} else {
				yyv4816 := &yyv4815[yyj4815]
				yyv4816.CodecDecodeSelf(d)
			}

		}
		if yyrt4815 {
			for ; yyj4815 < yyl4815; yyj4815++ {
				yyv4815 = append(yyv4815, PreferAvoidPodsEntry{})
				yyh4815.ElemContainerState(yyj4815)
				if r.TryDecodeAsNil() {
					yyv4815[yyj4815] = PreferAvoidPodsEntry{}
				} else {
					yyv4817 := &yyv4815[yyj4815]
					yyv4817.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4815 := 0
		for ; !r.CheckBreak(); yyj4815++ {

			if yyj4815 >= len(yyv4815) {
				yyv4815 = append(yyv4815, PreferAvoidPodsEntry{}) // var yyz4815 PreferAvoidPodsEntry
				yyc4815 = true
			}
			yyh4815.ElemContainerState(yyj4815)
			if yyj4815 < len(yyv4815) {
				if r.TryDecodeAsNil() {
					yyv4815[yyj4815] = PreferAvoidPodsEntry{}
				} else {
					yyv4818 := &yyv4815[yyj4815]
					yyv4818.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4815 < len(yyv4815) {
			yyv4815 = yyv4815[:yyj4815]
			yyc4815 = true
		} else if yyj4815 == 0 && yyv4815 == nil {
			yyv4815 = []PreferAvoidPodsEntry{}
			yyc4815 = true
		}
	}
	yyh4815.End()
	if yyc4815 {
		*v = yyv4815
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4819, yyv4819 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4819.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4820 := &yyv4819
		yym4821 := z.EncBinary()
		_ = yym4821
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4820) {
		} else if !yym4821 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4820)
		} else {
			z.EncFallback(yy4820)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4822 := *v
	yyl4822 := r.ReadMapStart()
	yybh4822 := z.DecBasicHandle()
	if yyv4822 == nil {
		yyrl4822, _ := z.DecInferLen(yyl4822, yybh4822.MaxInitLen, 72)
		yyv4822 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4822)
		*v = yyv4822
	}
	var yymk4822 ResourceName
	var yymv4822 pkg3_resource.Quantity
	var yymg4822 bool
	if yybh4822.MapValueReset {
		yymg4822 = true
	}
	if yyl4822 > 0 {
		for yyj4822 := 0; yyj4822 < yyl4822; yyj4822++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4822 = ""
			} else {
				yymk4822 = ResourceName(r.DecodeString())
			}

			if yymg4822 {
				yymv4822 = yyv4822[yymk4822]
			} else {
				yymv4822 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4822 = pkg3_resource.Quantity{}
			} else {
				yyv4824 := &yymv4822
				yym4825 := z.DecBinary()
				_ = yym4825
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4824) {
				} else if !yym4825 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4824)
				} else {
					z.DecFallback(yyv4824, false)
				}
			}

			if yyv4822 != nil {
				yyv4822[yymk4822] = yymv4822
			}
		}
	} else if yyl4822 < 0 {
		for yyj4822 := 0; !r.CheckBreak(); yyj4822++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4822 = ""
			} else {
				yymk4822 = ResourceName(r.DecodeString())
			}

			if yymg4822 {
				yymv4822 = yyv4822[yymk4822]
			} else {
				yymv4822 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4822 = pkg3_resource.Quantity{}
			} else {
				yyv4827 := &yymv4822
				yym4828 := z.DecBinary()
				_ = yym4828
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4827) {
				} else if !yym4828 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4827)
				} else {
					z.DecFallback(yyv4827, false)
				}
			}

			if yyv4822 != nil {
				yyv4822[yymk4822] = yymv4822
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4829 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4830 := &yyv4829
		yy4830.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4831 := *v
	yyh4831, yyl4831 := z.DecSliceHelperStart()
	var yyc4831 bool
	if yyl4831 == 0 {
		if yyv4831 == nil {
			yyv4831 = []Node{}
			yyc4831 = true
		} else if len(yyv4831) != 0 {
			yyv4831 = yyv4831[:0]
			yyc4831 = true
		}
	} else if yyl4831 > 0 {
		var yyrr4831, yyrl4831 int
		var yyrt4831 bool
		if yyl4831 > cap(yyv4831) {

			yyrg4831 := len(yyv4831) > 0
			yyv24831 := yyv4831
			yyrl4831, yyrt4831 = z.DecInferLen(yyl4831, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4831 {
				if yyrl4831 <= cap(yyv4831) {
					yyv4831 = yyv4831[:yyrl4831]
				} else {
					yyv4831 = make([]Node, yyrl4831)
				}
			} else {
				yyv4831 = make([]Node, yyrl4831)
			}
			yyc4831 = true
			yyrr4831 = len(yyv4831)
			if yyrg4831 {
				copy(yyv4831, yyv24831)
			}
		} else if yyl4831 != len(yyv4831) {
			yyv4831 = yyv4831[:yyl4831]
			yyc4831 = true
		}
		yyj4831 := 0
		for ; yyj4831 < yyrr4831; yyj4831++ {
			yyh4831.ElemContainerState(yyj4831)
			if r.TryDecodeAsNil() {
				yyv4831[yyj4831] = Node{}
			} else {
				yyv4832 := &yyv4831[yyj4831]
				yyv4832.CodecDecodeSelf(d)
			}

		}
		if yyrt4831 {
			for ; yyj4831 < yyl4831; yyj4831++ {
				yyv4831 = append(yyv4831, Node{})
				yyh4831.ElemContainerState(yyj4831)
				if r.TryDecodeAsNil() {
					yyv4831[yyj4831] = Node{}
				} else {
					yyv4833 := &yyv4831[yyj4831]
					yyv4833.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4831 := 0
		for ; !r.CheckBreak(); yyj4831++ {

			if yyj4831 >= len(yyv4831) {
				yyv4831 = append(yyv4831, Node{}) // var yyz4831 Node
				yyc4831 = true
			}
			yyh4831.ElemContainerState(yyj4831)
			if yyj4831 < len(yyv4831) {
				if r.TryDecodeAsNil() {
					yyv4831[yyj4831] = Node{}
				} else {
					yyv4834 := &yyv4831[yyj4831]
					yyv4834.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4831 < len(yyv4831) {
			yyv4831 = yyv4831[:yyj4831]
			yyc4831 = true
		} else if yyj4831 == 0 && yyv4831 == nil {
			yyv4831 = []Node{}
			yyc4831 = true
		}
	}
	yyh4831.End()
	if yyc4831 {
		*v = yyv4831
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4835 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4835.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4836 := *v
	yyh4836, yyl4836 := z.DecSliceHelperStart()
	var yyc4836 bool
	if yyl4836 == 0 {
		if yyv4836 == nil {
			yyv4836 = []FinalizerName{}
			yyc4836 = true
		} else if len(yyv4836) != 0 {
			yyv4836 = yyv4836[:0]
			yyc4836 = true
		}
	} else if yyl4836 > 0 {
		var yyrr4836, yyrl4836 int
		var yyrt4836 bool
		if yyl4836 > cap(yyv4836) {

			yyrl4836, yyrt4836 = z.DecInferLen(yyl4836, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4836 {
				if yyrl4836 <= cap(yyv4836) {
					yyv4836 = yyv4836[:yyrl4836]
				} else {
					yyv4836 = make([]FinalizerName, yyrl4836)
				}
			} else {
				yyv4836 = make([]FinalizerName, yyrl4836)
			}
			yyc4836 = true
			yyrr4836 = len(yyv4836)
		} else if yyl4836 != len(yyv4836) {
			yyv4836 = yyv4836[:yyl4836]
			yyc4836 = true
		}
		yyj4836 := 0
		for ; yyj4836 < yyrr4836; yyj4836++ {
			yyh4836.ElemContainerState(yyj4836)
			if r.TryDecodeAsNil() {
				yyv4836[yyj4836] = ""
			} else {
				yyv4836[yyj4836] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4836 {
			for ; yyj4836 < yyl4836; yyj4836++ {
				yyv4836 = append(yyv4836, "")
				yyh4836.ElemContainerState(yyj4836)
				if r.TryDecodeAsNil() {
					yyv4836[yyj4836] = ""
				} else {
					yyv4836[yyj4836] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4836 := 0
		for ; !r.CheckBreak(); yyj4836++ {

			if yyj4836 >= len(yyv4836) {
				yyv4836 = append(yyv4836, "") // var yyz4836 FinalizerName
				yyc4836 = true
			}
			yyh4836.ElemContainerState(yyj4836)
			if yyj4836 < len(yyv4836) {
				if r.TryDecodeAsNil() {
					yyv4836[yyj4836] = ""
				} else {
					yyv4836[yyj4836] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4836 < len(yyv4836) {
			yyv4836 = yyv4836[:yyj4836]
			yyc4836 = true
		} else if yyj4836 == 0 && yyv4836 == nil {
			yyv4836 = []FinalizerName{}
			yyc4836 = true
		}
	}
	yyh4836.End()
	if yyc4836 {
		*v = yyv4836
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4840 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4841 := &yyv4840
		yy4841.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4842 := *v
	yyh4842, yyl4842 := z.DecSliceHelperStart()
	var yyc4842 bool
	if yyl4842 == 0 {
		if yyv4842 == nil {
			yyv4842 = []Namespace{}
			yyc4842 = true
		} else if len(yyv4842) != 0 {
			yyv4842 = yyv4842[:0]
			yyc4842 = true
		}
	} else if yyl4842 > 0 {
		var yyrr4842, yyrl4842 int
		var yyrt4842 bool
		if yyl4842 > cap(yyv4842) {

			yyrg4842 := len(yyv4842) > 0
			yyv24842 := yyv4842
			yyrl4842, yyrt4842 = z.DecInferLen(yyl4842, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4842 {
				if yyrl4842 <= cap(yyv4842) {
					yyv4842 = yyv4842[:yyrl4842]
				} else {
					yyv4842 = make([]Namespace, yyrl4842)
				}
			} else {
				yyv4842 = make([]Namespace, yyrl4842)
			}
			yyc4842 = true
			yyrr4842 = len(yyv4842)
			if yyrg4842 {
				copy(yyv4842, yyv24842)
			}
		} else if yyl4842 != len(yyv4842) {
			yyv4842 = yyv4842[:yyl4842]
			yyc4842 = true
		}
		yyj4842 := 0
		for ; yyj4842 < yyrr4842; yyj4842++ {
			yyh4842.ElemContainerState(yyj4842)
			if r.TryDecodeAsNil() {
				yyv4842[yyj4842] = Namespace{}
			} else {
				yyv4843 := &yyv4842[yyj4842]
				yyv4843.CodecDecodeSelf(d)
			}

		}
		if yyrt4842 {
			for ; yyj4842 < yyl4842; yyj4842++ {
				yyv4842 = append(yyv4842, Namespace{})
				yyh4842.ElemContainerState(yyj4842)
				if r.TryDecodeAsNil() {
					yyv4842[yyj4842] = Namespace{}
				} else {
					yyv4844 := &yyv4842[yyj4842]
					yyv4844.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4842 := 0
		for ; !r.CheckBreak(); yyj4842++ {

			if yyj4842 >= len(yyv4842) {
				yyv4842 = append(yyv4842, Namespace{}) // var yyz4842 Namespace
				yyc4842 = true
			}
			yyh4842.ElemContainerState(yyj4842)
			if yyj4842 < len(yyv4842) {
				if r.TryDecodeAsNil() {
					yyv4842[yyj4842] = Namespace{}
				} else {
					yyv4845 := &yyv4842[yyj4842]
					yyv4845.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4842 < len(yyv4842) {
			yyv4842 = yyv4842[:yyj4842]
			yyc4842 = true
		} else if yyj4842 == 0 && yyv4842 == nil {
			yyv4842 = []Namespace{}
			yyc4842 = true
		}
	}
	yyh4842.End()
	if yyc4842 {
		*v = yyv4842
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4846 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4847 := &yyv4846
		yy4847.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4848 := *v
	yyh4848, yyl4848 := z.DecSliceHelperStart()
	var yyc4848 bool
	if yyl4848 == 0 {
		if yyv4848 == nil {
			yyv4848 = []Event{}
			yyc4848 = true
		} else if len(yyv4848) != 0 {
			yyv4848 = yyv4848[:0]
			yyc4848 = true
		}
	} else if yyl4848 > 0 {
		var yyrr4848, yyrl4848 int
		var yyrt4848 bool
		if yyl4848 > cap(yyv4848) {

			yyrg4848 := len(yyv4848) > 0
			yyv24848 := yyv4848
			yyrl4848, yyrt4848 = z.DecInferLen(yyl4848, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4848 {
				if yyrl4848 <= cap(yyv4848) {
					yyv4848 = yyv4848[:yyrl4848]
				} else {
					yyv4848 = make([]Event, yyrl4848)
				}
			} else {
				yyv4848 = make([]Event, yyrl4848)
			}
			yyc4848 = true
			yyrr4848 = len(yyv4848)
			if yyrg4848 {
				copy(yyv4848, yyv24848)
			}
		} else if yyl4848 != len(yyv4848) {
			yyv4848 = yyv4848[:yyl4848]
			yyc4848 = true
		}
		yyj4848 := 0
		for ; yyj4848 < yyrr4848; yyj4848++ {
			yyh4848.ElemContainerState(yyj4848)
			if r.TryDecodeAsNil() {
				yyv4848[yyj4848] = Event{}
			} else {
				yyv4849 := &yyv4848[yyj4848]
				yyv4849.CodecDecodeSelf(d)
			}

		}
		if yyrt4848 {
			for ; yyj4848 < yyl4848; yyj4848++ {
				yyv4848 = append(yyv4848, Event{})
				yyh4848.ElemContainerState(yyj4848)
				if r.TryDecodeAsNil() {
					yyv4848[yyj4848] = Event{}
				} else {
					yyv4850 := &yyv4848[yyj4848]
					yyv4850.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4848 := 0
		for ; !r.CheckBreak(); yyj4848++ {

			if yyj4848 >= len(yyv4848) {
				yyv4848 = append(yyv4848, Event{}) // var yyz4848 Event
				yyc4848 = true
			}
			yyh4848.ElemContainerState(yyj4848)
			if yyj4848 < len(yyv4848) {
				if r.TryDecodeAsNil() {
					yyv4848[yyj4848] = Event{}
				} else {
					yyv4851 := &yyv4848[yyj4848]
					yyv4851.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4848 < len(yyv4848) {
			yyv4848 = yyv4848[:yyj4848]
			yyc4848 = true
		} else if yyj4848 == 0 && yyv4848 == nil {
			yyv4848 = []Event{}
			yyc4848 = true
		}
	}
	yyh4848.End()
	if yyc4848 {
		*v = yyv4848
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4852 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4853 := &yyv4852
		yym4854 := z.EncBinary()
		_ = yym4854
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4853) {
		} else if !yym4854 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4853)
		} else {
			z.EncFallback(yy4853)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4855 := *v
	yyh4855, yyl4855 := z.DecSliceHelperStart()
	var yyc4855 bool
	if yyl4855 == 0 {
		if yyv4855 == nil {
			yyv4855 = []pkg5_runtime.RawExtension{}
			yyc4855 = true
		} else if len(yyv4855) != 0 {
			yyv4855 = yyv4855[:0]
			yyc4855 = true
		}
	} else if yyl4855 > 0 {
		var yyrr4855, yyrl4855 int
		var yyrt4855 bool
		if yyl4855 > cap(yyv4855) {

			yyrg4855 := len(yyv4855) > 0
			yyv24855 := yyv4855
			yyrl4855, yyrt4855 = z.DecInferLen(yyl4855, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4855 {
				if yyrl4855 <= cap(yyv4855) {
					yyv4855 = yyv4855[:yyrl4855]
				} else {
					yyv4855 = make([]pkg5_runtime.RawExtension, yyrl4855)
				}
			} else {
				yyv4855 = make([]pkg5_runtime.RawExtension, yyrl4855)
			}
			yyc4855 = true
			yyrr4855 = len(yyv4855)
			if yyrg4855 {
				copy(yyv4855, yyv24855)
			}
		} else if yyl4855 != len(yyv4855) {
			yyv4855 = yyv4855[:yyl4855]
			yyc4855 = true
		}
		yyj4855 := 0
		for ; yyj4855 < yyrr4855; yyj4855++ {
			yyh4855.ElemContainerState(yyj4855)
			if r.TryDecodeAsNil() {
				yyv4855[yyj4855] = pkg5_runtime.RawExtension{}
			} else {
				yyv4856 := &yyv4855[yyj4855]
				yym4857 := z.DecBinary()
				_ = yym4857
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4856) {
				} else if !yym4857 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4856)
				} else {
					z.DecFallback(yyv4856, false)
				}
			}

		}
		if yyrt4855 {
			for ; yyj4855 < yyl4855; yyj4855++ {
				yyv4855 = append(yyv4855, pkg5_runtime.RawExtension{})
				yyh4855.ElemContainerState(yyj4855)
				if r.TryDecodeAsNil() {
					yyv4855[yyj4855] = pkg5_runtime.RawExtension{}
				} else {
					yyv4858 := &yyv4855[yyj4855]
					yym4859 := z.DecBinary()
					_ = yym4859
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4858) {
					} else if !yym4859 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4858)
					} else {
						z.DecFallback(yyv4858, false)
					}
				}

			}
		}

	} else {
		yyj4855 := 0
		for ; !r.CheckBreak(); yyj4855++ {

			if yyj4855 >= len(yyv4855) {
				yyv4855 = append(yyv4855, pkg5_runtime.RawExtension{}) // var yyz4855 pkg5_runtime.RawExtension
				yyc4855 = true
			}
			yyh4855.ElemContainerState(yyj4855)
			if yyj4855 < len(yyv4855) {
				if r.TryDecodeAsNil() {
					yyv4855[yyj4855] = pkg5_runtime.RawExtension{}
				} else {
					yyv4860 := &yyv4855[yyj4855]
					yym4861 := z.DecBinary()
					_ = yym4861
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4860) {
					} else if !yym4861 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4860)
					} else {
						z.DecFallback(yyv4860, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4855 < len(yyv4855) {
			yyv4855 = yyv4855[:yyj4855]
			yyc4855 = true
		} else if yyj4855 == 0 && yyv4855 == nil {
			yyv4855 = []pkg5_runtime.RawExtension{}
			yyc4855 = true
		}
	}
	yyh4855.End()
	if yyc4855 {
		*v = yyv4855
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4862 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4863 := &yyv4862
		yy4863.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4864 := *v
	yyh4864, yyl4864 := z.DecSliceHelperStart()
	var yyc4864 bool
	if yyl4864 == 0 {
		if yyv4864 == nil {
			yyv4864 = []LimitRangeItem{}
			yyc4864 = true
		} else if len(yyv4864) != 0 {
			yyv4864 = yyv4864[:0]
			yyc4864 = true
		}
	} else if yyl4864 > 0 {
		var yyrr4864, yyrl4864 int
		var yyrt4864 bool
		if yyl4864 > cap(yyv4864) {

			yyrg4864 := len(yyv4864) > 0
			yyv24864 := yyv4864
			yyrl4864, yyrt4864 = z.DecInferLen(yyl4864, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4864 {
				if yyrl4864 <= cap(yyv4864) {
					yyv4864 = yyv4864[:yyrl4864]
				} else {
					yyv4864 = make([]LimitRangeItem, yyrl4864)
				}
			} else {
				yyv4864 = make([]LimitRangeItem, yyrl4864)
			}
			yyc4864 = true
			yyrr4864 = len(yyv4864)
			if yyrg4864 {
				copy(yyv4864, yyv24864)
			}
		} else if yyl4864 != len(yyv4864) {
			yyv4864 = yyv4864[:yyl4864]
			yyc4864 = true
		}
		yyj4864 := 0
		for ; yyj4864 < yyrr4864; yyj4864++ {
			yyh4864.ElemContainerState(yyj4864)
			if r.TryDecodeAsNil() {
				yyv4864[yyj4864] = LimitRangeItem{}
			} else {
				yyv4865 := &yyv4864[yyj4864]
				yyv4865.CodecDecodeSelf(d)
			}

		}
		if yyrt4864 {
			for ; yyj4864 < yyl4864; yyj4864++ {
				yyv4864 = append(yyv4864, LimitRangeItem{})
				yyh4864.ElemContainerState(yyj4864)
				if r.TryDecodeAsNil() {
					yyv4864[yyj4864] = LimitRangeItem{}
				} else {
					yyv4866 := &yyv4864[yyj4864]
					yyv4866.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4864 := 0
		for ; !r.CheckBreak(); yyj4864++ {

			if yyj4864 >= len(yyv4864) {
				yyv4864 = append(yyv4864, LimitRangeItem{}) // var yyz4864 LimitRangeItem
				yyc4864 = true
			}
			yyh4864.ElemContainerState(yyj4864)
			if yyj4864 < len(yyv4864) {
				if r.TryDecodeAsNil() {
					yyv4864[yyj4864] = LimitRangeItem{}
				} else {
					yyv4867 := &yyv4864[yyj4864]
					yyv4867.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4864 < len(yyv4864) {
			yyv4864 = yyv4864[:yyj4864]
			yyc4864 = true
		} else if yyj4864 == 0 && yyv4864 == nil {
			yyv4864 = []LimitRangeItem{}
			yyc4864 = true
		}
	}
	yyh4864.End()
	if yyc4864 {
		*v = yyv4864
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4868 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4869 := &yyv4868
		yy4869.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4870 := *v
	yyh4870, yyl4870 := z.DecSliceHelperStart()
	var yyc4870 bool
	if yyl4870 == 0 {
		if yyv4870 == nil {
			yyv4870 = []LimitRange{}
			yyc4870 = true
		} else if len(yyv4870) != 0 {
			yyv4870 = yyv4870[:0]
			yyc4870 = true
		}
	} else if yyl4870 > 0 {
		var yyrr4870, yyrl4870 int
		var yyrt4870 bool
		if yyl4870 > cap(yyv4870) {

			yyrg4870 := len(yyv4870) > 0
			yyv24870 := yyv4870
			yyrl4870, yyrt4870 = z.DecInferLen(yyl4870, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4870 {
				if yyrl4870 <= cap(yyv4870) {
					yyv4870 = yyv4870[:yyrl4870]
				} else {
					yyv4870 = make([]LimitRange, yyrl4870)
				}
			} else {
				yyv4870 = make([]LimitRange, yyrl4870)
			}
			yyc4870 = true
			yyrr4870 = len(yyv4870)
			if yyrg4870 {
				copy(yyv4870, yyv24870)
			}
		} else if yyl4870 != len(yyv4870) {
			yyv4870 = yyv4870[:yyl4870]
			yyc4870 = true
		}
		yyj4870 := 0
		for ; yyj4870 < yyrr4870; yyj4870++ {
			yyh4870.ElemContainerState(yyj4870)
			if r.TryDecodeAsNil() {
				yyv4870[yyj4870] = LimitRange{}
			} else {
				yyv4871 := &yyv4870[yyj4870]
				yyv4871.CodecDecodeSelf(d)
			}

		}
		if yyrt4870 {
			for ; yyj4870 < yyl4870; yyj4870++ {
				yyv4870 = append(yyv4870, LimitRange{})
				yyh4870.ElemContainerState(yyj4870)
				if r.TryDecodeAsNil() {
					yyv4870[yyj4870] = LimitRange{}
				} else {
					yyv4872 := &yyv4870[yyj4870]
					yyv4872.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4870 := 0
		for ; !r.CheckBreak(); yyj4870++ {

			if yyj4870 >= len(yyv4870) {
				yyv4870 = append(yyv4870, LimitRange{}) // var yyz4870 LimitRange
				yyc4870 = true
			}
			yyh4870.ElemContainerState(yyj4870)
			if yyj4870 < len(yyv4870) {
				if r.TryDecodeAsNil() {
					yyv4870[yyj4870] = LimitRange{}
				} else {
					yyv4873 := &yyv4870[yyj4870]
					yyv4873.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4870 < len(yyv4870) {
			yyv4870 = yyv4870[:yyj4870]
			yyc4870 = true
		} else if yyj4870 == 0 && yyv4870 == nil {
			yyv4870 = []LimitRange{}
			yyc4870 = true
		}
	}
	yyh4870.End()
	if yyc4870 {
		*v = yyv4870
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4874 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4874.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4875 := *v
	yyh4875, yyl4875 := z.DecSliceHelperStart()
	var yyc4875 bool
	if yyl4875 == 0 {
		if yyv4875 == nil {
			yyv4875 = []ResourceQuotaScope{}
			yyc4875 = true
		} else if len(yyv4875) != 0 {
			yyv4875 = yyv4875[:0]
			yyc4875 = true
		}
	} else if yyl4875 > 0 {
		var yyrr4875, yyrl4875 int
		var yyrt4875 bool
		if yyl4875 > cap(yyv4875) {

			yyrl4875, yyrt4875 = z.DecInferLen(yyl4875, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4875 {
				if yyrl4875 <= cap(yyv4875) {
					yyv4875 = yyv4875[:yyrl4875]
				} else {
					yyv4875 = make([]ResourceQuotaScope, yyrl4875)
				}
			} else {
				yyv4875 = make([]ResourceQuotaScope, yyrl4875)
			}
			yyc4875 = true
			yyrr4875 = len(yyv4875)
		} else if yyl4875 != len(yyv4875) {
			yyv4875 = yyv4875[:yyl4875]
			yyc4875 = true
		}
		yyj4875 := 0
		for ; yyj4875 < yyrr4875; yyj4875++ {
			yyh4875.ElemContainerState(yyj4875)
			if r.TryDecodeAsNil() {
				yyv4875[yyj4875] = ""
			} else {
				yyv4875[yyj4875] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4875 {
			for ; yyj4875 < yyl4875; yyj4875++ {
				yyv4875 = append(yyv4875, "")
				yyh4875.ElemContainerState(yyj4875)
				if r.TryDecodeAsNil() {
					yyv4875[yyj4875] = ""
				} else {
					yyv4875[yyj4875] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4875 := 0
		for ; !r.CheckBreak(); yyj4875++ {

			if yyj4875 >= len(yyv4875) {
				yyv4875 = append(yyv4875, "") // var yyz4875 ResourceQuotaScope
				yyc4875 = true
			}
			yyh4875.ElemContainerState(yyj4875)
			if yyj4875 < len(yyv4875) {
				if r.TryDecodeAsNil() {
					yyv4875[yyj4875] = ""
				} else {
					yyv4875[yyj4875] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4875 < len(yyv4875) {
			yyv4875 = yyv4875[:yyj4875]
			yyc4875 = true
		} else if yyj4875 == 0 && yyv4875 == nil {
			yyv4875 = []ResourceQuotaScope{}
			yyc4875 = true
		}
	}
	yyh4875.End()
	if yyc4875 {
		*v = yyv4875
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4879 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4880 := &yyv4879
		yy4880.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4881 := *v
	yyh4881, yyl4881 := z.DecSliceHelperStart()
	var yyc4881 bool
	if yyl4881 == 0 {
		if yyv4881 == nil {
			yyv4881 = []ResourceQuota{}
			yyc4881 = true
		} else if len(yyv4881) != 0 {
			yyv4881 = yyv4881[:0]
			yyc4881 = true
		}
	} else if yyl4881 > 0 {
		var yyrr4881, yyrl4881 int
		var yyrt4881 bool
		if yyl4881 > cap(yyv4881) {

			yyrg4881 := len(yyv4881) > 0
			yyv24881 := yyv4881
			yyrl4881, yyrt4881 = z.DecInferLen(yyl4881, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4881 {
				if yyrl4881 <= cap(yyv4881) {
					yyv4881 = yyv4881[:yyrl4881]
				} else {
					yyv4881 = make([]ResourceQuota, yyrl4881)
				}
			} else {
				yyv4881 = make([]ResourceQuota, yyrl4881)
			}
			yyc4881 = true
			yyrr4881 = len(yyv4881)
			if yyrg4881 {
				copy(yyv4881, yyv24881)
			}
		} else if yyl4881 != len(yyv4881) {
			yyv4881 = yyv4881[:yyl4881]
			yyc4881 = true
		}
		yyj4881 := 0
		for ; yyj4881 < yyrr4881; yyj4881++ {
			yyh4881.ElemContainerState(yyj4881)
			if r.TryDecodeAsNil() {
				yyv4881[yyj4881] = ResourceQuota{}
			} else {
				yyv4882 := &yyv4881[yyj4881]
				yyv4882.CodecDecodeSelf(d)
			}

		}
		if yyrt4881 {
			for ; yyj4881 < yyl4881; yyj4881++ {
				yyv4881 = append(yyv4881, ResourceQuota{})
				yyh4881.ElemContainerState(yyj4881)
				if r.TryDecodeAsNil() {
					yyv4881[yyj4881] = ResourceQuota{}
				} else {
					yyv4883 := &yyv4881[yyj4881]
					yyv4883.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4881 := 0
		for ; !r.CheckBreak(); yyj4881++ {

			if yyj4881 >= len(yyv4881) {
				yyv4881 = append(yyv4881, ResourceQuota{}) // var yyz4881 ResourceQuota
				yyc4881 = true
			}
			yyh4881.ElemContainerState(yyj4881)
			if yyj4881 < len(yyv4881) {
				if r.TryDecodeAsNil() {
					yyv4881[yyj4881] = ResourceQuota{}
				} else {
					yyv4884 := &yyv4881[yyj4881]
					yyv4884.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4881 < len(yyv4881) {
			yyv4881 = yyv4881[:yyj4881]
			yyc4881 = true
		} else if yyj4881 == 0 && yyv4881 == nil {
			yyv4881 = []ResourceQuota{}
			yyc4881 = true
		}
	}
	yyh4881.End()
	if yyc4881 {
		*v = yyv4881
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4885, yyv4885 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4886 := z.EncBinary()
		_ = yym4886
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4885))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4885 == nil {
			r.EncodeNil()
		} else {
			yym4887 := z.EncBinary()
			_ = yym4887
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4885))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4888 := *v
	yyl4888 := r.ReadMapStart()
	yybh4888 := z.DecBasicHandle()
	if yyv4888 == nil {
		yyrl4888, _ := z.DecInferLen(yyl4888, yybh4888.MaxInitLen, 40)
		yyv4888 = make(map[string][]uint8, yyrl4888)
		*v = yyv4888
	}
	var yymk4888 string
	var yymv4888 []uint8
	var yymg4888 bool
	if yybh4888.MapValueReset {
		yymg4888 = true
	}
	if yyl4888 > 0 {
		for yyj4888 := 0; yyj4888 < yyl4888; yyj4888++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4888 = ""
			} else {
				yymk4888 = string(r.DecodeString())
			}

			if yymg4888 {
				yymv4888 = yyv4888[yymk4888]
			} else {
				yymv4888 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4888 = nil
			} else {
				yyv4890 := &yymv4888
				yym4891 := z.DecBinary()
				_ = yym4891
				if false {
				} else {
					*yyv4890 = r.DecodeBytes(*(*[]byte)(yyv4890), false, false)
				}
			}

			if yyv4888 != nil {
				yyv4888[yymk4888] = yymv4888
			}
		}
	} else if yyl4888 < 0 {
		for yyj4888 := 0; !r.CheckBreak(); yyj4888++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4888 = ""
			} else {
				yymk4888 = string(r.DecodeString())
			}

			if yymg4888 {
				yymv4888 = yyv4888[yymk4888]
			} else {
				yymv4888 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4888 = nil
			} else {
				yyv4893 := &yymv4888
				yym4894 := z.DecBinary()
				_ = yym4894
				if false {
				} else {
					*yyv4893 = r.DecodeBytes(*(*[]byte)(yyv4893), false, false)
				}
			}

			if yyv4888 != nil {
				yyv4888[yymk4888] = yymv4888
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4895 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4896 := &yyv4895
		yy4896.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4897 := *v
	yyh4897, yyl4897 := z.DecSliceHelperStart()
	var yyc4897 bool
	if yyl4897 == 0 {
		if yyv4897 == nil {
			yyv4897 = []Secret{}
			yyc4897 = true
		} else if len(yyv4897) != 0 {
			yyv4897 = yyv4897[:0]
			yyc4897 = true
		}
	} else if yyl4897 > 0 {
		var yyrr4897, yyrl4897 int
		var yyrt4897 bool
		if yyl4897 > cap(yyv4897) {

			yyrg4897 := len(yyv4897) > 0
			yyv24897 := yyv4897
			yyrl4897, yyrt4897 = z.DecInferLen(yyl4897, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4897 {
				if yyrl4897 <= cap(yyv4897) {
					yyv4897 = yyv4897[:yyrl4897]
				} else {
					yyv4897 = make([]Secret, yyrl4897)
				}
			} else {
				yyv4897 = make([]Secret, yyrl4897)
			}
			yyc4897 = true
			yyrr4897 = len(yyv4897)
			if yyrg4897 {
				copy(yyv4897, yyv24897)
			}
		} else if yyl4897 != len(yyv4897) {
			yyv4897 = yyv4897[:yyl4897]
			yyc4897 = true
		}
		yyj4897 := 0
		for ; yyj4897 < yyrr4897; yyj4897++ {
			yyh4897.ElemContainerState(yyj4897)
			if r.TryDecodeAsNil() {
				yyv4897[yyj4897] = Secret{}
			} else {
				yyv4898 := &yyv4897[yyj4897]
				yyv4898.CodecDecodeSelf(d)
			}

		}
		if yyrt4897 {
			for ; yyj4897 < yyl4897; yyj4897++ {
				yyv4897 = append(yyv4897, Secret{})
				yyh4897.ElemContainerState(yyj4897)
				if r.TryDecodeAsNil() {
					yyv4897[yyj4897] = Secret{}
				} else {
					yyv4899 := &yyv4897[yyj4897]
					yyv4899.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4897 := 0
		for ; !r.CheckBreak(); yyj4897++ {

			if yyj4897 >= len(yyv4897) {
				yyv4897 = append(yyv4897, Secret{}) // var yyz4897 Secret
				yyc4897 = true
			}
			yyh4897.ElemContainerState(yyj4897)
			if yyj4897 < len(yyv4897) {
				if r.TryDecodeAsNil() {
					yyv4897[yyj4897] = Secret{}
				} else {
					yyv4900 := &yyv4897[yyj4897]
					yyv4900.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4897 < len(yyv4897) {
			yyv4897 = yyv4897[:yyj4897]
			yyc4897 = true
		} else if yyj4897 == 0 && yyv4897 == nil {
			yyv4897 = []Secret{}
			yyc4897 = true
		}
	}
	yyh4897.End()
	if yyc4897 {
		*v = yyv4897
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4901 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4902 := &yyv4901
		yy4902.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4903 := *v
	yyh4903, yyl4903 := z.DecSliceHelperStart()
	var yyc4903 bool
	if yyl4903 == 0 {
		if yyv4903 == nil {
			yyv4903 = []ConfigMap{}
			yyc4903 = true
		} else if len(yyv4903) != 0 {
			yyv4903 = yyv4903[:0]
			yyc4903 = true
		}
	} else if yyl4903 > 0 {
		var yyrr4903, yyrl4903 int
		var yyrt4903 bool
		if yyl4903 > cap(yyv4903) {

			yyrg4903 := len(yyv4903) > 0
			yyv24903 := yyv4903
			yyrl4903, yyrt4903 = z.DecInferLen(yyl4903, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4903 {
				if yyrl4903 <= cap(yyv4903) {
					yyv4903 = yyv4903[:yyrl4903]
				} else {
					yyv4903 = make([]ConfigMap, yyrl4903)
				}
			} else {
				yyv4903 = make([]ConfigMap, yyrl4903)
			}
			yyc4903 = true
			yyrr4903 = len(yyv4903)
			if yyrg4903 {
				copy(yyv4903, yyv24903)
			}
		} else if yyl4903 != len(yyv4903) {
			yyv4903 = yyv4903[:yyl4903]
			yyc4903 = true
		}
		yyj4903 := 0
		for ; yyj4903 < yyrr4903; yyj4903++ {
			yyh4903.ElemContainerState(yyj4903)
			if r.TryDecodeAsNil() {
				yyv4903[yyj4903] = ConfigMap{}
			} else {
				yyv4904 := &yyv4903[yyj4903]
				yyv4904.CodecDecodeSelf(d)
			}

		}
		if yyrt4903 {
			for ; yyj4903 < yyl4903; yyj4903++ {
				yyv4903 = append(yyv4903, ConfigMap{})
				yyh4903.ElemContainerState(yyj4903)
				if r.TryDecodeAsNil() {
					yyv4903[yyj4903] = ConfigMap{}
				} else {
					yyv4905 := &yyv4903[yyj4903]
					yyv4905.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4903 := 0
		for ; !r.CheckBreak(); yyj4903++ {

			if yyj4903 >= len(yyv4903) {
				yyv4903 = append(yyv4903, ConfigMap{}) // var yyz4903 ConfigMap
				yyc4903 = true
			}
			yyh4903.ElemContainerState(yyj4903)
			if yyj4903 < len(yyv4903) {
				if r.TryDecodeAsNil() {
					yyv4903[yyj4903] = ConfigMap{}
				} else {
					yyv4906 := &yyv4903[yyj4903]
					yyv4906.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4903 < len(yyv4903) {
			yyv4903 = yyv4903[:yyj4903]
			yyc4903 = true
		} else if yyj4903 == 0 && yyv4903 == nil {
			yyv4903 = []ConfigMap{}
			yyc4903 = true
		}
	}
	yyh4903.End()
	if yyc4903 {
		*v = yyv4903
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4907 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4908 := &yyv4907
		yy4908.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4909 := *v
	yyh4909, yyl4909 := z.DecSliceHelperStart()
	var yyc4909 bool
	if yyl4909 == 0 {
		if yyv4909 == nil {
			yyv4909 = []ComponentCondition{}
			yyc4909 = true
		} else if len(yyv4909) != 0 {
			yyv4909 = yyv4909[:0]
			yyc4909 = true
		}
	} else if yyl4909 > 0 {
		var yyrr4909, yyrl4909 int
		var yyrt4909 bool
		if yyl4909 > cap(yyv4909) {

			yyrg4909 := len(yyv4909) > 0
			yyv24909 := yyv4909
			yyrl4909, yyrt4909 = z.DecInferLen(yyl4909, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4909 {
				if yyrl4909 <= cap(yyv4909) {
					yyv4909 = yyv4909[:yyrl4909]
				} else {
					yyv4909 = make([]ComponentCondition, yyrl4909)
				}
			} else {
				yyv4909 = make([]ComponentCondition, yyrl4909)
			}
			yyc4909 = true
			yyrr4909 = len(yyv4909)
			if yyrg4909 {
				copy(yyv4909, yyv24909)
			}
		} else if yyl4909 != len(yyv4909) {
			yyv4909 = yyv4909[:yyl4909]
			yyc4909 = true
		}
		yyj4909 := 0
		for ; yyj4909 < yyrr4909; yyj4909++ {
			yyh4909.ElemContainerState(yyj4909)
			if r.TryDecodeAsNil() {
				yyv4909[yyj4909] = ComponentCondition{}
			} else {
				yyv4910 := &yyv4909[yyj4909]
				yyv4910.CodecDecodeSelf(d)
			}

		}
		if yyrt4909 {
			for ; yyj4909 < yyl4909; yyj4909++ {
				yyv4909 = append(yyv4909, ComponentCondition{})
				yyh4909.ElemContainerState(yyj4909)
				if r.TryDecodeAsNil() {
					yyv4909[yyj4909] = ComponentCondition{}
				} else {
					yyv4911 := &yyv4909[yyj4909]
					yyv4911.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4909 := 0
		for ; !r.CheckBreak(); yyj4909++ {

			if yyj4909 >= len(yyv4909) {
				yyv4909 = append(yyv4909, ComponentCondition{}) // var yyz4909 ComponentCondition
				yyc4909 = true
			}
			yyh4909.ElemContainerState(yyj4909)
			if yyj4909 < len(yyv4909) {
				if r.TryDecodeAsNil() {
					yyv4909[yyj4909] = ComponentCondition{}
				} else {
					yyv4912 := &yyv4909[yyj4909]
					yyv4912.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4909 < len(yyv4909) {
			yyv4909 = yyv4909[:yyj4909]
			yyc4909 = true
		} else if yyj4909 == 0 && yyv4909 == nil {
			yyv4909 = []ComponentCondition{}
			yyc4909 = true
		}
	}
	yyh4909.End()
	if yyc4909 {
		*v = yyv4909
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4913 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4914 := &yyv4913
		yy4914.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4915 := *v
	yyh4915, yyl4915 := z.DecSliceHelperStart()
	var yyc4915 bool
	if yyl4915 == 0 {
		if yyv4915 == nil {
			yyv4915 = []ComponentStatus{}
			yyc4915 = true
		} else if len(yyv4915) != 0 {
			yyv4915 = yyv4915[:0]
			yyc4915 = true
		}
	} else if yyl4915 > 0 {
		var yyrr4915, yyrl4915 int
		var yyrt4915 bool
		if yyl4915 > cap(yyv4915) {

			yyrg4915 := len(yyv4915) > 0
			yyv24915 := yyv4915
			yyrl4915, yyrt4915 = z.DecInferLen(yyl4915, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4915 {
				if yyrl4915 <= cap(yyv4915) {
					yyv4915 = yyv4915[:yyrl4915]
				} else {
					yyv4915 = make([]ComponentStatus, yyrl4915)
				}
			} else {
				yyv4915 = make([]ComponentStatus, yyrl4915)
			}
			yyc4915 = true
			yyrr4915 = len(yyv4915)
			if yyrg4915 {
				copy(yyv4915, yyv24915)
			}
		} else if yyl4915 != len(yyv4915) {
			yyv4915 = yyv4915[:yyl4915]
			yyc4915 = true
		}
		yyj4915 := 0
		for ; yyj4915 < yyrr4915; yyj4915++ {
			yyh4915.ElemContainerState(yyj4915)
			if r.TryDecodeAsNil() {
				yyv4915[yyj4915] = ComponentStatus{}
			} else {
				yyv4916 := &yyv4915[yyj4915]
				yyv4916.CodecDecodeSelf(d)
			}

		}
		if yyrt4915 {
			for ; yyj4915 < yyl4915; yyj4915++ {
				yyv4915 = append(yyv4915, ComponentStatus{})
				yyh4915.ElemContainerState(yyj4915)
				if r.TryDecodeAsNil() {
					yyv4915[yyj4915] = ComponentStatus{}
				} else {
					yyv4917 := &yyv4915[yyj4915]
					yyv4917.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4915 := 0
		for ; !r.CheckBreak(); yyj4915++ {

			if yyj4915 >= len(yyv4915) {
				yyv4915 = append(yyv4915, ComponentStatus{}) // var yyz4915 ComponentStatus
				yyc4915 = true
			}
			yyh4915.ElemContainerState(yyj4915)
			if yyj4915 < len(yyv4915) {
				if r.TryDecodeAsNil() {
					yyv4915[yyj4915] = ComponentStatus{}
				} else {
					yyv4918 := &yyv4915[yyj4915]
					yyv4918.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4915 < len(yyv4915) {
			yyv4915 = yyv4915[:yyj4915]
			yyc4915 = true
		} else if yyj4915 == 0 && yyv4915 == nil {
			yyv4915 = []ComponentStatus{}
			yyc4915 = true
		}
	}
	yyh4915.End()
	if yyc4915 {
		*v = yyv4915
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4919 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4920 := &yyv4919
		yy4920.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4921 := *v
	yyh4921, yyl4921 := z.DecSliceHelperStart()
	var yyc4921 bool
	if yyl4921 == 0 {
		if yyv4921 == nil {
			yyv4921 = []DownwardAPIVolumeFile{}
			yyc4921 = true
		} else if len(yyv4921) != 0 {
			yyv4921 = yyv4921[:0]
			yyc4921 = true
		}
	} else if yyl4921 > 0 {
		var yyrr4921, yyrl4921 int
		var yyrt4921 bool
		if yyl4921 > cap(yyv4921) {

			yyrg4921 := len(yyv4921) > 0
			yyv24921 := yyv4921
			yyrl4921, yyrt4921 = z.DecInferLen(yyl4921, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4921 {
				if yyrl4921 <= cap(yyv4921) {
					yyv4921 = yyv4921[:yyrl4921]
				} else {
					yyv4921 = make([]DownwardAPIVolumeFile, yyrl4921)
				}
			} else {
				yyv4921 = make([]DownwardAPIVolumeFile, yyrl4921)
			}
			yyc4921 = true
			yyrr4921 = len(yyv4921)
			if yyrg4921 {
				copy(yyv4921, yyv24921)
			}
		} else if yyl4921 != len(yyv4921) {
			yyv4921 = yyv4921[:yyl4921]
			yyc4921 = true
		}
		yyj4921 := 0
		for ; yyj4921 < yyrr4921; yyj4921++ {
			yyh4921.ElemContainerState(yyj4921)
			if r.TryDecodeAsNil() {
				yyv4921[yyj4921] = DownwardAPIVolumeFile{}
			} else {
				yyv4922 := &yyv4921[yyj4921]
				yyv4922.CodecDecodeSelf(d)
			}

		}
		if yyrt4921 {
			for ; yyj4921 < yyl4921; yyj4921++ {
				yyv4921 = append(yyv4921, DownwardAPIVolumeFile{})
				yyh4921.ElemContainerState(yyj4921)
				if r.TryDecodeAsNil() {
					yyv4921[yyj4921] = DownwardAPIVolumeFile{}
				} else {
					yyv4923 := &yyv4921[yyj4921]
					yyv4923.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4921 := 0
		for ; !r.CheckBreak(); yyj4921++ {

			if yyj4921 >= len(yyv4921) {
				yyv4921 = append(yyv4921, DownwardAPIVolumeFile{}) // var yyz4921 DownwardAPIVolumeFile
				yyc4921 = true
			}
			yyh4921.ElemContainerState(yyj4921)
			if yyj4921 < len(yyv4921) {
				if r.TryDecodeAsNil() {
					yyv4921[yyj4921] = DownwardAPIVolumeFile{}
				} else {
					yyv4924 := &yyv4921[yyj4921]
					yyv4924.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4921 < len(yyv4921) {
			yyv4921 = yyv4921[:yyj4921]
			yyc4921 = true
		} else if yyj4921 == 0 && yyv4921 == nil {
			yyv4921 = []DownwardAPIVolumeFile{}
			yyc4921 = true
		}
	}
	yyh4921.End()
	if yyc4921 {
		*v = yyv4921
	}
}
