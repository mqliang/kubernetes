/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [26]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq101[24] = x.VolumeSource.AnchnetPersistentDisk != nil && x.AnchnetPersistentDisk != nil
			yyq101[25] = x.VolumeSource.AliyunPersistentDisk != nil && x.AliyunPersistentDisk != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(26)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.Cinder == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.CephFS == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.Flocker == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.FC == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.AzureFile == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.Quobyte == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.PhotonPersistentDisk == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn128 bool
			if x.VolumeSource.AnchnetPersistentDisk == nil {
				yyn128 = true
				goto LABEL128
			}
		LABEL128:
			if yyr101 || yy2arr101 {
				if yyn128 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[24] {
						if x.AnchnetPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AnchnetPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("anchnetPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn128 {
						r.EncodeNil()
					} else {
						if x.AnchnetPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AnchnetPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn129 bool
			if x.VolumeSource.AliyunPersistentDisk == nil {
				yyn129 = true
				goto LABEL129
			}
		LABEL129:
			if yyr101 || yy2arr101 {
				if yyn129 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[25] {
						if x.AliyunPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AliyunPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[25] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("aliyunPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn129 {
						r.EncodeNil()
					} else {
						if x.AliyunPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AliyunPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym130 := z.DecBinary()
	_ = yym130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct131 := r.ContainerType()
		if yyct131 == codecSelferValueTypeMap1234 {
			yyl131 := r.ReadMapStart()
			if yyl131 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl131, d)
			}
		} else if yyct131 == codecSelferValueTypeArray1234 {
			yyl131 := r.ReadArrayStart()
			if yyl131 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys132Slc
	var yyhl132 bool = l >= 0
	for yyj132 := 0; ; yyj132++ {
		if yyhl132 {
			if yyj132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys132Slc = r.DecodeBytes(yys132Slc, true, true)
		yys132 := string(yys132Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys132 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.VolumeSource.PhotonPersistentDisk == nil {
				x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "anchnetPersistentDisk":
			if x.VolumeSource.AnchnetPersistentDisk == nil {
				x.VolumeSource.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AnchnetPersistentDisk != nil {
					x.AnchnetPersistentDisk = nil
				}
			} else {
				if x.AnchnetPersistentDisk == nil {
					x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
				}
				x.AnchnetPersistentDisk.CodecDecodeSelf(d)
			}
		case "aliyunPersistentDisk":
			if x.VolumeSource.AliyunPersistentDisk == nil {
				x.VolumeSource.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AliyunPersistentDisk != nil {
					x.AliyunPersistentDisk = nil
				}
			} else {
				if x.AliyunPersistentDisk == nil {
					x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
				}
				x.AliyunPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys132)
		} // end switch yys132
	} // end for yyj132
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj159 int
	var yyb159 bool
	var yyhl159 bool = l >= 0
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PhotonPersistentDisk == nil {
		x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AnchnetPersistentDisk == nil {
		x.VolumeSource.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AnchnetPersistentDisk != nil {
			x.AnchnetPersistentDisk = nil
		}
	} else {
		if x.AnchnetPersistentDisk == nil {
			x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
		}
		x.AnchnetPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AliyunPersistentDisk == nil {
		x.VolumeSource.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AliyunPersistentDisk != nil {
			x.AliyunPersistentDisk = nil
		}
	} else {
		if x.AliyunPersistentDisk == nil {
			x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
		}
		x.AliyunPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj159++
		if yyhl159 {
			yyb159 = yyj159 > l
		} else {
			yyb159 = r.CheckBreak()
		}
		if yyb159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym186 := z.EncBinary()
		_ = yym186
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep187 := !z.EncBinary()
			yy2arr187 := z.EncBasicHandle().StructToArray
			var yyq187 [25]bool
			_, _, _ = yysep187, yyq187, yy2arr187
			const yyr187 bool = false
			yyq187[0] = x.HostPath != nil
			yyq187[1] = x.EmptyDir != nil
			yyq187[2] = x.GCEPersistentDisk != nil
			yyq187[3] = x.AWSElasticBlockStore != nil
			yyq187[4] = x.GitRepo != nil
			yyq187[5] = x.Secret != nil
			yyq187[6] = x.NFS != nil
			yyq187[7] = x.ISCSI != nil
			yyq187[8] = x.Glusterfs != nil
			yyq187[9] = x.PersistentVolumeClaim != nil
			yyq187[10] = x.RBD != nil
			yyq187[11] = x.FlexVolume != nil
			yyq187[12] = x.Cinder != nil
			yyq187[13] = x.CephFS != nil
			yyq187[14] = x.Flocker != nil
			yyq187[15] = x.DownwardAPI != nil
			yyq187[16] = x.FC != nil
			yyq187[17] = x.AzureFile != nil
			yyq187[18] = x.ConfigMap != nil
			yyq187[19] = x.VsphereVolume != nil
			yyq187[20] = x.Quobyte != nil
			yyq187[21] = x.AzureDisk != nil
			yyq187[22] = x.PhotonPersistentDisk != nil
			yyq187[23] = x.AnchnetPersistentDisk != nil
			yyq187[24] = x.AliyunPersistentDisk != nil
			var yynn187 int
			if yyr187 || yy2arr187 {
				r.EncodeArrayStart(25)
			} else {
				yynn187 = 0
				for _, b := range yyq187 {
					if b {
						yynn187++
					}
				}
				r.EncodeMapStart(yynn187)
				yynn187 = 0
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[20] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[22] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[23] {
					if x.AnchnetPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AnchnetPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("anchnetPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AnchnetPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AnchnetPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq187[24] {
					if x.AliyunPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AliyunPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq187[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("aliyunPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AliyunPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AliyunPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr187 || yy2arr187 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym213 := z.DecBinary()
	_ = yym213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct214 := r.ContainerType()
		if yyct214 == codecSelferValueTypeMap1234 {
			yyl214 := r.ReadMapStart()
			if yyl214 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl214, d)
			}
		} else if yyct214 == codecSelferValueTypeArray1234 {
			yyl214 := r.ReadArrayStart()
			if yyl214 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys215Slc
	var yyhl215 bool = l >= 0
	for yyj215 := 0; ; yyj215++ {
		if yyhl215 {
			if yyj215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys215Slc = r.DecodeBytes(yys215Slc, true, true)
		yys215 := string(yys215Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys215 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "anchnetPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.AnchnetPersistentDisk != nil {
					x.AnchnetPersistentDisk = nil
				}
			} else {
				if x.AnchnetPersistentDisk == nil {
					x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
				}
				x.AnchnetPersistentDisk.CodecDecodeSelf(d)
			}
		case "aliyunPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.AliyunPersistentDisk != nil {
					x.AliyunPersistentDisk = nil
				}
			} else {
				if x.AliyunPersistentDisk == nil {
					x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
				}
				x.AliyunPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys215)
		} // end switch yys215
	} // end for yyj215
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj241 int
	var yyb241 bool
	var yyhl241 bool = l >= 0
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AnchnetPersistentDisk != nil {
			x.AnchnetPersistentDisk = nil
		}
	} else {
		if x.AnchnetPersistentDisk == nil {
			x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
		}
		x.AnchnetPersistentDisk.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AliyunPersistentDisk != nil {
			x.AliyunPersistentDisk = nil
		}
	} else {
		if x.AliyunPersistentDisk == nil {
			x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
		}
		x.AliyunPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj241++
		if yyhl241 {
			yyb241 = yyj241 > l
		} else {
			yyb241 = r.CheckBreak()
		}
		if yyb241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym267 := z.EncBinary()
		_ = yym267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep268 := !z.EncBinary()
			yy2arr268 := z.EncBasicHandle().StructToArray
			var yyq268 [2]bool
			_, _, _ = yysep268, yyq268, yy2arr268
			const yyr268 bool = false
			yyq268[1] = x.ReadOnly != false
			var yynn268 int
			if yyr268 || yy2arr268 {
				r.EncodeArrayStart(2)
			} else {
				yynn268 = 1
				for _, b := range yyq268 {
					if b {
						yynn268++
					}
				}
				r.EncodeMapStart(yynn268)
				yynn268 = 0
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym270 := z.EncBinary()
				_ = yym270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym271 := z.EncBinary()
				_ = yym271
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[1] {
					yym273 := z.EncBinary()
					_ = yym273
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq268[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym274 := z.EncBinary()
					_ = yym274
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym275 := z.DecBinary()
	_ = yym275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct276 := r.ContainerType()
		if yyct276 == codecSelferValueTypeMap1234 {
			yyl276 := r.ReadMapStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl276, d)
			}
		} else if yyct276 == codecSelferValueTypeArray1234 {
			yyl276 := r.ReadArrayStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys277Slc
	var yyhl277 bool = l >= 0
	for yyj277 := 0; ; yyj277++ {
		if yyhl277 {
			if yyj277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys277Slc = r.DecodeBytes(yys277Slc, true, true)
		yys277 := string(yys277Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys277 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys277)
		} // end switch yys277
	} // end for yyj277
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj280 int
	var yyb280 bool
	var yyhl280 bool = l >= 0
	yyj280++
	if yyhl280 {
		yyb280 = yyj280 > l
	} else {
		yyb280 = r.CheckBreak()
	}
	if yyb280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj280++
	if yyhl280 {
		yyb280 = yyj280 > l
	} else {
		yyb280 = r.CheckBreak()
	}
	if yyb280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj280++
		if yyhl280 {
			yyb280 = yyj280 > l
		} else {
			yyb280 = r.CheckBreak()
		}
		if yyb280 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj280-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym283 := z.EncBinary()
		_ = yym283
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep284 := !z.EncBinary()
			yy2arr284 := z.EncBasicHandle().StructToArray
			var yyq284 [19]bool
			_, _, _ = yysep284, yyq284, yy2arr284
			const yyr284 bool = false
			yyq284[0] = x.GCEPersistentDisk != nil
			yyq284[1] = x.AWSElasticBlockStore != nil
			yyq284[2] = x.HostPath != nil
			yyq284[3] = x.Glusterfs != nil
			yyq284[4] = x.NFS != nil
			yyq284[5] = x.RBD != nil
			yyq284[6] = x.ISCSI != nil
			yyq284[7] = x.Cinder != nil
			yyq284[8] = x.CephFS != nil
			yyq284[9] = x.FC != nil
			yyq284[10] = x.Flocker != nil
			yyq284[11] = x.FlexVolume != nil
			yyq284[12] = x.AzureFile != nil
			yyq284[13] = x.VsphereVolume != nil
			yyq284[14] = x.Quobyte != nil
			yyq284[15] = x.AzureDisk != nil
			yyq284[16] = x.PhotonPersistentDisk != nil
			yyq284[17] = x.AnchnetPersistentDisk != nil
			yyq284[18] = x.AliyunPersistentDisk != nil
			var yynn284 int
			if yyr284 || yy2arr284 {
				r.EncodeArrayStart(19)
			} else {
				yynn284 = 0
				for _, b := range yyq284 {
					if b {
						yynn284++
					}
				}
				r.EncodeMapStart(yynn284)
				yynn284 = 0
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[14] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[16] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[17] {
					if x.AnchnetPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AnchnetPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("anchnetPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AnchnetPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AnchnetPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[18] {
					if x.AliyunPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AliyunPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("aliyunPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AliyunPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.AliyunPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym304 := z.DecBinary()
	_ = yym304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct305 := r.ContainerType()
		if yyct305 == codecSelferValueTypeMap1234 {
			yyl305 := r.ReadMapStart()
			if yyl305 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl305, d)
			}
		} else if yyct305 == codecSelferValueTypeArray1234 {
			yyl305 := r.ReadArrayStart()
			if yyl305 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys306Slc
	var yyhl306 bool = l >= 0
	for yyj306 := 0; ; yyj306++ {
		if yyhl306 {
			if yyj306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys306Slc = r.DecodeBytes(yys306Slc, true, true)
		yys306 := string(yys306Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys306 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "anchnetPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.AnchnetPersistentDisk != nil {
					x.AnchnetPersistentDisk = nil
				}
			} else {
				if x.AnchnetPersistentDisk == nil {
					x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
				}
				x.AnchnetPersistentDisk.CodecDecodeSelf(d)
			}
		case "aliyunPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.AliyunPersistentDisk != nil {
					x.AliyunPersistentDisk = nil
				}
			} else {
				if x.AliyunPersistentDisk == nil {
					x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
				}
				x.AliyunPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys306)
		} // end switch yys306
	} // end for yyj306
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj326 int
	var yyb326 bool
	var yyhl326 bool = l >= 0
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AnchnetPersistentDisk != nil {
			x.AnchnetPersistentDisk = nil
		}
	} else {
		if x.AnchnetPersistentDisk == nil {
			x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
		}
		x.AnchnetPersistentDisk.CodecDecodeSelf(d)
	}
	yyj326++
	if yyhl326 {
		yyb326 = yyj326 > l
	} else {
		yyb326 = r.CheckBreak()
	}
	if yyb326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AliyunPersistentDisk != nil {
			x.AliyunPersistentDisk = nil
		}
	} else {
		if x.AliyunPersistentDisk == nil {
			x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
		}
		x.AliyunPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj326++
		if yyhl326 {
			yyb326 = yyj326 > l
		} else {
			yyb326 = r.CheckBreak()
		}
		if yyb326 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj326-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym346 := z.EncBinary()
		_ = yym346
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep347 := !z.EncBinary()
			yy2arr347 := z.EncBasicHandle().StructToArray
			var yyq347 [5]bool
			_, _, _ = yysep347, yyq347, yy2arr347
			const yyr347 bool = false
			yyq347[0] = x.Kind != ""
			yyq347[1] = x.APIVersion != ""
			yyq347[2] = true
			yyq347[3] = true
			yyq347[4] = true
			var yynn347 int
			if yyr347 || yy2arr347 {
				r.EncodeArrayStart(5)
			} else {
				yynn347 = 0
				for _, b := range yyq347 {
					if b {
						yynn347++
					}
				}
				r.EncodeMapStart(yynn347)
				yynn347 = 0
			}
			if yyr347 || yy2arr347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq347[0] {
					yym349 := z.EncBinary()
					_ = yym349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq347[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym350 := z.EncBinary()
					_ = yym350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr347 || yy2arr347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq347[1] {
					yym352 := z.EncBinary()
					_ = yym352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq347[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym353 := z.EncBinary()
					_ = yym353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr347 || yy2arr347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq347[2] {
					yy355 := &x.ObjectMeta
					yy355.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq347[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy356 := &x.ObjectMeta
					yy356.CodecEncodeSelf(e)
				}
			}
			if yyr347 || yy2arr347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq347[3] {
					yy358 := &x.Spec
					yy358.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq347[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy359 := &x.Spec
					yy359.CodecEncodeSelf(e)
				}
			}
			if yyr347 || yy2arr347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq347[4] {
					yy361 := &x.Status
					yy361.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq347[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy362 := &x.Status
					yy362.CodecEncodeSelf(e)
				}
			}
			if yyr347 || yy2arr347 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym363 := z.DecBinary()
	_ = yym363
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct364 := r.ContainerType()
		if yyct364 == codecSelferValueTypeMap1234 {
			yyl364 := r.ReadMapStart()
			if yyl364 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl364, d)
			}
		} else if yyct364 == codecSelferValueTypeArray1234 {
			yyl364 := r.ReadArrayStart()
			if yyl364 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl364, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys365Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys365Slc
	var yyhl365 bool = l >= 0
	for yyj365 := 0; ; yyj365++ {
		if yyhl365 {
			if yyj365 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys365Slc = r.DecodeBytes(yys365Slc, true, true)
		yys365 := string(yys365Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys365 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv368 := &x.ObjectMeta
				yyv368.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv369 := &x.Spec
				yyv369.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv370 := &x.Status
				yyv370.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys365)
		} // end switch yys365
	} // end for yyj365
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj371 int
	var yyb371 bool
	var yyhl371 bool = l >= 0
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv374 := &x.ObjectMeta
		yyv374.CodecDecodeSelf(d)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv375 := &x.Spec
		yyv375.CodecDecodeSelf(d)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv376 := &x.Status
		yyv376.CodecDecodeSelf(d)
	}
	for {
		yyj371++
		if yyhl371 {
			yyb371 = yyj371 > l
		} else {
			yyb371 = r.CheckBreak()
		}
		if yyb371 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj371-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym377 := z.EncBinary()
		_ = yym377
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep378 := !z.EncBinary()
			yy2arr378 := z.EncBasicHandle().StructToArray
			var yyq378 [23]bool
			_, _, _ = yysep378, yyq378, yy2arr378
			const yyr378 bool = false
			yyq378[0] = len(x.Capacity) != 0
			yyq378[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq378[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq378[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq378[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq378[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq378[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq378[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq378[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq378[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq378[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq378[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq378[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq378[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq378[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq378[15] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq378[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq378[17] = x.PersistentVolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq378[18] = x.PersistentVolumeSource.AnchnetPersistentDisk != nil && x.AnchnetPersistentDisk != nil
			yyq378[19] = x.PersistentVolumeSource.AliyunPersistentDisk != nil && x.AliyunPersistentDisk != nil
			yyq378[20] = len(x.AccessModes) != 0
			yyq378[21] = x.ClaimRef != nil
			yyq378[22] = x.PersistentVolumeReclaimPolicy != ""
			var yynn378 int
			if yyr378 || yy2arr378 {
				r.EncodeArrayStart(23)
			} else {
				yynn378 = 0
				for _, b := range yyq378 {
					if b {
						yynn378++
					}
				}
				r.EncodeMapStart(yynn378)
				yynn378 = 0
			}
			if yyr378 || yy2arr378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq378[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq378[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn380 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn380 = true
				goto LABEL380
			}
		LABEL380:
			if yyr378 || yy2arr378 {
				if yyn380 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn380 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn381 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn381 = true
				goto LABEL381
			}
		LABEL381:
			if yyr378 || yy2arr378 {
				if yyn381 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn381 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn382 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn382 = true
				goto LABEL382
			}
		LABEL382:
			if yyr378 || yy2arr378 {
				if yyn382 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn382 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn383 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn383 = true
				goto LABEL383
			}
		LABEL383:
			if yyr378 || yy2arr378 {
				if yyn383 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn383 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn384 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn384 = true
				goto LABEL384
			}
		LABEL384:
			if yyr378 || yy2arr378 {
				if yyn384 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn384 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn385 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn385 = true
				goto LABEL385
			}
		LABEL385:
			if yyr378 || yy2arr378 {
				if yyn385 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn385 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn386 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn386 = true
				goto LABEL386
			}
		LABEL386:
			if yyr378 || yy2arr378 {
				if yyn386 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn386 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn387 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn387 = true
				goto LABEL387
			}
		LABEL387:
			if yyr378 || yy2arr378 {
				if yyn387 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn387 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn388 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn388 = true
				goto LABEL388
			}
		LABEL388:
			if yyr378 || yy2arr378 {
				if yyn388 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn388 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn389 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn389 = true
				goto LABEL389
			}
		LABEL389:
			if yyr378 || yy2arr378 {
				if yyn389 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn389 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn390 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn390 = true
				goto LABEL390
			}
		LABEL390:
			if yyr378 || yy2arr378 {
				if yyn390 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn390 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn391 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn391 = true
				goto LABEL391
			}
		LABEL391:
			if yyr378 || yy2arr378 {
				if yyn391 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn391 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn392 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn392 = true
				goto LABEL392
			}
		LABEL392:
			if yyr378 || yy2arr378 {
				if yyn392 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn392 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn393 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn393 = true
				goto LABEL393
			}
		LABEL393:
			if yyr378 || yy2arr378 {
				if yyn393 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn393 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn394 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn394 = true
				goto LABEL394
			}
		LABEL394:
			if yyr378 || yy2arr378 {
				if yyn394 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[15] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn394 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn395 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn395 = true
				goto LABEL395
			}
		LABEL395:
			if yyr378 || yy2arr378 {
				if yyn395 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn395 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn396 bool
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				yyn396 = true
				goto LABEL396
			}
		LABEL396:
			if yyr378 || yy2arr378 {
				if yyn396 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[17] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn396 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn397 bool
			if x.PersistentVolumeSource.AnchnetPersistentDisk == nil {
				yyn397 = true
				goto LABEL397
			}
		LABEL397:
			if yyr378 || yy2arr378 {
				if yyn397 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[18] {
						if x.AnchnetPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AnchnetPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("anchnetPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn397 {
						r.EncodeNil()
					} else {
						if x.AnchnetPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AnchnetPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn398 bool
			if x.PersistentVolumeSource.AliyunPersistentDisk == nil {
				yyn398 = true
				goto LABEL398
			}
		LABEL398:
			if yyr378 || yy2arr378 {
				if yyn398 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq378[19] {
						if x.AliyunPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AliyunPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq378[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("aliyunPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn398 {
						r.EncodeNil()
					} else {
						if x.AliyunPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.AliyunPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr378 || yy2arr378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq378[20] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym400 := z.EncBinary()
						_ = yym400
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq378[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym401 := z.EncBinary()
						_ = yym401
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr378 || yy2arr378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq378[21] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq378[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr378 || yy2arr378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq378[22] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq378[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr378 || yy2arr378 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym404 := z.DecBinary()
	_ = yym404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct405 := r.ContainerType()
		if yyct405 == codecSelferValueTypeMap1234 {
			yyl405 := r.ReadMapStart()
			if yyl405 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl405, d)
			}
		} else if yyct405 == codecSelferValueTypeArray1234 {
			yyl405 := r.ReadArrayStart()
			if yyl405 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys406Slc
	var yyhl406 bool = l >= 0
	for yyj406 := 0; ; yyj406++ {
		if yyhl406 {
			if yyj406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys406Slc = r.DecodeBytes(yys406Slc, true, true)
		yys406 := string(yys406Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys406 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv407 := &x.Capacity
				yyv407.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "anchnetPersistentDisk":
			if x.PersistentVolumeSource.AnchnetPersistentDisk == nil {
				x.PersistentVolumeSource.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AnchnetPersistentDisk != nil {
					x.AnchnetPersistentDisk = nil
				}
			} else {
				if x.AnchnetPersistentDisk == nil {
					x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
				}
				x.AnchnetPersistentDisk.CodecDecodeSelf(d)
			}
		case "aliyunPersistentDisk":
			if x.PersistentVolumeSource.AliyunPersistentDisk == nil {
				x.PersistentVolumeSource.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AliyunPersistentDisk != nil {
					x.AliyunPersistentDisk = nil
				}
			} else {
				if x.AliyunPersistentDisk == nil {
					x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
				}
				x.AliyunPersistentDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv427 := &x.AccessModes
				yym428 := z.DecBinary()
				_ = yym428
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv427), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys406)
		} // end switch yys406
	} // end for yyj406
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj431 int
	var yyb431 bool
	var yyhl431 bool = l >= 0
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv432 := &x.Capacity
		yyv432.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
		x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AnchnetPersistentDisk == nil {
		x.PersistentVolumeSource.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AnchnetPersistentDisk != nil {
			x.AnchnetPersistentDisk = nil
		}
	} else {
		if x.AnchnetPersistentDisk == nil {
			x.AnchnetPersistentDisk = new(AnchnetPersistentDiskVolumeSource)
		}
		x.AnchnetPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AliyunPersistentDisk == nil {
		x.PersistentVolumeSource.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AliyunPersistentDisk != nil {
			x.AliyunPersistentDisk = nil
		}
	} else {
		if x.AliyunPersistentDisk == nil {
			x.AliyunPersistentDisk = new(AliyunPersistentDiskVolumeSource)
		}
		x.AliyunPersistentDisk.CodecDecodeSelf(d)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv452 := &x.AccessModes
		yym453 := z.DecBinary()
		_ = yym453
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv452), d)
		}
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj431++
		if yyhl431 {
			yyb431 = yyj431 > l
		} else {
			yyb431 = r.CheckBreak()
		}
		if yyb431 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj431-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym456 := z.EncBinary()
	_ = yym456
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym457 := z.DecBinary()
	_ = yym457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym458 := z.EncBinary()
		_ = yym458
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep459 := !z.EncBinary()
			yy2arr459 := z.EncBasicHandle().StructToArray
			var yyq459 [3]bool
			_, _, _ = yysep459, yyq459, yy2arr459
			const yyr459 bool = false
			yyq459[0] = x.Phase != ""
			yyq459[1] = x.Message != ""
			yyq459[2] = x.Reason != ""
			var yynn459 int
			if yyr459 || yy2arr459 {
				r.EncodeArrayStart(3)
			} else {
				yynn459 = 0
				for _, b := range yyq459 {
					if b {
						yynn459++
					}
				}
				r.EncodeMapStart(yynn459)
				yynn459 = 0
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq459[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[1] {
					yym462 := z.EncBinary()
					_ = yym462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq459[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[2] {
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq459[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym466 := z.EncBinary()
					_ = yym466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym467 := z.DecBinary()
	_ = yym467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct468 := r.ContainerType()
		if yyct468 == codecSelferValueTypeMap1234 {
			yyl468 := r.ReadMapStart()
			if yyl468 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl468, d)
			}
		} else if yyct468 == codecSelferValueTypeArray1234 {
			yyl468 := r.ReadArrayStart()
			if yyl468 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys469Slc
	var yyhl469 bool = l >= 0
	for yyj469 := 0; ; yyj469++ {
		if yyhl469 {
			if yyj469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys469Slc = r.DecodeBytes(yys469Slc, true, true)
		yys469 := string(yys469Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys469 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys469)
		} // end switch yys469
	} // end for yyj469
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj473 int
	var yyb473 bool
	var yyhl473 bool = l >= 0
	yyj473++
	if yyhl473 {
		yyb473 = yyj473 > l
	} else {
		yyb473 = r.CheckBreak()
	}
	if yyb473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj473++
	if yyhl473 {
		yyb473 = yyj473 > l
	} else {
		yyb473 = r.CheckBreak()
	}
	if yyb473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj473++
	if yyhl473 {
		yyb473 = yyj473 > l
	} else {
		yyb473 = r.CheckBreak()
	}
	if yyb473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj473++
		if yyhl473 {
			yyb473 = yyj473 > l
		} else {
			yyb473 = r.CheckBreak()
		}
		if yyb473 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj473-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym477 := z.EncBinary()
		_ = yym477
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep478 := !z.EncBinary()
			yy2arr478 := z.EncBasicHandle().StructToArray
			var yyq478 [4]bool
			_, _, _ = yysep478, yyq478, yy2arr478
			const yyr478 bool = false
			yyq478[0] = x.Kind != ""
			yyq478[1] = x.APIVersion != ""
			yyq478[2] = true
			var yynn478 int
			if yyr478 || yy2arr478 {
				r.EncodeArrayStart(4)
			} else {
				yynn478 = 1
				for _, b := range yyq478 {
					if b {
						yynn478++
					}
				}
				r.EncodeMapStart(yynn478)
				yynn478 = 0
			}
			if yyr478 || yy2arr478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq478[0] {
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq478[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym481 := z.EncBinary()
					_ = yym481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr478 || yy2arr478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq478[1] {
					yym483 := z.EncBinary()
					_ = yym483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq478[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym484 := z.EncBinary()
					_ = yym484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr478 || yy2arr478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq478[2] {
					yy486 := &x.ListMeta
					yym487 := z.EncBinary()
					_ = yym487
					if false {
					} else if z.HasExtensions() && z.EncExt(yy486) {
					} else {
						z.EncFallback(yy486)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq478[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy488 := &x.ListMeta
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else if z.HasExtensions() && z.EncExt(yy488) {
					} else {
						z.EncFallback(yy488)
					}
				}
			}
			if yyr478 || yy2arr478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr478 || yy2arr478 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym493 := z.DecBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct494 := r.ContainerType()
		if yyct494 == codecSelferValueTypeMap1234 {
			yyl494 := r.ReadMapStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl494, d)
			}
		} else if yyct494 == codecSelferValueTypeArray1234 {
			yyl494 := r.ReadArrayStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys495Slc
	var yyhl495 bool = l >= 0
	for yyj495 := 0; ; yyj495++ {
		if yyhl495 {
			if yyj495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys495Slc = r.DecodeBytes(yys495Slc, true, true)
		yys495 := string(yys495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys495 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv498 := &x.ListMeta
				yym499 := z.DecBinary()
				_ = yym499
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv498) {
				} else {
					z.DecFallback(yyv498, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv500 := &x.Items
				yym501 := z.DecBinary()
				_ = yym501
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv500), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys495)
		} // end switch yys495
	} // end for yyj495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj502 int
	var yyb502 bool
	var yyhl502 bool = l >= 0
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv505 := &x.ListMeta
		yym506 := z.DecBinary()
		_ = yym506
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv505) {
		} else {
			z.DecFallback(yyv505, false)
		}
	}
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv507 := &x.Items
		yym508 := z.DecBinary()
		_ = yym508
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv507), d)
		}
	}
	for {
		yyj502++
		if yyhl502 {
			yyb502 = yyj502 > l
		} else {
			yyb502 = r.CheckBreak()
		}
		if yyb502 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj502-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym509 := z.EncBinary()
		_ = yym509
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep510 := !z.EncBinary()
			yy2arr510 := z.EncBasicHandle().StructToArray
			var yyq510 [5]bool
			_, _, _ = yysep510, yyq510, yy2arr510
			const yyr510 bool = false
			yyq510[0] = x.Kind != ""
			yyq510[1] = x.APIVersion != ""
			yyq510[2] = true
			yyq510[3] = true
			yyq510[4] = true
			var yynn510 int
			if yyr510 || yy2arr510 {
				r.EncodeArrayStart(5)
			} else {
				yynn510 = 0
				for _, b := range yyq510 {
					if b {
						yynn510++
					}
				}
				r.EncodeMapStart(yynn510)
				yynn510 = 0
			}
			if yyr510 || yy2arr510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq510[0] {
					yym512 := z.EncBinary()
					_ = yym512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq510[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym513 := z.EncBinary()
					_ = yym513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr510 || yy2arr510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq510[1] {
					yym515 := z.EncBinary()
					_ = yym515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq510[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr510 || yy2arr510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq510[2] {
					yy518 := &x.ObjectMeta
					yy518.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq510[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy519 := &x.ObjectMeta
					yy519.CodecEncodeSelf(e)
				}
			}
			if yyr510 || yy2arr510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq510[3] {
					yy521 := &x.Spec
					yy521.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq510[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy522 := &x.Spec
					yy522.CodecEncodeSelf(e)
				}
			}
			if yyr510 || yy2arr510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq510[4] {
					yy524 := &x.Status
					yy524.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq510[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy525 := &x.Status
					yy525.CodecEncodeSelf(e)
				}
			}
			if yyr510 || yy2arr510 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym526 := z.DecBinary()
	_ = yym526
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct527 := r.ContainerType()
		if yyct527 == codecSelferValueTypeMap1234 {
			yyl527 := r.ReadMapStart()
			if yyl527 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl527, d)
			}
		} else if yyct527 == codecSelferValueTypeArray1234 {
			yyl527 := r.ReadArrayStart()
			if yyl527 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl527, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys528Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys528Slc
	var yyhl528 bool = l >= 0
	for yyj528 := 0; ; yyj528++ {
		if yyhl528 {
			if yyj528 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys528Slc = r.DecodeBytes(yys528Slc, true, true)
		yys528 := string(yys528Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys528 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv531 := &x.ObjectMeta
				yyv531.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv532 := &x.Spec
				yyv532.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv533 := &x.Status
				yyv533.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys528)
		} // end switch yys528
	} // end for yyj528
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj534 int
	var yyb534 bool
	var yyhl534 bool = l >= 0
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv537 := &x.ObjectMeta
		yyv537.CodecDecodeSelf(d)
	}
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv538 := &x.Spec
		yyv538.CodecDecodeSelf(d)
	}
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv539 := &x.Status
		yyv539.CodecDecodeSelf(d)
	}
	for {
		yyj534++
		if yyhl534 {
			yyb534 = yyj534 > l
		} else {
			yyb534 = r.CheckBreak()
		}
		if yyb534 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj534-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym540 := z.EncBinary()
		_ = yym540
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep541 := !z.EncBinary()
			yy2arr541 := z.EncBasicHandle().StructToArray
			var yyq541 [4]bool
			_, _, _ = yysep541, yyq541, yy2arr541
			const yyr541 bool = false
			yyq541[0] = x.Kind != ""
			yyq541[1] = x.APIVersion != ""
			yyq541[2] = true
			var yynn541 int
			if yyr541 || yy2arr541 {
				r.EncodeArrayStart(4)
			} else {
				yynn541 = 1
				for _, b := range yyq541 {
					if b {
						yynn541++
					}
				}
				r.EncodeMapStart(yynn541)
				yynn541 = 0
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq541[0] {
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq541[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym544 := z.EncBinary()
					_ = yym544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq541[1] {
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq541[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym547 := z.EncBinary()
					_ = yym547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq541[2] {
					yy549 := &x.ListMeta
					yym550 := z.EncBinary()
					_ = yym550
					if false {
					} else if z.HasExtensions() && z.EncExt(yy549) {
					} else {
						z.EncFallback(yy549)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq541[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy551 := &x.ListMeta
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else if z.HasExtensions() && z.EncExt(yy551) {
					} else {
						z.EncFallback(yy551)
					}
				}
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym554 := z.EncBinary()
					_ = yym554
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym556 := z.DecBinary()
	_ = yym556
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct557 := r.ContainerType()
		if yyct557 == codecSelferValueTypeMap1234 {
			yyl557 := r.ReadMapStart()
			if yyl557 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl557, d)
			}
		} else if yyct557 == codecSelferValueTypeArray1234 {
			yyl557 := r.ReadArrayStart()
			if yyl557 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl557, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys558Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys558Slc
	var yyhl558 bool = l >= 0
	for yyj558 := 0; ; yyj558++ {
		if yyhl558 {
			if yyj558 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys558Slc = r.DecodeBytes(yys558Slc, true, true)
		yys558 := string(yys558Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys558 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv561 := &x.ListMeta
				yym562 := z.DecBinary()
				_ = yym562
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv561) {
				} else {
					z.DecFallback(yyv561, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv563 := &x.Items
				yym564 := z.DecBinary()
				_ = yym564
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv563), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys558)
		} // end switch yys558
	} // end for yyj558
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj565 int
	var yyb565 bool
	var yyhl565 bool = l >= 0
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv568 := &x.ListMeta
		yym569 := z.DecBinary()
		_ = yym569
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv568) {
		} else {
			z.DecFallback(yyv568, false)
		}
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv570 := &x.Items
		yym571 := z.DecBinary()
		_ = yym571
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv570), d)
		}
	}
	for {
		yyj565++
		if yyhl565 {
			yyb565 = yyj565 > l
		} else {
			yyb565 = r.CheckBreak()
		}
		if yyb565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym572 := z.EncBinary()
		_ = yym572
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep573 := !z.EncBinary()
			yy2arr573 := z.EncBasicHandle().StructToArray
			var yyq573 [4]bool
			_, _, _ = yysep573, yyq573, yy2arr573
			const yyr573 bool = false
			yyq573[0] = len(x.AccessModes) != 0
			yyq573[1] = x.Selector != nil
			yyq573[2] = true
			yyq573[3] = x.VolumeName != ""
			var yynn573 int
			if yyr573 || yy2arr573 {
				r.EncodeArrayStart(4)
			} else {
				yynn573 = 0
				for _, b := range yyq573 {
					if b {
						yynn573++
					}
				}
				r.EncodeMapStart(yynn573)
				yynn573 = 0
			}
			if yyr573 || yy2arr573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq573[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym575 := z.EncBinary()
						_ = yym575
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq573[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym576 := z.EncBinary()
						_ = yym576
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr573 || yy2arr573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq573[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym578 := z.EncBinary()
						_ = yym578
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq573[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym579 := z.EncBinary()
						_ = yym579
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr573 || yy2arr573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq573[2] {
					yy581 := &x.Resources
					yy581.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq573[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy582 := &x.Resources
					yy582.CodecEncodeSelf(e)
				}
			}
			if yyr573 || yy2arr573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq573[3] {
					yym584 := z.EncBinary()
					_ = yym584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq573[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym585 := z.EncBinary()
					_ = yym585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr573 || yy2arr573 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym586 := z.DecBinary()
	_ = yym586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct587 := r.ContainerType()
		if yyct587 == codecSelferValueTypeMap1234 {
			yyl587 := r.ReadMapStart()
			if yyl587 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl587, d)
			}
		} else if yyct587 == codecSelferValueTypeArray1234 {
			yyl587 := r.ReadArrayStart()
			if yyl587 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl587, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys588Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys588Slc
	var yyhl588 bool = l >= 0
	for yyj588 := 0; ; yyj588++ {
		if yyhl588 {
			if yyj588 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys588Slc = r.DecodeBytes(yys588Slc, true, true)
		yys588 := string(yys588Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys588 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv589 := &x.AccessModes
				yym590 := z.DecBinary()
				_ = yym590
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv589), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym592 := z.DecBinary()
				_ = yym592
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv593 := &x.Resources
				yyv593.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys588)
		} // end switch yys588
	} // end for yyj588
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj595 int
	var yyb595 bool
	var yyhl595 bool = l >= 0
	yyj595++
	if yyhl595 {
		yyb595 = yyj595 > l
	} else {
		yyb595 = r.CheckBreak()
	}
	if yyb595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv596 := &x.AccessModes
		yym597 := z.DecBinary()
		_ = yym597
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv596), d)
		}
	}
	yyj595++
	if yyhl595 {
		yyb595 = yyj595 > l
	} else {
		yyb595 = r.CheckBreak()
	}
	if yyb595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym599 := z.DecBinary()
		_ = yym599
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj595++
	if yyhl595 {
		yyb595 = yyj595 > l
	} else {
		yyb595 = r.CheckBreak()
	}
	if yyb595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv600 := &x.Resources
		yyv600.CodecDecodeSelf(d)
	}
	yyj595++
	if yyhl595 {
		yyb595 = yyj595 > l
	} else {
		yyb595 = r.CheckBreak()
	}
	if yyb595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj595++
		if yyhl595 {
			yyb595 = yyj595 > l
		} else {
			yyb595 = r.CheckBreak()
		}
		if yyb595 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj595-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym602 := z.EncBinary()
		_ = yym602
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep603 := !z.EncBinary()
			yy2arr603 := z.EncBasicHandle().StructToArray
			var yyq603 [3]bool
			_, _, _ = yysep603, yyq603, yy2arr603
			const yyr603 bool = false
			yyq603[0] = x.Phase != ""
			yyq603[1] = len(x.AccessModes) != 0
			yyq603[2] = len(x.Capacity) != 0
			var yynn603 int
			if yyr603 || yy2arr603 {
				r.EncodeArrayStart(3)
			} else {
				yynn603 = 0
				for _, b := range yyq603 {
					if b {
						yynn603++
					}
				}
				r.EncodeMapStart(yynn603)
				yynn603 = 0
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq603[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq603[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq603[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym606 := z.EncBinary()
						_ = yym606
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq603[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym607 := z.EncBinary()
						_ = yym607
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq603[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq603[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym609 := z.DecBinary()
	_ = yym609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct610 := r.ContainerType()
		if yyct610 == codecSelferValueTypeMap1234 {
			yyl610 := r.ReadMapStart()
			if yyl610 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl610, d)
			}
		} else if yyct610 == codecSelferValueTypeArray1234 {
			yyl610 := r.ReadArrayStart()
			if yyl610 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl610, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys611Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys611Slc
	var yyhl611 bool = l >= 0
	for yyj611 := 0; ; yyj611++ {
		if yyhl611 {
			if yyj611 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys611Slc = r.DecodeBytes(yys611Slc, true, true)
		yys611 := string(yys611Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys611 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv613 := &x.AccessModes
				yym614 := z.DecBinary()
				_ = yym614
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv613), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv615 := &x.Capacity
				yyv615.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys611)
		} // end switch yys611
	} // end for yyj611
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj616 int
	var yyb616 bool
	var yyhl616 bool = l >= 0
	yyj616++
	if yyhl616 {
		yyb616 = yyj616 > l
	} else {
		yyb616 = r.CheckBreak()
	}
	if yyb616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj616++
	if yyhl616 {
		yyb616 = yyj616 > l
	} else {
		yyb616 = r.CheckBreak()
	}
	if yyb616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv618 := &x.AccessModes
		yym619 := z.DecBinary()
		_ = yym619
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv618), d)
		}
	}
	yyj616++
	if yyhl616 {
		yyb616 = yyj616 > l
	} else {
		yyb616 = r.CheckBreak()
	}
	if yyb616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv620 := &x.Capacity
		yyv620.CodecDecodeSelf(d)
	}
	for {
		yyj616++
		if yyhl616 {
			yyb616 = yyj616 > l
		} else {
			yyb616 = r.CheckBreak()
		}
		if yyb616 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj616-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym621 := z.EncBinary()
	_ = yym621
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym622 := z.DecBinary()
	_ = yym622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym623 := z.EncBinary()
	_ = yym623
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym625 := z.EncBinary()
	_ = yym625
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym627 := z.EncBinary()
		_ = yym627
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep628 := !z.EncBinary()
			yy2arr628 := z.EncBasicHandle().StructToArray
			var yyq628 [1]bool
			_, _, _ = yysep628, yyq628, yy2arr628
			const yyr628 bool = false
			var yynn628 int
			if yyr628 || yy2arr628 {
				r.EncodeArrayStart(1)
			} else {
				yynn628 = 1
				for _, b := range yyq628 {
					if b {
						yynn628++
					}
				}
				r.EncodeMapStart(yynn628)
				yynn628 = 0
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym630 := z.EncBinary()
				_ = yym630
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym631 := z.EncBinary()
				_ = yym631
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym632 := z.DecBinary()
	_ = yym632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct633 := r.ContainerType()
		if yyct633 == codecSelferValueTypeMap1234 {
			yyl633 := r.ReadMapStart()
			if yyl633 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl633, d)
			}
		} else if yyct633 == codecSelferValueTypeArray1234 {
			yyl633 := r.ReadArrayStart()
			if yyl633 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl633, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys634Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys634Slc
	var yyhl634 bool = l >= 0
	for yyj634 := 0; ; yyj634++ {
		if yyhl634 {
			if yyj634 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys634Slc = r.DecodeBytes(yys634Slc, true, true)
		yys634 := string(yys634Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys634 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys634)
		} // end switch yys634
	} // end for yyj634
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj636 int
	var yyb636 bool
	var yyhl636 bool = l >= 0
	yyj636++
	if yyhl636 {
		yyb636 = yyj636 > l
	} else {
		yyb636 = r.CheckBreak()
	}
	if yyb636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj636++
		if yyhl636 {
			yyb636 = yyj636 > l
		} else {
			yyb636 = r.CheckBreak()
		}
		if yyb636 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj636-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym638 := z.EncBinary()
		_ = yym638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep639 := !z.EncBinary()
			yy2arr639 := z.EncBasicHandle().StructToArray
			var yyq639 [1]bool
			_, _, _ = yysep639, yyq639, yy2arr639
			const yyr639 bool = false
			yyq639[0] = x.Medium != ""
			var yynn639 int
			if yyr639 || yy2arr639 {
				r.EncodeArrayStart(1)
			} else {
				yynn639 = 0
				for _, b := range yyq639 {
					if b {
						yynn639++
					}
				}
				r.EncodeMapStart(yynn639)
				yynn639 = 0
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq639[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq639[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym641 := z.DecBinary()
	_ = yym641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct642 := r.ContainerType()
		if yyct642 == codecSelferValueTypeMap1234 {
			yyl642 := r.ReadMapStart()
			if yyl642 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl642, d)
			}
		} else if yyct642 == codecSelferValueTypeArray1234 {
			yyl642 := r.ReadArrayStart()
			if yyl642 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl642, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys643Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys643Slc
	var yyhl643 bool = l >= 0
	for yyj643 := 0; ; yyj643++ {
		if yyhl643 {
			if yyj643 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys643Slc = r.DecodeBytes(yys643Slc, true, true)
		yys643 := string(yys643Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys643 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys643)
		} // end switch yys643
	} // end for yyj643
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj645 int
	var yyb645 bool
	var yyhl645 bool = l >= 0
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj645++
		if yyhl645 {
			yyb645 = yyj645 > l
		} else {
			yyb645 = r.CheckBreak()
		}
		if yyb645 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj645-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym647 := z.EncBinary()
		_ = yym647
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep648 := !z.EncBinary()
			yy2arr648 := z.EncBasicHandle().StructToArray
			var yyq648 [3]bool
			_, _, _ = yysep648, yyq648, yy2arr648
			const yyr648 bool = false
			yyq648[2] = x.ReadOnly != false
			var yynn648 int
			if yyr648 || yy2arr648 {
				r.EncodeArrayStart(3)
			} else {
				yynn648 = 2
				for _, b := range yyq648 {
					if b {
						yynn648++
					}
				}
				r.EncodeMapStart(yynn648)
				yynn648 = 0
			}
			if yyr648 || yy2arr648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym650 := z.EncBinary()
				_ = yym650
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym651 := z.EncBinary()
				_ = yym651
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr648 || yy2arr648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym653 := z.EncBinary()
				_ = yym653
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym654 := z.EncBinary()
				_ = yym654
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr648 || yy2arr648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq648[2] {
					yym656 := z.EncBinary()
					_ = yym656
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq648[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr648 || yy2arr648 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym658 := z.DecBinary()
	_ = yym658
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct659 := r.ContainerType()
		if yyct659 == codecSelferValueTypeMap1234 {
			yyl659 := r.ReadMapStart()
			if yyl659 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl659, d)
			}
		} else if yyct659 == codecSelferValueTypeArray1234 {
			yyl659 := r.ReadArrayStart()
			if yyl659 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl659, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys660Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys660Slc
	var yyhl660 bool = l >= 0
	for yyj660 := 0; ; yyj660++ {
		if yyhl660 {
			if yyj660 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys660Slc = r.DecodeBytes(yys660Slc, true, true)
		yys660 := string(yys660Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys660 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys660)
		} // end switch yys660
	} // end for yyj660
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj664 int
	var yyb664 bool
	var yyhl664 bool = l >= 0
	yyj664++
	if yyhl664 {
		yyb664 = yyj664 > l
	} else {
		yyb664 = r.CheckBreak()
	}
	if yyb664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj664++
	if yyhl664 {
		yyb664 = yyj664 > l
	} else {
		yyb664 = r.CheckBreak()
	}
	if yyb664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj664++
	if yyhl664 {
		yyb664 = yyj664 > l
	} else {
		yyb664 = r.CheckBreak()
	}
	if yyb664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj664++
		if yyhl664 {
			yyb664 = yyj664 > l
		} else {
			yyb664 = r.CheckBreak()
		}
		if yyb664 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj664-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym668 := z.EncBinary()
		_ = yym668
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep669 := !z.EncBinary()
			yy2arr669 := z.EncBasicHandle().StructToArray
			var yyq669 [8]bool
			_, _, _ = yysep669, yyq669, yy2arr669
			const yyr669 bool = false
			yyq669[2] = x.FSType != ""
			yyq669[3] = x.RBDPool != ""
			yyq669[4] = x.RadosUser != ""
			yyq669[5] = x.Keyring != ""
			yyq669[6] = x.SecretRef != nil
			yyq669[7] = x.ReadOnly != false
			var yynn669 int
			if yyr669 || yy2arr669 {
				r.EncodeArrayStart(8)
			} else {
				yynn669 = 2
				for _, b := range yyq669 {
					if b {
						yynn669++
					}
				}
				r.EncodeMapStart(yynn669)
				yynn669 = 0
			}
			if yyr669 || yy2arr669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr669 || yy2arr669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym674 := z.EncBinary()
				_ = yym674
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym675 := z.EncBinary()
				_ = yym675
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr669 || yy2arr669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq669[2] {
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq669[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr669 || yy2arr669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq669[3] {
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq669[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr669 || yy2arr669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq669[4] {
					yym683 := z.EncBinary()
					_ = yym683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq669[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr669 || yy2arr669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq669[5] {
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq669[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr669 || yy2arr669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq669[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq669[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr669 || yy2arr669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq669[7] {
					yym690 := z.EncBinary()
					_ = yym690
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq669[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr669 || yy2arr669 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym692 := z.DecBinary()
	_ = yym692
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct693 := r.ContainerType()
		if yyct693 == codecSelferValueTypeMap1234 {
			yyl693 := r.ReadMapStart()
			if yyl693 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl693, d)
			}
		} else if yyct693 == codecSelferValueTypeArray1234 {
			yyl693 := r.ReadArrayStart()
			if yyl693 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl693, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys694Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys694Slc
	var yyhl694 bool = l >= 0
	for yyj694 := 0; ; yyj694++ {
		if yyhl694 {
			if yyj694 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys694Slc = r.DecodeBytes(yys694Slc, true, true)
		yys694 := string(yys694Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys694 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv695 := &x.CephMonitors
				yym696 := z.DecBinary()
				_ = yym696
				if false {
				} else {
					z.F.DecSliceStringX(yyv695, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys694)
		} // end switch yys694
	} // end for yyj694
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj704 int
	var yyb704 bool
	var yyhl704 bool = l >= 0
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv705 := &x.CephMonitors
		yym706 := z.DecBinary()
		_ = yym706
		if false {
		} else {
			z.F.DecSliceStringX(yyv705, false, d)
		}
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj704++
		if yyhl704 {
			yyb704 = yyj704 > l
		} else {
			yyb704 = r.CheckBreak()
		}
		if yyb704 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj704-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym714 := z.EncBinary()
		_ = yym714
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep715 := !z.EncBinary()
			yy2arr715 := z.EncBasicHandle().StructToArray
			var yyq715 [3]bool
			_, _, _ = yysep715, yyq715, yy2arr715
			const yyr715 bool = false
			yyq715[1] = x.FSType != ""
			yyq715[2] = x.ReadOnly != false
			var yynn715 int
			if yyr715 || yy2arr715 {
				r.EncodeArrayStart(3)
			} else {
				yynn715 = 1
				for _, b := range yyq715 {
					if b {
						yynn715++
					}
				}
				r.EncodeMapStart(yynn715)
				yynn715 = 0
			}
			if yyr715 || yy2arr715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym717 := z.EncBinary()
				_ = yym717
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym718 := z.EncBinary()
				_ = yym718
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr715 || yy2arr715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq715[1] {
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq715[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr715 || yy2arr715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq715[2] {
					yym723 := z.EncBinary()
					_ = yym723
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq715[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym724 := z.EncBinary()
					_ = yym724
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr715 || yy2arr715 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym725 := z.DecBinary()
	_ = yym725
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct726 := r.ContainerType()
		if yyct726 == codecSelferValueTypeMap1234 {
			yyl726 := r.ReadMapStart()
			if yyl726 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl726, d)
			}
		} else if yyct726 == codecSelferValueTypeArray1234 {
			yyl726 := r.ReadArrayStart()
			if yyl726 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl726, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys727Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys727Slc
	var yyhl727 bool = l >= 0
	for yyj727 := 0; ; yyj727++ {
		if yyhl727 {
			if yyj727 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys727Slc = r.DecodeBytes(yys727Slc, true, true)
		yys727 := string(yys727Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys727 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys727)
		} // end switch yys727
	} // end for yyj727
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj731 int
	var yyb731 bool
	var yyhl731 bool = l >= 0
	yyj731++
	if yyhl731 {
		yyb731 = yyj731 > l
	} else {
		yyb731 = r.CheckBreak()
	}
	if yyb731 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj731++
	if yyhl731 {
		yyb731 = yyj731 > l
	} else {
		yyb731 = r.CheckBreak()
	}
	if yyb731 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj731++
	if yyhl731 {
		yyb731 = yyj731 > l
	} else {
		yyb731 = r.CheckBreak()
	}
	if yyb731 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj731++
		if yyhl731 {
			yyb731 = yyj731 > l
		} else {
			yyb731 = r.CheckBreak()
		}
		if yyb731 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj731-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym735 := z.EncBinary()
		_ = yym735
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep736 := !z.EncBinary()
			yy2arr736 := z.EncBasicHandle().StructToArray
			var yyq736 [6]bool
			_, _, _ = yysep736, yyq736, yy2arr736
			const yyr736 bool = false
			yyq736[1] = x.Path != ""
			yyq736[2] = x.User != ""
			yyq736[3] = x.SecretFile != ""
			yyq736[4] = x.SecretRef != nil
			yyq736[5] = x.ReadOnly != false
			var yynn736 int
			if yyr736 || yy2arr736 {
				r.EncodeArrayStart(6)
			} else {
				yynn736 = 1
				for _, b := range yyq736 {
					if b {
						yynn736++
					}
				}
				r.EncodeMapStart(yynn736)
				yynn736 = 0
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[1] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq736[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[2] {
					yym744 := z.EncBinary()
					_ = yym744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq736[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym745 := z.EncBinary()
					_ = yym745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[3] {
					yym747 := z.EncBinary()
					_ = yym747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq736[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym748 := z.EncBinary()
					_ = yym748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq736[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[5] {
					yym751 := z.EncBinary()
					_ = yym751
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq736[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym752 := z.EncBinary()
					_ = yym752
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym753 := z.DecBinary()
	_ = yym753
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct754 := r.ContainerType()
		if yyct754 == codecSelferValueTypeMap1234 {
			yyl754 := r.ReadMapStart()
			if yyl754 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl754, d)
			}
		} else if yyct754 == codecSelferValueTypeArray1234 {
			yyl754 := r.ReadArrayStart()
			if yyl754 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl754, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys755Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys755Slc
	var yyhl755 bool = l >= 0
	for yyj755 := 0; ; yyj755++ {
		if yyhl755 {
			if yyj755 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys755Slc = r.DecodeBytes(yys755Slc, true, true)
		yys755 := string(yys755Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys755 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv756 := &x.Monitors
				yym757 := z.DecBinary()
				_ = yym757
				if false {
				} else {
					z.F.DecSliceStringX(yyv756, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys755)
		} // end switch yys755
	} // end for yyj755
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj763 int
	var yyb763 bool
	var yyhl763 bool = l >= 0
	yyj763++
	if yyhl763 {
		yyb763 = yyj763 > l
	} else {
		yyb763 = r.CheckBreak()
	}
	if yyb763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv764 := &x.Monitors
		yym765 := z.DecBinary()
		_ = yym765
		if false {
		} else {
			z.F.DecSliceStringX(yyv764, false, d)
		}
	}
	yyj763++
	if yyhl763 {
		yyb763 = yyj763 > l
	} else {
		yyb763 = r.CheckBreak()
	}
	if yyb763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj763++
	if yyhl763 {
		yyb763 = yyj763 > l
	} else {
		yyb763 = r.CheckBreak()
	}
	if yyb763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj763++
	if yyhl763 {
		yyb763 = yyj763 > l
	} else {
		yyb763 = r.CheckBreak()
	}
	if yyb763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj763++
	if yyhl763 {
		yyb763 = yyj763 > l
	} else {
		yyb763 = r.CheckBreak()
	}
	if yyb763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj763++
	if yyhl763 {
		yyb763 = yyj763 > l
	} else {
		yyb763 = r.CheckBreak()
	}
	if yyb763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj763++
		if yyhl763 {
			yyb763 = yyj763 > l
		} else {
			yyb763 = r.CheckBreak()
		}
		if yyb763 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj763-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym771 := z.EncBinary()
		_ = yym771
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep772 := !z.EncBinary()
			yy2arr772 := z.EncBasicHandle().StructToArray
			var yyq772 [2]bool
			_, _, _ = yysep772, yyq772, yy2arr772
			const yyr772 bool = false
			yyq772[0] = x.DatasetName != ""
			yyq772[1] = x.DatasetUUID != ""
			var yynn772 int
			if yyr772 || yy2arr772 {
				r.EncodeArrayStart(2)
			} else {
				yynn772 = 0
				for _, b := range yyq772 {
					if b {
						yynn772++
					}
				}
				r.EncodeMapStart(yynn772)
				yynn772 = 0
			}
			if yyr772 || yy2arr772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq772[0] {
					yym774 := z.EncBinary()
					_ = yym774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq772[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym775 := z.EncBinary()
					_ = yym775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				}
			}
			if yyr772 || yy2arr772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq772[1] {
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq772[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetUUID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym778 := z.EncBinary()
					_ = yym778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				}
			}
			if yyr772 || yy2arr772 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym779 := z.DecBinary()
	_ = yym779
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct780 := r.ContainerType()
		if yyct780 == codecSelferValueTypeMap1234 {
			yyl780 := r.ReadMapStart()
			if yyl780 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl780, d)
			}
		} else if yyct780 == codecSelferValueTypeArray1234 {
			yyl780 := r.ReadArrayStart()
			if yyl780 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl780, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys781Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys781Slc
	var yyhl781 bool = l >= 0
	for yyj781 := 0; ; yyj781++ {
		if yyhl781 {
			if yyj781 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys781Slc = r.DecodeBytes(yys781Slc, true, true)
		yys781 := string(yys781Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys781 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		case "datasetUUID":
			if r.TryDecodeAsNil() {
				x.DatasetUUID = ""
			} else {
				x.DatasetUUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys781)
		} // end switch yys781
	} // end for yyj781
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj784 int
	var yyb784 bool
	var yyhl784 bool = l >= 0
	yyj784++
	if yyhl784 {
		yyb784 = yyj784 > l
	} else {
		yyb784 = r.CheckBreak()
	}
	if yyb784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	yyj784++
	if yyhl784 {
		yyb784 = yyj784 > l
	} else {
		yyb784 = r.CheckBreak()
	}
	if yyb784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetUUID = ""
	} else {
		x.DatasetUUID = string(r.DecodeString())
	}
	for {
		yyj784++
		if yyhl784 {
			yyb784 = yyj784 > l
		} else {
			yyb784 = r.CheckBreak()
		}
		if yyb784 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj784-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym787 := z.EncBinary()
	_ = yym787
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym788 := z.DecBinary()
	_ = yym788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym789 := z.EncBinary()
	_ = yym789
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym790 := z.DecBinary()
	_ = yym790
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AnchnetPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym791 := z.EncBinary()
		_ = yym791
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep792 := !z.EncBinary()
			yy2arr792 := z.EncBasicHandle().StructToArray
			var yyq792 [4]bool
			_, _, _ = yysep792, yyq792, yy2arr792
			const yyr792 bool = false
			yyq792[1] = x.FSType != ""
			yyq792[2] = x.Partition != 0
			yyq792[3] = x.ReadOnly != false
			var yynn792 int
			if yyr792 || yy2arr792 {
				r.EncodeArrayStart(4)
			} else {
				yynn792 = 1
				for _, b := range yyq792 {
					if b {
						yynn792++
					}
				}
				r.EncodeMapStart(yynn792)
				yynn792 = 0
			}
			if yyr792 || yy2arr792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym794 := z.EncBinary()
				_ = yym794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym795 := z.EncBinary()
				_ = yym795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr792 || yy2arr792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq792[1] {
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq792[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr792 || yy2arr792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq792[2] {
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq792[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym801 := z.EncBinary()
					_ = yym801
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr792 || yy2arr792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq792[3] {
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq792[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym804 := z.EncBinary()
					_ = yym804
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr792 || yy2arr792 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AnchnetPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym805 := z.DecBinary()
	_ = yym805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct806 := r.ContainerType()
		if yyct806 == codecSelferValueTypeMap1234 {
			yyl806 := r.ReadMapStart()
			if yyl806 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl806, d)
			}
		} else if yyct806 == codecSelferValueTypeArray1234 {
			yyl806 := r.ReadArrayStart()
			if yyl806 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AnchnetPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys807Slc
	var yyhl807 bool = l >= 0
	for yyj807 := 0; ; yyj807++ {
		if yyhl807 {
			if yyj807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys807Slc = r.DecodeBytes(yys807Slc, true, true)
		yys807 := string(yys807Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys807 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys807)
		} // end switch yys807
	} // end for yyj807
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AnchnetPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj812 int
	var yyb812 bool
	var yyhl812 bool = l >= 0
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj812++
		if yyhl812 {
			yyb812 = yyj812 > l
		} else {
			yyb812 = r.CheckBreak()
		}
		if yyb812 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj812-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AliyunPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym817 := z.EncBinary()
		_ = yym817
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep818 := !z.EncBinary()
			yy2arr818 := z.EncBasicHandle().StructToArray
			var yyq818 [4]bool
			_, _, _ = yysep818, yyq818, yy2arr818
			const yyr818 bool = false
			yyq818[1] = x.FSType != ""
			yyq818[2] = x.Partition != 0
			yyq818[3] = x.ReadOnly != false
			var yynn818 int
			if yyr818 || yy2arr818 {
				r.EncodeArrayStart(4)
			} else {
				yynn818 = 1
				for _, b := range yyq818 {
					if b {
						yynn818++
					}
				}
				r.EncodeMapStart(yynn818)
				yynn818 = 0
			}
			if yyr818 || yy2arr818 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym820 := z.EncBinary()
				_ = yym820
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym821 := z.EncBinary()
				_ = yym821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr818 || yy2arr818 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq818[1] {
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq818[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym824 := z.EncBinary()
					_ = yym824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr818 || yy2arr818 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq818[2] {
					yym826 := z.EncBinary()
					_ = yym826
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq818[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym827 := z.EncBinary()
					_ = yym827
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr818 || yy2arr818 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq818[3] {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq818[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr818 || yy2arr818 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AliyunPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym831 := z.DecBinary()
	_ = yym831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct832 := r.ContainerType()
		if yyct832 == codecSelferValueTypeMap1234 {
			yyl832 := r.ReadMapStart()
			if yyl832 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl832, d)
			}
		} else if yyct832 == codecSelferValueTypeArray1234 {
			yyl832 := r.ReadArrayStart()
			if yyl832 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AliyunPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys833Slc
	var yyhl833 bool = l >= 0
	for yyj833 := 0; ; yyj833++ {
		if yyhl833 {
			if yyj833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys833Slc = r.DecodeBytes(yys833Slc, true, true)
		yys833 := string(yys833Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys833 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys833)
		} // end switch yys833
	} // end for yyj833
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AliyunPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj838 int
	var yyb838 bool
	var yyhl838 bool = l >= 0
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj838++
		if yyhl838 {
			yyb838 = yyj838 > l
		} else {
			yyb838 = r.CheckBreak()
		}
		if yyb838 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj838-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym843 := z.EncBinary()
		_ = yym843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep844 := !z.EncBinary()
			yy2arr844 := z.EncBasicHandle().StructToArray
			var yyq844 [4]bool
			_, _, _ = yysep844, yyq844, yy2arr844
			const yyr844 bool = false
			yyq844[1] = x.FSType != ""
			yyq844[2] = x.Partition != 0
			yyq844[3] = x.ReadOnly != false
			var yynn844 int
			if yyr844 || yy2arr844 {
				r.EncodeArrayStart(4)
			} else {
				yynn844 = 1
				for _, b := range yyq844 {
					if b {
						yynn844++
					}
				}
				r.EncodeMapStart(yynn844)
				yynn844 = 0
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym846 := z.EncBinary()
				_ = yym846
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym847 := z.EncBinary()
				_ = yym847
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq844[1] {
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq844[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym850 := z.EncBinary()
					_ = yym850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq844[2] {
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq844[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym853 := z.EncBinary()
					_ = yym853
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq844[3] {
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq844[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym857 := z.DecBinary()
	_ = yym857
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct858 := r.ContainerType()
		if yyct858 == codecSelferValueTypeMap1234 {
			yyl858 := r.ReadMapStart()
			if yyl858 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl858, d)
			}
		} else if yyct858 == codecSelferValueTypeArray1234 {
			yyl858 := r.ReadArrayStart()
			if yyl858 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl858, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys859Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys859Slc
	var yyhl859 bool = l >= 0
	for yyj859 := 0; ; yyj859++ {
		if yyhl859 {
			if yyj859 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys859Slc = r.DecodeBytes(yys859Slc, true, true)
		yys859 := string(yys859Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys859 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys859)
		} // end switch yys859
	} // end for yyj859
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj864 int
	var yyb864 bool
	var yyhl864 bool = l >= 0
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj864++
		if yyhl864 {
			yyb864 = yyj864 > l
		} else {
			yyb864 = r.CheckBreak()
		}
		if yyb864 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj864-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym869 := z.EncBinary()
		_ = yym869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep870 := !z.EncBinary()
			yy2arr870 := z.EncBasicHandle().StructToArray
			var yyq870 [5]bool
			_, _, _ = yysep870, yyq870, yy2arr870
			const yyr870 bool = false
			yyq870[2] = x.ReadOnly != false
			yyq870[3] = x.User != ""
			yyq870[4] = x.Group != ""
			var yynn870 int
			if yyr870 || yy2arr870 {
				r.EncodeArrayStart(5)
			} else {
				yynn870 = 2
				for _, b := range yyq870 {
					if b {
						yynn870++
					}
				}
				r.EncodeMapStart(yynn870)
				yynn870 = 0
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym872 := z.EncBinary()
				_ = yym872
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym873 := z.EncBinary()
				_ = yym873
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym875 := z.EncBinary()
				_ = yym875
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym876 := z.EncBinary()
				_ = yym876
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[2] {
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq870[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[3] {
					yym881 := z.EncBinary()
					_ = yym881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq870[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[4] {
					yym884 := z.EncBinary()
					_ = yym884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq870[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym886 := z.DecBinary()
	_ = yym886
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct887 := r.ContainerType()
		if yyct887 == codecSelferValueTypeMap1234 {
			yyl887 := r.ReadMapStart()
			if yyl887 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl887, d)
			}
		} else if yyct887 == codecSelferValueTypeArray1234 {
			yyl887 := r.ReadArrayStart()
			if yyl887 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl887, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys888Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys888Slc
	var yyhl888 bool = l >= 0
	for yyj888 := 0; ; yyj888++ {
		if yyhl888 {
			if yyj888 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys888Slc = r.DecodeBytes(yys888Slc, true, true)
		yys888 := string(yys888Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys888 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys888)
		} // end switch yys888
	} // end for yyj888
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj894 int
	var yyb894 bool
	var yyhl894 bool = l >= 0
	yyj894++
	if yyhl894 {
		yyb894 = yyj894 > l
	} else {
		yyb894 = r.CheckBreak()
	}
	if yyb894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj894++
	if yyhl894 {
		yyb894 = yyj894 > l
	} else {
		yyb894 = r.CheckBreak()
	}
	if yyb894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj894++
	if yyhl894 {
		yyb894 = yyj894 > l
	} else {
		yyb894 = r.CheckBreak()
	}
	if yyb894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj894++
	if yyhl894 {
		yyb894 = yyj894 > l
	} else {
		yyb894 = r.CheckBreak()
	}
	if yyb894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj894++
	if yyhl894 {
		yyb894 = yyj894 > l
	} else {
		yyb894 = r.CheckBreak()
	}
	if yyb894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj894++
		if yyhl894 {
			yyb894 = yyj894 > l
		} else {
			yyb894 = r.CheckBreak()
		}
		if yyb894 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj894-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym900 := z.EncBinary()
		_ = yym900
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep901 := !z.EncBinary()
			yy2arr901 := z.EncBasicHandle().StructToArray
			var yyq901 [5]bool
			_, _, _ = yysep901, yyq901, yy2arr901
			const yyr901 bool = false
			yyq901[1] = x.FSType != ""
			yyq901[2] = x.SecretRef != nil
			yyq901[3] = x.ReadOnly != false
			yyq901[4] = len(x.Options) != 0
			var yynn901 int
			if yyr901 || yy2arr901 {
				r.EncodeArrayStart(5)
			} else {
				yynn901 = 1
				for _, b := range yyq901 {
					if b {
						yynn901++
					}
				}
				r.EncodeMapStart(yynn901)
				yynn901 = 0
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym903 := z.EncBinary()
				_ = yym903
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym904 := z.EncBinary()
				_ = yym904
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq901[1] {
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq901[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq901[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq901[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq901[3] {
					yym910 := z.EncBinary()
					_ = yym910
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq901[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq901[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym913 := z.EncBinary()
						_ = yym913
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq901[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym914 := z.EncBinary()
						_ = yym914
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym915 := z.DecBinary()
	_ = yym915
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct916 := r.ContainerType()
		if yyct916 == codecSelferValueTypeMap1234 {
			yyl916 := r.ReadMapStart()
			if yyl916 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl916, d)
			}
		} else if yyct916 == codecSelferValueTypeArray1234 {
			yyl916 := r.ReadArrayStart()
			if yyl916 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl916, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys917Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys917Slc
	var yyhl917 bool = l >= 0
	for yyj917 := 0; ; yyj917++ {
		if yyhl917 {
			if yyj917 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys917Slc = r.DecodeBytes(yys917Slc, true, true)
		yys917 := string(yys917Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys917 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv922 := &x.Options
				yym923 := z.DecBinary()
				_ = yym923
				if false {
				} else {
					z.F.DecMapStringStringX(yyv922, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys917)
		} // end switch yys917
	} // end for yyj917
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj924 int
	var yyb924 bool
	var yyhl924 bool = l >= 0
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv929 := &x.Options
		yym930 := z.DecBinary()
		_ = yym930
		if false {
		} else {
			z.F.DecMapStringStringX(yyv929, false, d)
		}
	}
	for {
		yyj924++
		if yyhl924 {
			yyb924 = yyj924 > l
		} else {
			yyb924 = r.CheckBreak()
		}
		if yyb924 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj924-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym931 := z.EncBinary()
		_ = yym931
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep932 := !z.EncBinary()
			yy2arr932 := z.EncBasicHandle().StructToArray
			var yyq932 [4]bool
			_, _, _ = yysep932, yyq932, yy2arr932
			const yyr932 bool = false
			yyq932[1] = x.FSType != ""
			yyq932[2] = x.Partition != 0
			yyq932[3] = x.ReadOnly != false
			var yynn932 int
			if yyr932 || yy2arr932 {
				r.EncodeArrayStart(4)
			} else {
				yynn932 = 1
				for _, b := range yyq932 {
					if b {
						yynn932++
					}
				}
				r.EncodeMapStart(yynn932)
				yynn932 = 0
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym934 := z.EncBinary()
				_ = yym934
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym935 := z.EncBinary()
				_ = yym935
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[1] {
					yym937 := z.EncBinary()
					_ = yym937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq932[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym938 := z.EncBinary()
					_ = yym938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[2] {
					yym940 := z.EncBinary()
					_ = yym940
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq932[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym941 := z.EncBinary()
					_ = yym941
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[3] {
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq932[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym944 := z.EncBinary()
					_ = yym944
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym945 := z.DecBinary()
	_ = yym945
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct946 := r.ContainerType()
		if yyct946 == codecSelferValueTypeMap1234 {
			yyl946 := r.ReadMapStart()
			if yyl946 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl946, d)
			}
		} else if yyct946 == codecSelferValueTypeArray1234 {
			yyl946 := r.ReadArrayStart()
			if yyl946 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl946, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys947Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys947Slc
	var yyhl947 bool = l >= 0
	for yyj947 := 0; ; yyj947++ {
		if yyhl947 {
			if yyj947 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys947Slc = r.DecodeBytes(yys947Slc, true, true)
		yys947 := string(yys947Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys947 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys947)
		} // end switch yys947
	} // end for yyj947
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj952 int
	var yyb952 bool
	var yyhl952 bool = l >= 0
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj952++
		if yyhl952 {
			yyb952 = yyj952 > l
		} else {
			yyb952 = r.CheckBreak()
		}
		if yyb952 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj952-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym957 := z.EncBinary()
		_ = yym957
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep958 := !z.EncBinary()
			yy2arr958 := z.EncBasicHandle().StructToArray
			var yyq958 [3]bool
			_, _, _ = yysep958, yyq958, yy2arr958
			const yyr958 bool = false
			yyq958[1] = x.Revision != ""
			yyq958[2] = x.Directory != ""
			var yynn958 int
			if yyr958 || yy2arr958 {
				r.EncodeArrayStart(3)
			} else {
				yynn958 = 1
				for _, b := range yyq958 {
					if b {
						yynn958++
					}
				}
				r.EncodeMapStart(yynn958)
				yynn958 = 0
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym960 := z.EncBinary()
				_ = yym960
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym961 := z.EncBinary()
				_ = yym961
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[1] {
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq958[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym964 := z.EncBinary()
					_ = yym964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[2] {
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq958[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym967 := z.EncBinary()
					_ = yym967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym968 := z.DecBinary()
	_ = yym968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct969 := r.ContainerType()
		if yyct969 == codecSelferValueTypeMap1234 {
			yyl969 := r.ReadMapStart()
			if yyl969 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl969, d)
			}
		} else if yyct969 == codecSelferValueTypeArray1234 {
			yyl969 := r.ReadArrayStart()
			if yyl969 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl969, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys970Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys970Slc
	var yyhl970 bool = l >= 0
	for yyj970 := 0; ; yyj970++ {
		if yyhl970 {
			if yyj970 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys970Slc = r.DecodeBytes(yys970Slc, true, true)
		yys970 := string(yys970Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys970 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys970)
		} // end switch yys970
	} // end for yyj970
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj974 int
	var yyb974 bool
	var yyhl974 bool = l >= 0
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj974++
		if yyhl974 {
			yyb974 = yyj974 > l
		} else {
			yyb974 = r.CheckBreak()
		}
		if yyb974 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj974-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym978 := z.EncBinary()
		_ = yym978
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep979 := !z.EncBinary()
			yy2arr979 := z.EncBasicHandle().StructToArray
			var yyq979 [3]bool
			_, _, _ = yysep979, yyq979, yy2arr979
			const yyr979 bool = false
			yyq979[0] = x.SecretName != ""
			yyq979[1] = len(x.Items) != 0
			yyq979[2] = x.DefaultMode != nil
			var yynn979 int
			if yyr979 || yy2arr979 {
				r.EncodeArrayStart(3)
			} else {
				yynn979 = 0
				for _, b := range yyq979 {
					if b {
						yynn979++
					}
				}
				r.EncodeMapStart(yynn979)
				yynn979 = 0
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[0] {
					yym981 := z.EncBinary()
					_ = yym981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq979[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym982 := z.EncBinary()
					_ = yym982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym984 := z.EncBinary()
						_ = yym984
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq979[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym985 := z.EncBinary()
						_ = yym985
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy987 := *x.DefaultMode
						yym988 := z.EncBinary()
						_ = yym988
						if false {
						} else {
							r.EncodeInt(int64(yy987))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq979[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy989 := *x.DefaultMode
						yym990 := z.EncBinary()
						_ = yym990
						if false {
						} else {
							r.EncodeInt(int64(yy989))
						}
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym991 := z.DecBinary()
	_ = yym991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct992 := r.ContainerType()
		if yyct992 == codecSelferValueTypeMap1234 {
			yyl992 := r.ReadMapStart()
			if yyl992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl992, d)
			}
		} else if yyct992 == codecSelferValueTypeArray1234 {
			yyl992 := r.ReadArrayStart()
			if yyl992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys993Slc
	var yyhl993 bool = l >= 0
	for yyj993 := 0; ; yyj993++ {
		if yyhl993 {
			if yyj993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys993Slc = r.DecodeBytes(yys993Slc, true, true)
		yys993 := string(yys993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys993 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv995 := &x.Items
				yym996 := z.DecBinary()
				_ = yym996
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv995), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym998 := z.DecBinary()
				_ = yym998
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys993)
		} // end switch yys993
	} // end for yyj993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj999 int
	var yyb999 bool
	var yyhl999 bool = l >= 0
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1001 := &x.Items
		yym1002 := z.DecBinary()
		_ = yym1002
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1001), d)
		}
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1004 := z.DecBinary()
		_ = yym1004
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj999++
		if yyhl999 {
			yyb999 = yyj999 > l
		} else {
			yyb999 = r.CheckBreak()
		}
		if yyb999 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj999-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1005 := z.EncBinary()
		_ = yym1005
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1006 := !z.EncBinary()
			yy2arr1006 := z.EncBasicHandle().StructToArray
			var yyq1006 [3]bool
			_, _, _ = yysep1006, yyq1006, yy2arr1006
			const yyr1006 bool = false
			yyq1006[2] = x.ReadOnly != false
			var yynn1006 int
			if yyr1006 || yy2arr1006 {
				r.EncodeArrayStart(3)
			} else {
				yynn1006 = 2
				for _, b := range yyq1006 {
					if b {
						yynn1006++
					}
				}
				r.EncodeMapStart(yynn1006)
				yynn1006 = 0
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1008 := z.EncBinary()
				_ = yym1008
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1009 := z.EncBinary()
				_ = yym1009
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1011 := z.EncBinary()
				_ = yym1011
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1012 := z.EncBinary()
				_ = yym1012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1006[2] {
					yym1014 := z.EncBinary()
					_ = yym1014
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1006[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1015 := z.EncBinary()
					_ = yym1015
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1016 := z.DecBinary()
	_ = yym1016
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1017 := r.ContainerType()
		if yyct1017 == codecSelferValueTypeMap1234 {
			yyl1017 := r.ReadMapStart()
			if yyl1017 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1017, d)
			}
		} else if yyct1017 == codecSelferValueTypeArray1234 {
			yyl1017 := r.ReadArrayStart()
			if yyl1017 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1017, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1018Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1018Slc
	var yyhl1018 bool = l >= 0
	for yyj1018 := 0; ; yyj1018++ {
		if yyhl1018 {
			if yyj1018 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1018Slc = r.DecodeBytes(yys1018Slc, true, true)
		yys1018 := string(yys1018Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1018 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1018)
		} // end switch yys1018
	} // end for yyj1018
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1022 int
	var yyb1022 bool
	var yyhl1022 bool = l >= 0
	yyj1022++
	if yyhl1022 {
		yyb1022 = yyj1022 > l
	} else {
		yyb1022 = r.CheckBreak()
	}
	if yyb1022 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj1022++
	if yyhl1022 {
		yyb1022 = yyj1022 > l
	} else {
		yyb1022 = r.CheckBreak()
	}
	if yyb1022 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1022++
	if yyhl1022 {
		yyb1022 = yyj1022 > l
	} else {
		yyb1022 = r.CheckBreak()
	}
	if yyb1022 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1022++
		if yyhl1022 {
			yyb1022 = yyj1022 > l
		} else {
			yyb1022 = r.CheckBreak()
		}
		if yyb1022 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1022-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1026 := z.EncBinary()
		_ = yym1026
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1027 := !z.EncBinary()
			yy2arr1027 := z.EncBasicHandle().StructToArray
			var yyq1027 [6]bool
			_, _, _ = yysep1027, yyq1027, yy2arr1027
			const yyr1027 bool = false
			yyq1027[3] = x.ISCSIInterface != ""
			yyq1027[4] = x.FSType != ""
			yyq1027[5] = x.ReadOnly != false
			var yynn1027 int
			if yyr1027 || yy2arr1027 {
				r.EncodeArrayStart(6)
			} else {
				yynn1027 = 3
				for _, b := range yyq1027 {
					if b {
						yynn1027++
					}
				}
				r.EncodeMapStart(yynn1027)
				yynn1027 = 0
			}
			if yyr1027 || yy2arr1027 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1029 := z.EncBinary()
				_ = yym1029
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1030 := z.EncBinary()
				_ = yym1030
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr1027 || yy2arr1027 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1032 := z.EncBinary()
				_ = yym1032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1033 := z.EncBinary()
				_ = yym1033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr1027 || yy2arr1027 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1035 := z.EncBinary()
				_ = yym1035
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1036 := z.EncBinary()
				_ = yym1036
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr1027 || yy2arr1027 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1027[3] {
					yym1038 := z.EncBinary()
					_ = yym1038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1027[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1039 := z.EncBinary()
					_ = yym1039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr1027 || yy2arr1027 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1027[4] {
					yym1041 := z.EncBinary()
					_ = yym1041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1027[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1042 := z.EncBinary()
					_ = yym1042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1027 || yy2arr1027 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1027[5] {
					yym1044 := z.EncBinary()
					_ = yym1044
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1027[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1045 := z.EncBinary()
					_ = yym1045
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1027 || yy2arr1027 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1046 := z.DecBinary()
	_ = yym1046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1047 := r.ContainerType()
		if yyct1047 == codecSelferValueTypeMap1234 {
			yyl1047 := r.ReadMapStart()
			if yyl1047 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1047, d)
			}
		} else if yyct1047 == codecSelferValueTypeArray1234 {
			yyl1047 := r.ReadArrayStart()
			if yyl1047 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1047, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1048Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1048Slc
	var yyhl1048 bool = l >= 0
	for yyj1048 := 0; ; yyj1048++ {
		if yyhl1048 {
			if yyj1048 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1048Slc = r.DecodeBytes(yys1048Slc, true, true)
		yys1048 := string(yys1048Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1048 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1048)
		} // end switch yys1048
	} // end for yyj1048
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1055 int
	var yyb1055 bool
	var yyhl1055 bool = l >= 0
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1055++
		if yyhl1055 {
			yyb1055 = yyj1055 > l
		} else {
			yyb1055 = r.CheckBreak()
		}
		if yyb1055 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1055-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1062 := z.EncBinary()
		_ = yym1062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1063 := !z.EncBinary()
			yy2arr1063 := z.EncBasicHandle().StructToArray
			var yyq1063 [4]bool
			_, _, _ = yysep1063, yyq1063, yy2arr1063
			const yyr1063 bool = false
			yyq1063[2] = x.FSType != ""
			yyq1063[3] = x.ReadOnly != false
			var yynn1063 int
			if yyr1063 || yy2arr1063 {
				r.EncodeArrayStart(4)
			} else {
				yynn1063 = 2
				for _, b := range yyq1063 {
					if b {
						yynn1063++
					}
				}
				r.EncodeMapStart(yynn1063)
				yynn1063 = 0
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym1065 := z.EncBinary()
					_ = yym1065
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym1066 := z.EncBinary()
					_ = yym1066
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy1068 := *x.Lun
					yym1069 := z.EncBinary()
					_ = yym1069
					if false {
					} else {
						r.EncodeInt(int64(yy1068))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy1070 := *x.Lun
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeInt(int64(yy1070))
					}
				}
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1063[2] {
					yym1073 := z.EncBinary()
					_ = yym1073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1063[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1063[3] {
					yym1076 := z.EncBinary()
					_ = yym1076
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1063[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1077 := z.EncBinary()
					_ = yym1077
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1078 := z.DecBinary()
	_ = yym1078
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1079 := r.ContainerType()
		if yyct1079 == codecSelferValueTypeMap1234 {
			yyl1079 := r.ReadMapStart()
			if yyl1079 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1079, d)
			}
		} else if yyct1079 == codecSelferValueTypeArray1234 {
			yyl1079 := r.ReadArrayStart()
			if yyl1079 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1079, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1080Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1080Slc
	var yyhl1080 bool = l >= 0
	for yyj1080 := 0; ; yyj1080++ {
		if yyhl1080 {
			if yyj1080 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1080Slc = r.DecodeBytes(yys1080Slc, true, true)
		yys1080 := string(yys1080Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1080 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv1081 := &x.TargetWWNs
				yym1082 := z.DecBinary()
				_ = yym1082
				if false {
				} else {
					z.F.DecSliceStringX(yyv1081, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym1084 := z.DecBinary()
				_ = yym1084
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1080)
		} // end switch yys1080
	} // end for yyj1080
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1087 int
	var yyb1087 bool
	var yyhl1087 bool = l >= 0
	yyj1087++
	if yyhl1087 {
		yyb1087 = yyj1087 > l
	} else {
		yyb1087 = r.CheckBreak()
	}
	if yyb1087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv1088 := &x.TargetWWNs
		yym1089 := z.DecBinary()
		_ = yym1089
		if false {
		} else {
			z.F.DecSliceStringX(yyv1088, false, d)
		}
	}
	yyj1087++
	if yyhl1087 {
		yyb1087 = yyj1087 > l
	} else {
		yyb1087 = r.CheckBreak()
	}
	if yyb1087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym1091 := z.DecBinary()
		_ = yym1091
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj1087++
	if yyhl1087 {
		yyb1087 = yyj1087 > l
	} else {
		yyb1087 = r.CheckBreak()
	}
	if yyb1087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1087++
	if yyhl1087 {
		yyb1087 = yyj1087 > l
	} else {
		yyb1087 = r.CheckBreak()
	}
	if yyb1087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1087++
		if yyhl1087 {
			yyb1087 = yyj1087 > l
		} else {
			yyb1087 = r.CheckBreak()
		}
		if yyb1087 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1087-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1094 := z.EncBinary()
		_ = yym1094
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1095 := !z.EncBinary()
			yy2arr1095 := z.EncBasicHandle().StructToArray
			var yyq1095 [3]bool
			_, _, _ = yysep1095, yyq1095, yy2arr1095
			const yyr1095 bool = false
			yyq1095[2] = x.ReadOnly != false
			var yynn1095 int
			if yyr1095 || yy2arr1095 {
				r.EncodeArrayStart(3)
			} else {
				yynn1095 = 2
				for _, b := range yyq1095 {
					if b {
						yynn1095++
					}
				}
				r.EncodeMapStart(yynn1095)
				yynn1095 = 0
			}
			if yyr1095 || yy2arr1095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1097 := z.EncBinary()
				_ = yym1097
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1098 := z.EncBinary()
				_ = yym1098
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1095 || yy2arr1095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1100 := z.EncBinary()
				_ = yym1100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1101 := z.EncBinary()
				_ = yym1101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1095 || yy2arr1095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1095[2] {
					yym1103 := z.EncBinary()
					_ = yym1103
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1095[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1095 || yy2arr1095 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1105 := z.DecBinary()
	_ = yym1105
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1106 := r.ContainerType()
		if yyct1106 == codecSelferValueTypeMap1234 {
			yyl1106 := r.ReadMapStart()
			if yyl1106 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1106, d)
			}
		} else if yyct1106 == codecSelferValueTypeArray1234 {
			yyl1106 := r.ReadArrayStart()
			if yyl1106 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1106, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1107Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1107Slc
	var yyhl1107 bool = l >= 0
	for yyj1107 := 0; ; yyj1107++ {
		if yyhl1107 {
			if yyj1107 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1107Slc = r.DecodeBytes(yys1107Slc, true, true)
		yys1107 := string(yys1107Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1107 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1107)
		} // end switch yys1107
	} // end for yyj1107
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1111 int
	var yyb1111 bool
	var yyhl1111 bool = l >= 0
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1111++
		if yyhl1111 {
			yyb1111 = yyj1111 > l
		} else {
			yyb1111 = r.CheckBreak()
		}
		if yyb1111 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1111-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1115 := z.EncBinary()
		_ = yym1115
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1116 := !z.EncBinary()
			yy2arr1116 := z.EncBasicHandle().StructToArray
			var yyq1116 [2]bool
			_, _, _ = yysep1116, yyq1116, yy2arr1116
			const yyr1116 bool = false
			yyq1116[1] = x.FSType != ""
			var yynn1116 int
			if yyr1116 || yy2arr1116 {
				r.EncodeArrayStart(2)
			} else {
				yynn1116 = 1
				for _, b := range yyq1116 {
					if b {
						yynn1116++
					}
				}
				r.EncodeMapStart(yynn1116)
				yynn1116 = 0
			}
			if yyr1116 || yy2arr1116 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1118 := z.EncBinary()
				_ = yym1118
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1119 := z.EncBinary()
				_ = yym1119
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1116 || yy2arr1116 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1116[1] {
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1116[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1116 || yy2arr1116 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1123 := z.DecBinary()
	_ = yym1123
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1124 := r.ContainerType()
		if yyct1124 == codecSelferValueTypeMap1234 {
			yyl1124 := r.ReadMapStart()
			if yyl1124 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1124, d)
			}
		} else if yyct1124 == codecSelferValueTypeArray1234 {
			yyl1124 := r.ReadArrayStart()
			if yyl1124 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1124, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1125Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1125Slc
	var yyhl1125 bool = l >= 0
	for yyj1125 := 0; ; yyj1125++ {
		if yyhl1125 {
			if yyj1125 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1125Slc = r.DecodeBytes(yys1125Slc, true, true)
		yys1125 := string(yys1125Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1125 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1125)
		} // end switch yys1125
	} // end for yyj1125
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1128 int
	var yyb1128 bool
	var yyhl1128 bool = l >= 0
	yyj1128++
	if yyhl1128 {
		yyb1128 = yyj1128 > l
	} else {
		yyb1128 = r.CheckBreak()
	}
	if yyb1128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1128++
	if yyhl1128 {
		yyb1128 = yyj1128 > l
	} else {
		yyb1128 = r.CheckBreak()
	}
	if yyb1128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1128++
		if yyhl1128 {
			yyb1128 = yyj1128 > l
		} else {
			yyb1128 = r.CheckBreak()
		}
		if yyb1128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1131 := z.EncBinary()
		_ = yym1131
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1132 := !z.EncBinary()
			yy2arr1132 := z.EncBasicHandle().StructToArray
			var yyq1132 [2]bool
			_, _, _ = yysep1132, yyq1132, yy2arr1132
			const yyr1132 bool = false
			yyq1132[1] = x.FSType != ""
			var yynn1132 int
			if yyr1132 || yy2arr1132 {
				r.EncodeArrayStart(2)
			} else {
				yynn1132 = 1
				for _, b := range yyq1132 {
					if b {
						yynn1132++
					}
				}
				r.EncodeMapStart(yynn1132)
				yynn1132 = 0
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1134 := z.EncBinary()
				_ = yym1134
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1135 := z.EncBinary()
				_ = yym1135
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[1] {
					yym1137 := z.EncBinary()
					_ = yym1137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1132[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1138 := z.EncBinary()
					_ = yym1138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1139 := z.DecBinary()
	_ = yym1139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1140 := r.ContainerType()
		if yyct1140 == codecSelferValueTypeMap1234 {
			yyl1140 := r.ReadMapStart()
			if yyl1140 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1140, d)
			}
		} else if yyct1140 == codecSelferValueTypeArray1234 {
			yyl1140 := r.ReadArrayStart()
			if yyl1140 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1140, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1141Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1141Slc
	var yyhl1141 bool = l >= 0
	for yyj1141 := 0; ; yyj1141++ {
		if yyhl1141 {
			if yyj1141 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1141Slc = r.DecodeBytes(yys1141Slc, true, true)
		yys1141 := string(yys1141Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1141 {
		case "pdID":
			if r.TryDecodeAsNil() {
				x.PdID = ""
			} else {
				x.PdID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1141)
		} // end switch yys1141
	} // end for yyj1141
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1144 int
	var yyb1144 bool
	var yyhl1144 bool = l >= 0
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PdID = ""
	} else {
		x.PdID = string(r.DecodeString())
	}
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1144++
		if yyhl1144 {
			yyb1144 = yyj1144 > l
		} else {
			yyb1144 = r.CheckBreak()
		}
		if yyb1144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1147 := z.EncBinary()
	_ = yym1147
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1148 := z.DecBinary()
	_ = yym1148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1149 := z.EncBinary()
		_ = yym1149
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1150 := !z.EncBinary()
			yy2arr1150 := z.EncBasicHandle().StructToArray
			var yyq1150 [5]bool
			_, _, _ = yysep1150, yyq1150, yy2arr1150
			const yyr1150 bool = false
			yyq1150[2] = x.CachingMode != nil
			yyq1150[3] = x.FSType != nil
			yyq1150[4] = x.ReadOnly != nil
			var yynn1150 int
			if yyr1150 || yy2arr1150 {
				r.EncodeArrayStart(5)
			} else {
				yynn1150 = 2
				for _, b := range yyq1150 {
					if b {
						yynn1150++
					}
				}
				r.EncodeMapStart(yynn1150)
				yynn1150 = 0
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1152 := z.EncBinary()
				_ = yym1152
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1153 := z.EncBinary()
				_ = yym1153
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1155 := z.EncBinary()
				_ = yym1155
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1156 := z.EncBinary()
				_ = yym1156
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1150[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1158 := *x.CachingMode
						yy1158.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1150[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1159 := *x.CachingMode
						yy1159.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1150[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1161 := *x.FSType
						yym1162 := z.EncBinary()
						_ = yym1162
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1161))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1150[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1163 := *x.FSType
						yym1164 := z.EncBinary()
						_ = yym1164
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1163))
						}
					}
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1150[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1166 := *x.ReadOnly
						yym1167 := z.EncBinary()
						_ = yym1167
						if false {
						} else {
							r.EncodeBool(bool(yy1166))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1150[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1168 := *x.ReadOnly
						yym1169 := z.EncBinary()
						_ = yym1169
						if false {
						} else {
							r.EncodeBool(bool(yy1168))
						}
					}
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1170 := z.DecBinary()
	_ = yym1170
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1171 := r.ContainerType()
		if yyct1171 == codecSelferValueTypeMap1234 {
			yyl1171 := r.ReadMapStart()
			if yyl1171 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1171, d)
			}
		} else if yyct1171 == codecSelferValueTypeArray1234 {
			yyl1171 := r.ReadArrayStart()
			if yyl1171 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1171, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1172Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1172Slc
	var yyhl1172 bool = l >= 0
	for yyj1172 := 0; ; yyj1172++ {
		if yyhl1172 {
			if yyj1172 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1172Slc = r.DecodeBytes(yys1172Slc, true, true)
		yys1172 := string(yys1172Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1172 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1177 := z.DecBinary()
				_ = yym1177
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1179 := z.DecBinary()
				_ = yym1179
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1172)
		} // end switch yys1172
	} // end for yyj1172
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1180 int
	var yyb1180 bool
	var yyhl1180 bool = l >= 0
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1185 := z.DecBinary()
		_ = yym1185
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1187 := z.DecBinary()
		_ = yym1187
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1180++
		if yyhl1180 {
			yyb1180 = yyj1180 > l
		} else {
			yyb1180 = r.CheckBreak()
		}
		if yyb1180 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1180-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1188 := z.EncBinary()
		_ = yym1188
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1189 := !z.EncBinary()
			yy2arr1189 := z.EncBasicHandle().StructToArray
			var yyq1189 [3]bool
			_, _, _ = yysep1189, yyq1189, yy2arr1189
			const yyr1189 bool = false
			yyq1189[0] = x.Name != ""
			yyq1189[1] = len(x.Items) != 0
			yyq1189[2] = x.DefaultMode != nil
			var yynn1189 int
			if yyr1189 || yy2arr1189 {
				r.EncodeArrayStart(3)
			} else {
				yynn1189 = 0
				for _, b := range yyq1189 {
					if b {
						yynn1189++
					}
				}
				r.EncodeMapStart(yynn1189)
				yynn1189 = 0
			}
			if yyr1189 || yy2arr1189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1189[0] {
					yym1191 := z.EncBinary()
					_ = yym1191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1189[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1189 || yy2arr1189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1189[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1194 := z.EncBinary()
						_ = yym1194
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1189[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1195 := z.EncBinary()
						_ = yym1195
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1189 || yy2arr1189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1189[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1197 := *x.DefaultMode
						yym1198 := z.EncBinary()
						_ = yym1198
						if false {
						} else {
							r.EncodeInt(int64(yy1197))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1189[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1199 := *x.DefaultMode
						yym1200 := z.EncBinary()
						_ = yym1200
						if false {
						} else {
							r.EncodeInt(int64(yy1199))
						}
					}
				}
			}
			if yyr1189 || yy2arr1189 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1201 := z.DecBinary()
	_ = yym1201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1202 := r.ContainerType()
		if yyct1202 == codecSelferValueTypeMap1234 {
			yyl1202 := r.ReadMapStart()
			if yyl1202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1202, d)
			}
		} else if yyct1202 == codecSelferValueTypeArray1234 {
			yyl1202 := r.ReadArrayStart()
			if yyl1202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1203Slc
	var yyhl1203 bool = l >= 0
	for yyj1203 := 0; ; yyj1203++ {
		if yyhl1203 {
			if yyj1203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1203Slc = r.DecodeBytes(yys1203Slc, true, true)
		yys1203 := string(yys1203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1203 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1205 := &x.Items
				yym1206 := z.DecBinary()
				_ = yym1206
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1205), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1208 := z.DecBinary()
				_ = yym1208
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1203)
		} // end switch yys1203
	} // end for yyj1203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1209 int
	var yyb1209 bool
	var yyhl1209 bool = l >= 0
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1211 := &x.Items
		yym1212 := z.DecBinary()
		_ = yym1212
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1211), d)
		}
	}
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1214 := z.DecBinary()
		_ = yym1214
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1209++
		if yyhl1209 {
			yyb1209 = yyj1209 > l
		} else {
			yyb1209 = r.CheckBreak()
		}
		if yyb1209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1215 := z.EncBinary()
		_ = yym1215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1216 := !z.EncBinary()
			yy2arr1216 := z.EncBasicHandle().StructToArray
			var yyq1216 [3]bool
			_, _, _ = yysep1216, yyq1216, yy2arr1216
			const yyr1216 bool = false
			yyq1216[2] = x.Mode != nil
			var yynn1216 int
			if yyr1216 || yy2arr1216 {
				r.EncodeArrayStart(3)
			} else {
				yynn1216 = 2
				for _, b := range yyq1216 {
					if b {
						yynn1216++
					}
				}
				r.EncodeMapStart(yynn1216)
				yynn1216 = 0
			}
			if yyr1216 || yy2arr1216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1218 := z.EncBinary()
				_ = yym1218
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1219 := z.EncBinary()
				_ = yym1219
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1216 || yy2arr1216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1221 := z.EncBinary()
				_ = yym1221
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1222 := z.EncBinary()
				_ = yym1222
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1216 || yy2arr1216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1216[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1224 := *x.Mode
						yym1225 := z.EncBinary()
						_ = yym1225
						if false {
						} else {
							r.EncodeInt(int64(yy1224))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1216[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1226 := *x.Mode
						yym1227 := z.EncBinary()
						_ = yym1227
						if false {
						} else {
							r.EncodeInt(int64(yy1226))
						}
					}
				}
			}
			if yyr1216 || yy2arr1216 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1228 := z.DecBinary()
	_ = yym1228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1229 := r.ContainerType()
		if yyct1229 == codecSelferValueTypeMap1234 {
			yyl1229 := r.ReadMapStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1229, d)
			}
		} else if yyct1229 == codecSelferValueTypeArray1234 {
			yyl1229 := r.ReadArrayStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1230Slc
	var yyhl1230 bool = l >= 0
	for yyj1230 := 0; ; yyj1230++ {
		if yyhl1230 {
			if yyj1230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1230Slc = r.DecodeBytes(yys1230Slc, true, true)
		yys1230 := string(yys1230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1230 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1234 := z.DecBinary()
				_ = yym1234
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1230)
		} // end switch yys1230
	} // end for yyj1230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1235 int
	var yyb1235 bool
	var yyhl1235 bool = l >= 0
	yyj1235++
	if yyhl1235 {
		yyb1235 = yyj1235 > l
	} else {
		yyb1235 = r.CheckBreak()
	}
	if yyb1235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1235++
	if yyhl1235 {
		yyb1235 = yyj1235 > l
	} else {
		yyb1235 = r.CheckBreak()
	}
	if yyb1235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1235++
	if yyhl1235 {
		yyb1235 = yyj1235 > l
	} else {
		yyb1235 = r.CheckBreak()
	}
	if yyb1235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1239 := z.DecBinary()
		_ = yym1239
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1235++
		if yyhl1235 {
			yyb1235 = yyj1235 > l
		} else {
			yyb1235 = r.CheckBreak()
		}
		if yyb1235 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1235-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1240 := z.EncBinary()
		_ = yym1240
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1241 := !z.EncBinary()
			yy2arr1241 := z.EncBasicHandle().StructToArray
			var yyq1241 [5]bool
			_, _, _ = yysep1241, yyq1241, yy2arr1241
			const yyr1241 bool = false
			yyq1241[0] = x.Name != ""
			yyq1241[1] = x.HostPort != 0
			yyq1241[3] = x.Protocol != ""
			yyq1241[4] = x.HostIP != ""
			var yynn1241 int
			if yyr1241 || yy2arr1241 {
				r.EncodeArrayStart(5)
			} else {
				yynn1241 = 1
				for _, b := range yyq1241 {
					if b {
						yynn1241++
					}
				}
				r.EncodeMapStart(yynn1241)
				yynn1241 = 0
			}
			if yyr1241 || yy2arr1241 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1241[0] {
					yym1243 := z.EncBinary()
					_ = yym1243
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1241[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1244 := z.EncBinary()
					_ = yym1244
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1241 || yy2arr1241 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1241[1] {
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1241[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1247 := z.EncBinary()
					_ = yym1247
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1241 || yy2arr1241 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1249 := z.EncBinary()
				_ = yym1249
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1250 := z.EncBinary()
				_ = yym1250
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1241 || yy2arr1241 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1241[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1241[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1241 || yy2arr1241 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1241[4] {
					yym1253 := z.EncBinary()
					_ = yym1253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1241[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1254 := z.EncBinary()
					_ = yym1254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1241 || yy2arr1241 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1255 := z.DecBinary()
	_ = yym1255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1256 := r.ContainerType()
		if yyct1256 == codecSelferValueTypeMap1234 {
			yyl1256 := r.ReadMapStart()
			if yyl1256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1256, d)
			}
		} else if yyct1256 == codecSelferValueTypeArray1234 {
			yyl1256 := r.ReadArrayStart()
			if yyl1256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1257Slc
	var yyhl1257 bool = l >= 0
	for yyj1257 := 0; ; yyj1257++ {
		if yyhl1257 {
			if yyj1257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1257Slc = r.DecodeBytes(yys1257Slc, true, true)
		yys1257 := string(yys1257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1257 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1257)
		} // end switch yys1257
	} // end for yyj1257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1263 int
	var yyb1263 bool
	var yyhl1263 bool = l >= 0
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1263++
		if yyhl1263 {
			yyb1263 = yyj1263 > l
		} else {
			yyb1263 = r.CheckBreak()
		}
		if yyb1263 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1263-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1269 := z.EncBinary()
		_ = yym1269
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1270 := !z.EncBinary()
			yy2arr1270 := z.EncBasicHandle().StructToArray
			var yyq1270 [4]bool
			_, _, _ = yysep1270, yyq1270, yy2arr1270
			const yyr1270 bool = false
			yyq1270[1] = x.ReadOnly != false
			yyq1270[3] = x.SubPath != ""
			var yynn1270 int
			if yyr1270 || yy2arr1270 {
				r.EncodeArrayStart(4)
			} else {
				yynn1270 = 2
				for _, b := range yyq1270 {
					if b {
						yynn1270++
					}
				}
				r.EncodeMapStart(yynn1270)
				yynn1270 = 0
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1272 := z.EncBinary()
				_ = yym1272
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1273 := z.EncBinary()
				_ = yym1273
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1270[1] {
					yym1275 := z.EncBinary()
					_ = yym1275
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1270[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1278 := z.EncBinary()
				_ = yym1278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1279 := z.EncBinary()
				_ = yym1279
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1270[3] {
					yym1281 := z.EncBinary()
					_ = yym1281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1270[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1282 := z.EncBinary()
					_ = yym1282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1283 := z.DecBinary()
	_ = yym1283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1284 := r.ContainerType()
		if yyct1284 == codecSelferValueTypeMap1234 {
			yyl1284 := r.ReadMapStart()
			if yyl1284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1284, d)
			}
		} else if yyct1284 == codecSelferValueTypeArray1234 {
			yyl1284 := r.ReadArrayStart()
			if yyl1284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1285Slc
	var yyhl1285 bool = l >= 0
	for yyj1285 := 0; ; yyj1285++ {
		if yyhl1285 {
			if yyj1285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1285Slc = r.DecodeBytes(yys1285Slc, true, true)
		yys1285 := string(yys1285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1285 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1285)
		} // end switch yys1285
	} // end for yyj1285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1290 int
	var yyb1290 bool
	var yyhl1290 bool = l >= 0
	yyj1290++
	if yyhl1290 {
		yyb1290 = yyj1290 > l
	} else {
		yyb1290 = r.CheckBreak()
	}
	if yyb1290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1290++
	if yyhl1290 {
		yyb1290 = yyj1290 > l
	} else {
		yyb1290 = r.CheckBreak()
	}
	if yyb1290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1290++
	if yyhl1290 {
		yyb1290 = yyj1290 > l
	} else {
		yyb1290 = r.CheckBreak()
	}
	if yyb1290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1290++
	if yyhl1290 {
		yyb1290 = yyj1290 > l
	} else {
		yyb1290 = r.CheckBreak()
	}
	if yyb1290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1290++
		if yyhl1290 {
			yyb1290 = yyj1290 > l
		} else {
			yyb1290 = r.CheckBreak()
		}
		if yyb1290 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1290-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1295 := z.EncBinary()
		_ = yym1295
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1296 := !z.EncBinary()
			yy2arr1296 := z.EncBasicHandle().StructToArray
			var yyq1296 [3]bool
			_, _, _ = yysep1296, yyq1296, yy2arr1296
			const yyr1296 bool = false
			yyq1296[1] = x.Value != ""
			yyq1296[2] = x.ValueFrom != nil
			var yynn1296 int
			if yyr1296 || yy2arr1296 {
				r.EncodeArrayStart(3)
			} else {
				yynn1296 = 1
				for _, b := range yyq1296 {
					if b {
						yynn1296++
					}
				}
				r.EncodeMapStart(yynn1296)
				yynn1296 = 0
			}
			if yyr1296 || yy2arr1296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1298 := z.EncBinary()
				_ = yym1298
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1299 := z.EncBinary()
				_ = yym1299
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1296 || yy2arr1296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1296[1] {
					yym1301 := z.EncBinary()
					_ = yym1301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1296[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1296 || yy2arr1296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1296[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1296[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1296 || yy2arr1296 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1304 := z.DecBinary()
	_ = yym1304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1305 := r.ContainerType()
		if yyct1305 == codecSelferValueTypeMap1234 {
			yyl1305 := r.ReadMapStart()
			if yyl1305 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1305, d)
			}
		} else if yyct1305 == codecSelferValueTypeArray1234 {
			yyl1305 := r.ReadArrayStart()
			if yyl1305 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1306Slc
	var yyhl1306 bool = l >= 0
	for yyj1306 := 0; ; yyj1306++ {
		if yyhl1306 {
			if yyj1306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1306Slc = r.DecodeBytes(yys1306Slc, true, true)
		yys1306 := string(yys1306Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1306 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1306)
		} // end switch yys1306
	} // end for yyj1306
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1310 int
	var yyb1310 bool
	var yyhl1310 bool = l >= 0
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1310++
		if yyhl1310 {
			yyb1310 = yyj1310 > l
		} else {
			yyb1310 = r.CheckBreak()
		}
		if yyb1310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1314 := z.EncBinary()
		_ = yym1314
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1315 := !z.EncBinary()
			yy2arr1315 := z.EncBasicHandle().StructToArray
			var yyq1315 [4]bool
			_, _, _ = yysep1315, yyq1315, yy2arr1315
			const yyr1315 bool = false
			yyq1315[0] = x.FieldRef != nil
			yyq1315[1] = x.ResourceFieldRef != nil
			yyq1315[2] = x.ConfigMapKeyRef != nil
			yyq1315[3] = x.SecretKeyRef != nil
			var yynn1315 int
			if yyr1315 || yy2arr1315 {
				r.EncodeArrayStart(4)
			} else {
				yynn1315 = 0
				for _, b := range yyq1315 {
					if b {
						yynn1315++
					}
				}
				r.EncodeMapStart(yynn1315)
				yynn1315 = 0
			}
			if yyr1315 || yy2arr1315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1315[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1315[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1315 || yy2arr1315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1315[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1315[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1315 || yy2arr1315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1315[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1315[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1315 || yy2arr1315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1315[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1315[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1315 || yy2arr1315 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1320 := z.DecBinary()
	_ = yym1320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1321 := r.ContainerType()
		if yyct1321 == codecSelferValueTypeMap1234 {
			yyl1321 := r.ReadMapStart()
			if yyl1321 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1321, d)
			}
		} else if yyct1321 == codecSelferValueTypeArray1234 {
			yyl1321 := r.ReadArrayStart()
			if yyl1321 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1321, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1322Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1322Slc
	var yyhl1322 bool = l >= 0
	for yyj1322 := 0; ; yyj1322++ {
		if yyhl1322 {
			if yyj1322 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1322Slc = r.DecodeBytes(yys1322Slc, true, true)
		yys1322 := string(yys1322Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1322 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1322)
		} // end switch yys1322
	} // end for yyj1322
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1327 int
	var yyb1327 bool
	var yyhl1327 bool = l >= 0
	yyj1327++
	if yyhl1327 {
		yyb1327 = yyj1327 > l
	} else {
		yyb1327 = r.CheckBreak()
	}
	if yyb1327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1327++
	if yyhl1327 {
		yyb1327 = yyj1327 > l
	} else {
		yyb1327 = r.CheckBreak()
	}
	if yyb1327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1327++
	if yyhl1327 {
		yyb1327 = yyj1327 > l
	} else {
		yyb1327 = r.CheckBreak()
	}
	if yyb1327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1327++
	if yyhl1327 {
		yyb1327 = yyj1327 > l
	} else {
		yyb1327 = r.CheckBreak()
	}
	if yyb1327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1327++
		if yyhl1327 {
			yyb1327 = yyj1327 > l
		} else {
			yyb1327 = r.CheckBreak()
		}
		if yyb1327 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1327-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1332 := z.EncBinary()
		_ = yym1332
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1333 := !z.EncBinary()
			yy2arr1333 := z.EncBasicHandle().StructToArray
			var yyq1333 [2]bool
			_, _, _ = yysep1333, yyq1333, yy2arr1333
			const yyr1333 bool = false
			yyq1333[0] = x.APIVersion != ""
			var yynn1333 int
			if yyr1333 || yy2arr1333 {
				r.EncodeArrayStart(2)
			} else {
				yynn1333 = 1
				for _, b := range yyq1333 {
					if b {
						yynn1333++
					}
				}
				r.EncodeMapStart(yynn1333)
				yynn1333 = 0
			}
			if yyr1333 || yy2arr1333 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1333[0] {
					yym1335 := z.EncBinary()
					_ = yym1335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1333[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1336 := z.EncBinary()
					_ = yym1336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1333 || yy2arr1333 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1338 := z.EncBinary()
				_ = yym1338
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1339 := z.EncBinary()
				_ = yym1339
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1333 || yy2arr1333 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1340 := z.DecBinary()
	_ = yym1340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1341 := r.ContainerType()
		if yyct1341 == codecSelferValueTypeMap1234 {
			yyl1341 := r.ReadMapStart()
			if yyl1341 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1341, d)
			}
		} else if yyct1341 == codecSelferValueTypeArray1234 {
			yyl1341 := r.ReadArrayStart()
			if yyl1341 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1341, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1342Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1342Slc
	var yyhl1342 bool = l >= 0
	for yyj1342 := 0; ; yyj1342++ {
		if yyhl1342 {
			if yyj1342 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1342Slc = r.DecodeBytes(yys1342Slc, true, true)
		yys1342 := string(yys1342Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1342 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1342)
		} // end switch yys1342
	} // end for yyj1342
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1345 int
	var yyb1345 bool
	var yyhl1345 bool = l >= 0
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1345++
		if yyhl1345 {
			yyb1345 = yyj1345 > l
		} else {
			yyb1345 = r.CheckBreak()
		}
		if yyb1345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1348 := z.EncBinary()
		_ = yym1348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1349 := !z.EncBinary()
			yy2arr1349 := z.EncBasicHandle().StructToArray
			var yyq1349 [3]bool
			_, _, _ = yysep1349, yyq1349, yy2arr1349
			const yyr1349 bool = false
			yyq1349[0] = x.ContainerName != ""
			yyq1349[2] = true
			var yynn1349 int
			if yyr1349 || yy2arr1349 {
				r.EncodeArrayStart(3)
			} else {
				yynn1349 = 1
				for _, b := range yyq1349 {
					if b {
						yynn1349++
					}
				}
				r.EncodeMapStart(yynn1349)
				yynn1349 = 0
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1349[0] {
					yym1351 := z.EncBinary()
					_ = yym1351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1349[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1352 := z.EncBinary()
					_ = yym1352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1354 := z.EncBinary()
				_ = yym1354
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1355 := z.EncBinary()
				_ = yym1355
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1349[2] {
					yy1357 := &x.Divisor
					yym1358 := z.EncBinary()
					_ = yym1358
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1357) {
					} else if !yym1358 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1357)
					} else {
						z.EncFallback(yy1357)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1349[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1359 := &x.Divisor
					yym1360 := z.EncBinary()
					_ = yym1360
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1359) {
					} else if !yym1360 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1359)
					} else {
						z.EncFallback(yy1359)
					}
				}
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1361 := z.DecBinary()
	_ = yym1361
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1362 := r.ContainerType()
		if yyct1362 == codecSelferValueTypeMap1234 {
			yyl1362 := r.ReadMapStart()
			if yyl1362 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1362, d)
			}
		} else if yyct1362 == codecSelferValueTypeArray1234 {
			yyl1362 := r.ReadArrayStart()
			if yyl1362 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1362, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1363Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1363Slc
	var yyhl1363 bool = l >= 0
	for yyj1363 := 0; ; yyj1363++ {
		if yyhl1363 {
			if yyj1363 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1363Slc = r.DecodeBytes(yys1363Slc, true, true)
		yys1363 := string(yys1363Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1363 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1366 := &x.Divisor
				yym1367 := z.DecBinary()
				_ = yym1367
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1366) {
				} else if !yym1367 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1366)
				} else {
					z.DecFallback(yyv1366, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1363)
		} // end switch yys1363
	} // end for yyj1363
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1368 int
	var yyb1368 bool
	var yyhl1368 bool = l >= 0
	yyj1368++
	if yyhl1368 {
		yyb1368 = yyj1368 > l
	} else {
		yyb1368 = r.CheckBreak()
	}
	if yyb1368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1368++
	if yyhl1368 {
		yyb1368 = yyj1368 > l
	} else {
		yyb1368 = r.CheckBreak()
	}
	if yyb1368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1368++
	if yyhl1368 {
		yyb1368 = yyj1368 > l
	} else {
		yyb1368 = r.CheckBreak()
	}
	if yyb1368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1371 := &x.Divisor
		yym1372 := z.DecBinary()
		_ = yym1372
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1371) {
		} else if !yym1372 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1371)
		} else {
			z.DecFallback(yyv1371, false)
		}
	}
	for {
		yyj1368++
		if yyhl1368 {
			yyb1368 = yyj1368 > l
		} else {
			yyb1368 = r.CheckBreak()
		}
		if yyb1368 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1368-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1373 := z.EncBinary()
		_ = yym1373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1374 := !z.EncBinary()
			yy2arr1374 := z.EncBasicHandle().StructToArray
			var yyq1374 [2]bool
			_, _, _ = yysep1374, yyq1374, yy2arr1374
			const yyr1374 bool = false
			yyq1374[0] = x.Name != ""
			var yynn1374 int
			if yyr1374 || yy2arr1374 {
				r.EncodeArrayStart(2)
			} else {
				yynn1374 = 1
				for _, b := range yyq1374 {
					if b {
						yynn1374++
					}
				}
				r.EncodeMapStart(yynn1374)
				yynn1374 = 0
			}
			if yyr1374 || yy2arr1374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1374[0] {
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1374[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1374 || yy2arr1374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1379 := z.EncBinary()
				_ = yym1379
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1380 := z.EncBinary()
				_ = yym1380
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1374 || yy2arr1374 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1381 := z.DecBinary()
	_ = yym1381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1382 := r.ContainerType()
		if yyct1382 == codecSelferValueTypeMap1234 {
			yyl1382 := r.ReadMapStart()
			if yyl1382 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1382, d)
			}
		} else if yyct1382 == codecSelferValueTypeArray1234 {
			yyl1382 := r.ReadArrayStart()
			if yyl1382 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1382, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1383Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1383Slc
	var yyhl1383 bool = l >= 0
	for yyj1383 := 0; ; yyj1383++ {
		if yyhl1383 {
			if yyj1383 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1383Slc = r.DecodeBytes(yys1383Slc, true, true)
		yys1383 := string(yys1383Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1383 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1383)
		} // end switch yys1383
	} // end for yyj1383
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1386 int
	var yyb1386 bool
	var yyhl1386 bool = l >= 0
	yyj1386++
	if yyhl1386 {
		yyb1386 = yyj1386 > l
	} else {
		yyb1386 = r.CheckBreak()
	}
	if yyb1386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1386++
	if yyhl1386 {
		yyb1386 = yyj1386 > l
	} else {
		yyb1386 = r.CheckBreak()
	}
	if yyb1386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1386++
		if yyhl1386 {
			yyb1386 = yyj1386 > l
		} else {
			yyb1386 = r.CheckBreak()
		}
		if yyb1386 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1386-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1389 := z.EncBinary()
		_ = yym1389
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1390 := !z.EncBinary()
			yy2arr1390 := z.EncBasicHandle().StructToArray
			var yyq1390 [2]bool
			_, _, _ = yysep1390, yyq1390, yy2arr1390
			const yyr1390 bool = false
			yyq1390[0] = x.Name != ""
			var yynn1390 int
			if yyr1390 || yy2arr1390 {
				r.EncodeArrayStart(2)
			} else {
				yynn1390 = 1
				for _, b := range yyq1390 {
					if b {
						yynn1390++
					}
				}
				r.EncodeMapStart(yynn1390)
				yynn1390 = 0
			}
			if yyr1390 || yy2arr1390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1390[0] {
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1390[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1390 || yy2arr1390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1395 := z.EncBinary()
				_ = yym1395
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1396 := z.EncBinary()
				_ = yym1396
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1390 || yy2arr1390 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1397 := z.DecBinary()
	_ = yym1397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1398 := r.ContainerType()
		if yyct1398 == codecSelferValueTypeMap1234 {
			yyl1398 := r.ReadMapStart()
			if yyl1398 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1398, d)
			}
		} else if yyct1398 == codecSelferValueTypeArray1234 {
			yyl1398 := r.ReadArrayStart()
			if yyl1398 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1399Slc
	var yyhl1399 bool = l >= 0
	for yyj1399 := 0; ; yyj1399++ {
		if yyhl1399 {
			if yyj1399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1399Slc = r.DecodeBytes(yys1399Slc, true, true)
		yys1399 := string(yys1399Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1399 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1399)
		} // end switch yys1399
	} // end for yyj1399
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1402 int
	var yyb1402 bool
	var yyhl1402 bool = l >= 0
	yyj1402++
	if yyhl1402 {
		yyb1402 = yyj1402 > l
	} else {
		yyb1402 = r.CheckBreak()
	}
	if yyb1402 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1402++
	if yyhl1402 {
		yyb1402 = yyj1402 > l
	} else {
		yyb1402 = r.CheckBreak()
	}
	if yyb1402 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1402++
		if yyhl1402 {
			yyb1402 = yyj1402 > l
		} else {
			yyb1402 = r.CheckBreak()
		}
		if yyb1402 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1402-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1405 := z.EncBinary()
		_ = yym1405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1406 := !z.EncBinary()
			yy2arr1406 := z.EncBasicHandle().StructToArray
			var yyq1406 [2]bool
			_, _, _ = yysep1406, yyq1406, yy2arr1406
			const yyr1406 bool = false
			var yynn1406 int
			if yyr1406 || yy2arr1406 {
				r.EncodeArrayStart(2)
			} else {
				yynn1406 = 2
				for _, b := range yyq1406 {
					if b {
						yynn1406++
					}
				}
				r.EncodeMapStart(yynn1406)
				yynn1406 = 0
			}
			if yyr1406 || yy2arr1406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1408 := z.EncBinary()
				_ = yym1408
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1409 := z.EncBinary()
				_ = yym1409
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1406 || yy2arr1406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1411 := z.EncBinary()
				_ = yym1411
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1412 := z.EncBinary()
				_ = yym1412
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1406 || yy2arr1406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1413 := z.DecBinary()
	_ = yym1413
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1414 := r.ContainerType()
		if yyct1414 == codecSelferValueTypeMap1234 {
			yyl1414 := r.ReadMapStart()
			if yyl1414 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1414, d)
			}
		} else if yyct1414 == codecSelferValueTypeArray1234 {
			yyl1414 := r.ReadArrayStart()
			if yyl1414 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1414, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1415Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1415Slc
	var yyhl1415 bool = l >= 0
	for yyj1415 := 0; ; yyj1415++ {
		if yyhl1415 {
			if yyj1415 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1415Slc = r.DecodeBytes(yys1415Slc, true, true)
		yys1415 := string(yys1415Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1415 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1415)
		} // end switch yys1415
	} // end for yyj1415
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1418 int
	var yyb1418 bool
	var yyhl1418 bool = l >= 0
	yyj1418++
	if yyhl1418 {
		yyb1418 = yyj1418 > l
	} else {
		yyb1418 = r.CheckBreak()
	}
	if yyb1418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1418++
	if yyhl1418 {
		yyb1418 = yyj1418 > l
	} else {
		yyb1418 = r.CheckBreak()
	}
	if yyb1418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1418++
		if yyhl1418 {
			yyb1418 = yyj1418 > l
		} else {
			yyb1418 = r.CheckBreak()
		}
		if yyb1418 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1418-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1421 := z.EncBinary()
		_ = yym1421
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1422 := !z.EncBinary()
			yy2arr1422 := z.EncBasicHandle().StructToArray
			var yyq1422 [5]bool
			_, _, _ = yysep1422, yyq1422, yy2arr1422
			const yyr1422 bool = false
			yyq1422[0] = x.Path != ""
			yyq1422[2] = x.Host != ""
			yyq1422[3] = x.Scheme != ""
			yyq1422[4] = len(x.HTTPHeaders) != 0
			var yynn1422 int
			if yyr1422 || yy2arr1422 {
				r.EncodeArrayStart(5)
			} else {
				yynn1422 = 1
				for _, b := range yyq1422 {
					if b {
						yynn1422++
					}
				}
				r.EncodeMapStart(yynn1422)
				yynn1422 = 0
			}
			if yyr1422 || yy2arr1422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1422[0] {
					yym1424 := z.EncBinary()
					_ = yym1424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1422[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1425 := z.EncBinary()
					_ = yym1425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1422 || yy2arr1422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1427 := &x.Port
				yym1428 := z.EncBinary()
				_ = yym1428
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1427) {
				} else if !yym1428 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1427)
				} else {
					z.EncFallback(yy1427)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1429 := &x.Port
				yym1430 := z.EncBinary()
				_ = yym1430
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1429) {
				} else if !yym1430 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1429)
				} else {
					z.EncFallback(yy1429)
				}
			}
			if yyr1422 || yy2arr1422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1422[2] {
					yym1432 := z.EncBinary()
					_ = yym1432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1422[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1433 := z.EncBinary()
					_ = yym1433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1422 || yy2arr1422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1422[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1422[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1422 || yy2arr1422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1422[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1436 := z.EncBinary()
						_ = yym1436
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1422[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1437 := z.EncBinary()
						_ = yym1437
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1422 || yy2arr1422 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1438 := z.DecBinary()
	_ = yym1438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1439 := r.ContainerType()
		if yyct1439 == codecSelferValueTypeMap1234 {
			yyl1439 := r.ReadMapStart()
			if yyl1439 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1439, d)
			}
		} else if yyct1439 == codecSelferValueTypeArray1234 {
			yyl1439 := r.ReadArrayStart()
			if yyl1439 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1439, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1440Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1440Slc
	var yyhl1440 bool = l >= 0
	for yyj1440 := 0; ; yyj1440++ {
		if yyhl1440 {
			if yyj1440 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1440Slc = r.DecodeBytes(yys1440Slc, true, true)
		yys1440 := string(yys1440Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1440 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1442 := &x.Port
				yym1443 := z.DecBinary()
				_ = yym1443
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1442) {
				} else if !yym1443 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1442)
				} else {
					z.DecFallback(yyv1442, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1446 := &x.HTTPHeaders
				yym1447 := z.DecBinary()
				_ = yym1447
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1446), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1440)
		} // end switch yys1440
	} // end for yyj1440
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1448 int
	var yyb1448 bool
	var yyhl1448 bool = l >= 0
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1450 := &x.Port
		yym1451 := z.DecBinary()
		_ = yym1451
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1450) {
		} else if !yym1451 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1450)
		} else {
			z.DecFallback(yyv1450, false)
		}
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1454 := &x.HTTPHeaders
		yym1455 := z.DecBinary()
		_ = yym1455
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1454), d)
		}
	}
	for {
		yyj1448++
		if yyhl1448 {
			yyb1448 = yyj1448 > l
		} else {
			yyb1448 = r.CheckBreak()
		}
		if yyb1448 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1448-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1456 := z.EncBinary()
	_ = yym1456
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1457 := z.DecBinary()
	_ = yym1457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1458 := z.EncBinary()
		_ = yym1458
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1459 := !z.EncBinary()
			yy2arr1459 := z.EncBasicHandle().StructToArray
			var yyq1459 [1]bool
			_, _, _ = yysep1459, yyq1459, yy2arr1459
			const yyr1459 bool = false
			var yynn1459 int
			if yyr1459 || yy2arr1459 {
				r.EncodeArrayStart(1)
			} else {
				yynn1459 = 1
				for _, b := range yyq1459 {
					if b {
						yynn1459++
					}
				}
				r.EncodeMapStart(yynn1459)
				yynn1459 = 0
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1461 := &x.Port
				yym1462 := z.EncBinary()
				_ = yym1462
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1461) {
				} else if !yym1462 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1461)
				} else {
					z.EncFallback(yy1461)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1463 := &x.Port
				yym1464 := z.EncBinary()
				_ = yym1464
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1463) {
				} else if !yym1464 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1463)
				} else {
					z.EncFallback(yy1463)
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1465 := z.DecBinary()
	_ = yym1465
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1466 := r.ContainerType()
		if yyct1466 == codecSelferValueTypeMap1234 {
			yyl1466 := r.ReadMapStart()
			if yyl1466 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1466, d)
			}
		} else if yyct1466 == codecSelferValueTypeArray1234 {
			yyl1466 := r.ReadArrayStart()
			if yyl1466 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1466, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1467Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1467Slc
	var yyhl1467 bool = l >= 0
	for yyj1467 := 0; ; yyj1467++ {
		if yyhl1467 {
			if yyj1467 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1467Slc = r.DecodeBytes(yys1467Slc, true, true)
		yys1467 := string(yys1467Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1467 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1468 := &x.Port
				yym1469 := z.DecBinary()
				_ = yym1469
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1468) {
				} else if !yym1469 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1468)
				} else {
					z.DecFallback(yyv1468, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1467)
		} // end switch yys1467
	} // end for yyj1467
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1470 int
	var yyb1470 bool
	var yyhl1470 bool = l >= 0
	yyj1470++
	if yyhl1470 {
		yyb1470 = yyj1470 > l
	} else {
		yyb1470 = r.CheckBreak()
	}
	if yyb1470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1471 := &x.Port
		yym1472 := z.DecBinary()
		_ = yym1472
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1471) {
		} else if !yym1472 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1471)
		} else {
			z.DecFallback(yyv1471, false)
		}
	}
	for {
		yyj1470++
		if yyhl1470 {
			yyb1470 = yyj1470 > l
		} else {
			yyb1470 = r.CheckBreak()
		}
		if yyb1470 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1470-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1473 := z.EncBinary()
		_ = yym1473
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1474 := !z.EncBinary()
			yy2arr1474 := z.EncBasicHandle().StructToArray
			var yyq1474 [1]bool
			_, _, _ = yysep1474, yyq1474, yy2arr1474
			const yyr1474 bool = false
			yyq1474[0] = len(x.Command) != 0
			var yynn1474 int
			if yyr1474 || yy2arr1474 {
				r.EncodeArrayStart(1)
			} else {
				yynn1474 = 0
				for _, b := range yyq1474 {
					if b {
						yynn1474++
					}
				}
				r.EncodeMapStart(yynn1474)
				yynn1474 = 0
			}
			if yyr1474 || yy2arr1474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1474[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1476 := z.EncBinary()
						_ = yym1476
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1474[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1477 := z.EncBinary()
						_ = yym1477
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1474 || yy2arr1474 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1478 := z.DecBinary()
	_ = yym1478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1479 := r.ContainerType()
		if yyct1479 == codecSelferValueTypeMap1234 {
			yyl1479 := r.ReadMapStart()
			if yyl1479 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1479, d)
			}
		} else if yyct1479 == codecSelferValueTypeArray1234 {
			yyl1479 := r.ReadArrayStart()
			if yyl1479 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1480Slc
	var yyhl1480 bool = l >= 0
	for yyj1480 := 0; ; yyj1480++ {
		if yyhl1480 {
			if yyj1480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1480Slc = r.DecodeBytes(yys1480Slc, true, true)
		yys1480 := string(yys1480Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1480 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1481 := &x.Command
				yym1482 := z.DecBinary()
				_ = yym1482
				if false {
				} else {
					z.F.DecSliceStringX(yyv1481, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1480)
		} // end switch yys1480
	} // end for yyj1480
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1483 int
	var yyb1483 bool
	var yyhl1483 bool = l >= 0
	yyj1483++
	if yyhl1483 {
		yyb1483 = yyj1483 > l
	} else {
		yyb1483 = r.CheckBreak()
	}
	if yyb1483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1484 := &x.Command
		yym1485 := z.DecBinary()
		_ = yym1485
		if false {
		} else {
			z.F.DecSliceStringX(yyv1484, false, d)
		}
	}
	for {
		yyj1483++
		if yyhl1483 {
			yyb1483 = yyj1483 > l
		} else {
			yyb1483 = r.CheckBreak()
		}
		if yyb1483 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1483-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1486 := z.EncBinary()
		_ = yym1486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1487 := !z.EncBinary()
			yy2arr1487 := z.EncBasicHandle().StructToArray
			var yyq1487 [8]bool
			_, _, _ = yysep1487, yyq1487, yy2arr1487
			const yyr1487 bool = false
			yyq1487[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1487[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1487[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1487[3] = x.InitialDelaySeconds != 0
			yyq1487[4] = x.TimeoutSeconds != 0
			yyq1487[5] = x.PeriodSeconds != 0
			yyq1487[6] = x.SuccessThreshold != 0
			yyq1487[7] = x.FailureThreshold != 0
			var yynn1487 int
			if yyr1487 || yy2arr1487 {
				r.EncodeArrayStart(8)
			} else {
				yynn1487 = 0
				for _, b := range yyq1487 {
					if b {
						yynn1487++
					}
				}
				r.EncodeMapStart(yynn1487)
				yynn1487 = 0
			}
			var yyn1488 bool
			if x.Handler.Exec == nil {
				yyn1488 = true
				goto LABEL1488
			}
		LABEL1488:
			if yyr1487 || yy2arr1487 {
				if yyn1488 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1487[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1487[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1488 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1489 bool
			if x.Handler.HTTPGet == nil {
				yyn1489 = true
				goto LABEL1489
			}
		LABEL1489:
			if yyr1487 || yy2arr1487 {
				if yyn1489 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1487[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1487[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1489 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1490 bool
			if x.Handler.TCPSocket == nil {
				yyn1490 = true
				goto LABEL1490
			}
		LABEL1490:
			if yyr1487 || yy2arr1487 {
				if yyn1490 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1487[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1487[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1490 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[3] {
					yym1492 := z.EncBinary()
					_ = yym1492
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1487[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[4] {
					yym1495 := z.EncBinary()
					_ = yym1495
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1487[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1496 := z.EncBinary()
					_ = yym1496
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[5] {
					yym1498 := z.EncBinary()
					_ = yym1498
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1487[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1499 := z.EncBinary()
					_ = yym1499
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[6] {
					yym1501 := z.EncBinary()
					_ = yym1501
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1487[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1502 := z.EncBinary()
					_ = yym1502
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[7] {
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1487[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1505 := z.EncBinary()
					_ = yym1505
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1506 := z.DecBinary()
	_ = yym1506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1507 := r.ContainerType()
		if yyct1507 == codecSelferValueTypeMap1234 {
			yyl1507 := r.ReadMapStart()
			if yyl1507 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1507, d)
			}
		} else if yyct1507 == codecSelferValueTypeArray1234 {
			yyl1507 := r.ReadArrayStart()
			if yyl1507 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1507, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1508Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1508Slc
	var yyhl1508 bool = l >= 0
	for yyj1508 := 0; ; yyj1508++ {
		if yyhl1508 {
			if yyj1508 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1508Slc = r.DecodeBytes(yys1508Slc, true, true)
		yys1508 := string(yys1508Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1508 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1508)
		} // end switch yys1508
	} // end for yyj1508
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1517 int
	var yyb1517 bool
	var yyhl1517 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1517++
		if yyhl1517 {
			yyb1517 = yyj1517 > l
		} else {
			yyb1517 = r.CheckBreak()
		}
		if yyb1517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1526 := z.EncBinary()
	_ = yym1526
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1527 := z.DecBinary()
	_ = yym1527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1528 := z.EncBinary()
	_ = yym1528
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1529 := z.DecBinary()
	_ = yym1529
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1530 := z.EncBinary()
		_ = yym1530
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1531 := !z.EncBinary()
			yy2arr1531 := z.EncBasicHandle().StructToArray
			var yyq1531 [2]bool
			_, _, _ = yysep1531, yyq1531, yy2arr1531
			const yyr1531 bool = false
			yyq1531[0] = len(x.Add) != 0
			yyq1531[1] = len(x.Drop) != 0
			var yynn1531 int
			if yyr1531 || yy2arr1531 {
				r.EncodeArrayStart(2)
			} else {
				yynn1531 = 0
				for _, b := range yyq1531 {
					if b {
						yynn1531++
					}
				}
				r.EncodeMapStart(yynn1531)
				yynn1531 = 0
			}
			if yyr1531 || yy2arr1531 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1531[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1533 := z.EncBinary()
						_ = yym1533
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1531[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1534 := z.EncBinary()
						_ = yym1534
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1531 || yy2arr1531 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1531[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1536 := z.EncBinary()
						_ = yym1536
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1531[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1537 := z.EncBinary()
						_ = yym1537
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1531 || yy2arr1531 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1538 := z.DecBinary()
	_ = yym1538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1539 := r.ContainerType()
		if yyct1539 == codecSelferValueTypeMap1234 {
			yyl1539 := r.ReadMapStart()
			if yyl1539 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1539, d)
			}
		} else if yyct1539 == codecSelferValueTypeArray1234 {
			yyl1539 := r.ReadArrayStart()
			if yyl1539 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1539, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1540Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1540Slc
	var yyhl1540 bool = l >= 0
	for yyj1540 := 0; ; yyj1540++ {
		if yyhl1540 {
			if yyj1540 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1540Slc = r.DecodeBytes(yys1540Slc, true, true)
		yys1540 := string(yys1540Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1540 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1541 := &x.Add
				yym1542 := z.DecBinary()
				_ = yym1542
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1541), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1543 := &x.Drop
				yym1544 := z.DecBinary()
				_ = yym1544
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1543), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1540)
		} // end switch yys1540
	} // end for yyj1540
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1545 int
	var yyb1545 bool
	var yyhl1545 bool = l >= 0
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1546 := &x.Add
		yym1547 := z.DecBinary()
		_ = yym1547
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1546), d)
		}
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1548 := &x.Drop
		yym1549 := z.DecBinary()
		_ = yym1549
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1548), d)
		}
	}
	for {
		yyj1545++
		if yyhl1545 {
			yyb1545 = yyj1545 > l
		} else {
			yyb1545 = r.CheckBreak()
		}
		if yyb1545 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1545-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1550 := z.EncBinary()
		_ = yym1550
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1551 := !z.EncBinary()
			yy2arr1551 := z.EncBasicHandle().StructToArray
			var yyq1551 [2]bool
			_, _, _ = yysep1551, yyq1551, yy2arr1551
			const yyr1551 bool = false
			yyq1551[0] = len(x.Limits) != 0
			yyq1551[1] = len(x.Requests) != 0
			var yynn1551 int
			if yyr1551 || yy2arr1551 {
				r.EncodeArrayStart(2)
			} else {
				yynn1551 = 0
				for _, b := range yyq1551 {
					if b {
						yynn1551++
					}
				}
				r.EncodeMapStart(yynn1551)
				yynn1551 = 0
			}
			if yyr1551 || yy2arr1551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1551[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1551[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1551 || yy2arr1551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1551[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1551[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1551 || yy2arr1551 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1554 := z.DecBinary()
	_ = yym1554
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1555 := r.ContainerType()
		if yyct1555 == codecSelferValueTypeMap1234 {
			yyl1555 := r.ReadMapStart()
			if yyl1555 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1555, d)
			}
		} else if yyct1555 == codecSelferValueTypeArray1234 {
			yyl1555 := r.ReadArrayStart()
			if yyl1555 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1555, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1556Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1556Slc
	var yyhl1556 bool = l >= 0
	for yyj1556 := 0; ; yyj1556++ {
		if yyhl1556 {
			if yyj1556 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1556Slc = r.DecodeBytes(yys1556Slc, true, true)
		yys1556 := string(yys1556Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1556 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1557 := &x.Limits
				yyv1557.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1558 := &x.Requests
				yyv1558.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1556)
		} // end switch yys1556
	} // end for yyj1556
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1559 int
	var yyb1559 bool
	var yyhl1559 bool = l >= 0
	yyj1559++
	if yyhl1559 {
		yyb1559 = yyj1559 > l
	} else {
		yyb1559 = r.CheckBreak()
	}
	if yyb1559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1560 := &x.Limits
		yyv1560.CodecDecodeSelf(d)
	}
	yyj1559++
	if yyhl1559 {
		yyb1559 = yyj1559 > l
	} else {
		yyb1559 = r.CheckBreak()
	}
	if yyb1559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1561 := &x.Requests
		yyv1561.CodecDecodeSelf(d)
	}
	for {
		yyj1559++
		if yyhl1559 {
			yyb1559 = yyj1559 > l
		} else {
			yyb1559 = r.CheckBreak()
		}
		if yyb1559 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1559-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1562 := z.EncBinary()
		_ = yym1562
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1563 := !z.EncBinary()
			yy2arr1563 := z.EncBasicHandle().StructToArray
			var yyq1563 [18]bool
			_, _, _ = yysep1563, yyq1563, yy2arr1563
			const yyr1563 bool = false
			yyq1563[1] = x.Image != ""
			yyq1563[2] = len(x.Command) != 0
			yyq1563[3] = len(x.Args) != 0
			yyq1563[4] = x.WorkingDir != ""
			yyq1563[5] = len(x.Ports) != 0
			yyq1563[6] = len(x.Env) != 0
			yyq1563[7] = true
			yyq1563[8] = len(x.VolumeMounts) != 0
			yyq1563[9] = x.LivenessProbe != nil
			yyq1563[10] = x.ReadinessProbe != nil
			yyq1563[11] = x.Lifecycle != nil
			yyq1563[12] = x.TerminationMessagePath != ""
			yyq1563[13] = x.ImagePullPolicy != ""
			yyq1563[14] = x.SecurityContext != nil
			yyq1563[15] = x.Stdin != false
			yyq1563[16] = x.StdinOnce != false
			yyq1563[17] = x.TTY != false
			var yynn1563 int
			if yyr1563 || yy2arr1563 {
				r.EncodeArrayStart(18)
			} else {
				yynn1563 = 1
				for _, b := range yyq1563 {
					if b {
						yynn1563++
					}
				}
				r.EncodeMapStart(yynn1563)
				yynn1563 = 0
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1565 := z.EncBinary()
				_ = yym1565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1566 := z.EncBinary()
				_ = yym1566
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[1] {
					yym1568 := z.EncBinary()
					_ = yym1568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1563[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1569 := z.EncBinary()
					_ = yym1569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1571 := z.EncBinary()
						_ = yym1571
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1563[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1572 := z.EncBinary()
						_ = yym1572
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1574 := z.EncBinary()
						_ = yym1574
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1563[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1575 := z.EncBinary()
						_ = yym1575
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[4] {
					yym1577 := z.EncBinary()
					_ = yym1577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1563[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1578 := z.EncBinary()
					_ = yym1578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1580 := z.EncBinary()
						_ = yym1580
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1563[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1581 := z.EncBinary()
						_ = yym1581
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1583 := z.EncBinary()
						_ = yym1583
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1563[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1584 := z.EncBinary()
						_ = yym1584
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[7] {
					yy1586 := &x.Resources
					yy1586.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1563[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1587 := &x.Resources
					yy1587.CodecEncodeSelf(e)
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1589 := z.EncBinary()
						_ = yym1589
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1563[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1590 := z.EncBinary()
						_ = yym1590
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1563[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1563[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1563[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[12] {
					yym1595 := z.EncBinary()
					_ = yym1595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1563[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1596 := z.EncBinary()
					_ = yym1596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1563[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1563[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[15] {
					yym1600 := z.EncBinary()
					_ = yym1600
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1563[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1601 := z.EncBinary()
					_ = yym1601
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[16] {
					yym1603 := z.EncBinary()
					_ = yym1603
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1563[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1604 := z.EncBinary()
					_ = yym1604
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1563[17] {
					yym1606 := z.EncBinary()
					_ = yym1606
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1563[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1607 := z.EncBinary()
					_ = yym1607
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1563 || yy2arr1563 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1608 := z.DecBinary()
	_ = yym1608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1609 := r.ContainerType()
		if yyct1609 == codecSelferValueTypeMap1234 {
			yyl1609 := r.ReadMapStart()
			if yyl1609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1609, d)
			}
		} else if yyct1609 == codecSelferValueTypeArray1234 {
			yyl1609 := r.ReadArrayStart()
			if yyl1609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1610Slc
	var yyhl1610 bool = l >= 0
	for yyj1610 := 0; ; yyj1610++ {
		if yyhl1610 {
			if yyj1610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1610Slc = r.DecodeBytes(yys1610Slc, true, true)
		yys1610 := string(yys1610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1610 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1613 := &x.Command
				yym1614 := z.DecBinary()
				_ = yym1614
				if false {
				} else {
					z.F.DecSliceStringX(yyv1613, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1615 := &x.Args
				yym1616 := z.DecBinary()
				_ = yym1616
				if false {
				} else {
					z.F.DecSliceStringX(yyv1615, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1618 := &x.Ports
				yym1619 := z.DecBinary()
				_ = yym1619
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1618), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1620 := &x.Env
				yym1621 := z.DecBinary()
				_ = yym1621
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1620), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1622 := &x.Resources
				yyv1622.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1623 := &x.VolumeMounts
				yym1624 := z.DecBinary()
				_ = yym1624
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1623), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1610)
		} // end switch yys1610
	} // end for yyj1610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1634 int
	var yyb1634 bool
	var yyhl1634 bool = l >= 0
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1637 := &x.Command
		yym1638 := z.DecBinary()
		_ = yym1638
		if false {
		} else {
			z.F.DecSliceStringX(yyv1637, false, d)
		}
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1639 := &x.Args
		yym1640 := z.DecBinary()
		_ = yym1640
		if false {
		} else {
			z.F.DecSliceStringX(yyv1639, false, d)
		}
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1642 := &x.Ports
		yym1643 := z.DecBinary()
		_ = yym1643
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1642), d)
		}
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1644 := &x.Env
		yym1645 := z.DecBinary()
		_ = yym1645
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1644), d)
		}
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1646 := &x.Resources
		yyv1646.CodecDecodeSelf(d)
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1647 := &x.VolumeMounts
		yym1648 := z.DecBinary()
		_ = yym1648
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1647), d)
		}
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1634++
		if yyhl1634 {
			yyb1634 = yyj1634 > l
		} else {
			yyb1634 = r.CheckBreak()
		}
		if yyb1634 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1634-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1658 := z.EncBinary()
		_ = yym1658
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1659 := !z.EncBinary()
			yy2arr1659 := z.EncBasicHandle().StructToArray
			var yyq1659 [3]bool
			_, _, _ = yysep1659, yyq1659, yy2arr1659
			const yyr1659 bool = false
			yyq1659[0] = x.Exec != nil
			yyq1659[1] = x.HTTPGet != nil
			yyq1659[2] = x.TCPSocket != nil
			var yynn1659 int
			if yyr1659 || yy2arr1659 {
				r.EncodeArrayStart(3)
			} else {
				yynn1659 = 0
				for _, b := range yyq1659 {
					if b {
						yynn1659++
					}
				}
				r.EncodeMapStart(yynn1659)
				yynn1659 = 0
			}
			if yyr1659 || yy2arr1659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1659[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1659[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1659 || yy2arr1659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1659[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1659[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1659 || yy2arr1659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1659[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1659[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1659 || yy2arr1659 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1663 := z.DecBinary()
	_ = yym1663
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1664 := r.ContainerType()
		if yyct1664 == codecSelferValueTypeMap1234 {
			yyl1664 := r.ReadMapStart()
			if yyl1664 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1664, d)
			}
		} else if yyct1664 == codecSelferValueTypeArray1234 {
			yyl1664 := r.ReadArrayStart()
			if yyl1664 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1664, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1665Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1665Slc
	var yyhl1665 bool = l >= 0
	for yyj1665 := 0; ; yyj1665++ {
		if yyhl1665 {
			if yyj1665 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1665Slc = r.DecodeBytes(yys1665Slc, true, true)
		yys1665 := string(yys1665Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1665 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1665)
		} // end switch yys1665
	} // end for yyj1665
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1669 int
	var yyb1669 bool
	var yyhl1669 bool = l >= 0
	yyj1669++
	if yyhl1669 {
		yyb1669 = yyj1669 > l
	} else {
		yyb1669 = r.CheckBreak()
	}
	if yyb1669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1669++
	if yyhl1669 {
		yyb1669 = yyj1669 > l
	} else {
		yyb1669 = r.CheckBreak()
	}
	if yyb1669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1669++
	if yyhl1669 {
		yyb1669 = yyj1669 > l
	} else {
		yyb1669 = r.CheckBreak()
	}
	if yyb1669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1669++
		if yyhl1669 {
			yyb1669 = yyj1669 > l
		} else {
			yyb1669 = r.CheckBreak()
		}
		if yyb1669 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1669-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1673 := z.EncBinary()
		_ = yym1673
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1674 := !z.EncBinary()
			yy2arr1674 := z.EncBasicHandle().StructToArray
			var yyq1674 [2]bool
			_, _, _ = yysep1674, yyq1674, yy2arr1674
			const yyr1674 bool = false
			yyq1674[0] = x.PostStart != nil
			yyq1674[1] = x.PreStop != nil
			var yynn1674 int
			if yyr1674 || yy2arr1674 {
				r.EncodeArrayStart(2)
			} else {
				yynn1674 = 0
				for _, b := range yyq1674 {
					if b {
						yynn1674++
					}
				}
				r.EncodeMapStart(yynn1674)
				yynn1674 = 0
			}
			if yyr1674 || yy2arr1674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1674[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1674[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1674 || yy2arr1674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1674[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1674[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1674 || yy2arr1674 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1677 := z.DecBinary()
	_ = yym1677
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1678 := r.ContainerType()
		if yyct1678 == codecSelferValueTypeMap1234 {
			yyl1678 := r.ReadMapStart()
			if yyl1678 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1678, d)
			}
		} else if yyct1678 == codecSelferValueTypeArray1234 {
			yyl1678 := r.ReadArrayStart()
			if yyl1678 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1678, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1679Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1679Slc
	var yyhl1679 bool = l >= 0
	for yyj1679 := 0; ; yyj1679++ {
		if yyhl1679 {
			if yyj1679 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1679Slc = r.DecodeBytes(yys1679Slc, true, true)
		yys1679 := string(yys1679Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1679 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1679)
		} // end switch yys1679
	} // end for yyj1679
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1682 int
	var yyb1682 bool
	var yyhl1682 bool = l >= 0
	yyj1682++
	if yyhl1682 {
		yyb1682 = yyj1682 > l
	} else {
		yyb1682 = r.CheckBreak()
	}
	if yyb1682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1682++
	if yyhl1682 {
		yyb1682 = yyj1682 > l
	} else {
		yyb1682 = r.CheckBreak()
	}
	if yyb1682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1682++
		if yyhl1682 {
			yyb1682 = yyj1682 > l
		} else {
			yyb1682 = r.CheckBreak()
		}
		if yyb1682 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1682-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1685 := z.EncBinary()
	_ = yym1685
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1686 := z.DecBinary()
	_ = yym1686
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1687 := z.EncBinary()
		_ = yym1687
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1688 := !z.EncBinary()
			yy2arr1688 := z.EncBasicHandle().StructToArray
			var yyq1688 [2]bool
			_, _, _ = yysep1688, yyq1688, yy2arr1688
			const yyr1688 bool = false
			yyq1688[0] = x.Reason != ""
			yyq1688[1] = x.Message != ""
			var yynn1688 int
			if yyr1688 || yy2arr1688 {
				r.EncodeArrayStart(2)
			} else {
				yynn1688 = 0
				for _, b := range yyq1688 {
					if b {
						yynn1688++
					}
				}
				r.EncodeMapStart(yynn1688)
				yynn1688 = 0
			}
			if yyr1688 || yy2arr1688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1688[0] {
					yym1690 := z.EncBinary()
					_ = yym1690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1688[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1691 := z.EncBinary()
					_ = yym1691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1688 || yy2arr1688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1688[1] {
					yym1693 := z.EncBinary()
					_ = yym1693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1688[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1694 := z.EncBinary()
					_ = yym1694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1688 || yy2arr1688 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1695 := z.DecBinary()
	_ = yym1695
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1696 := r.ContainerType()
		if yyct1696 == codecSelferValueTypeMap1234 {
			yyl1696 := r.ReadMapStart()
			if yyl1696 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1696, d)
			}
		} else if yyct1696 == codecSelferValueTypeArray1234 {
			yyl1696 := r.ReadArrayStart()
			if yyl1696 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1696, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1697Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1697Slc
	var yyhl1697 bool = l >= 0
	for yyj1697 := 0; ; yyj1697++ {
		if yyhl1697 {
			if yyj1697 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1697Slc = r.DecodeBytes(yys1697Slc, true, true)
		yys1697 := string(yys1697Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1697 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1697)
		} // end switch yys1697
	} // end for yyj1697
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1700 int
	var yyb1700 bool
	var yyhl1700 bool = l >= 0
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1700++
		if yyhl1700 {
			yyb1700 = yyj1700 > l
		} else {
			yyb1700 = r.CheckBreak()
		}
		if yyb1700 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1700-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1703 := z.EncBinary()
		_ = yym1703
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1704 := !z.EncBinary()
			yy2arr1704 := z.EncBasicHandle().StructToArray
			var yyq1704 [1]bool
			_, _, _ = yysep1704, yyq1704, yy2arr1704
			const yyr1704 bool = false
			yyq1704[0] = true
			var yynn1704 int
			if yyr1704 || yy2arr1704 {
				r.EncodeArrayStart(1)
			} else {
				yynn1704 = 0
				for _, b := range yyq1704 {
					if b {
						yynn1704++
					}
				}
				r.EncodeMapStart(yynn1704)
				yynn1704 = 0
			}
			if yyr1704 || yy2arr1704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1704[0] {
					yy1706 := &x.StartedAt
					yym1707 := z.EncBinary()
					_ = yym1707
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1706) {
					} else if yym1707 {
						z.EncBinaryMarshal(yy1706)
					} else if !yym1707 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1706)
					} else {
						z.EncFallback(yy1706)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1704[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1708 := &x.StartedAt
					yym1709 := z.EncBinary()
					_ = yym1709
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1708) {
					} else if yym1709 {
						z.EncBinaryMarshal(yy1708)
					} else if !yym1709 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1708)
					} else {
						z.EncFallback(yy1708)
					}
				}
			}
			if yyr1704 || yy2arr1704 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1710 := z.DecBinary()
	_ = yym1710
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1711 := r.ContainerType()
		if yyct1711 == codecSelferValueTypeMap1234 {
			yyl1711 := r.ReadMapStart()
			if yyl1711 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1711, d)
			}
		} else if yyct1711 == codecSelferValueTypeArray1234 {
			yyl1711 := r.ReadArrayStart()
			if yyl1711 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1711, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1712Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1712Slc
	var yyhl1712 bool = l >= 0
	for yyj1712 := 0; ; yyj1712++ {
		if yyhl1712 {
			if yyj1712 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1712Slc = r.DecodeBytes(yys1712Slc, true, true)
		yys1712 := string(yys1712Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1712 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1713 := &x.StartedAt
				yym1714 := z.DecBinary()
				_ = yym1714
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1713) {
				} else if yym1714 {
					z.DecBinaryUnmarshal(yyv1713)
				} else if !yym1714 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1713)
				} else {
					z.DecFallback(yyv1713, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1712)
		} // end switch yys1712
	} // end for yyj1712
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1715 int
	var yyb1715 bool
	var yyhl1715 bool = l >= 0
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1716 := &x.StartedAt
		yym1717 := z.DecBinary()
		_ = yym1717
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1716) {
		} else if yym1717 {
			z.DecBinaryUnmarshal(yyv1716)
		} else if !yym1717 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1716)
		} else {
			z.DecFallback(yyv1716, false)
		}
	}
	for {
		yyj1715++
		if yyhl1715 {
			yyb1715 = yyj1715 > l
		} else {
			yyb1715 = r.CheckBreak()
		}
		if yyb1715 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1715-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1718 := z.EncBinary()
		_ = yym1718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1719 := !z.EncBinary()
			yy2arr1719 := z.EncBasicHandle().StructToArray
			var yyq1719 [7]bool
			_, _, _ = yysep1719, yyq1719, yy2arr1719
			const yyr1719 bool = false
			yyq1719[1] = x.Signal != 0
			yyq1719[2] = x.Reason != ""
			yyq1719[3] = x.Message != ""
			yyq1719[4] = true
			yyq1719[5] = true
			yyq1719[6] = x.ContainerID != ""
			var yynn1719 int
			if yyr1719 || yy2arr1719 {
				r.EncodeArrayStart(7)
			} else {
				yynn1719 = 1
				for _, b := range yyq1719 {
					if b {
						yynn1719++
					}
				}
				r.EncodeMapStart(yynn1719)
				yynn1719 = 0
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1721 := z.EncBinary()
				_ = yym1721
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1722 := z.EncBinary()
				_ = yym1722
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[1] {
					yym1724 := z.EncBinary()
					_ = yym1724
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1719[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1725 := z.EncBinary()
					_ = yym1725
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[2] {
					yym1727 := z.EncBinary()
					_ = yym1727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[3] {
					yym1730 := z.EncBinary()
					_ = yym1730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1719[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1731 := z.EncBinary()
					_ = yym1731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[4] {
					yy1733 := &x.StartedAt
					yym1734 := z.EncBinary()
					_ = yym1734
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1733) {
					} else if yym1734 {
						z.EncBinaryMarshal(yy1733)
					} else if !yym1734 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1733)
					} else {
						z.EncFallback(yy1733)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1719[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1735 := &x.StartedAt
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1735) {
					} else if yym1736 {
						z.EncBinaryMarshal(yy1735)
					} else if !yym1736 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1735)
					} else {
						z.EncFallback(yy1735)
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[5] {
					yy1738 := &x.FinishedAt
					yym1739 := z.EncBinary()
					_ = yym1739
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1738) {
					} else if yym1739 {
						z.EncBinaryMarshal(yy1738)
					} else if !yym1739 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1738)
					} else {
						z.EncFallback(yy1738)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1719[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1740 := &x.FinishedAt
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1740) {
					} else if yym1741 {
						z.EncBinaryMarshal(yy1740)
					} else if !yym1741 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1740)
					} else {
						z.EncFallback(yy1740)
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[6] {
					yym1743 := z.EncBinary()
					_ = yym1743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1719[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1744 := z.EncBinary()
					_ = yym1744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1745 := z.DecBinary()
	_ = yym1745
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1746 := r.ContainerType()
		if yyct1746 == codecSelferValueTypeMap1234 {
			yyl1746 := r.ReadMapStart()
			if yyl1746 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1746, d)
			}
		} else if yyct1746 == codecSelferValueTypeArray1234 {
			yyl1746 := r.ReadArrayStart()
			if yyl1746 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1746, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1747Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1747Slc
	var yyhl1747 bool = l >= 0
	for yyj1747 := 0; ; yyj1747++ {
		if yyhl1747 {
			if yyj1747 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1747Slc = r.DecodeBytes(yys1747Slc, true, true)
		yys1747 := string(yys1747Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1747 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1752 := &x.StartedAt
				yym1753 := z.DecBinary()
				_ = yym1753
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1752) {
				} else if yym1753 {
					z.DecBinaryUnmarshal(yyv1752)
				} else if !yym1753 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1752)
				} else {
					z.DecFallback(yyv1752, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1754 := &x.FinishedAt
				yym1755 := z.DecBinary()
				_ = yym1755
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1754) {
				} else if yym1755 {
					z.DecBinaryUnmarshal(yyv1754)
				} else if !yym1755 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1754)
				} else {
					z.DecFallback(yyv1754, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1747)
		} // end switch yys1747
	} // end for yyj1747
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1757 int
	var yyb1757 bool
	var yyhl1757 bool = l >= 0
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1762 := &x.StartedAt
		yym1763 := z.DecBinary()
		_ = yym1763
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1762) {
		} else if yym1763 {
			z.DecBinaryUnmarshal(yyv1762)
		} else if !yym1763 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1762)
		} else {
			z.DecFallback(yyv1762, false)
		}
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1764 := &x.FinishedAt
		yym1765 := z.DecBinary()
		_ = yym1765
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1764) {
		} else if yym1765 {
			z.DecBinaryUnmarshal(yyv1764)
		} else if !yym1765 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1764)
		} else {
			z.DecFallback(yyv1764, false)
		}
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1757++
		if yyhl1757 {
			yyb1757 = yyj1757 > l
		} else {
			yyb1757 = r.CheckBreak()
		}
		if yyb1757 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1757-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1767 := z.EncBinary()
		_ = yym1767
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1768 := !z.EncBinary()
			yy2arr1768 := z.EncBasicHandle().StructToArray
			var yyq1768 [3]bool
			_, _, _ = yysep1768, yyq1768, yy2arr1768
			const yyr1768 bool = false
			yyq1768[0] = x.Waiting != nil
			yyq1768[1] = x.Running != nil
			yyq1768[2] = x.Terminated != nil
			var yynn1768 int
			if yyr1768 || yy2arr1768 {
				r.EncodeArrayStart(3)
			} else {
				yynn1768 = 0
				for _, b := range yyq1768 {
					if b {
						yynn1768++
					}
				}
				r.EncodeMapStart(yynn1768)
				yynn1768 = 0
			}
			if yyr1768 || yy2arr1768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1768[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1768[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1768 || yy2arr1768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1768[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1768[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1768 || yy2arr1768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1768[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1768[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1768 || yy2arr1768 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1772 := z.DecBinary()
	_ = yym1772
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1773 := r.ContainerType()
		if yyct1773 == codecSelferValueTypeMap1234 {
			yyl1773 := r.ReadMapStart()
			if yyl1773 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1773, d)
			}
		} else if yyct1773 == codecSelferValueTypeArray1234 {
			yyl1773 := r.ReadArrayStart()
			if yyl1773 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1773, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1774Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1774Slc
	var yyhl1774 bool = l >= 0
	for yyj1774 := 0; ; yyj1774++ {
		if yyhl1774 {
			if yyj1774 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1774Slc = r.DecodeBytes(yys1774Slc, true, true)
		yys1774 := string(yys1774Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1774 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1774)
		} // end switch yys1774
	} // end for yyj1774
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1778 int
	var yyb1778 bool
	var yyhl1778 bool = l >= 0
	yyj1778++
	if yyhl1778 {
		yyb1778 = yyj1778 > l
	} else {
		yyb1778 = r.CheckBreak()
	}
	if yyb1778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1778++
	if yyhl1778 {
		yyb1778 = yyj1778 > l
	} else {
		yyb1778 = r.CheckBreak()
	}
	if yyb1778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1778++
	if yyhl1778 {
		yyb1778 = yyj1778 > l
	} else {
		yyb1778 = r.CheckBreak()
	}
	if yyb1778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1778++
		if yyhl1778 {
			yyb1778 = yyj1778 > l
		} else {
			yyb1778 = r.CheckBreak()
		}
		if yyb1778 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1778-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1782 := z.EncBinary()
		_ = yym1782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1783 := !z.EncBinary()
			yy2arr1783 := z.EncBasicHandle().StructToArray
			var yyq1783 [8]bool
			_, _, _ = yysep1783, yyq1783, yy2arr1783
			const yyr1783 bool = false
			yyq1783[1] = true
			yyq1783[2] = true
			yyq1783[7] = x.ContainerID != ""
			var yynn1783 int
			if yyr1783 || yy2arr1783 {
				r.EncodeArrayStart(8)
			} else {
				yynn1783 = 5
				for _, b := range yyq1783 {
					if b {
						yynn1783++
					}
				}
				r.EncodeMapStart(yynn1783)
				yynn1783 = 0
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1785 := z.EncBinary()
				_ = yym1785
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1786 := z.EncBinary()
				_ = yym1786
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1783[1] {
					yy1788 := &x.State
					yy1788.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1783[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1789 := &x.State
					yy1789.CodecEncodeSelf(e)
				}
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1783[2] {
					yy1791 := &x.LastTerminationState
					yy1791.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1783[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1792 := &x.LastTerminationState
					yy1792.CodecEncodeSelf(e)
				}
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1794 := z.EncBinary()
				_ = yym1794
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1795 := z.EncBinary()
				_ = yym1795
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1797 := z.EncBinary()
				_ = yym1797
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1798 := z.EncBinary()
				_ = yym1798
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1800 := z.EncBinary()
				_ = yym1800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1801 := z.EncBinary()
				_ = yym1801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1803 := z.EncBinary()
				_ = yym1803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1804 := z.EncBinary()
				_ = yym1804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1783[7] {
					yym1806 := z.EncBinary()
					_ = yym1806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1783[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1807 := z.EncBinary()
					_ = yym1807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1808 := z.DecBinary()
	_ = yym1808
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1809 := r.ContainerType()
		if yyct1809 == codecSelferValueTypeMap1234 {
			yyl1809 := r.ReadMapStart()
			if yyl1809 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1809, d)
			}
		} else if yyct1809 == codecSelferValueTypeArray1234 {
			yyl1809 := r.ReadArrayStart()
			if yyl1809 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1809, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1810Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1810Slc
	var yyhl1810 bool = l >= 0
	for yyj1810 := 0; ; yyj1810++ {
		if yyhl1810 {
			if yyj1810 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1810Slc = r.DecodeBytes(yys1810Slc, true, true)
		yys1810 := string(yys1810Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1810 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1812 := &x.State
				yyv1812.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1813 := &x.LastTerminationState
				yyv1813.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1810)
		} // end switch yys1810
	} // end for yyj1810
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1819 int
	var yyb1819 bool
	var yyhl1819 bool = l >= 0
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1821 := &x.State
		yyv1821.CodecDecodeSelf(d)
	}
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1822 := &x.LastTerminationState
		yyv1822.CodecDecodeSelf(d)
	}
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1819++
		if yyhl1819 {
			yyb1819 = yyj1819 > l
		} else {
			yyb1819 = r.CheckBreak()
		}
		if yyb1819 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1819-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1828 := z.EncBinary()
	_ = yym1828
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1829 := z.DecBinary()
	_ = yym1829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1830 := z.EncBinary()
	_ = yym1830
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1831 := z.DecBinary()
	_ = yym1831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1832 := z.EncBinary()
		_ = yym1832
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1833 := !z.EncBinary()
			yy2arr1833 := z.EncBasicHandle().StructToArray
			var yyq1833 [6]bool
			_, _, _ = yysep1833, yyq1833, yy2arr1833
			const yyr1833 bool = false
			yyq1833[2] = true
			yyq1833[3] = true
			yyq1833[4] = x.Reason != ""
			yyq1833[5] = x.Message != ""
			var yynn1833 int
			if yyr1833 || yy2arr1833 {
				r.EncodeArrayStart(6)
			} else {
				yynn1833 = 2
				for _, b := range yyq1833 {
					if b {
						yynn1833++
					}
				}
				r.EncodeMapStart(yynn1833)
				yynn1833 = 0
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1833[2] {
					yy1837 := &x.LastProbeTime
					yym1838 := z.EncBinary()
					_ = yym1838
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1837) {
					} else if yym1838 {
						z.EncBinaryMarshal(yy1837)
					} else if !yym1838 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1837)
					} else {
						z.EncFallback(yy1837)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1833[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1839 := &x.LastProbeTime
					yym1840 := z.EncBinary()
					_ = yym1840
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1839) {
					} else if yym1840 {
						z.EncBinaryMarshal(yy1839)
					} else if !yym1840 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1839)
					} else {
						z.EncFallback(yy1839)
					}
				}
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1833[3] {
					yy1842 := &x.LastTransitionTime
					yym1843 := z.EncBinary()
					_ = yym1843
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1842) {
					} else if yym1843 {
						z.EncBinaryMarshal(yy1842)
					} else if !yym1843 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1842)
					} else {
						z.EncFallback(yy1842)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1833[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1844 := &x.LastTransitionTime
					yym1845 := z.EncBinary()
					_ = yym1845
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1844) {
					} else if yym1845 {
						z.EncBinaryMarshal(yy1844)
					} else if !yym1845 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1844)
					} else {
						z.EncFallback(yy1844)
					}
				}
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1833[4] {
					yym1847 := z.EncBinary()
					_ = yym1847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1833[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1833[5] {
					yym1850 := z.EncBinary()
					_ = yym1850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1833[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1852 := z.DecBinary()
	_ = yym1852
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1853 := r.ContainerType()
		if yyct1853 == codecSelferValueTypeMap1234 {
			yyl1853 := r.ReadMapStart()
			if yyl1853 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1853, d)
			}
		} else if yyct1853 == codecSelferValueTypeArray1234 {
			yyl1853 := r.ReadArrayStart()
			if yyl1853 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1853, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1854Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1854Slc
	var yyhl1854 bool = l >= 0
	for yyj1854 := 0; ; yyj1854++ {
		if yyhl1854 {
			if yyj1854 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1854Slc = r.DecodeBytes(yys1854Slc, true, true)
		yys1854 := string(yys1854Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1854 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1857 := &x.LastProbeTime
				yym1858 := z.DecBinary()
				_ = yym1858
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1857) {
				} else if yym1858 {
					z.DecBinaryUnmarshal(yyv1857)
				} else if !yym1858 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1857)
				} else {
					z.DecFallback(yyv1857, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1859 := &x.LastTransitionTime
				yym1860 := z.DecBinary()
				_ = yym1860
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1859) {
				} else if yym1860 {
					z.DecBinaryUnmarshal(yyv1859)
				} else if !yym1860 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1859)
				} else {
					z.DecFallback(yyv1859, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1854)
		} // end switch yys1854
	} // end for yyj1854
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1863 int
	var yyb1863 bool
	var yyhl1863 bool = l >= 0
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1866 := &x.LastProbeTime
		yym1867 := z.DecBinary()
		_ = yym1867
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1866) {
		} else if yym1867 {
			z.DecBinaryUnmarshal(yyv1866)
		} else if !yym1867 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1866)
		} else {
			z.DecFallback(yyv1866, false)
		}
	}
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1868 := &x.LastTransitionTime
		yym1869 := z.DecBinary()
		_ = yym1869
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1868) {
		} else if yym1869 {
			z.DecBinaryUnmarshal(yyv1868)
		} else if !yym1869 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1868)
		} else {
			z.DecFallback(yyv1868, false)
		}
	}
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1863++
		if yyhl1863 {
			yyb1863 = yyj1863 > l
		} else {
			yyb1863 = r.CheckBreak()
		}
		if yyb1863 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1863-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1872 := z.EncBinary()
	_ = yym1872
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1873 := z.DecBinary()
	_ = yym1873
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1874 := z.EncBinary()
	_ = yym1874
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1875 := z.DecBinary()
	_ = yym1875
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1876 := z.EncBinary()
		_ = yym1876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1877 := !z.EncBinary()
			yy2arr1877 := z.EncBasicHandle().StructToArray
			var yyq1877 [1]bool
			_, _, _ = yysep1877, yyq1877, yy2arr1877
			const yyr1877 bool = false
			var yynn1877 int
			if yyr1877 || yy2arr1877 {
				r.EncodeArrayStart(1)
			} else {
				yynn1877 = 1
				for _, b := range yyq1877 {
					if b {
						yynn1877++
					}
				}
				r.EncodeMapStart(yynn1877)
				yynn1877 = 0
			}
			if yyr1877 || yy2arr1877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1879 := z.EncBinary()
					_ = yym1879
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1880 := z.EncBinary()
					_ = yym1880
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1877 || yy2arr1877 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1881 := z.DecBinary()
	_ = yym1881
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1882 := r.ContainerType()
		if yyct1882 == codecSelferValueTypeMap1234 {
			yyl1882 := r.ReadMapStart()
			if yyl1882 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1882, d)
			}
		} else if yyct1882 == codecSelferValueTypeArray1234 {
			yyl1882 := r.ReadArrayStart()
			if yyl1882 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1882, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1883Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1883Slc
	var yyhl1883 bool = l >= 0
	for yyj1883 := 0; ; yyj1883++ {
		if yyhl1883 {
			if yyj1883 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1883Slc = r.DecodeBytes(yys1883Slc, true, true)
		yys1883 := string(yys1883Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1883 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1884 := &x.NodeSelectorTerms
				yym1885 := z.DecBinary()
				_ = yym1885
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1884), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1883)
		} // end switch yys1883
	} // end for yyj1883
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1886 int
	var yyb1886 bool
	var yyhl1886 bool = l >= 0
	yyj1886++
	if yyhl1886 {
		yyb1886 = yyj1886 > l
	} else {
		yyb1886 = r.CheckBreak()
	}
	if yyb1886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1887 := &x.NodeSelectorTerms
		yym1888 := z.DecBinary()
		_ = yym1888
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1887), d)
		}
	}
	for {
		yyj1886++
		if yyhl1886 {
			yyb1886 = yyj1886 > l
		} else {
			yyb1886 = r.CheckBreak()
		}
		if yyb1886 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1886-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1889 := z.EncBinary()
		_ = yym1889
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1890 := !z.EncBinary()
			yy2arr1890 := z.EncBasicHandle().StructToArray
			var yyq1890 [1]bool
			_, _, _ = yysep1890, yyq1890, yy2arr1890
			const yyr1890 bool = false
			var yynn1890 int
			if yyr1890 || yy2arr1890 {
				r.EncodeArrayStart(1)
			} else {
				yynn1890 = 1
				for _, b := range yyq1890 {
					if b {
						yynn1890++
					}
				}
				r.EncodeMapStart(yynn1890)
				yynn1890 = 0
			}
			if yyr1890 || yy2arr1890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1892 := z.EncBinary()
					_ = yym1892
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1893 := z.EncBinary()
					_ = yym1893
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1890 || yy2arr1890 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1894 := z.DecBinary()
	_ = yym1894
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1895 := r.ContainerType()
		if yyct1895 == codecSelferValueTypeMap1234 {
			yyl1895 := r.ReadMapStart()
			if yyl1895 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1895, d)
			}
		} else if yyct1895 == codecSelferValueTypeArray1234 {
			yyl1895 := r.ReadArrayStart()
			if yyl1895 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1895, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1896Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1896Slc
	var yyhl1896 bool = l >= 0
	for yyj1896 := 0; ; yyj1896++ {
		if yyhl1896 {
			if yyj1896 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1896Slc = r.DecodeBytes(yys1896Slc, true, true)
		yys1896 := string(yys1896Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1896 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1897 := &x.MatchExpressions
				yym1898 := z.DecBinary()
				_ = yym1898
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1897), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1896)
		} // end switch yys1896
	} // end for yyj1896
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1899 int
	var yyb1899 bool
	var yyhl1899 bool = l >= 0
	yyj1899++
	if yyhl1899 {
		yyb1899 = yyj1899 > l
	} else {
		yyb1899 = r.CheckBreak()
	}
	if yyb1899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1900 := &x.MatchExpressions
		yym1901 := z.DecBinary()
		_ = yym1901
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1900), d)
		}
	}
	for {
		yyj1899++
		if yyhl1899 {
			yyb1899 = yyj1899 > l
		} else {
			yyb1899 = r.CheckBreak()
		}
		if yyb1899 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1899-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1902 := z.EncBinary()
		_ = yym1902
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1903 := !z.EncBinary()
			yy2arr1903 := z.EncBasicHandle().StructToArray
			var yyq1903 [3]bool
			_, _, _ = yysep1903, yyq1903, yy2arr1903
			const yyr1903 bool = false
			yyq1903[2] = len(x.Values) != 0
			var yynn1903 int
			if yyr1903 || yy2arr1903 {
				r.EncodeArrayStart(3)
			} else {
				yynn1903 = 2
				for _, b := range yyq1903 {
					if b {
						yynn1903++
					}
				}
				r.EncodeMapStart(yynn1903)
				yynn1903 = 0
			}
			if yyr1903 || yy2arr1903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1905 := z.EncBinary()
				_ = yym1905
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1906 := z.EncBinary()
				_ = yym1906
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1903 || yy2arr1903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1903 || yy2arr1903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1903[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1909 := z.EncBinary()
						_ = yym1909
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1903[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1910 := z.EncBinary()
						_ = yym1910
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1903 || yy2arr1903 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1911 := z.DecBinary()
	_ = yym1911
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1912 := r.ContainerType()
		if yyct1912 == codecSelferValueTypeMap1234 {
			yyl1912 := r.ReadMapStart()
			if yyl1912 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1912, d)
			}
		} else if yyct1912 == codecSelferValueTypeArray1234 {
			yyl1912 := r.ReadArrayStart()
			if yyl1912 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1912, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1913Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1913Slc
	var yyhl1913 bool = l >= 0
	for yyj1913 := 0; ; yyj1913++ {
		if yyhl1913 {
			if yyj1913 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1913Slc = r.DecodeBytes(yys1913Slc, true, true)
		yys1913 := string(yys1913Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1913 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1916 := &x.Values
				yym1917 := z.DecBinary()
				_ = yym1917
				if false {
				} else {
					z.F.DecSliceStringX(yyv1916, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1913)
		} // end switch yys1913
	} // end for yyj1913
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1918 int
	var yyb1918 bool
	var yyhl1918 bool = l >= 0
	yyj1918++
	if yyhl1918 {
		yyb1918 = yyj1918 > l
	} else {
		yyb1918 = r.CheckBreak()
	}
	if yyb1918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1918++
	if yyhl1918 {
		yyb1918 = yyj1918 > l
	} else {
		yyb1918 = r.CheckBreak()
	}
	if yyb1918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1918++
	if yyhl1918 {
		yyb1918 = yyj1918 > l
	} else {
		yyb1918 = r.CheckBreak()
	}
	if yyb1918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1921 := &x.Values
		yym1922 := z.DecBinary()
		_ = yym1922
		if false {
		} else {
			z.F.DecSliceStringX(yyv1921, false, d)
		}
	}
	for {
		yyj1918++
		if yyhl1918 {
			yyb1918 = yyj1918 > l
		} else {
			yyb1918 = r.CheckBreak()
		}
		if yyb1918 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1918-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1923 := z.EncBinary()
	_ = yym1923
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1924 := z.DecBinary()
	_ = yym1924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1925 := z.EncBinary()
		_ = yym1925
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1926 := !z.EncBinary()
			yy2arr1926 := z.EncBasicHandle().StructToArray
			var yyq1926 [3]bool
			_, _, _ = yysep1926, yyq1926, yy2arr1926
			const yyr1926 bool = false
			yyq1926[0] = x.NodeAffinity != nil
			yyq1926[1] = x.PodAffinity != nil
			yyq1926[2] = x.PodAntiAffinity != nil
			var yynn1926 int
			if yyr1926 || yy2arr1926 {
				r.EncodeArrayStart(3)
			} else {
				yynn1926 = 0
				for _, b := range yyq1926 {
					if b {
						yynn1926++
					}
				}
				r.EncodeMapStart(yynn1926)
				yynn1926 = 0
			}
			if yyr1926 || yy2arr1926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1926[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1926[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1926 || yy2arr1926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1926[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1926[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1926 || yy2arr1926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1926[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1926[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1926 || yy2arr1926 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1930 := z.DecBinary()
	_ = yym1930
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1931 := r.ContainerType()
		if yyct1931 == codecSelferValueTypeMap1234 {
			yyl1931 := r.ReadMapStart()
			if yyl1931 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1931, d)
			}
		} else if yyct1931 == codecSelferValueTypeArray1234 {
			yyl1931 := r.ReadArrayStart()
			if yyl1931 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1931, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1932Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1932Slc
	var yyhl1932 bool = l >= 0
	for yyj1932 := 0; ; yyj1932++ {
		if yyhl1932 {
			if yyj1932 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1932Slc = r.DecodeBytes(yys1932Slc, true, true)
		yys1932 := string(yys1932Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1932 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1932)
		} // end switch yys1932
	} // end for yyj1932
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1936 int
	var yyb1936 bool
	var yyhl1936 bool = l >= 0
	yyj1936++
	if yyhl1936 {
		yyb1936 = yyj1936 > l
	} else {
		yyb1936 = r.CheckBreak()
	}
	if yyb1936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1936++
	if yyhl1936 {
		yyb1936 = yyj1936 > l
	} else {
		yyb1936 = r.CheckBreak()
	}
	if yyb1936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1936++
	if yyhl1936 {
		yyb1936 = yyj1936 > l
	} else {
		yyb1936 = r.CheckBreak()
	}
	if yyb1936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1936++
		if yyhl1936 {
			yyb1936 = yyj1936 > l
		} else {
			yyb1936 = r.CheckBreak()
		}
		if yyb1936 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1936-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1940 := z.EncBinary()
		_ = yym1940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1941 := !z.EncBinary()
			yy2arr1941 := z.EncBasicHandle().StructToArray
			var yyq1941 [2]bool
			_, _, _ = yysep1941, yyq1941, yy2arr1941
			const yyr1941 bool = false
			yyq1941[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1941[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1941 int
			if yyr1941 || yy2arr1941 {
				r.EncodeArrayStart(2)
			} else {
				yynn1941 = 0
				for _, b := range yyq1941 {
					if b {
						yynn1941++
					}
				}
				r.EncodeMapStart(yynn1941)
				yynn1941 = 0
			}
			if yyr1941 || yy2arr1941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1941[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1943 := z.EncBinary()
						_ = yym1943
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1941[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1944 := z.EncBinary()
						_ = yym1944
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1941 || yy2arr1941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1941[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1946 := z.EncBinary()
						_ = yym1946
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1941[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1947 := z.EncBinary()
						_ = yym1947
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1941 || yy2arr1941 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1948 := z.DecBinary()
	_ = yym1948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1949 := r.ContainerType()
		if yyct1949 == codecSelferValueTypeMap1234 {
			yyl1949 := r.ReadMapStart()
			if yyl1949 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1949, d)
			}
		} else if yyct1949 == codecSelferValueTypeArray1234 {
			yyl1949 := r.ReadArrayStart()
			if yyl1949 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1950Slc
	var yyhl1950 bool = l >= 0
	for yyj1950 := 0; ; yyj1950++ {
		if yyhl1950 {
			if yyj1950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1950Slc = r.DecodeBytes(yys1950Slc, true, true)
		yys1950 := string(yys1950Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1950 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1951 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1952 := z.DecBinary()
				_ = yym1952
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1951), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1953 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1954 := z.DecBinary()
				_ = yym1954
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1953), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1950)
		} // end switch yys1950
	} // end for yyj1950
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1955 int
	var yyb1955 bool
	var yyhl1955 bool = l >= 0
	yyj1955++
	if yyhl1955 {
		yyb1955 = yyj1955 > l
	} else {
		yyb1955 = r.CheckBreak()
	}
	if yyb1955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1956 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1957 := z.DecBinary()
		_ = yym1957
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1956), d)
		}
	}
	yyj1955++
	if yyhl1955 {
		yyb1955 = yyj1955 > l
	} else {
		yyb1955 = r.CheckBreak()
	}
	if yyb1955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1958 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1959 := z.DecBinary()
		_ = yym1959
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1958), d)
		}
	}
	for {
		yyj1955++
		if yyhl1955 {
			yyb1955 = yyj1955 > l
		} else {
			yyb1955 = r.CheckBreak()
		}
		if yyb1955 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1955-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1960 := z.EncBinary()
		_ = yym1960
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1961 := !z.EncBinary()
			yy2arr1961 := z.EncBasicHandle().StructToArray
			var yyq1961 [2]bool
			_, _, _ = yysep1961, yyq1961, yy2arr1961
			const yyr1961 bool = false
			yyq1961[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1961[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1961 int
			if yyr1961 || yy2arr1961 {
				r.EncodeArrayStart(2)
			} else {
				yynn1961 = 0
				for _, b := range yyq1961 {
					if b {
						yynn1961++
					}
				}
				r.EncodeMapStart(yynn1961)
				yynn1961 = 0
			}
			if yyr1961 || yy2arr1961 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1961[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1963 := z.EncBinary()
						_ = yym1963
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1961[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1964 := z.EncBinary()
						_ = yym1964
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1961 || yy2arr1961 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1961[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1966 := z.EncBinary()
						_ = yym1966
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1961[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1967 := z.EncBinary()
						_ = yym1967
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1961 || yy2arr1961 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1968 := z.DecBinary()
	_ = yym1968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1969 := r.ContainerType()
		if yyct1969 == codecSelferValueTypeMap1234 {
			yyl1969 := r.ReadMapStart()
			if yyl1969 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1969, d)
			}
		} else if yyct1969 == codecSelferValueTypeArray1234 {
			yyl1969 := r.ReadArrayStart()
			if yyl1969 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1969, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1970Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1970Slc
	var yyhl1970 bool = l >= 0
	for yyj1970 := 0; ; yyj1970++ {
		if yyhl1970 {
			if yyj1970 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1970Slc = r.DecodeBytes(yys1970Slc, true, true)
		yys1970 := string(yys1970Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1970 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1971 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1972 := z.DecBinary()
				_ = yym1972
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1971), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1973 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1974 := z.DecBinary()
				_ = yym1974
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1973), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1970)
		} // end switch yys1970
	} // end for yyj1970
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1975 int
	var yyb1975 bool
	var yyhl1975 bool = l >= 0
	yyj1975++
	if yyhl1975 {
		yyb1975 = yyj1975 > l
	} else {
		yyb1975 = r.CheckBreak()
	}
	if yyb1975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1976 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1977 := z.DecBinary()
		_ = yym1977
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1976), d)
		}
	}
	yyj1975++
	if yyhl1975 {
		yyb1975 = yyj1975 > l
	} else {
		yyb1975 = r.CheckBreak()
	}
	if yyb1975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1978 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1979 := z.DecBinary()
		_ = yym1979
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1978), d)
		}
	}
	for {
		yyj1975++
		if yyhl1975 {
			yyb1975 = yyj1975 > l
		} else {
			yyb1975 = r.CheckBreak()
		}
		if yyb1975 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1975-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1980 := z.EncBinary()
		_ = yym1980
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1981 := !z.EncBinary()
			yy2arr1981 := z.EncBasicHandle().StructToArray
			var yyq1981 [2]bool
			_, _, _ = yysep1981, yyq1981, yy2arr1981
			const yyr1981 bool = false
			var yynn1981 int
			if yyr1981 || yy2arr1981 {
				r.EncodeArrayStart(2)
			} else {
				yynn1981 = 2
				for _, b := range yyq1981 {
					if b {
						yynn1981++
					}
				}
				r.EncodeMapStart(yynn1981)
				yynn1981 = 0
			}
			if yyr1981 || yy2arr1981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1983 := z.EncBinary()
				_ = yym1983
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1984 := z.EncBinary()
				_ = yym1984
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1981 || yy2arr1981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1986 := &x.PodAffinityTerm
				yy1986.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1987 := &x.PodAffinityTerm
				yy1987.CodecEncodeSelf(e)
			}
			if yyr1981 || yy2arr1981 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1988 := z.DecBinary()
	_ = yym1988
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1989 := r.ContainerType()
		if yyct1989 == codecSelferValueTypeMap1234 {
			yyl1989 := r.ReadMapStart()
			if yyl1989 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1989, d)
			}
		} else if yyct1989 == codecSelferValueTypeArray1234 {
			yyl1989 := r.ReadArrayStart()
			if yyl1989 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1989, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1990Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1990Slc
	var yyhl1990 bool = l >= 0
	for yyj1990 := 0; ; yyj1990++ {
		if yyhl1990 {
			if yyj1990 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1990Slc = r.DecodeBytes(yys1990Slc, true, true)
		yys1990 := string(yys1990Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1990 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1992 := &x.PodAffinityTerm
				yyv1992.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1990)
		} // end switch yys1990
	} // end for yyj1990
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1993 int
	var yyb1993 bool
	var yyhl1993 bool = l >= 0
	yyj1993++
	if yyhl1993 {
		yyb1993 = yyj1993 > l
	} else {
		yyb1993 = r.CheckBreak()
	}
	if yyb1993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1993++
	if yyhl1993 {
		yyb1993 = yyj1993 > l
	} else {
		yyb1993 = r.CheckBreak()
	}
	if yyb1993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1995 := &x.PodAffinityTerm
		yyv1995.CodecDecodeSelf(d)
	}
	for {
		yyj1993++
		if yyhl1993 {
			yyb1993 = yyj1993 > l
		} else {
			yyb1993 = r.CheckBreak()
		}
		if yyb1993 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1993-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1996 := z.EncBinary()
		_ = yym1996
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1997 := !z.EncBinary()
			yy2arr1997 := z.EncBasicHandle().StructToArray
			var yyq1997 [3]bool
			_, _, _ = yysep1997, yyq1997, yy2arr1997
			const yyr1997 bool = false
			yyq1997[0] = x.LabelSelector != nil
			yyq1997[2] = x.TopologyKey != ""
			var yynn1997 int
			if yyr1997 || yy2arr1997 {
				r.EncodeArrayStart(3)
			} else {
				yynn1997 = 1
				for _, b := range yyq1997 {
					if b {
						yynn1997++
					}
				}
				r.EncodeMapStart(yynn1997)
				yynn1997 = 0
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1999 := z.EncBinary()
						_ = yym1999
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1997[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2000 := z.EncBinary()
						_ = yym2000
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2002 := z.EncBinary()
					_ = yym2002
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2003 := z.EncBinary()
					_ = yym2003
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[2] {
					yym2005 := z.EncBinary()
					_ = yym2005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1997[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2006 := z.EncBinary()
					_ = yym2006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2007 := z.DecBinary()
	_ = yym2007
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2008 := r.ContainerType()
		if yyct2008 == codecSelferValueTypeMap1234 {
			yyl2008 := r.ReadMapStart()
			if yyl2008 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2008, d)
			}
		} else if yyct2008 == codecSelferValueTypeArray1234 {
			yyl2008 := r.ReadArrayStart()
			if yyl2008 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2008, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2009Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2009Slc
	var yyhl2009 bool = l >= 0
	for yyj2009 := 0; ; yyj2009++ {
		if yyhl2009 {
			if yyj2009 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2009Slc = r.DecodeBytes(yys2009Slc, true, true)
		yys2009 := string(yys2009Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2009 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym2011 := z.DecBinary()
				_ = yym2011
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv2012 := &x.Namespaces
				yym2013 := z.DecBinary()
				_ = yym2013
				if false {
				} else {
					z.F.DecSliceStringX(yyv2012, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2009)
		} // end switch yys2009
	} // end for yyj2009
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2015 int
	var yyb2015 bool
	var yyhl2015 bool = l >= 0
	yyj2015++
	if yyhl2015 {
		yyb2015 = yyj2015 > l
	} else {
		yyb2015 = r.CheckBreak()
	}
	if yyb2015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym2017 := z.DecBinary()
		_ = yym2017
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj2015++
	if yyhl2015 {
		yyb2015 = yyj2015 > l
	} else {
		yyb2015 = r.CheckBreak()
	}
	if yyb2015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv2018 := &x.Namespaces
		yym2019 := z.DecBinary()
		_ = yym2019
		if false {
		} else {
			z.F.DecSliceStringX(yyv2018, false, d)
		}
	}
	yyj2015++
	if yyhl2015 {
		yyb2015 = yyj2015 > l
	} else {
		yyb2015 = r.CheckBreak()
	}
	if yyb2015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj2015++
		if yyhl2015 {
			yyb2015 = yyj2015 > l
		} else {
			yyb2015 = r.CheckBreak()
		}
		if yyb2015 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2015-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2021 := z.EncBinary()
		_ = yym2021
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2022 := !z.EncBinary()
			yy2arr2022 := z.EncBasicHandle().StructToArray
			var yyq2022 [2]bool
			_, _, _ = yysep2022, yyq2022, yy2arr2022
			const yyr2022 bool = false
			yyq2022[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq2022[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn2022 int
			if yyr2022 || yy2arr2022 {
				r.EncodeArrayStart(2)
			} else {
				yynn2022 = 0
				for _, b := range yyq2022 {
					if b {
						yynn2022++
					}
				}
				r.EncodeMapStart(yynn2022)
				yynn2022 = 0
			}
			if yyr2022 || yy2arr2022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2022[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2022[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2022 || yy2arr2022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2022[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2025 := z.EncBinary()
						_ = yym2025
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2022[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2026 := z.EncBinary()
						_ = yym2026
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr2022 || yy2arr2022 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2027 := z.DecBinary()
	_ = yym2027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2028 := r.ContainerType()
		if yyct2028 == codecSelferValueTypeMap1234 {
			yyl2028 := r.ReadMapStart()
			if yyl2028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2028, d)
			}
		} else if yyct2028 == codecSelferValueTypeArray1234 {
			yyl2028 := r.ReadArrayStart()
			if yyl2028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2029Slc
	var yyhl2029 bool = l >= 0
	for yyj2029 := 0; ; yyj2029++ {
		if yyhl2029 {
			if yyj2029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2029Slc = r.DecodeBytes(yys2029Slc, true, true)
		yys2029 := string(yys2029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2029 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2031 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2032 := z.DecBinary()
				_ = yym2032
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2031), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2029)
		} // end switch yys2029
	} // end for yyj2029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2033 int
	var yyb2033 bool
	var yyhl2033 bool = l >= 0
	yyj2033++
	if yyhl2033 {
		yyb2033 = yyj2033 > l
	} else {
		yyb2033 = r.CheckBreak()
	}
	if yyb2033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj2033++
	if yyhl2033 {
		yyb2033 = yyj2033 > l
	} else {
		yyb2033 = r.CheckBreak()
	}
	if yyb2033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2035 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2036 := z.DecBinary()
		_ = yym2036
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2035), d)
		}
	}
	for {
		yyj2033++
		if yyhl2033 {
			yyb2033 = yyj2033 > l
		} else {
			yyb2033 = r.CheckBreak()
		}
		if yyb2033 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2033-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2037 := z.EncBinary()
		_ = yym2037
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2038 := !z.EncBinary()
			yy2arr2038 := z.EncBasicHandle().StructToArray
			var yyq2038 [2]bool
			_, _, _ = yysep2038, yyq2038, yy2arr2038
			const yyr2038 bool = false
			var yynn2038 int
			if yyr2038 || yy2arr2038 {
				r.EncodeArrayStart(2)
			} else {
				yynn2038 = 2
				for _, b := range yyq2038 {
					if b {
						yynn2038++
					}
				}
				r.EncodeMapStart(yynn2038)
				yynn2038 = 0
			}
			if yyr2038 || yy2arr2038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2040 := z.EncBinary()
				_ = yym2040
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2041 := z.EncBinary()
				_ = yym2041
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2038 || yy2arr2038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2043 := &x.Preference
				yy2043.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2044 := &x.Preference
				yy2044.CodecEncodeSelf(e)
			}
			if yyr2038 || yy2arr2038 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2045 := z.DecBinary()
	_ = yym2045
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2046 := r.ContainerType()
		if yyct2046 == codecSelferValueTypeMap1234 {
			yyl2046 := r.ReadMapStart()
			if yyl2046 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2046, d)
			}
		} else if yyct2046 == codecSelferValueTypeArray1234 {
			yyl2046 := r.ReadArrayStart()
			if yyl2046 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2046, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2047Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2047Slc
	var yyhl2047 bool = l >= 0
	for yyj2047 := 0; ; yyj2047++ {
		if yyhl2047 {
			if yyj2047 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2047Slc = r.DecodeBytes(yys2047Slc, true, true)
		yys2047 := string(yys2047Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2047 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv2049 := &x.Preference
				yyv2049.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2047)
		} // end switch yys2047
	} // end for yyj2047
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2050 int
	var yyb2050 bool
	var yyhl2050 bool = l >= 0
	yyj2050++
	if yyhl2050 {
		yyb2050 = yyj2050 > l
	} else {
		yyb2050 = r.CheckBreak()
	}
	if yyb2050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2050++
	if yyhl2050 {
		yyb2050 = yyj2050 > l
	} else {
		yyb2050 = r.CheckBreak()
	}
	if yyb2050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv2052 := &x.Preference
		yyv2052.CodecDecodeSelf(d)
	}
	for {
		yyj2050++
		if yyhl2050 {
			yyb2050 = yyj2050 > l
		} else {
			yyb2050 = r.CheckBreak()
		}
		if yyb2050 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2050-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2053 := z.EncBinary()
		_ = yym2053
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2054 := !z.EncBinary()
			yy2arr2054 := z.EncBasicHandle().StructToArray
			var yyq2054 [3]bool
			_, _, _ = yysep2054, yyq2054, yy2arr2054
			const yyr2054 bool = false
			yyq2054[1] = x.Value != ""
			var yynn2054 int
			if yyr2054 || yy2arr2054 {
				r.EncodeArrayStart(3)
			} else {
				yynn2054 = 2
				for _, b := range yyq2054 {
					if b {
						yynn2054++
					}
				}
				r.EncodeMapStart(yynn2054)
				yynn2054 = 0
			}
			if yyr2054 || yy2arr2054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2056 := z.EncBinary()
				_ = yym2056
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2057 := z.EncBinary()
				_ = yym2057
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr2054 || yy2arr2054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2054[1] {
					yym2059 := z.EncBinary()
					_ = yym2059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2054[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2060 := z.EncBinary()
					_ = yym2060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2054 || yy2arr2054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr2054 || yy2arr2054 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2062 := z.DecBinary()
	_ = yym2062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2063 := r.ContainerType()
		if yyct2063 == codecSelferValueTypeMap1234 {
			yyl2063 := r.ReadMapStart()
			if yyl2063 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2063, d)
			}
		} else if yyct2063 == codecSelferValueTypeArray1234 {
			yyl2063 := r.ReadArrayStart()
			if yyl2063 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2063, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2064Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2064Slc
	var yyhl2064 bool = l >= 0
	for yyj2064 := 0; ; yyj2064++ {
		if yyhl2064 {
			if yyj2064 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2064Slc = r.DecodeBytes(yys2064Slc, true, true)
		yys2064 := string(yys2064Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2064 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2064)
		} // end switch yys2064
	} // end for yyj2064
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2068 int
	var yyb2068 bool
	var yyhl2068 bool = l >= 0
	yyj2068++
	if yyhl2068 {
		yyb2068 = yyj2068 > l
	} else {
		yyb2068 = r.CheckBreak()
	}
	if yyb2068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2068++
	if yyhl2068 {
		yyb2068 = yyj2068 > l
	} else {
		yyb2068 = r.CheckBreak()
	}
	if yyb2068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2068++
	if yyhl2068 {
		yyb2068 = yyj2068 > l
	} else {
		yyb2068 = r.CheckBreak()
	}
	if yyb2068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2068++
		if yyhl2068 {
			yyb2068 = yyj2068 > l
		} else {
			yyb2068 = r.CheckBreak()
		}
		if yyb2068 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2068-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2072 := z.EncBinary()
	_ = yym2072
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2073 := z.DecBinary()
	_ = yym2073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2074 := z.EncBinary()
		_ = yym2074
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2075 := !z.EncBinary()
			yy2arr2075 := z.EncBasicHandle().StructToArray
			var yyq2075 [4]bool
			_, _, _ = yysep2075, yyq2075, yy2arr2075
			const yyr2075 bool = false
			yyq2075[0] = x.Key != ""
			yyq2075[1] = x.Operator != ""
			yyq2075[2] = x.Value != ""
			yyq2075[3] = x.Effect != ""
			var yynn2075 int
			if yyr2075 || yy2arr2075 {
				r.EncodeArrayStart(4)
			} else {
				yynn2075 = 0
				for _, b := range yyq2075 {
					if b {
						yynn2075++
					}
				}
				r.EncodeMapStart(yynn2075)
				yynn2075 = 0
			}
			if yyr2075 || yy2arr2075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2075[0] {
					yym2077 := z.EncBinary()
					_ = yym2077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2075[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2078 := z.EncBinary()
					_ = yym2078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2075 || yy2arr2075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2075[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2075[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2075 || yy2arr2075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2075[2] {
					yym2081 := z.EncBinary()
					_ = yym2081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2075[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2082 := z.EncBinary()
					_ = yym2082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2075 || yy2arr2075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2075[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2075[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2075 || yy2arr2075 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2084 := z.DecBinary()
	_ = yym2084
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2085 := r.ContainerType()
		if yyct2085 == codecSelferValueTypeMap1234 {
			yyl2085 := r.ReadMapStart()
			if yyl2085 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2085, d)
			}
		} else if yyct2085 == codecSelferValueTypeArray1234 {
			yyl2085 := r.ReadArrayStart()
			if yyl2085 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2085, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2086Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2086Slc
	var yyhl2086 bool = l >= 0
	for yyj2086 := 0; ; yyj2086++ {
		if yyhl2086 {
			if yyj2086 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2086Slc = r.DecodeBytes(yys2086Slc, true, true)
		yys2086 := string(yys2086Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2086 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2086)
		} // end switch yys2086
	} // end for yyj2086
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2091 int
	var yyb2091 bool
	var yyhl2091 bool = l >= 0
	yyj2091++
	if yyhl2091 {
		yyb2091 = yyj2091 > l
	} else {
		yyb2091 = r.CheckBreak()
	}
	if yyb2091 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2091++
	if yyhl2091 {
		yyb2091 = yyj2091 > l
	} else {
		yyb2091 = r.CheckBreak()
	}
	if yyb2091 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2091++
	if yyhl2091 {
		yyb2091 = yyj2091 > l
	} else {
		yyb2091 = r.CheckBreak()
	}
	if yyb2091 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2091++
	if yyhl2091 {
		yyb2091 = yyj2091 > l
	} else {
		yyb2091 = r.CheckBreak()
	}
	if yyb2091 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2091++
		if yyhl2091 {
			yyb2091 = yyj2091 > l
		} else {
			yyb2091 = r.CheckBreak()
		}
		if yyb2091 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2091-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2096 := z.EncBinary()
	_ = yym2096
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2097 := z.DecBinary()
	_ = yym2097
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2098 := z.EncBinary()
		_ = yym2098
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2099 := !z.EncBinary()
			yy2arr2099 := z.EncBasicHandle().StructToArray
			var yyq2099 [17]bool
			_, _, _ = yysep2099, yyq2099, yy2arr2099
			const yyr2099 bool = false
			yyq2099[0] = len(x.Volumes) != 0
			yyq2099[2] = x.RestartPolicy != ""
			yyq2099[3] = x.TerminationGracePeriodSeconds != nil
			yyq2099[4] = x.ActiveDeadlineSeconds != nil
			yyq2099[5] = x.DNSPolicy != ""
			yyq2099[6] = len(x.NodeSelector) != 0
			yyq2099[7] = x.ServiceAccountName != ""
			yyq2099[8] = x.DeprecatedServiceAccount != ""
			yyq2099[9] = x.NodeName != ""
			yyq2099[10] = x.HostNetwork != false
			yyq2099[11] = x.HostPID != false
			yyq2099[12] = x.HostIPC != false
			yyq2099[13] = x.SecurityContext != nil
			yyq2099[14] = len(x.ImagePullSecrets) != 0
			yyq2099[15] = x.Hostname != ""
			yyq2099[16] = x.Subdomain != ""
			var yynn2099 int
			if yyr2099 || yy2arr2099 {
				r.EncodeArrayStart(17)
			} else {
				yynn2099 = 1
				for _, b := range yyq2099 {
					if b {
						yynn2099++
					}
				}
				r.EncodeMapStart(yynn2099)
				yynn2099 = 0
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2101 := z.EncBinary()
						_ = yym2101
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2099[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2102 := z.EncBinary()
						_ = yym2102
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2104 := z.EncBinary()
					_ = yym2104
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2105 := z.EncBinary()
					_ = yym2105
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2099[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2108 := *x.TerminationGracePeriodSeconds
						yym2109 := z.EncBinary()
						_ = yym2109
						if false {
						} else {
							r.EncodeInt(int64(yy2108))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2099[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2110 := *x.TerminationGracePeriodSeconds
						yym2111 := z.EncBinary()
						_ = yym2111
						if false {
						} else {
							r.EncodeInt(int64(yy2110))
						}
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2113 := *x.ActiveDeadlineSeconds
						yym2114 := z.EncBinary()
						_ = yym2114
						if false {
						} else {
							r.EncodeInt(int64(yy2113))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2099[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2115 := *x.ActiveDeadlineSeconds
						yym2116 := z.EncBinary()
						_ = yym2116
						if false {
						} else {
							r.EncodeInt(int64(yy2115))
						}
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2099[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2119 := z.EncBinary()
						_ = yym2119
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2099[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2120 := z.EncBinary()
						_ = yym2120
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[7] {
					yym2122 := z.EncBinary()
					_ = yym2122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2099[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2123 := z.EncBinary()
					_ = yym2123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[8] {
					yym2125 := z.EncBinary()
					_ = yym2125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2099[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2126 := z.EncBinary()
					_ = yym2126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[9] {
					yym2128 := z.EncBinary()
					_ = yym2128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2099[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2129 := z.EncBinary()
					_ = yym2129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[10] {
					yym2131 := z.EncBinary()
					_ = yym2131
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2099[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2132 := z.EncBinary()
					_ = yym2132
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[11] {
					yym2134 := z.EncBinary()
					_ = yym2134
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2099[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2135 := z.EncBinary()
					_ = yym2135
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[12] {
					yym2137 := z.EncBinary()
					_ = yym2137
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2099[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2138 := z.EncBinary()
					_ = yym2138
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2099[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2141 := z.EncBinary()
						_ = yym2141
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2099[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2142 := z.EncBinary()
						_ = yym2142
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[15] {
					yym2144 := z.EncBinary()
					_ = yym2144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2099[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2145 := z.EncBinary()
					_ = yym2145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2099[16] {
					yym2147 := z.EncBinary()
					_ = yym2147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2099[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2148 := z.EncBinary()
					_ = yym2148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2099 || yy2arr2099 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2149 := z.DecBinary()
	_ = yym2149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2150 := r.ContainerType()
		if yyct2150 == codecSelferValueTypeMap1234 {
			yyl2150 := r.ReadMapStart()
			if yyl2150 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2150, d)
			}
		} else if yyct2150 == codecSelferValueTypeArray1234 {
			yyl2150 := r.ReadArrayStart()
			if yyl2150 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2150, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2151Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2151Slc
	var yyhl2151 bool = l >= 0
	for yyj2151 := 0; ; yyj2151++ {
		if yyhl2151 {
			if yyj2151 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2151Slc = r.DecodeBytes(yys2151Slc, true, true)
		yys2151 := string(yys2151Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2151 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2152 := &x.Volumes
				yym2153 := z.DecBinary()
				_ = yym2153
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2152), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2154 := &x.Containers
				yym2155 := z.DecBinary()
				_ = yym2155
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2154), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2158 := z.DecBinary()
				_ = yym2158
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2160 := z.DecBinary()
				_ = yym2160
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2162 := &x.NodeSelector
				yym2163 := z.DecBinary()
				_ = yym2163
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2162, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2171 := &x.ImagePullSecrets
				yym2172 := z.DecBinary()
				_ = yym2172
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2171), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2151)
		} // end switch yys2151
	} // end for yyj2151
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2175 int
	var yyb2175 bool
	var yyhl2175 bool = l >= 0
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2176 := &x.Volumes
		yym2177 := z.DecBinary()
		_ = yym2177
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2176), d)
		}
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2178 := &x.Containers
		yym2179 := z.DecBinary()
		_ = yym2179
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2178), d)
		}
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2182 := z.DecBinary()
		_ = yym2182
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2184 := z.DecBinary()
		_ = yym2184
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2186 := &x.NodeSelector
		yym2187 := z.DecBinary()
		_ = yym2187
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2186, false, d)
		}
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2195 := &x.ImagePullSecrets
		yym2196 := z.DecBinary()
		_ = yym2196
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2195), d)
		}
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2175++
		if yyhl2175 {
			yyb2175 = yyj2175 > l
		} else {
			yyb2175 = r.CheckBreak()
		}
		if yyb2175 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2175-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2199 := z.EncBinary()
		_ = yym2199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2200 := !z.EncBinary()
			yy2arr2200 := z.EncBasicHandle().StructToArray
			var yyq2200 [5]bool
			_, _, _ = yysep2200, yyq2200, yy2arr2200
			const yyr2200 bool = false
			yyq2200[0] = x.SELinuxOptions != nil
			yyq2200[1] = x.RunAsUser != nil
			yyq2200[2] = x.RunAsNonRoot != nil
			yyq2200[3] = len(x.SupplementalGroups) != 0
			yyq2200[4] = x.FSGroup != nil
			var yynn2200 int
			if yyr2200 || yy2arr2200 {
				r.EncodeArrayStart(5)
			} else {
				yynn2200 = 0
				for _, b := range yyq2200 {
					if b {
						yynn2200++
					}
				}
				r.EncodeMapStart(yynn2200)
				yynn2200 = 0
			}
			if yyr2200 || yy2arr2200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2200[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2200[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2200 || yy2arr2200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2200[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2203 := *x.RunAsUser
						yym2204 := z.EncBinary()
						_ = yym2204
						if false {
						} else {
							r.EncodeInt(int64(yy2203))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2200[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2205 := *x.RunAsUser
						yym2206 := z.EncBinary()
						_ = yym2206
						if false {
						} else {
							r.EncodeInt(int64(yy2205))
						}
					}
				}
			}
			if yyr2200 || yy2arr2200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2200[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2208 := *x.RunAsNonRoot
						yym2209 := z.EncBinary()
						_ = yym2209
						if false {
						} else {
							r.EncodeBool(bool(yy2208))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2200[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2210 := *x.RunAsNonRoot
						yym2211 := z.EncBinary()
						_ = yym2211
						if false {
						} else {
							r.EncodeBool(bool(yy2210))
						}
					}
				}
			}
			if yyr2200 || yy2arr2200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2200[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2213 := z.EncBinary()
						_ = yym2213
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2200[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2214 := z.EncBinary()
						_ = yym2214
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2200 || yy2arr2200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2200[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2216 := *x.FSGroup
						yym2217 := z.EncBinary()
						_ = yym2217
						if false {
						} else {
							r.EncodeInt(int64(yy2216))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2200[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2218 := *x.FSGroup
						yym2219 := z.EncBinary()
						_ = yym2219
						if false {
						} else {
							r.EncodeInt(int64(yy2218))
						}
					}
				}
			}
			if yyr2200 || yy2arr2200 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2220 := z.DecBinary()
	_ = yym2220
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2221 := r.ContainerType()
		if yyct2221 == codecSelferValueTypeMap1234 {
			yyl2221 := r.ReadMapStart()
			if yyl2221 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2221, d)
			}
		} else if yyct2221 == codecSelferValueTypeArray1234 {
			yyl2221 := r.ReadArrayStart()
			if yyl2221 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2221, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2222Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2222Slc
	var yyhl2222 bool = l >= 0
	for yyj2222 := 0; ; yyj2222++ {
		if yyhl2222 {
			if yyj2222 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2222Slc = r.DecodeBytes(yys2222Slc, true, true)
		yys2222 := string(yys2222Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2222 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2225 := z.DecBinary()
				_ = yym2225
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2227 := z.DecBinary()
				_ = yym2227
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2228 := &x.SupplementalGroups
				yym2229 := z.DecBinary()
				_ = yym2229
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2228, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2231 := z.DecBinary()
				_ = yym2231
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2222)
		} // end switch yys2222
	} // end for yyj2222
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2232 int
	var yyb2232 bool
	var yyhl2232 bool = l >= 0
	yyj2232++
	if yyhl2232 {
		yyb2232 = yyj2232 > l
	} else {
		yyb2232 = r.CheckBreak()
	}
	if yyb2232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2232++
	if yyhl2232 {
		yyb2232 = yyj2232 > l
	} else {
		yyb2232 = r.CheckBreak()
	}
	if yyb2232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2235 := z.DecBinary()
		_ = yym2235
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2232++
	if yyhl2232 {
		yyb2232 = yyj2232 > l
	} else {
		yyb2232 = r.CheckBreak()
	}
	if yyb2232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2237 := z.DecBinary()
		_ = yym2237
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2232++
	if yyhl2232 {
		yyb2232 = yyj2232 > l
	} else {
		yyb2232 = r.CheckBreak()
	}
	if yyb2232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2238 := &x.SupplementalGroups
		yym2239 := z.DecBinary()
		_ = yym2239
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2238, false, d)
		}
	}
	yyj2232++
	if yyhl2232 {
		yyb2232 = yyj2232 > l
	} else {
		yyb2232 = r.CheckBreak()
	}
	if yyb2232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2241 := z.DecBinary()
		_ = yym2241
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2232++
		if yyhl2232 {
			yyb2232 = yyj2232 > l
		} else {
			yyb2232 = r.CheckBreak()
		}
		if yyb2232 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2232-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2242 := z.EncBinary()
		_ = yym2242
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2243 := !z.EncBinary()
			yy2arr2243 := z.EncBasicHandle().StructToArray
			var yyq2243 [8]bool
			_, _, _ = yysep2243, yyq2243, yy2arr2243
			const yyr2243 bool = false
			yyq2243[0] = x.Phase != ""
			yyq2243[1] = len(x.Conditions) != 0
			yyq2243[2] = x.Message != ""
			yyq2243[3] = x.Reason != ""
			yyq2243[4] = x.HostIP != ""
			yyq2243[5] = x.PodIP != ""
			yyq2243[6] = x.StartTime != nil
			yyq2243[7] = len(x.ContainerStatuses) != 0
			var yynn2243 int
			if yyr2243 || yy2arr2243 {
				r.EncodeArrayStart(8)
			} else {
				yynn2243 = 0
				for _, b := range yyq2243 {
					if b {
						yynn2243++
					}
				}
				r.EncodeMapStart(yynn2243)
				yynn2243 = 0
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2243[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2243[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2243[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2246 := z.EncBinary()
						_ = yym2246
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2243[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2247 := z.EncBinary()
						_ = yym2247
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2243[2] {
					yym2249 := z.EncBinary()
					_ = yym2249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2243[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2243[3] {
					yym2252 := z.EncBinary()
					_ = yym2252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2243[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2253 := z.EncBinary()
					_ = yym2253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2243[4] {
					yym2255 := z.EncBinary()
					_ = yym2255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2243[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2256 := z.EncBinary()
					_ = yym2256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2243[5] {
					yym2258 := z.EncBinary()
					_ = yym2258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2243[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2259 := z.EncBinary()
					_ = yym2259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2243[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2261 := z.EncBinary()
						_ = yym2261
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2261 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2261 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2243[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2262 := z.EncBinary()
						_ = yym2262
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2262 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2262 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2243[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2264 := z.EncBinary()
						_ = yym2264
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2243[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2265 := z.EncBinary()
						_ = yym2265
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2266 := z.DecBinary()
	_ = yym2266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2267 := r.ContainerType()
		if yyct2267 == codecSelferValueTypeMap1234 {
			yyl2267 := r.ReadMapStart()
			if yyl2267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2267, d)
			}
		} else if yyct2267 == codecSelferValueTypeArray1234 {
			yyl2267 := r.ReadArrayStart()
			if yyl2267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2268Slc
	var yyhl2268 bool = l >= 0
	for yyj2268 := 0; ; yyj2268++ {
		if yyhl2268 {
			if yyj2268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2268Slc = r.DecodeBytes(yys2268Slc, true, true)
		yys2268 := string(yys2268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2268 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2270 := &x.Conditions
				yym2271 := z.DecBinary()
				_ = yym2271
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2270), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2277 := z.DecBinary()
				_ = yym2277
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2277 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2277 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2278 := &x.ContainerStatuses
				yym2279 := z.DecBinary()
				_ = yym2279
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2278), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2268)
		} // end switch yys2268
	} // end for yyj2268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2280 int
	var yyb2280 bool
	var yyhl2280 bool = l >= 0
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2282 := &x.Conditions
		yym2283 := z.DecBinary()
		_ = yym2283
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2282), d)
		}
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2289 := z.DecBinary()
		_ = yym2289
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2289 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2289 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2290 := &x.ContainerStatuses
		yym2291 := z.DecBinary()
		_ = yym2291
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2290), d)
		}
	}
	for {
		yyj2280++
		if yyhl2280 {
			yyb2280 = yyj2280 > l
		} else {
			yyb2280 = r.CheckBreak()
		}
		if yyb2280 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2280-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2292 := z.EncBinary()
		_ = yym2292
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2293 := !z.EncBinary()
			yy2arr2293 := z.EncBasicHandle().StructToArray
			var yyq2293 [4]bool
			_, _, _ = yysep2293, yyq2293, yy2arr2293
			const yyr2293 bool = false
			yyq2293[0] = x.Kind != ""
			yyq2293[1] = x.APIVersion != ""
			yyq2293[2] = true
			yyq2293[3] = true
			var yynn2293 int
			if yyr2293 || yy2arr2293 {
				r.EncodeArrayStart(4)
			} else {
				yynn2293 = 0
				for _, b := range yyq2293 {
					if b {
						yynn2293++
					}
				}
				r.EncodeMapStart(yynn2293)
				yynn2293 = 0
			}
			if yyr2293 || yy2arr2293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2293[0] {
					yym2295 := z.EncBinary()
					_ = yym2295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2293[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2296 := z.EncBinary()
					_ = yym2296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2293 || yy2arr2293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2293[1] {
					yym2298 := z.EncBinary()
					_ = yym2298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2293[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2299 := z.EncBinary()
					_ = yym2299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2293 || yy2arr2293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2293[2] {
					yy2301 := &x.ObjectMeta
					yy2301.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2293[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2302 := &x.ObjectMeta
					yy2302.CodecEncodeSelf(e)
				}
			}
			if yyr2293 || yy2arr2293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2293[3] {
					yy2304 := &x.Status
					yy2304.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2293[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2305 := &x.Status
					yy2305.CodecEncodeSelf(e)
				}
			}
			if yyr2293 || yy2arr2293 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2306 := z.DecBinary()
	_ = yym2306
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2307 := r.ContainerType()
		if yyct2307 == codecSelferValueTypeMap1234 {
			yyl2307 := r.ReadMapStart()
			if yyl2307 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2307, d)
			}
		} else if yyct2307 == codecSelferValueTypeArray1234 {
			yyl2307 := r.ReadArrayStart()
			if yyl2307 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2307, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2308Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2308Slc
	var yyhl2308 bool = l >= 0
	for yyj2308 := 0; ; yyj2308++ {
		if yyhl2308 {
			if yyj2308 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2308Slc = r.DecodeBytes(yys2308Slc, true, true)
		yys2308 := string(yys2308Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2308 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2311 := &x.ObjectMeta
				yyv2311.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2312 := &x.Status
				yyv2312.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2308)
		} // end switch yys2308
	} // end for yyj2308
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2313 int
	var yyb2313 bool
	var yyhl2313 bool = l >= 0
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2316 := &x.ObjectMeta
		yyv2316.CodecDecodeSelf(d)
	}
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2317 := &x.Status
		yyv2317.CodecDecodeSelf(d)
	}
	for {
		yyj2313++
		if yyhl2313 {
			yyb2313 = yyj2313 > l
		} else {
			yyb2313 = r.CheckBreak()
		}
		if yyb2313 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2313-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2318 := z.EncBinary()
		_ = yym2318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2319 := !z.EncBinary()
			yy2arr2319 := z.EncBasicHandle().StructToArray
			var yyq2319 [5]bool
			_, _, _ = yysep2319, yyq2319, yy2arr2319
			const yyr2319 bool = false
			yyq2319[0] = x.Kind != ""
			yyq2319[1] = x.APIVersion != ""
			yyq2319[2] = true
			yyq2319[3] = true
			yyq2319[4] = true
			var yynn2319 int
			if yyr2319 || yy2arr2319 {
				r.EncodeArrayStart(5)
			} else {
				yynn2319 = 0
				for _, b := range yyq2319 {
					if b {
						yynn2319++
					}
				}
				r.EncodeMapStart(yynn2319)
				yynn2319 = 0
			}
			if yyr2319 || yy2arr2319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2319[0] {
					yym2321 := z.EncBinary()
					_ = yym2321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2319[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2322 := z.EncBinary()
					_ = yym2322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2319 || yy2arr2319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2319[1] {
					yym2324 := z.EncBinary()
					_ = yym2324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2319[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2325 := z.EncBinary()
					_ = yym2325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2319 || yy2arr2319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2319[2] {
					yy2327 := &x.ObjectMeta
					yy2327.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2319[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2328 := &x.ObjectMeta
					yy2328.CodecEncodeSelf(e)
				}
			}
			if yyr2319 || yy2arr2319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2319[3] {
					yy2330 := &x.Spec
					yy2330.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2319[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2331 := &x.Spec
					yy2331.CodecEncodeSelf(e)
				}
			}
			if yyr2319 || yy2arr2319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2319[4] {
					yy2333 := &x.Status
					yy2333.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2319[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2334 := &x.Status
					yy2334.CodecEncodeSelf(e)
				}
			}
			if yyr2319 || yy2arr2319 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2335 := z.DecBinary()
	_ = yym2335
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2336 := r.ContainerType()
		if yyct2336 == codecSelferValueTypeMap1234 {
			yyl2336 := r.ReadMapStart()
			if yyl2336 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2336, d)
			}
		} else if yyct2336 == codecSelferValueTypeArray1234 {
			yyl2336 := r.ReadArrayStart()
			if yyl2336 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2336, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2337Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2337Slc
	var yyhl2337 bool = l >= 0
	for yyj2337 := 0; ; yyj2337++ {
		if yyhl2337 {
			if yyj2337 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2337Slc = r.DecodeBytes(yys2337Slc, true, true)
		yys2337 := string(yys2337Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2337 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2340 := &x.ObjectMeta
				yyv2340.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2341 := &x.Spec
				yyv2341.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2342 := &x.Status
				yyv2342.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2337)
		} // end switch yys2337
	} // end for yyj2337
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2343 int
	var yyb2343 bool
	var yyhl2343 bool = l >= 0
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2346 := &x.ObjectMeta
		yyv2346.CodecDecodeSelf(d)
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2347 := &x.Spec
		yyv2347.CodecDecodeSelf(d)
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2348 := &x.Status
		yyv2348.CodecDecodeSelf(d)
	}
	for {
		yyj2343++
		if yyhl2343 {
			yyb2343 = yyj2343 > l
		} else {
			yyb2343 = r.CheckBreak()
		}
		if yyb2343 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2343-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2349 := z.EncBinary()
		_ = yym2349
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2350 := !z.EncBinary()
			yy2arr2350 := z.EncBasicHandle().StructToArray
			var yyq2350 [4]bool
			_, _, _ = yysep2350, yyq2350, yy2arr2350
			const yyr2350 bool = false
			yyq2350[0] = x.Kind != ""
			yyq2350[1] = x.APIVersion != ""
			yyq2350[2] = true
			var yynn2350 int
			if yyr2350 || yy2arr2350 {
				r.EncodeArrayStart(4)
			} else {
				yynn2350 = 1
				for _, b := range yyq2350 {
					if b {
						yynn2350++
					}
				}
				r.EncodeMapStart(yynn2350)
				yynn2350 = 0
			}
			if yyr2350 || yy2arr2350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2350[0] {
					yym2352 := z.EncBinary()
					_ = yym2352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2350[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2353 := z.EncBinary()
					_ = yym2353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2350 || yy2arr2350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2350[1] {
					yym2355 := z.EncBinary()
					_ = yym2355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2350[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2356 := z.EncBinary()
					_ = yym2356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2350 || yy2arr2350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2350[2] {
					yy2358 := &x.ListMeta
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2358) {
					} else {
						z.EncFallback(yy2358)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2350[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2360 := &x.ListMeta
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2360) {
					} else {
						z.EncFallback(yy2360)
					}
				}
			}
			if yyr2350 || yy2arr2350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2350 || yy2arr2350 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2365 := z.DecBinary()
	_ = yym2365
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2366 := r.ContainerType()
		if yyct2366 == codecSelferValueTypeMap1234 {
			yyl2366 := r.ReadMapStart()
			if yyl2366 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2366, d)
			}
		} else if yyct2366 == codecSelferValueTypeArray1234 {
			yyl2366 := r.ReadArrayStart()
			if yyl2366 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2366, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2367Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2367Slc
	var yyhl2367 bool = l >= 0
	for yyj2367 := 0; ; yyj2367++ {
		if yyhl2367 {
			if yyj2367 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2367Slc = r.DecodeBytes(yys2367Slc, true, true)
		yys2367 := string(yys2367Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2367 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2370 := &x.ListMeta
				yym2371 := z.DecBinary()
				_ = yym2371
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2370) {
				} else {
					z.DecFallback(yyv2370, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2372 := &x.Items
				yym2373 := z.DecBinary()
				_ = yym2373
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2372), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2367)
		} // end switch yys2367
	} // end for yyj2367
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2374 int
	var yyb2374 bool
	var yyhl2374 bool = l >= 0
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2377 := &x.ListMeta
		yym2378 := z.DecBinary()
		_ = yym2378
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2377) {
		} else {
			z.DecFallback(yyv2377, false)
		}
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2379 := &x.Items
		yym2380 := z.DecBinary()
		_ = yym2380
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2379), d)
		}
	}
	for {
		yyj2374++
		if yyhl2374 {
			yyb2374 = yyj2374 > l
		} else {
			yyb2374 = r.CheckBreak()
		}
		if yyb2374 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2374-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2381 := z.EncBinary()
		_ = yym2381
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2382 := !z.EncBinary()
			yy2arr2382 := z.EncBasicHandle().StructToArray
			var yyq2382 [2]bool
			_, _, _ = yysep2382, yyq2382, yy2arr2382
			const yyr2382 bool = false
			yyq2382[0] = true
			yyq2382[1] = true
			var yynn2382 int
			if yyr2382 || yy2arr2382 {
				r.EncodeArrayStart(2)
			} else {
				yynn2382 = 0
				for _, b := range yyq2382 {
					if b {
						yynn2382++
					}
				}
				r.EncodeMapStart(yynn2382)
				yynn2382 = 0
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[0] {
					yy2384 := &x.ObjectMeta
					yy2384.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2382[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2385 := &x.ObjectMeta
					yy2385.CodecEncodeSelf(e)
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[1] {
					yy2387 := &x.Spec
					yy2387.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2382[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2388 := &x.Spec
					yy2388.CodecEncodeSelf(e)
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2389 := z.DecBinary()
	_ = yym2389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2390 := r.ContainerType()
		if yyct2390 == codecSelferValueTypeMap1234 {
			yyl2390 := r.ReadMapStart()
			if yyl2390 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2390, d)
			}
		} else if yyct2390 == codecSelferValueTypeArray1234 {
			yyl2390 := r.ReadArrayStart()
			if yyl2390 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2390, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2391Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2391Slc
	var yyhl2391 bool = l >= 0
	for yyj2391 := 0; ; yyj2391++ {
		if yyhl2391 {
			if yyj2391 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2391Slc = r.DecodeBytes(yys2391Slc, true, true)
		yys2391 := string(yys2391Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2391 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2392 := &x.ObjectMeta
				yyv2392.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2393 := &x.Spec
				yyv2393.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2391)
		} // end switch yys2391
	} // end for yyj2391
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2394 int
	var yyb2394 bool
	var yyhl2394 bool = l >= 0
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2395 := &x.ObjectMeta
		yyv2395.CodecDecodeSelf(d)
	}
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2396 := &x.Spec
		yyv2396.CodecDecodeSelf(d)
	}
	for {
		yyj2394++
		if yyhl2394 {
			yyb2394 = yyj2394 > l
		} else {
			yyb2394 = r.CheckBreak()
		}
		if yyb2394 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2394-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2397 := z.EncBinary()
		_ = yym2397
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2398 := !z.EncBinary()
			yy2arr2398 := z.EncBasicHandle().StructToArray
			var yyq2398 [4]bool
			_, _, _ = yysep2398, yyq2398, yy2arr2398
			const yyr2398 bool = false
			yyq2398[0] = x.Kind != ""
			yyq2398[1] = x.APIVersion != ""
			yyq2398[2] = true
			yyq2398[3] = true
			var yynn2398 int
			if yyr2398 || yy2arr2398 {
				r.EncodeArrayStart(4)
			} else {
				yynn2398 = 0
				for _, b := range yyq2398 {
					if b {
						yynn2398++
					}
				}
				r.EncodeMapStart(yynn2398)
				yynn2398 = 0
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2398[0] {
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2398[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2401 := z.EncBinary()
					_ = yym2401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2398[1] {
					yym2403 := z.EncBinary()
					_ = yym2403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2398[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2404 := z.EncBinary()
					_ = yym2404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2398[2] {
					yy2406 := &x.ObjectMeta
					yy2406.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2398[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2407 := &x.ObjectMeta
					yy2407.CodecEncodeSelf(e)
				}
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2398[3] {
					yy2409 := &x.Template
					yy2409.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2398[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2410 := &x.Template
					yy2410.CodecEncodeSelf(e)
				}
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2411 := z.DecBinary()
	_ = yym2411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2412 := r.ContainerType()
		if yyct2412 == codecSelferValueTypeMap1234 {
			yyl2412 := r.ReadMapStart()
			if yyl2412 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2412, d)
			}
		} else if yyct2412 == codecSelferValueTypeArray1234 {
			yyl2412 := r.ReadArrayStart()
			if yyl2412 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2413Slc
	var yyhl2413 bool = l >= 0
	for yyj2413 := 0; ; yyj2413++ {
		if yyhl2413 {
			if yyj2413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2413Slc = r.DecodeBytes(yys2413Slc, true, true)
		yys2413 := string(yys2413Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2413 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2416 := &x.ObjectMeta
				yyv2416.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2417 := &x.Template
				yyv2417.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2413)
		} // end switch yys2413
	} // end for yyj2413
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2418 int
	var yyb2418 bool
	var yyhl2418 bool = l >= 0
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2421 := &x.ObjectMeta
		yyv2421.CodecDecodeSelf(d)
	}
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2422 := &x.Template
		yyv2422.CodecDecodeSelf(d)
	}
	for {
		yyj2418++
		if yyhl2418 {
			yyb2418 = yyj2418 > l
		} else {
			yyb2418 = r.CheckBreak()
		}
		if yyb2418 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2418-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2423 := z.EncBinary()
		_ = yym2423
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2424 := !z.EncBinary()
			yy2arr2424 := z.EncBasicHandle().StructToArray
			var yyq2424 [4]bool
			_, _, _ = yysep2424, yyq2424, yy2arr2424
			const yyr2424 bool = false
			yyq2424[0] = x.Kind != ""
			yyq2424[1] = x.APIVersion != ""
			yyq2424[2] = true
			var yynn2424 int
			if yyr2424 || yy2arr2424 {
				r.EncodeArrayStart(4)
			} else {
				yynn2424 = 1
				for _, b := range yyq2424 {
					if b {
						yynn2424++
					}
				}
				r.EncodeMapStart(yynn2424)
				yynn2424 = 0
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2424[0] {
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2424[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2427 := z.EncBinary()
					_ = yym2427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2424[1] {
					yym2429 := z.EncBinary()
					_ = yym2429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2424[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2430 := z.EncBinary()
					_ = yym2430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2424[2] {
					yy2432 := &x.ListMeta
					yym2433 := z.EncBinary()
					_ = yym2433
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2432) {
					} else {
						z.EncFallback(yy2432)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2424[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2434 := &x.ListMeta
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2434) {
					} else {
						z.EncFallback(yy2434)
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2437 := z.EncBinary()
					_ = yym2437
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2439 := z.DecBinary()
	_ = yym2439
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2440 := r.ContainerType()
		if yyct2440 == codecSelferValueTypeMap1234 {
			yyl2440 := r.ReadMapStart()
			if yyl2440 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2440, d)
			}
		} else if yyct2440 == codecSelferValueTypeArray1234 {
			yyl2440 := r.ReadArrayStart()
			if yyl2440 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2440, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2441Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2441Slc
	var yyhl2441 bool = l >= 0
	for yyj2441 := 0; ; yyj2441++ {
		if yyhl2441 {
			if yyj2441 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2441Slc = r.DecodeBytes(yys2441Slc, true, true)
		yys2441 := string(yys2441Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2441 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2444 := &x.ListMeta
				yym2445 := z.DecBinary()
				_ = yym2445
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2444) {
				} else {
					z.DecFallback(yyv2444, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2446 := &x.Items
				yym2447 := z.DecBinary()
				_ = yym2447
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2446), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2441)
		} // end switch yys2441
	} // end for yyj2441
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2448 int
	var yyb2448 bool
	var yyhl2448 bool = l >= 0
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2451 := &x.ListMeta
		yym2452 := z.DecBinary()
		_ = yym2452
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2451) {
		} else {
			z.DecFallback(yyv2451, false)
		}
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2453 := &x.Items
		yym2454 := z.DecBinary()
		_ = yym2454
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2453), d)
		}
	}
	for {
		yyj2448++
		if yyhl2448 {
			yyb2448 = yyj2448 > l
		} else {
			yyb2448 = r.CheckBreak()
		}
		if yyb2448 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2448-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2455 := z.EncBinary()
		_ = yym2455
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2456 := !z.EncBinary()
			yy2arr2456 := z.EncBasicHandle().StructToArray
			var yyq2456 [4]bool
			_, _, _ = yysep2456, yyq2456, yy2arr2456
			const yyr2456 bool = false
			yyq2456[0] = x.Replicas != nil
			yyq2456[1] = x.MinReadySeconds != 0
			yyq2456[2] = len(x.Selector) != 0
			yyq2456[3] = x.Template != nil
			var yynn2456 int
			if yyr2456 || yy2arr2456 {
				r.EncodeArrayStart(4)
			} else {
				yynn2456 = 0
				for _, b := range yyq2456 {
					if b {
						yynn2456++
					}
				}
				r.EncodeMapStart(yynn2456)
				yynn2456 = 0
			}
			if yyr2456 || yy2arr2456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2456[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2458 := *x.Replicas
						yym2459 := z.EncBinary()
						_ = yym2459
						if false {
						} else {
							r.EncodeInt(int64(yy2458))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2456[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2460 := *x.Replicas
						yym2461 := z.EncBinary()
						_ = yym2461
						if false {
						} else {
							r.EncodeInt(int64(yy2460))
						}
					}
				}
			}
			if yyr2456 || yy2arr2456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2456[1] {
					yym2463 := z.EncBinary()
					_ = yym2463
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2456[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2464 := z.EncBinary()
					_ = yym2464
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr2456 || yy2arr2456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2456[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2466 := z.EncBinary()
						_ = yym2466
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2456[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2467 := z.EncBinary()
						_ = yym2467
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2456 || yy2arr2456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2456[3] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2456[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2456 || yy2arr2456 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2469 := z.DecBinary()
	_ = yym2469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2470 := r.ContainerType()
		if yyct2470 == codecSelferValueTypeMap1234 {
			yyl2470 := r.ReadMapStart()
			if yyl2470 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2470, d)
			}
		} else if yyct2470 == codecSelferValueTypeArray1234 {
			yyl2470 := r.ReadArrayStart()
			if yyl2470 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2471Slc
	var yyhl2471 bool = l >= 0
	for yyj2471 := 0; ; yyj2471++ {
		if yyhl2471 {
			if yyj2471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2471Slc = r.DecodeBytes(yys2471Slc, true, true)
		yys2471 := string(yys2471Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2471 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2473 := z.DecBinary()
				_ = yym2473
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2475 := &x.Selector
				yym2476 := z.DecBinary()
				_ = yym2476
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2475, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2471)
		} // end switch yys2471
	} // end for yyj2471
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2478 int
	var yyb2478 bool
	var yyhl2478 bool = l >= 0
	yyj2478++
	if yyhl2478 {
		yyb2478 = yyj2478 > l
	} else {
		yyb2478 = r.CheckBreak()
	}
	if yyb2478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2480 := z.DecBinary()
		_ = yym2480
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2478++
	if yyhl2478 {
		yyb2478 = yyj2478 > l
	} else {
		yyb2478 = r.CheckBreak()
	}
	if yyb2478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj2478++
	if yyhl2478 {
		yyb2478 = yyj2478 > l
	} else {
		yyb2478 = r.CheckBreak()
	}
	if yyb2478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2482 := &x.Selector
		yym2483 := z.DecBinary()
		_ = yym2483
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2482, false, d)
		}
	}
	yyj2478++
	if yyhl2478 {
		yyb2478 = yyj2478 > l
	} else {
		yyb2478 = r.CheckBreak()
	}
	if yyb2478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2478++
		if yyhl2478 {
			yyb2478 = yyj2478 > l
		} else {
			yyb2478 = r.CheckBreak()
		}
		if yyb2478 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2478-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2485 := z.EncBinary()
		_ = yym2485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2486 := !z.EncBinary()
			yy2arr2486 := z.EncBasicHandle().StructToArray
			var yyq2486 [6]bool
			_, _, _ = yysep2486, yyq2486, yy2arr2486
			const yyr2486 bool = false
			yyq2486[1] = x.FullyLabeledReplicas != 0
			yyq2486[2] = x.ReadyReplicas != 0
			yyq2486[3] = x.AvailableReplicas != 0
			yyq2486[4] = x.ObservedGeneration != 0
			yyq2486[5] = len(x.Conditions) != 0
			var yynn2486 int
			if yyr2486 || yy2arr2486 {
				r.EncodeArrayStart(6)
			} else {
				yynn2486 = 1
				for _, b := range yyq2486 {
					if b {
						yynn2486++
					}
				}
				r.EncodeMapStart(yynn2486)
				yynn2486 = 0
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2488 := z.EncBinary()
				_ = yym2488
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2489 := z.EncBinary()
				_ = yym2489
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2486[1] {
					yym2491 := z.EncBinary()
					_ = yym2491
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2486[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2492 := z.EncBinary()
					_ = yym2492
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2486[2] {
					yym2494 := z.EncBinary()
					_ = yym2494
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2486[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2495 := z.EncBinary()
					_ = yym2495
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2486[3] {
					yym2497 := z.EncBinary()
					_ = yym2497
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2486[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2498 := z.EncBinary()
					_ = yym2498
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2486[4] {
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2486[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2501 := z.EncBinary()
					_ = yym2501
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2486[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2503 := z.EncBinary()
						_ = yym2503
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2486[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2504 := z.EncBinary()
						_ = yym2504
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2505 := z.DecBinary()
	_ = yym2505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2506 := r.ContainerType()
		if yyct2506 == codecSelferValueTypeMap1234 {
			yyl2506 := r.ReadMapStart()
			if yyl2506 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2506, d)
			}
		} else if yyct2506 == codecSelferValueTypeArray1234 {
			yyl2506 := r.ReadArrayStart()
			if yyl2506 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2506, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2507Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2507Slc
	var yyhl2507 bool = l >= 0
	for yyj2507 := 0; ; yyj2507++ {
		if yyhl2507 {
			if yyj2507 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2507Slc = r.DecodeBytes(yys2507Slc, true, true)
		yys2507 := string(yys2507Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2507 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2513 := &x.Conditions
				yym2514 := z.DecBinary()
				_ = yym2514
				if false {
				} else {
					h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2513), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2507)
		} // end switch yys2507
	} // end for yyj2507
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2515 int
	var yyb2515 bool
	var yyhl2515 bool = l >= 0
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2521 := &x.Conditions
		yym2522 := z.DecBinary()
		_ = yym2522
		if false {
		} else {
			h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2521), d)
		}
	}
	for {
		yyj2515++
		if yyhl2515 {
			yyb2515 = yyj2515 > l
		} else {
			yyb2515 = r.CheckBreak()
		}
		if yyb2515 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2515-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicationControllerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2523 := z.EncBinary()
	_ = yym2523
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicationControllerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2524 := z.DecBinary()
	_ = yym2524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicationControllerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2525 := z.EncBinary()
		_ = yym2525
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2526 := !z.EncBinary()
			yy2arr2526 := z.EncBasicHandle().StructToArray
			var yyq2526 [5]bool
			_, _, _ = yysep2526, yyq2526, yy2arr2526
			const yyr2526 bool = false
			yyq2526[2] = true
			yyq2526[3] = x.Reason != ""
			yyq2526[4] = x.Message != ""
			var yynn2526 int
			if yyr2526 || yy2arr2526 {
				r.EncodeArrayStart(5)
			} else {
				yynn2526 = 2
				for _, b := range yyq2526 {
					if b {
						yynn2526++
					}
				}
				r.EncodeMapStart(yynn2526)
				yynn2526 = 0
			}
			if yyr2526 || yy2arr2526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2526 || yy2arr2526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2526 || yy2arr2526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2526[2] {
					yy2530 := &x.LastTransitionTime
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2530) {
					} else if yym2531 {
						z.EncBinaryMarshal(yy2530)
					} else if !yym2531 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2530)
					} else {
						z.EncFallback(yy2530)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2526[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2532 := &x.LastTransitionTime
					yym2533 := z.EncBinary()
					_ = yym2533
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2532) {
					} else if yym2533 {
						z.EncBinaryMarshal(yy2532)
					} else if !yym2533 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2532)
					} else {
						z.EncFallback(yy2532)
					}
				}
			}
			if yyr2526 || yy2arr2526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2526[3] {
					yym2535 := z.EncBinary()
					_ = yym2535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2526[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2536 := z.EncBinary()
					_ = yym2536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2526 || yy2arr2526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2526[4] {
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2526[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2539 := z.EncBinary()
					_ = yym2539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2526 || yy2arr2526 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2540 := z.DecBinary()
	_ = yym2540
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2541 := r.ContainerType()
		if yyct2541 == codecSelferValueTypeMap1234 {
			yyl2541 := r.ReadMapStart()
			if yyl2541 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2541, d)
			}
		} else if yyct2541 == codecSelferValueTypeArray1234 {
			yyl2541 := r.ReadArrayStart()
			if yyl2541 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2541, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2542Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2542Slc
	var yyhl2542 bool = l >= 0
	for yyj2542 := 0; ; yyj2542++ {
		if yyhl2542 {
			if yyj2542 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2542Slc = r.DecodeBytes(yys2542Slc, true, true)
		yys2542 := string(yys2542Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2542 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicationControllerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2545 := &x.LastTransitionTime
				yym2546 := z.DecBinary()
				_ = yym2546
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2545) {
				} else if yym2546 {
					z.DecBinaryUnmarshal(yyv2545)
				} else if !yym2546 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2545)
				} else {
					z.DecFallback(yyv2545, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2542)
		} // end switch yys2542
	} // end for yyj2542
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2549 int
	var yyb2549 bool
	var yyhl2549 bool = l >= 0
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicationControllerConditionType(r.DecodeString())
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2552 := &x.LastTransitionTime
		yym2553 := z.DecBinary()
		_ = yym2553
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2552) {
		} else if yym2553 {
			z.DecBinaryUnmarshal(yyv2552)
		} else if !yym2553 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2552)
		} else {
			z.DecFallback(yyv2552, false)
		}
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2549++
		if yyhl2549 {
			yyb2549 = yyj2549 > l
		} else {
			yyb2549 = r.CheckBreak()
		}
		if yyb2549 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2549-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2556 := z.EncBinary()
		_ = yym2556
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2557 := !z.EncBinary()
			yy2arr2557 := z.EncBasicHandle().StructToArray
			var yyq2557 [5]bool
			_, _, _ = yysep2557, yyq2557, yy2arr2557
			const yyr2557 bool = false
			yyq2557[0] = x.Kind != ""
			yyq2557[1] = x.APIVersion != ""
			yyq2557[2] = true
			yyq2557[3] = true
			yyq2557[4] = true
			var yynn2557 int
			if yyr2557 || yy2arr2557 {
				r.EncodeArrayStart(5)
			} else {
				yynn2557 = 0
				for _, b := range yyq2557 {
					if b {
						yynn2557++
					}
				}
				r.EncodeMapStart(yynn2557)
				yynn2557 = 0
			}
			if yyr2557 || yy2arr2557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2557[0] {
					yym2559 := z.EncBinary()
					_ = yym2559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2557[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2560 := z.EncBinary()
					_ = yym2560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2557 || yy2arr2557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2557[1] {
					yym2562 := z.EncBinary()
					_ = yym2562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2557[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2557 || yy2arr2557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2557[2] {
					yy2565 := &x.ObjectMeta
					yy2565.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2557[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2566 := &x.ObjectMeta
					yy2566.CodecEncodeSelf(e)
				}
			}
			if yyr2557 || yy2arr2557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2557[3] {
					yy2568 := &x.Spec
					yy2568.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2557[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2569 := &x.Spec
					yy2569.CodecEncodeSelf(e)
				}
			}
			if yyr2557 || yy2arr2557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2557[4] {
					yy2571 := &x.Status
					yy2571.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2557[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2572 := &x.Status
					yy2572.CodecEncodeSelf(e)
				}
			}
			if yyr2557 || yy2arr2557 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2573 := z.DecBinary()
	_ = yym2573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2574 := r.ContainerType()
		if yyct2574 == codecSelferValueTypeMap1234 {
			yyl2574 := r.ReadMapStart()
			if yyl2574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2574, d)
			}
		} else if yyct2574 == codecSelferValueTypeArray1234 {
			yyl2574 := r.ReadArrayStart()
			if yyl2574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2575Slc
	var yyhl2575 bool = l >= 0
	for yyj2575 := 0; ; yyj2575++ {
		if yyhl2575 {
			if yyj2575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2575Slc = r.DecodeBytes(yys2575Slc, true, true)
		yys2575 := string(yys2575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2575 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2578 := &x.ObjectMeta
				yyv2578.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2579 := &x.Spec
				yyv2579.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2580 := &x.Status
				yyv2580.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2575)
		} // end switch yys2575
	} // end for yyj2575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2581 int
	var yyb2581 bool
	var yyhl2581 bool = l >= 0
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2584 := &x.ObjectMeta
		yyv2584.CodecDecodeSelf(d)
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2585 := &x.Spec
		yyv2585.CodecDecodeSelf(d)
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2586 := &x.Status
		yyv2586.CodecDecodeSelf(d)
	}
	for {
		yyj2581++
		if yyhl2581 {
			yyb2581 = yyj2581 > l
		} else {
			yyb2581 = r.CheckBreak()
		}
		if yyb2581 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2581-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2587 := z.EncBinary()
		_ = yym2587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2588 := !z.EncBinary()
			yy2arr2588 := z.EncBasicHandle().StructToArray
			var yyq2588 [4]bool
			_, _, _ = yysep2588, yyq2588, yy2arr2588
			const yyr2588 bool = false
			yyq2588[0] = x.Kind != ""
			yyq2588[1] = x.APIVersion != ""
			yyq2588[2] = true
			var yynn2588 int
			if yyr2588 || yy2arr2588 {
				r.EncodeArrayStart(4)
			} else {
				yynn2588 = 1
				for _, b := range yyq2588 {
					if b {
						yynn2588++
					}
				}
				r.EncodeMapStart(yynn2588)
				yynn2588 = 0
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2588[0] {
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2588[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2591 := z.EncBinary()
					_ = yym2591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2588[1] {
					yym2593 := z.EncBinary()
					_ = yym2593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2588[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2588[2] {
					yy2596 := &x.ListMeta
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2596) {
					} else {
						z.EncFallback(yy2596)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2588[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2598 := &x.ListMeta
					yym2599 := z.EncBinary()
					_ = yym2599
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2598) {
					} else {
						z.EncFallback(yy2598)
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2602 := z.EncBinary()
					_ = yym2602
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2603 := z.DecBinary()
	_ = yym2603
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2604 := r.ContainerType()
		if yyct2604 == codecSelferValueTypeMap1234 {
			yyl2604 := r.ReadMapStart()
			if yyl2604 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2604, d)
			}
		} else if yyct2604 == codecSelferValueTypeArray1234 {
			yyl2604 := r.ReadArrayStart()
			if yyl2604 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2604, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2605Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2605Slc
	var yyhl2605 bool = l >= 0
	for yyj2605 := 0; ; yyj2605++ {
		if yyhl2605 {
			if yyj2605 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2605Slc = r.DecodeBytes(yys2605Slc, true, true)
		yys2605 := string(yys2605Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2605 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2608 := &x.ListMeta
				yym2609 := z.DecBinary()
				_ = yym2609
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2608) {
				} else {
					z.DecFallback(yyv2608, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2610 := &x.Items
				yym2611 := z.DecBinary()
				_ = yym2611
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2610), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2605)
		} // end switch yys2605
	} // end for yyj2605
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2612 int
	var yyb2612 bool
	var yyhl2612 bool = l >= 0
	yyj2612++
	if yyhl2612 {
		yyb2612 = yyj2612 > l
	} else {
		yyb2612 = r.CheckBreak()
	}
	if yyb2612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2612++
	if yyhl2612 {
		yyb2612 = yyj2612 > l
	} else {
		yyb2612 = r.CheckBreak()
	}
	if yyb2612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2612++
	if yyhl2612 {
		yyb2612 = yyj2612 > l
	} else {
		yyb2612 = r.CheckBreak()
	}
	if yyb2612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2615 := &x.ListMeta
		yym2616 := z.DecBinary()
		_ = yym2616
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2615) {
		} else {
			z.DecFallback(yyv2615, false)
		}
	}
	yyj2612++
	if yyhl2612 {
		yyb2612 = yyj2612 > l
	} else {
		yyb2612 = r.CheckBreak()
	}
	if yyb2612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2617 := &x.Items
		yym2618 := z.DecBinary()
		_ = yym2618
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2617), d)
		}
	}
	for {
		yyj2612++
		if yyhl2612 {
			yyb2612 = yyj2612 > l
		} else {
			yyb2612 = r.CheckBreak()
		}
		if yyb2612 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2612-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2619 := z.EncBinary()
	_ = yym2619
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2620 := z.DecBinary()
	_ = yym2620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2621 := z.EncBinary()
	_ = yym2621
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2622 := z.DecBinary()
	_ = yym2622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2623 := z.EncBinary()
		_ = yym2623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2624 := !z.EncBinary()
			yy2arr2624 := z.EncBasicHandle().StructToArray
			var yyq2624 [1]bool
			_, _, _ = yysep2624, yyq2624, yy2arr2624
			const yyr2624 bool = false
			yyq2624[0] = true
			var yynn2624 int
			if yyr2624 || yy2arr2624 {
				r.EncodeArrayStart(1)
			} else {
				yynn2624 = 0
				for _, b := range yyq2624 {
					if b {
						yynn2624++
					}
				}
				r.EncodeMapStart(yynn2624)
				yynn2624 = 0
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[0] {
					yy2626 := &x.LoadBalancer
					yy2626.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2624[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2627 := &x.LoadBalancer
					yy2627.CodecEncodeSelf(e)
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2628 := z.DecBinary()
	_ = yym2628
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2629 := r.ContainerType()
		if yyct2629 == codecSelferValueTypeMap1234 {
			yyl2629 := r.ReadMapStart()
			if yyl2629 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2629, d)
			}
		} else if yyct2629 == codecSelferValueTypeArray1234 {
			yyl2629 := r.ReadArrayStart()
			if yyl2629 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2629, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2630Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2630Slc
	var yyhl2630 bool = l >= 0
	for yyj2630 := 0; ; yyj2630++ {
		if yyhl2630 {
			if yyj2630 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2630Slc = r.DecodeBytes(yys2630Slc, true, true)
		yys2630 := string(yys2630Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2630 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2631 := &x.LoadBalancer
				yyv2631.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2630)
		} // end switch yys2630
	} // end for yyj2630
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2632 int
	var yyb2632 bool
	var yyhl2632 bool = l >= 0
	yyj2632++
	if yyhl2632 {
		yyb2632 = yyj2632 > l
	} else {
		yyb2632 = r.CheckBreak()
	}
	if yyb2632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2633 := &x.LoadBalancer
		yyv2633.CodecDecodeSelf(d)
	}
	for {
		yyj2632++
		if yyhl2632 {
			yyb2632 = yyj2632 > l
		} else {
			yyb2632 = r.CheckBreak()
		}
		if yyb2632 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2632-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2634 := z.EncBinary()
		_ = yym2634
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2635 := !z.EncBinary()
			yy2arr2635 := z.EncBasicHandle().StructToArray
			var yyq2635 [1]bool
			_, _, _ = yysep2635, yyq2635, yy2arr2635
			const yyr2635 bool = false
			yyq2635[0] = len(x.Ingress) != 0
			var yynn2635 int
			if yyr2635 || yy2arr2635 {
				r.EncodeArrayStart(1)
			} else {
				yynn2635 = 0
				for _, b := range yyq2635 {
					if b {
						yynn2635++
					}
				}
				r.EncodeMapStart(yynn2635)
				yynn2635 = 0
			}
			if yyr2635 || yy2arr2635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2635[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2637 := z.EncBinary()
						_ = yym2637
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2635[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2638 := z.EncBinary()
						_ = yym2638
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2635 || yy2arr2635 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2639 := z.DecBinary()
	_ = yym2639
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2640 := r.ContainerType()
		if yyct2640 == codecSelferValueTypeMap1234 {
			yyl2640 := r.ReadMapStart()
			if yyl2640 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2640, d)
			}
		} else if yyct2640 == codecSelferValueTypeArray1234 {
			yyl2640 := r.ReadArrayStart()
			if yyl2640 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2640, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2641Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2641Slc
	var yyhl2641 bool = l >= 0
	for yyj2641 := 0; ; yyj2641++ {
		if yyhl2641 {
			if yyj2641 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2641Slc = r.DecodeBytes(yys2641Slc, true, true)
		yys2641 := string(yys2641Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2641 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2642 := &x.Ingress
				yym2643 := z.DecBinary()
				_ = yym2643
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2642), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2641)
		} // end switch yys2641
	} // end for yyj2641
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2644 int
	var yyb2644 bool
	var yyhl2644 bool = l >= 0
	yyj2644++
	if yyhl2644 {
		yyb2644 = yyj2644 > l
	} else {
		yyb2644 = r.CheckBreak()
	}
	if yyb2644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2645 := &x.Ingress
		yym2646 := z.DecBinary()
		_ = yym2646
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2645), d)
		}
	}
	for {
		yyj2644++
		if yyhl2644 {
			yyb2644 = yyj2644 > l
		} else {
			yyb2644 = r.CheckBreak()
		}
		if yyb2644 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2644-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2647 := z.EncBinary()
		_ = yym2647
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2648 := !z.EncBinary()
			yy2arr2648 := z.EncBasicHandle().StructToArray
			var yyq2648 [2]bool
			_, _, _ = yysep2648, yyq2648, yy2arr2648
			const yyr2648 bool = false
			yyq2648[0] = x.IP != ""
			yyq2648[1] = x.Hostname != ""
			var yynn2648 int
			if yyr2648 || yy2arr2648 {
				r.EncodeArrayStart(2)
			} else {
				yynn2648 = 0
				for _, b := range yyq2648 {
					if b {
						yynn2648++
					}
				}
				r.EncodeMapStart(yynn2648)
				yynn2648 = 0
			}
			if yyr2648 || yy2arr2648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2648[0] {
					yym2650 := z.EncBinary()
					_ = yym2650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2648[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2648 || yy2arr2648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2648[1] {
					yym2653 := z.EncBinary()
					_ = yym2653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2648[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2654 := z.EncBinary()
					_ = yym2654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2648 || yy2arr2648 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2655 := z.DecBinary()
	_ = yym2655
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2656 := r.ContainerType()
		if yyct2656 == codecSelferValueTypeMap1234 {
			yyl2656 := r.ReadMapStart()
			if yyl2656 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2656, d)
			}
		} else if yyct2656 == codecSelferValueTypeArray1234 {
			yyl2656 := r.ReadArrayStart()
			if yyl2656 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2656, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2657Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2657Slc
	var yyhl2657 bool = l >= 0
	for yyj2657 := 0; ; yyj2657++ {
		if yyhl2657 {
			if yyj2657 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2657Slc = r.DecodeBytes(yys2657Slc, true, true)
		yys2657 := string(yys2657Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2657 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2657)
		} // end switch yys2657
	} // end for yyj2657
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2660 int
	var yyb2660 bool
	var yyhl2660 bool = l >= 0
	yyj2660++
	if yyhl2660 {
		yyb2660 = yyj2660 > l
	} else {
		yyb2660 = r.CheckBreak()
	}
	if yyb2660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2660++
	if yyhl2660 {
		yyb2660 = yyj2660 > l
	} else {
		yyb2660 = r.CheckBreak()
	}
	if yyb2660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2660++
		if yyhl2660 {
			yyb2660 = yyj2660 > l
		} else {
			yyb2660 = r.CheckBreak()
		}
		if yyb2660 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2660-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2663 := z.EncBinary()
		_ = yym2663
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2664 := !z.EncBinary()
			yy2arr2664 := z.EncBasicHandle().StructToArray
			var yyq2664 [10]bool
			_, _, _ = yysep2664, yyq2664, yy2arr2664
			const yyr2664 bool = false
			yyq2664[1] = len(x.Selector) != 0
			yyq2664[2] = x.ClusterIP != ""
			yyq2664[3] = x.Type != ""
			yyq2664[4] = len(x.ExternalIPs) != 0
			yyq2664[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2664[6] = x.SessionAffinity != ""
			yyq2664[7] = x.LoadBalancerIP != ""
			yyq2664[8] = len(x.LoadBalancerSourceRanges) != 0
			yyq2664[9] = x.ExternalName != ""
			var yynn2664 int
			if yyr2664 || yy2arr2664 {
				r.EncodeArrayStart(10)
			} else {
				yynn2664 = 1
				for _, b := range yyq2664 {
					if b {
						yynn2664++
					}
				}
				r.EncodeMapStart(yynn2664)
				yynn2664 = 0
			}
			if yyr2664 || yy2arr2664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2666 := z.EncBinary()
					_ = yym2666
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2667 := z.EncBinary()
					_ = yym2667
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2664 || yy2arr2664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2664[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2669 := z.EncBinary()
						_ = yym2669
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2664[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2670 := z.EncBinary()
						_ = yym2670
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2664 || yy2arr2664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2664[2] {
					yym2672 := z.EncBinary()
					_ = yym2672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2664[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2673 := z.EncBinary()
					_ = yym2673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2664 || yy2arr2664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2664[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2664[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2664 || yy2arr2664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2664[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2676 := z.EncBinary()
						_ = yym2676
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2664[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2677 := z.EncBinary()
						_ = yym2677
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2664 || yy2arr2664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2664[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2679 := z.EncBinary()
						_ = yym2679
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2664[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2680 := z.EncBinary()
						_ = yym2680
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2664 || yy2arr2664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2664[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2664[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2664 || yy2arr2664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2664[7] {
					yym2683 := z.EncBinary()
					_ = yym2683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2664[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2684 := z.EncBinary()
					_ = yym2684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2664 || yy2arr2664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2664[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2686 := z.EncBinary()
						_ = yym2686
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2664[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2687 := z.EncBinary()
						_ = yym2687
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2664 || yy2arr2664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2664[9] {
					yym2689 := z.EncBinary()
					_ = yym2689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2664[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2690 := z.EncBinary()
					_ = yym2690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				}
			}
			if yyr2664 || yy2arr2664 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2691 := z.DecBinary()
	_ = yym2691
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2692 := r.ContainerType()
		if yyct2692 == codecSelferValueTypeMap1234 {
			yyl2692 := r.ReadMapStart()
			if yyl2692 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2692, d)
			}
		} else if yyct2692 == codecSelferValueTypeArray1234 {
			yyl2692 := r.ReadArrayStart()
			if yyl2692 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2692, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2693Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2693Slc
	var yyhl2693 bool = l >= 0
	for yyj2693 := 0; ; yyj2693++ {
		if yyhl2693 {
			if yyj2693 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2693Slc = r.DecodeBytes(yys2693Slc, true, true)
		yys2693 := string(yys2693Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2693 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2694 := &x.Ports
				yym2695 := z.DecBinary()
				_ = yym2695
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2694), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2696 := &x.Selector
				yym2697 := z.DecBinary()
				_ = yym2697
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2696, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2700 := &x.ExternalIPs
				yym2701 := z.DecBinary()
				_ = yym2701
				if false {
				} else {
					z.F.DecSliceStringX(yyv2700, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2702 := &x.DeprecatedPublicIPs
				yym2703 := z.DecBinary()
				_ = yym2703
				if false {
				} else {
					z.F.DecSliceStringX(yyv2702, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2706 := &x.LoadBalancerSourceRanges
				yym2707 := z.DecBinary()
				_ = yym2707
				if false {
				} else {
					z.F.DecSliceStringX(yyv2706, false, d)
				}
			}
		case "externalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2693)
		} // end switch yys2693
	} // end for yyj2693
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2709 int
	var yyb2709 bool
	var yyhl2709 bool = l >= 0
	yyj2709++
	if yyhl2709 {
		yyb2709 = yyj2709 > l
	} else {
		yyb2709 = r.CheckBreak()
	}
	if yyb2709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2710 := &x.Ports
		yym2711 := z.DecBinary()
		_ = yym2711
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2710), d)
		}
	}
	yyj2709++
	if yyhl2709 {
		yyb2709 = yyj2709 > l
	} else {
		yyb2709 = r.CheckBreak()
	}
	if yyb2709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2712 := &x.Selector
		yym2713 := z.DecBinary()
		_ = yym2713
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2712, false, d)
		}
	}
	yyj2709++
	if yyhl2709 {
		yyb2709 = yyj2709 > l
	} else {
		yyb2709 = r.CheckBreak()
	}
	if yyb2709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2709++
	if yyhl2709 {
		yyb2709 = yyj2709 > l
	} else {
		yyb2709 = r.CheckBreak()
	}
	if yyb2709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2709++
	if yyhl2709 {
		yyb2709 = yyj2709 > l
	} else {
		yyb2709 = r.CheckBreak()
	}
	if yyb2709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2716 := &x.ExternalIPs
		yym2717 := z.DecBinary()
		_ = yym2717
		if false {
		} else {
			z.F.DecSliceStringX(yyv2716, false, d)
		}
	}
	yyj2709++
	if yyhl2709 {
		yyb2709 = yyj2709 > l
	} else {
		yyb2709 = r.CheckBreak()
	}
	if yyb2709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2718 := &x.DeprecatedPublicIPs
		yym2719 := z.DecBinary()
		_ = yym2719
		if false {
		} else {
			z.F.DecSliceStringX(yyv2718, false, d)
		}
	}
	yyj2709++
	if yyhl2709 {
		yyb2709 = yyj2709 > l
	} else {
		yyb2709 = r.CheckBreak()
	}
	if yyb2709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2709++
	if yyhl2709 {
		yyb2709 = yyj2709 > l
	} else {
		yyb2709 = r.CheckBreak()
	}
	if yyb2709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2709++
	if yyhl2709 {
		yyb2709 = yyj2709 > l
	} else {
		yyb2709 = r.CheckBreak()
	}
	if yyb2709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2722 := &x.LoadBalancerSourceRanges
		yym2723 := z.DecBinary()
		_ = yym2723
		if false {
		} else {
			z.F.DecSliceStringX(yyv2722, false, d)
		}
	}
	yyj2709++
	if yyhl2709 {
		yyb2709 = yyj2709 > l
	} else {
		yyb2709 = r.CheckBreak()
	}
	if yyb2709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	for {
		yyj2709++
		if yyhl2709 {
			yyb2709 = yyj2709 > l
		} else {
			yyb2709 = r.CheckBreak()
		}
		if yyb2709 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2709-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2725 := z.EncBinary()
		_ = yym2725
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2726 := !z.EncBinary()
			yy2arr2726 := z.EncBasicHandle().StructToArray
			var yyq2726 [5]bool
			_, _, _ = yysep2726, yyq2726, yy2arr2726
			const yyr2726 bool = false
			yyq2726[0] = x.Name != ""
			yyq2726[1] = x.Protocol != ""
			yyq2726[3] = true
			yyq2726[4] = x.NodePort != 0
			var yynn2726 int
			if yyr2726 || yy2arr2726 {
				r.EncodeArrayStart(5)
			} else {
				yynn2726 = 1
				for _, b := range yyq2726 {
					if b {
						yynn2726++
					}
				}
				r.EncodeMapStart(yynn2726)
				yynn2726 = 0
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2726[0] {
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2726[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2726[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2726[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2732 := z.EncBinary()
				_ = yym2732
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2733 := z.EncBinary()
				_ = yym2733
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2726[3] {
					yy2735 := &x.TargetPort
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2735) {
					} else if !yym2736 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2735)
					} else {
						z.EncFallback(yy2735)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2726[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2737 := &x.TargetPort
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2737) {
					} else if !yym2738 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2737)
					} else {
						z.EncFallback(yy2737)
					}
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2726[4] {
					yym2740 := z.EncBinary()
					_ = yym2740
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2726[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2741 := z.EncBinary()
					_ = yym2741
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2742 := z.DecBinary()
	_ = yym2742
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2743 := r.ContainerType()
		if yyct2743 == codecSelferValueTypeMap1234 {
			yyl2743 := r.ReadMapStart()
			if yyl2743 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2743, d)
			}
		} else if yyct2743 == codecSelferValueTypeArray1234 {
			yyl2743 := r.ReadArrayStart()
			if yyl2743 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2743, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2744Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2744Slc
	var yyhl2744 bool = l >= 0
	for yyj2744 := 0; ; yyj2744++ {
		if yyhl2744 {
			if yyj2744 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2744Slc = r.DecodeBytes(yys2744Slc, true, true)
		yys2744 := string(yys2744Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2744 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2748 := &x.TargetPort
				yym2749 := z.DecBinary()
				_ = yym2749
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2748) {
				} else if !yym2749 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2748)
				} else {
					z.DecFallback(yyv2748, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2744)
		} // end switch yys2744
	} // end for yyj2744
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2751 int
	var yyb2751 bool
	var yyhl2751 bool = l >= 0
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2755 := &x.TargetPort
		yym2756 := z.DecBinary()
		_ = yym2756
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2755) {
		} else if !yym2756 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2755)
		} else {
			z.DecFallback(yyv2755, false)
		}
	}
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2751++
		if yyhl2751 {
			yyb2751 = yyj2751 > l
		} else {
			yyb2751 = r.CheckBreak()
		}
		if yyb2751 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2751-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2758 := z.EncBinary()
		_ = yym2758
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2759 := !z.EncBinary()
			yy2arr2759 := z.EncBasicHandle().StructToArray
			var yyq2759 [5]bool
			_, _, _ = yysep2759, yyq2759, yy2arr2759
			const yyr2759 bool = false
			yyq2759[0] = x.Kind != ""
			yyq2759[1] = x.APIVersion != ""
			yyq2759[2] = true
			yyq2759[3] = true
			yyq2759[4] = true
			var yynn2759 int
			if yyr2759 || yy2arr2759 {
				r.EncodeArrayStart(5)
			} else {
				yynn2759 = 0
				for _, b := range yyq2759 {
					if b {
						yynn2759++
					}
				}
				r.EncodeMapStart(yynn2759)
				yynn2759 = 0
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[0] {
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2759[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[1] {
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2759[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2765 := z.EncBinary()
					_ = yym2765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[2] {
					yy2767 := &x.ObjectMeta
					yy2767.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2759[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2768 := &x.ObjectMeta
					yy2768.CodecEncodeSelf(e)
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[3] {
					yy2770 := &x.Spec
					yy2770.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2759[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2771 := &x.Spec
					yy2771.CodecEncodeSelf(e)
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[4] {
					yy2773 := &x.Status
					yy2773.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2759[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2774 := &x.Status
					yy2774.CodecEncodeSelf(e)
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2775 := z.DecBinary()
	_ = yym2775
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2776 := r.ContainerType()
		if yyct2776 == codecSelferValueTypeMap1234 {
			yyl2776 := r.ReadMapStart()
			if yyl2776 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2776, d)
			}
		} else if yyct2776 == codecSelferValueTypeArray1234 {
			yyl2776 := r.ReadArrayStart()
			if yyl2776 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2776, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2777Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2777Slc
	var yyhl2777 bool = l >= 0
	for yyj2777 := 0; ; yyj2777++ {
		if yyhl2777 {
			if yyj2777 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2777Slc = r.DecodeBytes(yys2777Slc, true, true)
		yys2777 := string(yys2777Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2777 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2780 := &x.ObjectMeta
				yyv2780.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2781 := &x.Spec
				yyv2781.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2782 := &x.Status
				yyv2782.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2777)
		} // end switch yys2777
	} // end for yyj2777
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2783 int
	var yyb2783 bool
	var yyhl2783 bool = l >= 0
	yyj2783++
	if yyhl2783 {
		yyb2783 = yyj2783 > l
	} else {
		yyb2783 = r.CheckBreak()
	}
	if yyb2783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2783++
	if yyhl2783 {
		yyb2783 = yyj2783 > l
	} else {
		yyb2783 = r.CheckBreak()
	}
	if yyb2783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2783++
	if yyhl2783 {
		yyb2783 = yyj2783 > l
	} else {
		yyb2783 = r.CheckBreak()
	}
	if yyb2783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2786 := &x.ObjectMeta
		yyv2786.CodecDecodeSelf(d)
	}
	yyj2783++
	if yyhl2783 {
		yyb2783 = yyj2783 > l
	} else {
		yyb2783 = r.CheckBreak()
	}
	if yyb2783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2787 := &x.Spec
		yyv2787.CodecDecodeSelf(d)
	}
	yyj2783++
	if yyhl2783 {
		yyb2783 = yyj2783 > l
	} else {
		yyb2783 = r.CheckBreak()
	}
	if yyb2783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2788 := &x.Status
		yyv2788.CodecDecodeSelf(d)
	}
	for {
		yyj2783++
		if yyhl2783 {
			yyb2783 = yyj2783 > l
		} else {
			yyb2783 = r.CheckBreak()
		}
		if yyb2783 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2783-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2789 := z.EncBinary()
		_ = yym2789
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2790 := !z.EncBinary()
			yy2arr2790 := z.EncBasicHandle().StructToArray
			var yyq2790 [4]bool
			_, _, _ = yysep2790, yyq2790, yy2arr2790
			const yyr2790 bool = false
			yyq2790[0] = x.Kind != ""
			yyq2790[1] = x.APIVersion != ""
			yyq2790[2] = true
			var yynn2790 int
			if yyr2790 || yy2arr2790 {
				r.EncodeArrayStart(4)
			} else {
				yynn2790 = 1
				for _, b := range yyq2790 {
					if b {
						yynn2790++
					}
				}
				r.EncodeMapStart(yynn2790)
				yynn2790 = 0
			}
			if yyr2790 || yy2arr2790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2790[0] {
					yym2792 := z.EncBinary()
					_ = yym2792
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2790[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2790 || yy2arr2790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2790[1] {
					yym2795 := z.EncBinary()
					_ = yym2795
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2790[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2790 || yy2arr2790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2790[2] {
					yy2798 := &x.ListMeta
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2798) {
					} else {
						z.EncFallback(yy2798)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2790[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2800 := &x.ListMeta
					yym2801 := z.EncBinary()
					_ = yym2801
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2800) {
					} else {
						z.EncFallback(yy2800)
					}
				}
			}
			if yyr2790 || yy2arr2790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2803 := z.EncBinary()
					_ = yym2803
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2804 := z.EncBinary()
					_ = yym2804
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2790 || yy2arr2790 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2805 := z.DecBinary()
	_ = yym2805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2806 := r.ContainerType()
		if yyct2806 == codecSelferValueTypeMap1234 {
			yyl2806 := r.ReadMapStart()
			if yyl2806 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2806, d)
			}
		} else if yyct2806 == codecSelferValueTypeArray1234 {
			yyl2806 := r.ReadArrayStart()
			if yyl2806 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2807Slc
	var yyhl2807 bool = l >= 0
	for yyj2807 := 0; ; yyj2807++ {
		if yyhl2807 {
			if yyj2807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2807Slc = r.DecodeBytes(yys2807Slc, true, true)
		yys2807 := string(yys2807Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2807 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2810 := &x.ListMeta
				yym2811 := z.DecBinary()
				_ = yym2811
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2810) {
				} else {
					z.DecFallback(yyv2810, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2812 := &x.Items
				yym2813 := z.DecBinary()
				_ = yym2813
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2812), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2807)
		} // end switch yys2807
	} // end for yyj2807
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2814 int
	var yyb2814 bool
	var yyhl2814 bool = l >= 0
	yyj2814++
	if yyhl2814 {
		yyb2814 = yyj2814 > l
	} else {
		yyb2814 = r.CheckBreak()
	}
	if yyb2814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2814++
	if yyhl2814 {
		yyb2814 = yyj2814 > l
	} else {
		yyb2814 = r.CheckBreak()
	}
	if yyb2814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2814++
	if yyhl2814 {
		yyb2814 = yyj2814 > l
	} else {
		yyb2814 = r.CheckBreak()
	}
	if yyb2814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2817 := &x.ListMeta
		yym2818 := z.DecBinary()
		_ = yym2818
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2817) {
		} else {
			z.DecFallback(yyv2817, false)
		}
	}
	yyj2814++
	if yyhl2814 {
		yyb2814 = yyj2814 > l
	} else {
		yyb2814 = r.CheckBreak()
	}
	if yyb2814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2819 := &x.Items
		yym2820 := z.DecBinary()
		_ = yym2820
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2819), d)
		}
	}
	for {
		yyj2814++
		if yyhl2814 {
			yyb2814 = yyj2814 > l
		} else {
			yyb2814 = r.CheckBreak()
		}
		if yyb2814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2821 := z.EncBinary()
		_ = yym2821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2822 := !z.EncBinary()
			yy2arr2822 := z.EncBasicHandle().StructToArray
			var yyq2822 [5]bool
			_, _, _ = yysep2822, yyq2822, yy2arr2822
			const yyr2822 bool = false
			yyq2822[0] = x.Kind != ""
			yyq2822[1] = x.APIVersion != ""
			yyq2822[2] = true
			yyq2822[3] = len(x.Secrets) != 0
			yyq2822[4] = len(x.ImagePullSecrets) != 0
			var yynn2822 int
			if yyr2822 || yy2arr2822 {
				r.EncodeArrayStart(5)
			} else {
				yynn2822 = 0
				for _, b := range yyq2822 {
					if b {
						yynn2822++
					}
				}
				r.EncodeMapStart(yynn2822)
				yynn2822 = 0
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2822[0] {
					yym2824 := z.EncBinary()
					_ = yym2824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2822[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2825 := z.EncBinary()
					_ = yym2825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2822[1] {
					yym2827 := z.EncBinary()
					_ = yym2827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2822[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2822[2] {
					yy2830 := &x.ObjectMeta
					yy2830.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2822[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2831 := &x.ObjectMeta
					yy2831.CodecEncodeSelf(e)
				}
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2822[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2833 := z.EncBinary()
						_ = yym2833
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2822[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2834 := z.EncBinary()
						_ = yym2834
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2822[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2836 := z.EncBinary()
						_ = yym2836
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2822[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2837 := z.EncBinary()
						_ = yym2837
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2838 := z.DecBinary()
	_ = yym2838
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2839 := r.ContainerType()
		if yyct2839 == codecSelferValueTypeMap1234 {
			yyl2839 := r.ReadMapStart()
			if yyl2839 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2839, d)
			}
		} else if yyct2839 == codecSelferValueTypeArray1234 {
			yyl2839 := r.ReadArrayStart()
			if yyl2839 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2839, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2840Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2840Slc
	var yyhl2840 bool = l >= 0
	for yyj2840 := 0; ; yyj2840++ {
		if yyhl2840 {
			if yyj2840 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2840Slc = r.DecodeBytes(yys2840Slc, true, true)
		yys2840 := string(yys2840Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2840 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2843 := &x.ObjectMeta
				yyv2843.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2844 := &x.Secrets
				yym2845 := z.DecBinary()
				_ = yym2845
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2844), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2846 := &x.ImagePullSecrets
				yym2847 := z.DecBinary()
				_ = yym2847
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2846), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2840)
		} // end switch yys2840
	} // end for yyj2840
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2848 int
	var yyb2848 bool
	var yyhl2848 bool = l >= 0
	yyj2848++
	if yyhl2848 {
		yyb2848 = yyj2848 > l
	} else {
		yyb2848 = r.CheckBreak()
	}
	if yyb2848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2848++
	if yyhl2848 {
		yyb2848 = yyj2848 > l
	} else {
		yyb2848 = r.CheckBreak()
	}
	if yyb2848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2848++
	if yyhl2848 {
		yyb2848 = yyj2848 > l
	} else {
		yyb2848 = r.CheckBreak()
	}
	if yyb2848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2851 := &x.ObjectMeta
		yyv2851.CodecDecodeSelf(d)
	}
	yyj2848++
	if yyhl2848 {
		yyb2848 = yyj2848 > l
	} else {
		yyb2848 = r.CheckBreak()
	}
	if yyb2848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2852 := &x.Secrets
		yym2853 := z.DecBinary()
		_ = yym2853
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2852), d)
		}
	}
	yyj2848++
	if yyhl2848 {
		yyb2848 = yyj2848 > l
	} else {
		yyb2848 = r.CheckBreak()
	}
	if yyb2848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2854 := &x.ImagePullSecrets
		yym2855 := z.DecBinary()
		_ = yym2855
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2854), d)
		}
	}
	for {
		yyj2848++
		if yyhl2848 {
			yyb2848 = yyj2848 > l
		} else {
			yyb2848 = r.CheckBreak()
		}
		if yyb2848 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2848-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2856 := z.EncBinary()
		_ = yym2856
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2857 := !z.EncBinary()
			yy2arr2857 := z.EncBasicHandle().StructToArray
			var yyq2857 [4]bool
			_, _, _ = yysep2857, yyq2857, yy2arr2857
			const yyr2857 bool = false
			yyq2857[0] = x.Kind != ""
			yyq2857[1] = x.APIVersion != ""
			yyq2857[2] = true
			var yynn2857 int
			if yyr2857 || yy2arr2857 {
				r.EncodeArrayStart(4)
			} else {
				yynn2857 = 1
				for _, b := range yyq2857 {
					if b {
						yynn2857++
					}
				}
				r.EncodeMapStart(yynn2857)
				yynn2857 = 0
			}
			if yyr2857 || yy2arr2857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2857[0] {
					yym2859 := z.EncBinary()
					_ = yym2859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2857[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2860 := z.EncBinary()
					_ = yym2860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2857 || yy2arr2857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2857[1] {
					yym2862 := z.EncBinary()
					_ = yym2862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2857[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2863 := z.EncBinary()
					_ = yym2863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2857 || yy2arr2857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2857[2] {
					yy2865 := &x.ListMeta
					yym2866 := z.EncBinary()
					_ = yym2866
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2865) {
					} else {
						z.EncFallback(yy2865)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2857[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2867 := &x.ListMeta
					yym2868 := z.EncBinary()
					_ = yym2868
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2867) {
					} else {
						z.EncFallback(yy2867)
					}
				}
			}
			if yyr2857 || yy2arr2857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2871 := z.EncBinary()
					_ = yym2871
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2857 || yy2arr2857 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2872 := z.DecBinary()
	_ = yym2872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2873 := r.ContainerType()
		if yyct2873 == codecSelferValueTypeMap1234 {
			yyl2873 := r.ReadMapStart()
			if yyl2873 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2873, d)
			}
		} else if yyct2873 == codecSelferValueTypeArray1234 {
			yyl2873 := r.ReadArrayStart()
			if yyl2873 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2873, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2874Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2874Slc
	var yyhl2874 bool = l >= 0
	for yyj2874 := 0; ; yyj2874++ {
		if yyhl2874 {
			if yyj2874 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2874Slc = r.DecodeBytes(yys2874Slc, true, true)
		yys2874 := string(yys2874Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2874 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2877 := &x.ListMeta
				yym2878 := z.DecBinary()
				_ = yym2878
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2877) {
				} else {
					z.DecFallback(yyv2877, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2879 := &x.Items
				yym2880 := z.DecBinary()
				_ = yym2880
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2879), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2874)
		} // end switch yys2874
	} // end for yyj2874
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2881 int
	var yyb2881 bool
	var yyhl2881 bool = l >= 0
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2884 := &x.ListMeta
		yym2885 := z.DecBinary()
		_ = yym2885
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2884) {
		} else {
			z.DecFallback(yyv2884, false)
		}
	}
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2886 := &x.Items
		yym2887 := z.DecBinary()
		_ = yym2887
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2886), d)
		}
	}
	for {
		yyj2881++
		if yyhl2881 {
			yyb2881 = yyj2881 > l
		} else {
			yyb2881 = r.CheckBreak()
		}
		if yyb2881 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2881-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2888 := z.EncBinary()
		_ = yym2888
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2889 := !z.EncBinary()
			yy2arr2889 := z.EncBasicHandle().StructToArray
			var yyq2889 [4]bool
			_, _, _ = yysep2889, yyq2889, yy2arr2889
			const yyr2889 bool = false
			yyq2889[0] = x.Kind != ""
			yyq2889[1] = x.APIVersion != ""
			yyq2889[2] = true
			var yynn2889 int
			if yyr2889 || yy2arr2889 {
				r.EncodeArrayStart(4)
			} else {
				yynn2889 = 1
				for _, b := range yyq2889 {
					if b {
						yynn2889++
					}
				}
				r.EncodeMapStart(yynn2889)
				yynn2889 = 0
			}
			if yyr2889 || yy2arr2889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2889[0] {
					yym2891 := z.EncBinary()
					_ = yym2891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2889[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2892 := z.EncBinary()
					_ = yym2892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2889 || yy2arr2889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2889[1] {
					yym2894 := z.EncBinary()
					_ = yym2894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2889[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2895 := z.EncBinary()
					_ = yym2895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2889 || yy2arr2889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2889[2] {
					yy2897 := &x.ObjectMeta
					yy2897.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2889[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2898 := &x.ObjectMeta
					yy2898.CodecEncodeSelf(e)
				}
			}
			if yyr2889 || yy2arr2889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2900 := z.EncBinary()
					_ = yym2900
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2901 := z.EncBinary()
					_ = yym2901
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2889 || yy2arr2889 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2902 := z.DecBinary()
	_ = yym2902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2903 := r.ContainerType()
		if yyct2903 == codecSelferValueTypeMap1234 {
			yyl2903 := r.ReadMapStart()
			if yyl2903 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2903, d)
			}
		} else if yyct2903 == codecSelferValueTypeArray1234 {
			yyl2903 := r.ReadArrayStart()
			if yyl2903 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2904Slc
	var yyhl2904 bool = l >= 0
	for yyj2904 := 0; ; yyj2904++ {
		if yyhl2904 {
			if yyj2904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2904Slc = r.DecodeBytes(yys2904Slc, true, true)
		yys2904 := string(yys2904Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2904 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2907 := &x.ObjectMeta
				yyv2907.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2908 := &x.Subsets
				yym2909 := z.DecBinary()
				_ = yym2909
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2908), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2904)
		} // end switch yys2904
	} // end for yyj2904
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2910 int
	var yyb2910 bool
	var yyhl2910 bool = l >= 0
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2913 := &x.ObjectMeta
		yyv2913.CodecDecodeSelf(d)
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2914 := &x.Subsets
		yym2915 := z.DecBinary()
		_ = yym2915
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2914), d)
		}
	}
	for {
		yyj2910++
		if yyhl2910 {
			yyb2910 = yyj2910 > l
		} else {
			yyb2910 = r.CheckBreak()
		}
		if yyb2910 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2910-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2916 := z.EncBinary()
		_ = yym2916
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2917 := !z.EncBinary()
			yy2arr2917 := z.EncBasicHandle().StructToArray
			var yyq2917 [3]bool
			_, _, _ = yysep2917, yyq2917, yy2arr2917
			const yyr2917 bool = false
			yyq2917[0] = len(x.Addresses) != 0
			yyq2917[1] = len(x.NotReadyAddresses) != 0
			yyq2917[2] = len(x.Ports) != 0
			var yynn2917 int
			if yyr2917 || yy2arr2917 {
				r.EncodeArrayStart(3)
			} else {
				yynn2917 = 0
				for _, b := range yyq2917 {
					if b {
						yynn2917++
					}
				}
				r.EncodeMapStart(yynn2917)
				yynn2917 = 0
			}
			if yyr2917 || yy2arr2917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2917[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2919 := z.EncBinary()
						_ = yym2919
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2917[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2920 := z.EncBinary()
						_ = yym2920
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2917 || yy2arr2917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2917[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2922 := z.EncBinary()
						_ = yym2922
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2917[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2923 := z.EncBinary()
						_ = yym2923
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2917 || yy2arr2917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2917[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2925 := z.EncBinary()
						_ = yym2925
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2917[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2926 := z.EncBinary()
						_ = yym2926
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2917 || yy2arr2917 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2927 := z.DecBinary()
	_ = yym2927
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2928 := r.ContainerType()
		if yyct2928 == codecSelferValueTypeMap1234 {
			yyl2928 := r.ReadMapStart()
			if yyl2928 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2928, d)
			}
		} else if yyct2928 == codecSelferValueTypeArray1234 {
			yyl2928 := r.ReadArrayStart()
			if yyl2928 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2928, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2929Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2929Slc
	var yyhl2929 bool = l >= 0
	for yyj2929 := 0; ; yyj2929++ {
		if yyhl2929 {
			if yyj2929 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2929Slc = r.DecodeBytes(yys2929Slc, true, true)
		yys2929 := string(yys2929Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2929 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2930 := &x.Addresses
				yym2931 := z.DecBinary()
				_ = yym2931
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2930), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2932 := &x.NotReadyAddresses
				yym2933 := z.DecBinary()
				_ = yym2933
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2932), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2934 := &x.Ports
				yym2935 := z.DecBinary()
				_ = yym2935
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2934), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2929)
		} // end switch yys2929
	} // end for yyj2929
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2936 int
	var yyb2936 bool
	var yyhl2936 bool = l >= 0
	yyj2936++
	if yyhl2936 {
		yyb2936 = yyj2936 > l
	} else {
		yyb2936 = r.CheckBreak()
	}
	if yyb2936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2937 := &x.Addresses
		yym2938 := z.DecBinary()
		_ = yym2938
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2937), d)
		}
	}
	yyj2936++
	if yyhl2936 {
		yyb2936 = yyj2936 > l
	} else {
		yyb2936 = r.CheckBreak()
	}
	if yyb2936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2939 := &x.NotReadyAddresses
		yym2940 := z.DecBinary()
		_ = yym2940
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2939), d)
		}
	}
	yyj2936++
	if yyhl2936 {
		yyb2936 = yyj2936 > l
	} else {
		yyb2936 = r.CheckBreak()
	}
	if yyb2936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2941 := &x.Ports
		yym2942 := z.DecBinary()
		_ = yym2942
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2941), d)
		}
	}
	for {
		yyj2936++
		if yyhl2936 {
			yyb2936 = yyj2936 > l
		} else {
			yyb2936 = r.CheckBreak()
		}
		if yyb2936 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2936-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2943 := z.EncBinary()
		_ = yym2943
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2944 := !z.EncBinary()
			yy2arr2944 := z.EncBasicHandle().StructToArray
			var yyq2944 [4]bool
			_, _, _ = yysep2944, yyq2944, yy2arr2944
			const yyr2944 bool = false
			yyq2944[1] = x.Hostname != ""
			yyq2944[2] = x.NodeName != nil
			yyq2944[3] = x.TargetRef != nil
			var yynn2944 int
			if yyr2944 || yy2arr2944 {
				r.EncodeArrayStart(4)
			} else {
				yynn2944 = 1
				for _, b := range yyq2944 {
					if b {
						yynn2944++
					}
				}
				r.EncodeMapStart(yynn2944)
				yynn2944 = 0
			}
			if yyr2944 || yy2arr2944 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2946 := z.EncBinary()
				_ = yym2946
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2947 := z.EncBinary()
				_ = yym2947
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2944 || yy2arr2944 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2944[1] {
					yym2949 := z.EncBinary()
					_ = yym2949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2944[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2950 := z.EncBinary()
					_ = yym2950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2944 || yy2arr2944 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2944[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2952 := *x.NodeName
						yym2953 := z.EncBinary()
						_ = yym2953
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2952))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2944[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2954 := *x.NodeName
						yym2955 := z.EncBinary()
						_ = yym2955
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2954))
						}
					}
				}
			}
			if yyr2944 || yy2arr2944 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2944[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2944[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2944 || yy2arr2944 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2957 := z.DecBinary()
	_ = yym2957
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2958 := r.ContainerType()
		if yyct2958 == codecSelferValueTypeMap1234 {
			yyl2958 := r.ReadMapStart()
			if yyl2958 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2958, d)
			}
		} else if yyct2958 == codecSelferValueTypeArray1234 {
			yyl2958 := r.ReadArrayStart()
			if yyl2958 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2958, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2959Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2959Slc
	var yyhl2959 bool = l >= 0
	for yyj2959 := 0; ; yyj2959++ {
		if yyhl2959 {
			if yyj2959 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2959Slc = r.DecodeBytes(yys2959Slc, true, true)
		yys2959 := string(yys2959Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2959 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2963 := z.DecBinary()
				_ = yym2963
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2959)
		} // end switch yys2959
	} // end for yyj2959
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2965 int
	var yyb2965 bool
	var yyhl2965 bool = l >= 0
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2969 := z.DecBinary()
		_ = yym2969
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2965++
		if yyhl2965 {
			yyb2965 = yyj2965 > l
		} else {
			yyb2965 = r.CheckBreak()
		}
		if yyb2965 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2965-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2971 := z.EncBinary()
		_ = yym2971
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2972 := !z.EncBinary()
			yy2arr2972 := z.EncBasicHandle().StructToArray
			var yyq2972 [3]bool
			_, _, _ = yysep2972, yyq2972, yy2arr2972
			const yyr2972 bool = false
			yyq2972[0] = x.Name != ""
			yyq2972[2] = x.Protocol != ""
			var yynn2972 int
			if yyr2972 || yy2arr2972 {
				r.EncodeArrayStart(3)
			} else {
				yynn2972 = 1
				for _, b := range yyq2972 {
					if b {
						yynn2972++
					}
				}
				r.EncodeMapStart(yynn2972)
				yynn2972 = 0
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2972[0] {
					yym2974 := z.EncBinary()
					_ = yym2974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2972[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2975 := z.EncBinary()
					_ = yym2975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2977 := z.EncBinary()
				_ = yym2977
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2978 := z.EncBinary()
				_ = yym2978
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2972[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2972[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2980 := z.DecBinary()
	_ = yym2980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2981 := r.ContainerType()
		if yyct2981 == codecSelferValueTypeMap1234 {
			yyl2981 := r.ReadMapStart()
			if yyl2981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2981, d)
			}
		} else if yyct2981 == codecSelferValueTypeArray1234 {
			yyl2981 := r.ReadArrayStart()
			if yyl2981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2982Slc
	var yyhl2982 bool = l >= 0
	for yyj2982 := 0; ; yyj2982++ {
		if yyhl2982 {
			if yyj2982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2982Slc = r.DecodeBytes(yys2982Slc, true, true)
		yys2982 := string(yys2982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2982 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2982)
		} // end switch yys2982
	} // end for yyj2982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2986 int
	var yyb2986 bool
	var yyhl2986 bool = l >= 0
	yyj2986++
	if yyhl2986 {
		yyb2986 = yyj2986 > l
	} else {
		yyb2986 = r.CheckBreak()
	}
	if yyb2986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2986++
	if yyhl2986 {
		yyb2986 = yyj2986 > l
	} else {
		yyb2986 = r.CheckBreak()
	}
	if yyb2986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2986++
	if yyhl2986 {
		yyb2986 = yyj2986 > l
	} else {
		yyb2986 = r.CheckBreak()
	}
	if yyb2986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2986++
		if yyhl2986 {
			yyb2986 = yyj2986 > l
		} else {
			yyb2986 = r.CheckBreak()
		}
		if yyb2986 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2986-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2990 := z.EncBinary()
		_ = yym2990
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2991 := !z.EncBinary()
			yy2arr2991 := z.EncBasicHandle().StructToArray
			var yyq2991 [4]bool
			_, _, _ = yysep2991, yyq2991, yy2arr2991
			const yyr2991 bool = false
			yyq2991[0] = x.Kind != ""
			yyq2991[1] = x.APIVersion != ""
			yyq2991[2] = true
			var yynn2991 int
			if yyr2991 || yy2arr2991 {
				r.EncodeArrayStart(4)
			} else {
				yynn2991 = 1
				for _, b := range yyq2991 {
					if b {
						yynn2991++
					}
				}
				r.EncodeMapStart(yynn2991)
				yynn2991 = 0
			}
			if yyr2991 || yy2arr2991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2991[0] {
					yym2993 := z.EncBinary()
					_ = yym2993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2991[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2994 := z.EncBinary()
					_ = yym2994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2991 || yy2arr2991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2991[1] {
					yym2996 := z.EncBinary()
					_ = yym2996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2991[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2997 := z.EncBinary()
					_ = yym2997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2991 || yy2arr2991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2991[2] {
					yy2999 := &x.ListMeta
					yym3000 := z.EncBinary()
					_ = yym3000
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2999) {
					} else {
						z.EncFallback(yy2999)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2991[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3001 := &x.ListMeta
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3001) {
					} else {
						z.EncFallback(yy3001)
					}
				}
			}
			if yyr2991 || yy2arr2991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3005 := z.EncBinary()
					_ = yym3005
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2991 || yy2arr2991 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3006 := z.DecBinary()
	_ = yym3006
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3007 := r.ContainerType()
		if yyct3007 == codecSelferValueTypeMap1234 {
			yyl3007 := r.ReadMapStart()
			if yyl3007 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3007, d)
			}
		} else if yyct3007 == codecSelferValueTypeArray1234 {
			yyl3007 := r.ReadArrayStart()
			if yyl3007 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3007, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3008Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3008Slc
	var yyhl3008 bool = l >= 0
	for yyj3008 := 0; ; yyj3008++ {
		if yyhl3008 {
			if yyj3008 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3008Slc = r.DecodeBytes(yys3008Slc, true, true)
		yys3008 := string(yys3008Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3008 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3011 := &x.ListMeta
				yym3012 := z.DecBinary()
				_ = yym3012
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3011) {
				} else {
					z.DecFallback(yyv3011, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3013 := &x.Items
				yym3014 := z.DecBinary()
				_ = yym3014
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv3013), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3008)
		} // end switch yys3008
	} // end for yyj3008
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3015 int
	var yyb3015 bool
	var yyhl3015 bool = l >= 0
	yyj3015++
	if yyhl3015 {
		yyb3015 = yyj3015 > l
	} else {
		yyb3015 = r.CheckBreak()
	}
	if yyb3015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3015++
	if yyhl3015 {
		yyb3015 = yyj3015 > l
	} else {
		yyb3015 = r.CheckBreak()
	}
	if yyb3015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3015++
	if yyhl3015 {
		yyb3015 = yyj3015 > l
	} else {
		yyb3015 = r.CheckBreak()
	}
	if yyb3015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3018 := &x.ListMeta
		yym3019 := z.DecBinary()
		_ = yym3019
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3018) {
		} else {
			z.DecFallback(yyv3018, false)
		}
	}
	yyj3015++
	if yyhl3015 {
		yyb3015 = yyj3015 > l
	} else {
		yyb3015 = r.CheckBreak()
	}
	if yyb3015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3020 := &x.Items
		yym3021 := z.DecBinary()
		_ = yym3021
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv3020), d)
		}
	}
	for {
		yyj3015++
		if yyhl3015 {
			yyb3015 = yyj3015 > l
		} else {
			yyb3015 = r.CheckBreak()
		}
		if yyb3015 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3015-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3022 := z.EncBinary()
		_ = yym3022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3023 := !z.EncBinary()
			yy2arr3023 := z.EncBasicHandle().StructToArray
			var yyq3023 [4]bool
			_, _, _ = yysep3023, yyq3023, yy2arr3023
			const yyr3023 bool = false
			yyq3023[0] = x.PodCIDR != ""
			yyq3023[1] = x.ExternalID != ""
			yyq3023[2] = x.ProviderID != ""
			yyq3023[3] = x.Unschedulable != false
			var yynn3023 int
			if yyr3023 || yy2arr3023 {
				r.EncodeArrayStart(4)
			} else {
				yynn3023 = 0
				for _, b := range yyq3023 {
					if b {
						yynn3023++
					}
				}
				r.EncodeMapStart(yynn3023)
				yynn3023 = 0
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[0] {
					yym3025 := z.EncBinary()
					_ = yym3025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3023[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3026 := z.EncBinary()
					_ = yym3026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[1] {
					yym3028 := z.EncBinary()
					_ = yym3028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3023[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3029 := z.EncBinary()
					_ = yym3029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[2] {
					yym3031 := z.EncBinary()
					_ = yym3031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3023[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3032 := z.EncBinary()
					_ = yym3032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[3] {
					yym3034 := z.EncBinary()
					_ = yym3034
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3023[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3035 := z.EncBinary()
					_ = yym3035
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3036 := z.DecBinary()
	_ = yym3036
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3037 := r.ContainerType()
		if yyct3037 == codecSelferValueTypeMap1234 {
			yyl3037 := r.ReadMapStart()
			if yyl3037 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3037, d)
			}
		} else if yyct3037 == codecSelferValueTypeArray1234 {
			yyl3037 := r.ReadArrayStart()
			if yyl3037 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3037, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3038Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3038Slc
	var yyhl3038 bool = l >= 0
	for yyj3038 := 0; ; yyj3038++ {
		if yyhl3038 {
			if yyj3038 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3038Slc = r.DecodeBytes(yys3038Slc, true, true)
		yys3038 := string(yys3038Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3038 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3038)
		} // end switch yys3038
	} // end for yyj3038
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3043 int
	var yyb3043 bool
	var yyhl3043 bool = l >= 0
	yyj3043++
	if yyhl3043 {
		yyb3043 = yyj3043 > l
	} else {
		yyb3043 = r.CheckBreak()
	}
	if yyb3043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj3043++
	if yyhl3043 {
		yyb3043 = yyj3043 > l
	} else {
		yyb3043 = r.CheckBreak()
	}
	if yyb3043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj3043++
	if yyhl3043 {
		yyb3043 = yyj3043 > l
	} else {
		yyb3043 = r.CheckBreak()
	}
	if yyb3043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj3043++
	if yyhl3043 {
		yyb3043 = yyj3043 > l
	} else {
		yyb3043 = r.CheckBreak()
	}
	if yyb3043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj3043++
		if yyhl3043 {
			yyb3043 = yyj3043 > l
		} else {
			yyb3043 = r.CheckBreak()
		}
		if yyb3043 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3043-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3048 := z.EncBinary()
		_ = yym3048
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3049 := !z.EncBinary()
			yy2arr3049 := z.EncBasicHandle().StructToArray
			var yyq3049 [1]bool
			_, _, _ = yysep3049, yyq3049, yy2arr3049
			const yyr3049 bool = false
			var yynn3049 int
			if yyr3049 || yy2arr3049 {
				r.EncodeArrayStart(1)
			} else {
				yynn3049 = 1
				for _, b := range yyq3049 {
					if b {
						yynn3049++
					}
				}
				r.EncodeMapStart(yynn3049)
				yynn3049 = 0
			}
			if yyr3049 || yy2arr3049 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3051 := z.EncBinary()
				_ = yym3051
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3052 := z.EncBinary()
				_ = yym3052
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr3049 || yy2arr3049 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3053 := z.DecBinary()
	_ = yym3053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3054 := r.ContainerType()
		if yyct3054 == codecSelferValueTypeMap1234 {
			yyl3054 := r.ReadMapStart()
			if yyl3054 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3054, d)
			}
		} else if yyct3054 == codecSelferValueTypeArray1234 {
			yyl3054 := r.ReadArrayStart()
			if yyl3054 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3055Slc
	var yyhl3055 bool = l >= 0
	for yyj3055 := 0; ; yyj3055++ {
		if yyhl3055 {
			if yyj3055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3055Slc = r.DecodeBytes(yys3055Slc, true, true)
		yys3055 := string(yys3055Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3055 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3055)
		} // end switch yys3055
	} // end for yyj3055
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3057 int
	var yyb3057 bool
	var yyhl3057 bool = l >= 0
	yyj3057++
	if yyhl3057 {
		yyb3057 = yyj3057 > l
	} else {
		yyb3057 = r.CheckBreak()
	}
	if yyb3057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj3057++
		if yyhl3057 {
			yyb3057 = yyj3057 > l
		} else {
			yyb3057 = r.CheckBreak()
		}
		if yyb3057 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3057-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3059 := z.EncBinary()
		_ = yym3059
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3060 := !z.EncBinary()
			yy2arr3060 := z.EncBasicHandle().StructToArray
			var yyq3060 [1]bool
			_, _, _ = yysep3060, yyq3060, yy2arr3060
			const yyr3060 bool = false
			yyq3060[0] = true
			var yynn3060 int
			if yyr3060 || yy2arr3060 {
				r.EncodeArrayStart(1)
			} else {
				yynn3060 = 0
				for _, b := range yyq3060 {
					if b {
						yynn3060++
					}
				}
				r.EncodeMapStart(yynn3060)
				yynn3060 = 0
			}
			if yyr3060 || yy2arr3060 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3060[0] {
					yy3062 := &x.KubeletEndpoint
					yy3062.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3060[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3063 := &x.KubeletEndpoint
					yy3063.CodecEncodeSelf(e)
				}
			}
			if yyr3060 || yy2arr3060 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3064 := z.DecBinary()
	_ = yym3064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3065 := r.ContainerType()
		if yyct3065 == codecSelferValueTypeMap1234 {
			yyl3065 := r.ReadMapStart()
			if yyl3065 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3065, d)
			}
		} else if yyct3065 == codecSelferValueTypeArray1234 {
			yyl3065 := r.ReadArrayStart()
			if yyl3065 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3065, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3066Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3066Slc
	var yyhl3066 bool = l >= 0
	for yyj3066 := 0; ; yyj3066++ {
		if yyhl3066 {
			if yyj3066 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3066Slc = r.DecodeBytes(yys3066Slc, true, true)
		yys3066 := string(yys3066Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3066 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv3067 := &x.KubeletEndpoint
				yyv3067.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3066)
		} // end switch yys3066
	} // end for yyj3066
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3068 int
	var yyb3068 bool
	var yyhl3068 bool = l >= 0
	yyj3068++
	if yyhl3068 {
		yyb3068 = yyj3068 > l
	} else {
		yyb3068 = r.CheckBreak()
	}
	if yyb3068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv3069 := &x.KubeletEndpoint
		yyv3069.CodecDecodeSelf(d)
	}
	for {
		yyj3068++
		if yyhl3068 {
			yyb3068 = yyj3068 > l
		} else {
			yyb3068 = r.CheckBreak()
		}
		if yyb3068 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3068-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3070 := z.EncBinary()
		_ = yym3070
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3071 := !z.EncBinary()
			yy2arr3071 := z.EncBasicHandle().StructToArray
			var yyq3071 [10]bool
			_, _, _ = yysep3071, yyq3071, yy2arr3071
			const yyr3071 bool = false
			var yynn3071 int
			if yyr3071 || yy2arr3071 {
				r.EncodeArrayStart(10)
			} else {
				yynn3071 = 10
				for _, b := range yyq3071 {
					if b {
						yynn3071++
					}
				}
				r.EncodeMapStart(yynn3071)
				yynn3071 = 0
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3073 := z.EncBinary()
				_ = yym3073
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3074 := z.EncBinary()
				_ = yym3074
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3076 := z.EncBinary()
				_ = yym3076
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3077 := z.EncBinary()
				_ = yym3077
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3079 := z.EncBinary()
				_ = yym3079
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3080 := z.EncBinary()
				_ = yym3080
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3082 := z.EncBinary()
				_ = yym3082
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3083 := z.EncBinary()
				_ = yym3083
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3085 := z.EncBinary()
				_ = yym3085
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3086 := z.EncBinary()
				_ = yym3086
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3088 := z.EncBinary()
				_ = yym3088
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3089 := z.EncBinary()
				_ = yym3089
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3091 := z.EncBinary()
				_ = yym3091
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3092 := z.EncBinary()
				_ = yym3092
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3094 := z.EncBinary()
				_ = yym3094
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3095 := z.EncBinary()
				_ = yym3095
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3097 := z.EncBinary()
				_ = yym3097
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3098 := z.EncBinary()
				_ = yym3098
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3100 := z.EncBinary()
				_ = yym3100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3101 := z.EncBinary()
				_ = yym3101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3102 := z.DecBinary()
	_ = yym3102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3103 := r.ContainerType()
		if yyct3103 == codecSelferValueTypeMap1234 {
			yyl3103 := r.ReadMapStart()
			if yyl3103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3103, d)
			}
		} else if yyct3103 == codecSelferValueTypeArray1234 {
			yyl3103 := r.ReadArrayStart()
			if yyl3103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3104Slc
	var yyhl3104 bool = l >= 0
	for yyj3104 := 0; ; yyj3104++ {
		if yyhl3104 {
			if yyj3104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3104Slc = r.DecodeBytes(yys3104Slc, true, true)
		yys3104 := string(yys3104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3104 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3104)
		} // end switch yys3104
	} // end for yyj3104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3115 int
	var yyb3115 bool
	var yyhl3115 bool = l >= 0
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3115++
		if yyhl3115 {
			yyb3115 = yyj3115 > l
		} else {
			yyb3115 = r.CheckBreak()
		}
		if yyb3115 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3115-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3126 := z.EncBinary()
		_ = yym3126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3127 := !z.EncBinary()
			yy2arr3127 := z.EncBasicHandle().StructToArray
			var yyq3127 [10]bool
			_, _, _ = yysep3127, yyq3127, yy2arr3127
			const yyr3127 bool = false
			yyq3127[0] = len(x.Capacity) != 0
			yyq3127[1] = len(x.Allocatable) != 0
			yyq3127[2] = x.Phase != ""
			yyq3127[3] = len(x.Conditions) != 0
			yyq3127[4] = len(x.Addresses) != 0
			yyq3127[5] = true
			yyq3127[6] = true
			yyq3127[7] = len(x.Images) != 0
			yyq3127[8] = len(x.VolumesInUse) != 0
			yyq3127[9] = len(x.VolumesAttached) != 0
			var yynn3127 int
			if yyr3127 || yy2arr3127 {
				r.EncodeArrayStart(10)
			} else {
				yynn3127 = 0
				for _, b := range yyq3127 {
					if b {
						yynn3127++
					}
				}
				r.EncodeMapStart(yynn3127)
				yynn3127 = 0
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3127[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3127[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3127[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3127[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3127[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3127[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3127[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3132 := z.EncBinary()
						_ = yym3132
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3127[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3133 := z.EncBinary()
						_ = yym3133
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3127[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3135 := z.EncBinary()
						_ = yym3135
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3127[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3136 := z.EncBinary()
						_ = yym3136
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3127[5] {
					yy3138 := &x.DaemonEndpoints
					yy3138.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3127[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3139 := &x.DaemonEndpoints
					yy3139.CodecEncodeSelf(e)
				}
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3127[6] {
					yy3141 := &x.NodeInfo
					yy3141.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3127[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3142 := &x.NodeInfo
					yy3142.CodecEncodeSelf(e)
				}
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3127[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3144 := z.EncBinary()
						_ = yym3144
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3127[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3145 := z.EncBinary()
						_ = yym3145
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3127[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3147 := z.EncBinary()
						_ = yym3147
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3127[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3148 := z.EncBinary()
						_ = yym3148
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3127[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3150 := z.EncBinary()
						_ = yym3150
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3127[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3151 := z.EncBinary()
						_ = yym3151
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3152 := z.DecBinary()
	_ = yym3152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3153 := r.ContainerType()
		if yyct3153 == codecSelferValueTypeMap1234 {
			yyl3153 := r.ReadMapStart()
			if yyl3153 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3153, d)
			}
		} else if yyct3153 == codecSelferValueTypeArray1234 {
			yyl3153 := r.ReadArrayStart()
			if yyl3153 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3154Slc
	var yyhl3154 bool = l >= 0
	for yyj3154 := 0; ; yyj3154++ {
		if yyhl3154 {
			if yyj3154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3154Slc = r.DecodeBytes(yys3154Slc, true, true)
		yys3154 := string(yys3154Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3154 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3155 := &x.Capacity
				yyv3155.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3156 := &x.Allocatable
				yyv3156.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3158 := &x.Conditions
				yym3159 := z.DecBinary()
				_ = yym3159
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3158), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3160 := &x.Addresses
				yym3161 := z.DecBinary()
				_ = yym3161
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3160), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3162 := &x.DaemonEndpoints
				yyv3162.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3163 := &x.NodeInfo
				yyv3163.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3164 := &x.Images
				yym3165 := z.DecBinary()
				_ = yym3165
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3164), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3166 := &x.VolumesInUse
				yym3167 := z.DecBinary()
				_ = yym3167
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3166), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3168 := &x.VolumesAttached
				yym3169 := z.DecBinary()
				_ = yym3169
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3168), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3154)
		} // end switch yys3154
	} // end for yyj3154
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3170 int
	var yyb3170 bool
	var yyhl3170 bool = l >= 0
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3171 := &x.Capacity
		yyv3171.CodecDecodeSelf(d)
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3172 := &x.Allocatable
		yyv3172.CodecDecodeSelf(d)
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3174 := &x.Conditions
		yym3175 := z.DecBinary()
		_ = yym3175
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3174), d)
		}
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3176 := &x.Addresses
		yym3177 := z.DecBinary()
		_ = yym3177
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3176), d)
		}
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3178 := &x.DaemonEndpoints
		yyv3178.CodecDecodeSelf(d)
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3179 := &x.NodeInfo
		yyv3179.CodecDecodeSelf(d)
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3180 := &x.Images
		yym3181 := z.DecBinary()
		_ = yym3181
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3180), d)
		}
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3182 := &x.VolumesInUse
		yym3183 := z.DecBinary()
		_ = yym3183
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3182), d)
		}
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3184 := &x.VolumesAttached
		yym3185 := z.DecBinary()
		_ = yym3185
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3184), d)
		}
	}
	for {
		yyj3170++
		if yyhl3170 {
			yyb3170 = yyj3170 > l
		} else {
			yyb3170 = r.CheckBreak()
		}
		if yyb3170 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3170-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3186 := z.EncBinary()
	_ = yym3186
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3187 := z.DecBinary()
	_ = yym3187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3188 := z.EncBinary()
		_ = yym3188
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3189 := !z.EncBinary()
			yy2arr3189 := z.EncBasicHandle().StructToArray
			var yyq3189 [2]bool
			_, _, _ = yysep3189, yyq3189, yy2arr3189
			const yyr3189 bool = false
			var yynn3189 int
			if yyr3189 || yy2arr3189 {
				r.EncodeArrayStart(2)
			} else {
				yynn3189 = 2
				for _, b := range yyq3189 {
					if b {
						yynn3189++
					}
				}
				r.EncodeMapStart(yynn3189)
				yynn3189 = 0
			}
			if yyr3189 || yy2arr3189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3189 || yy2arr3189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3192 := z.EncBinary()
				_ = yym3192
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3193 := z.EncBinary()
				_ = yym3193
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3189 || yy2arr3189 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3194 := z.DecBinary()
	_ = yym3194
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3195 := r.ContainerType()
		if yyct3195 == codecSelferValueTypeMap1234 {
			yyl3195 := r.ReadMapStart()
			if yyl3195 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3195, d)
			}
		} else if yyct3195 == codecSelferValueTypeArray1234 {
			yyl3195 := r.ReadArrayStart()
			if yyl3195 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3195, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3196Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3196Slc
	var yyhl3196 bool = l >= 0
	for yyj3196 := 0; ; yyj3196++ {
		if yyhl3196 {
			if yyj3196 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3196Slc = r.DecodeBytes(yys3196Slc, true, true)
		yys3196 := string(yys3196Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3196 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3196)
		} // end switch yys3196
	} // end for yyj3196
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3199 int
	var yyb3199 bool
	var yyhl3199 bool = l >= 0
	yyj3199++
	if yyhl3199 {
		yyb3199 = yyj3199 > l
	} else {
		yyb3199 = r.CheckBreak()
	}
	if yyb3199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3199++
	if yyhl3199 {
		yyb3199 = yyj3199 > l
	} else {
		yyb3199 = r.CheckBreak()
	}
	if yyb3199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3199++
		if yyhl3199 {
			yyb3199 = yyj3199 > l
		} else {
			yyb3199 = r.CheckBreak()
		}
		if yyb3199 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3199-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3202 := z.EncBinary()
		_ = yym3202
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3203 := !z.EncBinary()
			yy2arr3203 := z.EncBasicHandle().StructToArray
			var yyq3203 [1]bool
			_, _, _ = yysep3203, yyq3203, yy2arr3203
			const yyr3203 bool = false
			yyq3203[0] = len(x.PreferAvoidPods) != 0
			var yynn3203 int
			if yyr3203 || yy2arr3203 {
				r.EncodeArrayStart(1)
			} else {
				yynn3203 = 0
				for _, b := range yyq3203 {
					if b {
						yynn3203++
					}
				}
				r.EncodeMapStart(yynn3203)
				yynn3203 = 0
			}
			if yyr3203 || yy2arr3203 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3203[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3205 := z.EncBinary()
						_ = yym3205
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3203[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3206 := z.EncBinary()
						_ = yym3206
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3203 || yy2arr3203 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3207 := z.DecBinary()
	_ = yym3207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3208 := r.ContainerType()
		if yyct3208 == codecSelferValueTypeMap1234 {
			yyl3208 := r.ReadMapStart()
			if yyl3208 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3208, d)
			}
		} else if yyct3208 == codecSelferValueTypeArray1234 {
			yyl3208 := r.ReadArrayStart()
			if yyl3208 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3209Slc
	var yyhl3209 bool = l >= 0
	for yyj3209 := 0; ; yyj3209++ {
		if yyhl3209 {
			if yyj3209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3209Slc = r.DecodeBytes(yys3209Slc, true, true)
		yys3209 := string(yys3209Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3209 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3210 := &x.PreferAvoidPods
				yym3211 := z.DecBinary()
				_ = yym3211
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3210), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3209)
		} // end switch yys3209
	} // end for yyj3209
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3212 int
	var yyb3212 bool
	var yyhl3212 bool = l >= 0
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3213 := &x.PreferAvoidPods
		yym3214 := z.DecBinary()
		_ = yym3214
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3213), d)
		}
	}
	for {
		yyj3212++
		if yyhl3212 {
			yyb3212 = yyj3212 > l
		} else {
			yyb3212 = r.CheckBreak()
		}
		if yyb3212 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3212-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3215 := z.EncBinary()
		_ = yym3215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3216 := !z.EncBinary()
			yy2arr3216 := z.EncBasicHandle().StructToArray
			var yyq3216 [4]bool
			_, _, _ = yysep3216, yyq3216, yy2arr3216
			const yyr3216 bool = false
			yyq3216[1] = true
			yyq3216[2] = x.Reason != ""
			yyq3216[3] = x.Message != ""
			var yynn3216 int
			if yyr3216 || yy2arr3216 {
				r.EncodeArrayStart(4)
			} else {
				yynn3216 = 1
				for _, b := range yyq3216 {
					if b {
						yynn3216++
					}
				}
				r.EncodeMapStart(yynn3216)
				yynn3216 = 0
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3218 := &x.PodSignature
				yy3218.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3219 := &x.PodSignature
				yy3219.CodecEncodeSelf(e)
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[1] {
					yy3221 := &x.EvictionTime
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3221) {
					} else if yym3222 {
						z.EncBinaryMarshal(yy3221)
					} else if !yym3222 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3221)
					} else {
						z.EncFallback(yy3221)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3216[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3223 := &x.EvictionTime
					yym3224 := z.EncBinary()
					_ = yym3224
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3223) {
					} else if yym3224 {
						z.EncBinaryMarshal(yy3223)
					} else if !yym3224 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3223)
					} else {
						z.EncFallback(yy3223)
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[2] {
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[3] {
					yym3229 := z.EncBinary()
					_ = yym3229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3230 := z.EncBinary()
					_ = yym3230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3231 := z.DecBinary()
	_ = yym3231
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3232 := r.ContainerType()
		if yyct3232 == codecSelferValueTypeMap1234 {
			yyl3232 := r.ReadMapStart()
			if yyl3232 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3232, d)
			}
		} else if yyct3232 == codecSelferValueTypeArray1234 {
			yyl3232 := r.ReadArrayStart()
			if yyl3232 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3232, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3233Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3233Slc
	var yyhl3233 bool = l >= 0
	for yyj3233 := 0; ; yyj3233++ {
		if yyhl3233 {
			if yyj3233 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3233Slc = r.DecodeBytes(yys3233Slc, true, true)
		yys3233 := string(yys3233Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3233 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3234 := &x.PodSignature
				yyv3234.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3235 := &x.EvictionTime
				yym3236 := z.DecBinary()
				_ = yym3236
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3235) {
				} else if yym3236 {
					z.DecBinaryUnmarshal(yyv3235)
				} else if !yym3236 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3235)
				} else {
					z.DecFallback(yyv3235, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3233)
		} // end switch yys3233
	} // end for yyj3233
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3239 int
	var yyb3239 bool
	var yyhl3239 bool = l >= 0
	yyj3239++
	if yyhl3239 {
		yyb3239 = yyj3239 > l
	} else {
		yyb3239 = r.CheckBreak()
	}
	if yyb3239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3240 := &x.PodSignature
		yyv3240.CodecDecodeSelf(d)
	}
	yyj3239++
	if yyhl3239 {
		yyb3239 = yyj3239 > l
	} else {
		yyb3239 = r.CheckBreak()
	}
	if yyb3239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3241 := &x.EvictionTime
		yym3242 := z.DecBinary()
		_ = yym3242
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3241) {
		} else if yym3242 {
			z.DecBinaryUnmarshal(yyv3241)
		} else if !yym3242 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3241)
		} else {
			z.DecFallback(yyv3241, false)
		}
	}
	yyj3239++
	if yyhl3239 {
		yyb3239 = yyj3239 > l
	} else {
		yyb3239 = r.CheckBreak()
	}
	if yyb3239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3239++
	if yyhl3239 {
		yyb3239 = yyj3239 > l
	} else {
		yyb3239 = r.CheckBreak()
	}
	if yyb3239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3239++
		if yyhl3239 {
			yyb3239 = yyj3239 > l
		} else {
			yyb3239 = r.CheckBreak()
		}
		if yyb3239 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3239-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3245 := z.EncBinary()
		_ = yym3245
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3246 := !z.EncBinary()
			yy2arr3246 := z.EncBasicHandle().StructToArray
			var yyq3246 [1]bool
			_, _, _ = yysep3246, yyq3246, yy2arr3246
			const yyr3246 bool = false
			yyq3246[0] = x.PodController != nil
			var yynn3246 int
			if yyr3246 || yy2arr3246 {
				r.EncodeArrayStart(1)
			} else {
				yynn3246 = 0
				for _, b := range yyq3246 {
					if b {
						yynn3246++
					}
				}
				r.EncodeMapStart(yynn3246)
				yynn3246 = 0
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3246[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3246[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3248 := z.DecBinary()
	_ = yym3248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3249 := r.ContainerType()
		if yyct3249 == codecSelferValueTypeMap1234 {
			yyl3249 := r.ReadMapStart()
			if yyl3249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3249, d)
			}
		} else if yyct3249 == codecSelferValueTypeArray1234 {
			yyl3249 := r.ReadArrayStart()
			if yyl3249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3250Slc
	var yyhl3250 bool = l >= 0
	for yyj3250 := 0; ; yyj3250++ {
		if yyhl3250 {
			if yyj3250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3250Slc = r.DecodeBytes(yys3250Slc, true, true)
		yys3250 := string(yys3250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3250 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3250)
		} // end switch yys3250
	} // end for yyj3250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3252 int
	var yyb3252 bool
	var yyhl3252 bool = l >= 0
	yyj3252++
	if yyhl3252 {
		yyb3252 = yyj3252 > l
	} else {
		yyb3252 = r.CheckBreak()
	}
	if yyb3252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3252++
		if yyhl3252 {
			yyb3252 = yyj3252 > l
		} else {
			yyb3252 = r.CheckBreak()
		}
		if yyb3252 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3252-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3254 := z.EncBinary()
		_ = yym3254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3255 := !z.EncBinary()
			yy2arr3255 := z.EncBasicHandle().StructToArray
			var yyq3255 [2]bool
			_, _, _ = yysep3255, yyq3255, yy2arr3255
			const yyr3255 bool = false
			yyq3255[1] = x.SizeBytes != 0
			var yynn3255 int
			if yyr3255 || yy2arr3255 {
				r.EncodeArrayStart(2)
			} else {
				yynn3255 = 1
				for _, b := range yyq3255 {
					if b {
						yynn3255++
					}
				}
				r.EncodeMapStart(yynn3255)
				yynn3255 = 0
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3257 := z.EncBinary()
					_ = yym3257
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3258 := z.EncBinary()
					_ = yym3258
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3255[1] {
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3255[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3261 := z.EncBinary()
					_ = yym3261
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3255 || yy2arr3255 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3262 := z.DecBinary()
	_ = yym3262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3263 := r.ContainerType()
		if yyct3263 == codecSelferValueTypeMap1234 {
			yyl3263 := r.ReadMapStart()
			if yyl3263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3263, d)
			}
		} else if yyct3263 == codecSelferValueTypeArray1234 {
			yyl3263 := r.ReadArrayStart()
			if yyl3263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3264Slc
	var yyhl3264 bool = l >= 0
	for yyj3264 := 0; ; yyj3264++ {
		if yyhl3264 {
			if yyj3264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3264Slc = r.DecodeBytes(yys3264Slc, true, true)
		yys3264 := string(yys3264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3264 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3265 := &x.Names
				yym3266 := z.DecBinary()
				_ = yym3266
				if false {
				} else {
					z.F.DecSliceStringX(yyv3265, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3264)
		} // end switch yys3264
	} // end for yyj3264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3268 int
	var yyb3268 bool
	var yyhl3268 bool = l >= 0
	yyj3268++
	if yyhl3268 {
		yyb3268 = yyj3268 > l
	} else {
		yyb3268 = r.CheckBreak()
	}
	if yyb3268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3269 := &x.Names
		yym3270 := z.DecBinary()
		_ = yym3270
		if false {
		} else {
			z.F.DecSliceStringX(yyv3269, false, d)
		}
	}
	yyj3268++
	if yyhl3268 {
		yyb3268 = yyj3268 > l
	} else {
		yyb3268 = r.CheckBreak()
	}
	if yyb3268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3268++
		if yyhl3268 {
			yyb3268 = yyj3268 > l
		} else {
			yyb3268 = r.CheckBreak()
		}
		if yyb3268 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3268-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3272 := z.EncBinary()
	_ = yym3272
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3273 := z.DecBinary()
	_ = yym3273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3274 := z.EncBinary()
	_ = yym3274
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3275 := z.DecBinary()
	_ = yym3275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3276 := z.EncBinary()
		_ = yym3276
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3277 := !z.EncBinary()
			yy2arr3277 := z.EncBasicHandle().StructToArray
			var yyq3277 [6]bool
			_, _, _ = yysep3277, yyq3277, yy2arr3277
			const yyr3277 bool = false
			yyq3277[2] = true
			yyq3277[3] = true
			yyq3277[4] = x.Reason != ""
			yyq3277[5] = x.Message != ""
			var yynn3277 int
			if yyr3277 || yy2arr3277 {
				r.EncodeArrayStart(6)
			} else {
				yynn3277 = 2
				for _, b := range yyq3277 {
					if b {
						yynn3277++
					}
				}
				r.EncodeMapStart(yynn3277)
				yynn3277 = 0
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[2] {
					yy3281 := &x.LastHeartbeatTime
					yym3282 := z.EncBinary()
					_ = yym3282
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3281) {
					} else if yym3282 {
						z.EncBinaryMarshal(yy3281)
					} else if !yym3282 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3281)
					} else {
						z.EncFallback(yy3281)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3277[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3283 := &x.LastHeartbeatTime
					yym3284 := z.EncBinary()
					_ = yym3284
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3283) {
					} else if yym3284 {
						z.EncBinaryMarshal(yy3283)
					} else if !yym3284 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3283)
					} else {
						z.EncFallback(yy3283)
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[3] {
					yy3286 := &x.LastTransitionTime
					yym3287 := z.EncBinary()
					_ = yym3287
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3286) {
					} else if yym3287 {
						z.EncBinaryMarshal(yy3286)
					} else if !yym3287 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3286)
					} else {
						z.EncFallback(yy3286)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3277[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3288 := &x.LastTransitionTime
					yym3289 := z.EncBinary()
					_ = yym3289
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3288) {
					} else if yym3289 {
						z.EncBinaryMarshal(yy3288)
					} else if !yym3289 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3288)
					} else {
						z.EncFallback(yy3288)
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[4] {
					yym3291 := z.EncBinary()
					_ = yym3291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3292 := z.EncBinary()
					_ = yym3292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[5] {
					yym3294 := z.EncBinary()
					_ = yym3294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3296 := z.DecBinary()
	_ = yym3296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3297 := r.ContainerType()
		if yyct3297 == codecSelferValueTypeMap1234 {
			yyl3297 := r.ReadMapStart()
			if yyl3297 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3297, d)
			}
		} else if yyct3297 == codecSelferValueTypeArray1234 {
			yyl3297 := r.ReadArrayStart()
			if yyl3297 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3298Slc
	var yyhl3298 bool = l >= 0
	for yyj3298 := 0; ; yyj3298++ {
		if yyhl3298 {
			if yyj3298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3298Slc = r.DecodeBytes(yys3298Slc, true, true)
		yys3298 := string(yys3298Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3298 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3301 := &x.LastHeartbeatTime
				yym3302 := z.DecBinary()
				_ = yym3302
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3301) {
				} else if yym3302 {
					z.DecBinaryUnmarshal(yyv3301)
				} else if !yym3302 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3301)
				} else {
					z.DecFallback(yyv3301, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3303 := &x.LastTransitionTime
				yym3304 := z.DecBinary()
				_ = yym3304
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3303) {
				} else if yym3304 {
					z.DecBinaryUnmarshal(yyv3303)
				} else if !yym3304 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3303)
				} else {
					z.DecFallback(yyv3303, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3298)
		} // end switch yys3298
	} // end for yyj3298
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3307 int
	var yyb3307 bool
	var yyhl3307 bool = l >= 0
	yyj3307++
	if yyhl3307 {
		yyb3307 = yyj3307 > l
	} else {
		yyb3307 = r.CheckBreak()
	}
	if yyb3307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3307++
	if yyhl3307 {
		yyb3307 = yyj3307 > l
	} else {
		yyb3307 = r.CheckBreak()
	}
	if yyb3307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3307++
	if yyhl3307 {
		yyb3307 = yyj3307 > l
	} else {
		yyb3307 = r.CheckBreak()
	}
	if yyb3307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3310 := &x.LastHeartbeatTime
		yym3311 := z.DecBinary()
		_ = yym3311
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3310) {
		} else if yym3311 {
			z.DecBinaryUnmarshal(yyv3310)
		} else if !yym3311 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3310)
		} else {
			z.DecFallback(yyv3310, false)
		}
	}
	yyj3307++
	if yyhl3307 {
		yyb3307 = yyj3307 > l
	} else {
		yyb3307 = r.CheckBreak()
	}
	if yyb3307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3312 := &x.LastTransitionTime
		yym3313 := z.DecBinary()
		_ = yym3313
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3312) {
		} else if yym3313 {
			z.DecBinaryUnmarshal(yyv3312)
		} else if !yym3313 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3312)
		} else {
			z.DecFallback(yyv3312, false)
		}
	}
	yyj3307++
	if yyhl3307 {
		yyb3307 = yyj3307 > l
	} else {
		yyb3307 = r.CheckBreak()
	}
	if yyb3307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3307++
	if yyhl3307 {
		yyb3307 = yyj3307 > l
	} else {
		yyb3307 = r.CheckBreak()
	}
	if yyb3307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3307++
		if yyhl3307 {
			yyb3307 = yyj3307 > l
		} else {
			yyb3307 = r.CheckBreak()
		}
		if yyb3307 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3307-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3316 := z.EncBinary()
	_ = yym3316
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3317 := z.DecBinary()
	_ = yym3317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3318 := z.EncBinary()
		_ = yym3318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3319 := !z.EncBinary()
			yy2arr3319 := z.EncBasicHandle().StructToArray
			var yyq3319 [2]bool
			_, _, _ = yysep3319, yyq3319, yy2arr3319
			const yyr3319 bool = false
			var yynn3319 int
			if yyr3319 || yy2arr3319 {
				r.EncodeArrayStart(2)
			} else {
				yynn3319 = 2
				for _, b := range yyq3319 {
					if b {
						yynn3319++
					}
				}
				r.EncodeMapStart(yynn3319)
				yynn3319 = 0
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3322 := z.EncBinary()
				_ = yym3322
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3323 := z.EncBinary()
				_ = yym3323
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3324 := z.DecBinary()
	_ = yym3324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3325 := r.ContainerType()
		if yyct3325 == codecSelferValueTypeMap1234 {
			yyl3325 := r.ReadMapStart()
			if yyl3325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3325, d)
			}
		} else if yyct3325 == codecSelferValueTypeArray1234 {
			yyl3325 := r.ReadArrayStart()
			if yyl3325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3326Slc
	var yyhl3326 bool = l >= 0
	for yyj3326 := 0; ; yyj3326++ {
		if yyhl3326 {
			if yyj3326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3326Slc = r.DecodeBytes(yys3326Slc, true, true)
		yys3326 := string(yys3326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3326 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3326)
		} // end switch yys3326
	} // end for yyj3326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3329 int
	var yyb3329 bool
	var yyhl3329 bool = l >= 0
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3329++
		if yyhl3329 {
			yyb3329 = yyj3329 > l
		} else {
			yyb3329 = r.CheckBreak()
		}
		if yyb3329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3332 := z.EncBinary()
	_ = yym3332
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3333 := z.DecBinary()
	_ = yym3333
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3334 := z.EncBinary()
		_ = yym3334
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3335 := z.DecBinary()
	_ = yym3335
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3336 := z.EncBinary()
		_ = yym3336
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3337 := !z.EncBinary()
			yy2arr3337 := z.EncBasicHandle().StructToArray
			var yyq3337 [5]bool
			_, _, _ = yysep3337, yyq3337, yy2arr3337
			const yyr3337 bool = false
			yyq3337[0] = x.Kind != ""
			yyq3337[1] = x.APIVersion != ""
			yyq3337[2] = true
			yyq3337[3] = true
			yyq3337[4] = true
			var yynn3337 int
			if yyr3337 || yy2arr3337 {
				r.EncodeArrayStart(5)
			} else {
				yynn3337 = 0
				for _, b := range yyq3337 {
					if b {
						yynn3337++
					}
				}
				r.EncodeMapStart(yynn3337)
				yynn3337 = 0
			}
			if yyr3337 || yy2arr3337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3337[0] {
					yym3339 := z.EncBinary()
					_ = yym3339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3337[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3340 := z.EncBinary()
					_ = yym3340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3337 || yy2arr3337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3337[1] {
					yym3342 := z.EncBinary()
					_ = yym3342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3337[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3343 := z.EncBinary()
					_ = yym3343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3337 || yy2arr3337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3337[2] {
					yy3345 := &x.ObjectMeta
					yy3345.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3337[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3346 := &x.ObjectMeta
					yy3346.CodecEncodeSelf(e)
				}
			}
			if yyr3337 || yy2arr3337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3337[3] {
					yy3348 := &x.Spec
					yy3348.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3337[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3349 := &x.Spec
					yy3349.CodecEncodeSelf(e)
				}
			}
			if yyr3337 || yy2arr3337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3337[4] {
					yy3351 := &x.Status
					yy3351.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3337[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3352 := &x.Status
					yy3352.CodecEncodeSelf(e)
				}
			}
			if yyr3337 || yy2arr3337 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3353 := z.DecBinary()
	_ = yym3353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3354 := r.ContainerType()
		if yyct3354 == codecSelferValueTypeMap1234 {
			yyl3354 := r.ReadMapStart()
			if yyl3354 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3354, d)
			}
		} else if yyct3354 == codecSelferValueTypeArray1234 {
			yyl3354 := r.ReadArrayStart()
			if yyl3354 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3354, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3355Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3355Slc
	var yyhl3355 bool = l >= 0
	for yyj3355 := 0; ; yyj3355++ {
		if yyhl3355 {
			if yyj3355 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3355Slc = r.DecodeBytes(yys3355Slc, true, true)
		yys3355 := string(yys3355Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3355 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3358 := &x.ObjectMeta
				yyv3358.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3359 := &x.Spec
				yyv3359.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3360 := &x.Status
				yyv3360.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3355)
		} // end switch yys3355
	} // end for yyj3355
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3361 int
	var yyb3361 bool
	var yyhl3361 bool = l >= 0
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3364 := &x.ObjectMeta
		yyv3364.CodecDecodeSelf(d)
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3365 := &x.Spec
		yyv3365.CodecDecodeSelf(d)
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3366 := &x.Status
		yyv3366.CodecDecodeSelf(d)
	}
	for {
		yyj3361++
		if yyhl3361 {
			yyb3361 = yyj3361 > l
		} else {
			yyb3361 = r.CheckBreak()
		}
		if yyb3361 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3361-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3367 := z.EncBinary()
		_ = yym3367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3368 := !z.EncBinary()
			yy2arr3368 := z.EncBasicHandle().StructToArray
			var yyq3368 [4]bool
			_, _, _ = yysep3368, yyq3368, yy2arr3368
			const yyr3368 bool = false
			yyq3368[0] = x.Kind != ""
			yyq3368[1] = x.APIVersion != ""
			yyq3368[2] = true
			var yynn3368 int
			if yyr3368 || yy2arr3368 {
				r.EncodeArrayStart(4)
			} else {
				yynn3368 = 1
				for _, b := range yyq3368 {
					if b {
						yynn3368++
					}
				}
				r.EncodeMapStart(yynn3368)
				yynn3368 = 0
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[0] {
					yym3370 := z.EncBinary()
					_ = yym3370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3368[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[1] {
					yym3373 := z.EncBinary()
					_ = yym3373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3368[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[2] {
					yy3376 := &x.ListMeta
					yym3377 := z.EncBinary()
					_ = yym3377
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3376) {
					} else {
						z.EncFallback(yy3376)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3368[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3378 := &x.ListMeta
					yym3379 := z.EncBinary()
					_ = yym3379
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3378) {
					} else {
						z.EncFallback(yy3378)
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3381 := z.EncBinary()
					_ = yym3381
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3382 := z.EncBinary()
					_ = yym3382
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3383 := z.DecBinary()
	_ = yym3383
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3384 := r.ContainerType()
		if yyct3384 == codecSelferValueTypeMap1234 {
			yyl3384 := r.ReadMapStart()
			if yyl3384 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3384, d)
			}
		} else if yyct3384 == codecSelferValueTypeArray1234 {
			yyl3384 := r.ReadArrayStart()
			if yyl3384 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3384, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3385Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3385Slc
	var yyhl3385 bool = l >= 0
	for yyj3385 := 0; ; yyj3385++ {
		if yyhl3385 {
			if yyj3385 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3385Slc = r.DecodeBytes(yys3385Slc, true, true)
		yys3385 := string(yys3385Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3385 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3388 := &x.ListMeta
				yym3389 := z.DecBinary()
				_ = yym3389
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3388) {
				} else {
					z.DecFallback(yyv3388, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3390 := &x.Items
				yym3391 := z.DecBinary()
				_ = yym3391
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3390), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3385)
		} // end switch yys3385
	} // end for yyj3385
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3392 int
	var yyb3392 bool
	var yyhl3392 bool = l >= 0
	yyj3392++
	if yyhl3392 {
		yyb3392 = yyj3392 > l
	} else {
		yyb3392 = r.CheckBreak()
	}
	if yyb3392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3392++
	if yyhl3392 {
		yyb3392 = yyj3392 > l
	} else {
		yyb3392 = r.CheckBreak()
	}
	if yyb3392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3392++
	if yyhl3392 {
		yyb3392 = yyj3392 > l
	} else {
		yyb3392 = r.CheckBreak()
	}
	if yyb3392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3395 := &x.ListMeta
		yym3396 := z.DecBinary()
		_ = yym3396
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3395) {
		} else {
			z.DecFallback(yyv3395, false)
		}
	}
	yyj3392++
	if yyhl3392 {
		yyb3392 = yyj3392 > l
	} else {
		yyb3392 = r.CheckBreak()
	}
	if yyb3392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3397 := &x.Items
		yym3398 := z.DecBinary()
		_ = yym3398
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3397), d)
		}
	}
	for {
		yyj3392++
		if yyhl3392 {
			yyb3392 = yyj3392 > l
		} else {
			yyb3392 = r.CheckBreak()
		}
		if yyb3392 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3392-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3399 := z.EncBinary()
	_ = yym3399
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3400 := z.DecBinary()
	_ = yym3400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3401 := z.EncBinary()
		_ = yym3401
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3402 := !z.EncBinary()
			yy2arr3402 := z.EncBasicHandle().StructToArray
			var yyq3402 [1]bool
			_, _, _ = yysep3402, yyq3402, yy2arr3402
			const yyr3402 bool = false
			yyq3402[0] = len(x.Finalizers) != 0
			var yynn3402 int
			if yyr3402 || yy2arr3402 {
				r.EncodeArrayStart(1)
			} else {
				yynn3402 = 0
				for _, b := range yyq3402 {
					if b {
						yynn3402++
					}
				}
				r.EncodeMapStart(yynn3402)
				yynn3402 = 0
			}
			if yyr3402 || yy2arr3402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3402[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3404 := z.EncBinary()
						_ = yym3404
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3402[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3405 := z.EncBinary()
						_ = yym3405
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3402 || yy2arr3402 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3406 := z.DecBinary()
	_ = yym3406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3407 := r.ContainerType()
		if yyct3407 == codecSelferValueTypeMap1234 {
			yyl3407 := r.ReadMapStart()
			if yyl3407 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3407, d)
			}
		} else if yyct3407 == codecSelferValueTypeArray1234 {
			yyl3407 := r.ReadArrayStart()
			if yyl3407 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3407, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3408Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3408Slc
	var yyhl3408 bool = l >= 0
	for yyj3408 := 0; ; yyj3408++ {
		if yyhl3408 {
			if yyj3408 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3408Slc = r.DecodeBytes(yys3408Slc, true, true)
		yys3408 := string(yys3408Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3408 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3409 := &x.Finalizers
				yym3410 := z.DecBinary()
				_ = yym3410
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3409), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3408)
		} // end switch yys3408
	} // end for yyj3408
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3411 int
	var yyb3411 bool
	var yyhl3411 bool = l >= 0
	yyj3411++
	if yyhl3411 {
		yyb3411 = yyj3411 > l
	} else {
		yyb3411 = r.CheckBreak()
	}
	if yyb3411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3412 := &x.Finalizers
		yym3413 := z.DecBinary()
		_ = yym3413
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3412), d)
		}
	}
	for {
		yyj3411++
		if yyhl3411 {
			yyb3411 = yyj3411 > l
		} else {
			yyb3411 = r.CheckBreak()
		}
		if yyb3411 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3411-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3414 := z.EncBinary()
		_ = yym3414
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3415 := !z.EncBinary()
			yy2arr3415 := z.EncBasicHandle().StructToArray
			var yyq3415 [1]bool
			_, _, _ = yysep3415, yyq3415, yy2arr3415
			const yyr3415 bool = false
			yyq3415[0] = x.Phase != ""
			var yynn3415 int
			if yyr3415 || yy2arr3415 {
				r.EncodeArrayStart(1)
			} else {
				yynn3415 = 0
				for _, b := range yyq3415 {
					if b {
						yynn3415++
					}
				}
				r.EncodeMapStart(yynn3415)
				yynn3415 = 0
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3415[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3415[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3417 := z.DecBinary()
	_ = yym3417
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3418 := r.ContainerType()
		if yyct3418 == codecSelferValueTypeMap1234 {
			yyl3418 := r.ReadMapStart()
			if yyl3418 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3418, d)
			}
		} else if yyct3418 == codecSelferValueTypeArray1234 {
			yyl3418 := r.ReadArrayStart()
			if yyl3418 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3418, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3419Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3419Slc
	var yyhl3419 bool = l >= 0
	for yyj3419 := 0; ; yyj3419++ {
		if yyhl3419 {
			if yyj3419 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3419Slc = r.DecodeBytes(yys3419Slc, true, true)
		yys3419 := string(yys3419Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3419 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3419)
		} // end switch yys3419
	} // end for yyj3419
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3421 int
	var yyb3421 bool
	var yyhl3421 bool = l >= 0
	yyj3421++
	if yyhl3421 {
		yyb3421 = yyj3421 > l
	} else {
		yyb3421 = r.CheckBreak()
	}
	if yyb3421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3421++
		if yyhl3421 {
			yyb3421 = yyj3421 > l
		} else {
			yyb3421 = r.CheckBreak()
		}
		if yyb3421 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3421-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3423 := z.EncBinary()
	_ = yym3423
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3424 := z.DecBinary()
	_ = yym3424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3425 := z.EncBinary()
		_ = yym3425
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3426 := !z.EncBinary()
			yy2arr3426 := z.EncBasicHandle().StructToArray
			var yyq3426 [5]bool
			_, _, _ = yysep3426, yyq3426, yy2arr3426
			const yyr3426 bool = false
			yyq3426[0] = x.Kind != ""
			yyq3426[1] = x.APIVersion != ""
			yyq3426[2] = true
			yyq3426[3] = true
			yyq3426[4] = true
			var yynn3426 int
			if yyr3426 || yy2arr3426 {
				r.EncodeArrayStart(5)
			} else {
				yynn3426 = 0
				for _, b := range yyq3426 {
					if b {
						yynn3426++
					}
				}
				r.EncodeMapStart(yynn3426)
				yynn3426 = 0
			}
			if yyr3426 || yy2arr3426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3426[0] {
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3426[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3429 := z.EncBinary()
					_ = yym3429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3426 || yy2arr3426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3426[1] {
					yym3431 := z.EncBinary()
					_ = yym3431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3426[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3432 := z.EncBinary()
					_ = yym3432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3426 || yy2arr3426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3426[2] {
					yy3434 := &x.ObjectMeta
					yy3434.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3426[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3435 := &x.ObjectMeta
					yy3435.CodecEncodeSelf(e)
				}
			}
			if yyr3426 || yy2arr3426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3426[3] {
					yy3437 := &x.Spec
					yy3437.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3426[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3438 := &x.Spec
					yy3438.CodecEncodeSelf(e)
				}
			}
			if yyr3426 || yy2arr3426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3426[4] {
					yy3440 := &x.Status
					yy3440.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3426[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3441 := &x.Status
					yy3441.CodecEncodeSelf(e)
				}
			}
			if yyr3426 || yy2arr3426 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3442 := z.DecBinary()
	_ = yym3442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3443 := r.ContainerType()
		if yyct3443 == codecSelferValueTypeMap1234 {
			yyl3443 := r.ReadMapStart()
			if yyl3443 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3443, d)
			}
		} else if yyct3443 == codecSelferValueTypeArray1234 {
			yyl3443 := r.ReadArrayStart()
			if yyl3443 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3444Slc
	var yyhl3444 bool = l >= 0
	for yyj3444 := 0; ; yyj3444++ {
		if yyhl3444 {
			if yyj3444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3444Slc = r.DecodeBytes(yys3444Slc, true, true)
		yys3444 := string(yys3444Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3444 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3447 := &x.ObjectMeta
				yyv3447.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3448 := &x.Spec
				yyv3448.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3449 := &x.Status
				yyv3449.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3444)
		} // end switch yys3444
	} // end for yyj3444
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3450 int
	var yyb3450 bool
	var yyhl3450 bool = l >= 0
	yyj3450++
	if yyhl3450 {
		yyb3450 = yyj3450 > l
	} else {
		yyb3450 = r.CheckBreak()
	}
	if yyb3450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3450++
	if yyhl3450 {
		yyb3450 = yyj3450 > l
	} else {
		yyb3450 = r.CheckBreak()
	}
	if yyb3450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3450++
	if yyhl3450 {
		yyb3450 = yyj3450 > l
	} else {
		yyb3450 = r.CheckBreak()
	}
	if yyb3450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3453 := &x.ObjectMeta
		yyv3453.CodecDecodeSelf(d)
	}
	yyj3450++
	if yyhl3450 {
		yyb3450 = yyj3450 > l
	} else {
		yyb3450 = r.CheckBreak()
	}
	if yyb3450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3454 := &x.Spec
		yyv3454.CodecDecodeSelf(d)
	}
	yyj3450++
	if yyhl3450 {
		yyb3450 = yyj3450 > l
	} else {
		yyb3450 = r.CheckBreak()
	}
	if yyb3450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3455 := &x.Status
		yyv3455.CodecDecodeSelf(d)
	}
	for {
		yyj3450++
		if yyhl3450 {
			yyb3450 = yyj3450 > l
		} else {
			yyb3450 = r.CheckBreak()
		}
		if yyb3450 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3450-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3456 := z.EncBinary()
		_ = yym3456
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3457 := !z.EncBinary()
			yy2arr3457 := z.EncBasicHandle().StructToArray
			var yyq3457 [4]bool
			_, _, _ = yysep3457, yyq3457, yy2arr3457
			const yyr3457 bool = false
			yyq3457[0] = x.Kind != ""
			yyq3457[1] = x.APIVersion != ""
			yyq3457[2] = true
			var yynn3457 int
			if yyr3457 || yy2arr3457 {
				r.EncodeArrayStart(4)
			} else {
				yynn3457 = 1
				for _, b := range yyq3457 {
					if b {
						yynn3457++
					}
				}
				r.EncodeMapStart(yynn3457)
				yynn3457 = 0
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[0] {
					yym3459 := z.EncBinary()
					_ = yym3459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3457[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3460 := z.EncBinary()
					_ = yym3460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[1] {
					yym3462 := z.EncBinary()
					_ = yym3462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3457[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3463 := z.EncBinary()
					_ = yym3463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[2] {
					yy3465 := &x.ListMeta
					yym3466 := z.EncBinary()
					_ = yym3466
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3465) {
					} else {
						z.EncFallback(yy3465)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3457[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3467 := &x.ListMeta
					yym3468 := z.EncBinary()
					_ = yym3468
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3467) {
					} else {
						z.EncFallback(yy3467)
					}
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3470 := z.EncBinary()
					_ = yym3470
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3471 := z.EncBinary()
					_ = yym3471
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3472 := z.DecBinary()
	_ = yym3472
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3473 := r.ContainerType()
		if yyct3473 == codecSelferValueTypeMap1234 {
			yyl3473 := r.ReadMapStart()
			if yyl3473 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3473, d)
			}
		} else if yyct3473 == codecSelferValueTypeArray1234 {
			yyl3473 := r.ReadArrayStart()
			if yyl3473 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3473, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3474Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3474Slc
	var yyhl3474 bool = l >= 0
	for yyj3474 := 0; ; yyj3474++ {
		if yyhl3474 {
			if yyj3474 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3474Slc = r.DecodeBytes(yys3474Slc, true, true)
		yys3474 := string(yys3474Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3474 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3477 := &x.ListMeta
				yym3478 := z.DecBinary()
				_ = yym3478
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3477) {
				} else {
					z.DecFallback(yyv3477, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3479 := &x.Items
				yym3480 := z.DecBinary()
				_ = yym3480
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3479), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3474)
		} // end switch yys3474
	} // end for yyj3474
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3481 int
	var yyb3481 bool
	var yyhl3481 bool = l >= 0
	yyj3481++
	if yyhl3481 {
		yyb3481 = yyj3481 > l
	} else {
		yyb3481 = r.CheckBreak()
	}
	if yyb3481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3481++
	if yyhl3481 {
		yyb3481 = yyj3481 > l
	} else {
		yyb3481 = r.CheckBreak()
	}
	if yyb3481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3481++
	if yyhl3481 {
		yyb3481 = yyj3481 > l
	} else {
		yyb3481 = r.CheckBreak()
	}
	if yyb3481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3484 := &x.ListMeta
		yym3485 := z.DecBinary()
		_ = yym3485
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3484) {
		} else {
			z.DecFallback(yyv3484, false)
		}
	}
	yyj3481++
	if yyhl3481 {
		yyb3481 = yyj3481 > l
	} else {
		yyb3481 = r.CheckBreak()
	}
	if yyb3481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3486 := &x.Items
		yym3487 := z.DecBinary()
		_ = yym3487
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3486), d)
		}
	}
	for {
		yyj3481++
		if yyhl3481 {
			yyb3481 = yyj3481 > l
		} else {
			yyb3481 = r.CheckBreak()
		}
		if yyb3481 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3481-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3488 := z.EncBinary()
		_ = yym3488
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3489 := !z.EncBinary()
			yy2arr3489 := z.EncBasicHandle().StructToArray
			var yyq3489 [4]bool
			_, _, _ = yysep3489, yyq3489, yy2arr3489
			const yyr3489 bool = false
			yyq3489[0] = x.Kind != ""
			yyq3489[1] = x.APIVersion != ""
			yyq3489[2] = true
			var yynn3489 int
			if yyr3489 || yy2arr3489 {
				r.EncodeArrayStart(4)
			} else {
				yynn3489 = 1
				for _, b := range yyq3489 {
					if b {
						yynn3489++
					}
				}
				r.EncodeMapStart(yynn3489)
				yynn3489 = 0
			}
			if yyr3489 || yy2arr3489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3489[0] {
					yym3491 := z.EncBinary()
					_ = yym3491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3489[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3492 := z.EncBinary()
					_ = yym3492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3489 || yy2arr3489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3489[1] {
					yym3494 := z.EncBinary()
					_ = yym3494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3489[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3495 := z.EncBinary()
					_ = yym3495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3489 || yy2arr3489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3489[2] {
					yy3497 := &x.ObjectMeta
					yy3497.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3489[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3498 := &x.ObjectMeta
					yy3498.CodecEncodeSelf(e)
				}
			}
			if yyr3489 || yy2arr3489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3500 := &x.Target
				yy3500.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3501 := &x.Target
				yy3501.CodecEncodeSelf(e)
			}
			if yyr3489 || yy2arr3489 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3502 := z.DecBinary()
	_ = yym3502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3503 := r.ContainerType()
		if yyct3503 == codecSelferValueTypeMap1234 {
			yyl3503 := r.ReadMapStart()
			if yyl3503 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3503, d)
			}
		} else if yyct3503 == codecSelferValueTypeArray1234 {
			yyl3503 := r.ReadArrayStart()
			if yyl3503 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3504Slc
	var yyhl3504 bool = l >= 0
	for yyj3504 := 0; ; yyj3504++ {
		if yyhl3504 {
			if yyj3504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3504Slc = r.DecodeBytes(yys3504Slc, true, true)
		yys3504 := string(yys3504Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3504 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3507 := &x.ObjectMeta
				yyv3507.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3508 := &x.Target
				yyv3508.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3504)
		} // end switch yys3504
	} // end for yyj3504
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3509 int
	var yyb3509 bool
	var yyhl3509 bool = l >= 0
	yyj3509++
	if yyhl3509 {
		yyb3509 = yyj3509 > l
	} else {
		yyb3509 = r.CheckBreak()
	}
	if yyb3509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3509++
	if yyhl3509 {
		yyb3509 = yyj3509 > l
	} else {
		yyb3509 = r.CheckBreak()
	}
	if yyb3509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3509++
	if yyhl3509 {
		yyb3509 = yyj3509 > l
	} else {
		yyb3509 = r.CheckBreak()
	}
	if yyb3509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3512 := &x.ObjectMeta
		yyv3512.CodecDecodeSelf(d)
	}
	yyj3509++
	if yyhl3509 {
		yyb3509 = yyj3509 > l
	} else {
		yyb3509 = r.CheckBreak()
	}
	if yyb3509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3513 := &x.Target
		yyv3513.CodecDecodeSelf(d)
	}
	for {
		yyj3509++
		if yyhl3509 {
			yyb3509 = yyj3509 > l
		} else {
			yyb3509 = r.CheckBreak()
		}
		if yyb3509 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3509-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3514 := z.EncBinary()
		_ = yym3514
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3515 := !z.EncBinary()
			yy2arr3515 := z.EncBasicHandle().StructToArray
			var yyq3515 [1]bool
			_, _, _ = yysep3515, yyq3515, yy2arr3515
			const yyr3515 bool = false
			yyq3515[0] = x.UID != nil
			var yynn3515 int
			if yyr3515 || yy2arr3515 {
				r.EncodeArrayStart(1)
			} else {
				yynn3515 = 0
				for _, b := range yyq3515 {
					if b {
						yynn3515++
					}
				}
				r.EncodeMapStart(yynn3515)
				yynn3515 = 0
			}
			if yyr3515 || yy2arr3515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3515[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3517 := *x.UID
						yym3518 := z.EncBinary()
						_ = yym3518
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3517) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3517))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3515[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3519 := *x.UID
						yym3520 := z.EncBinary()
						_ = yym3520
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3519) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3519))
						}
					}
				}
			}
			if yyr3515 || yy2arr3515 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3521 := z.DecBinary()
	_ = yym3521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3522 := r.ContainerType()
		if yyct3522 == codecSelferValueTypeMap1234 {
			yyl3522 := r.ReadMapStart()
			if yyl3522 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3522, d)
			}
		} else if yyct3522 == codecSelferValueTypeArray1234 {
			yyl3522 := r.ReadArrayStart()
			if yyl3522 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3523Slc
	var yyhl3523 bool = l >= 0
	for yyj3523 := 0; ; yyj3523++ {
		if yyhl3523 {
			if yyj3523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3523Slc = r.DecodeBytes(yys3523Slc, true, true)
		yys3523 := string(yys3523Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3523 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3525 := z.DecBinary()
				_ = yym3525
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3523)
		} // end switch yys3523
	} // end for yyj3523
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3526 int
	var yyb3526 bool
	var yyhl3526 bool = l >= 0
	yyj3526++
	if yyhl3526 {
		yyb3526 = yyj3526 > l
	} else {
		yyb3526 = r.CheckBreak()
	}
	if yyb3526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3528 := z.DecBinary()
		_ = yym3528
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3526++
		if yyhl3526 {
			yyb3526 = yyj3526 > l
		} else {
			yyb3526 = r.CheckBreak()
		}
		if yyb3526 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3526-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3529 := z.EncBinary()
		_ = yym3529
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3530 := !z.EncBinary()
			yy2arr3530 := z.EncBasicHandle().StructToArray
			var yyq3530 [5]bool
			_, _, _ = yysep3530, yyq3530, yy2arr3530
			const yyr3530 bool = false
			yyq3530[0] = x.Kind != ""
			yyq3530[1] = x.APIVersion != ""
			yyq3530[2] = x.GracePeriodSeconds != nil
			yyq3530[3] = x.Preconditions != nil
			yyq3530[4] = x.OrphanDependents != nil
			var yynn3530 int
			if yyr3530 || yy2arr3530 {
				r.EncodeArrayStart(5)
			} else {
				yynn3530 = 0
				for _, b := range yyq3530 {
					if b {
						yynn3530++
					}
				}
				r.EncodeMapStart(yynn3530)
				yynn3530 = 0
			}
			if yyr3530 || yy2arr3530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3530[0] {
					yym3532 := z.EncBinary()
					_ = yym3532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3530[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3533 := z.EncBinary()
					_ = yym3533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3530 || yy2arr3530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3530[1] {
					yym3535 := z.EncBinary()
					_ = yym3535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3530[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3536 := z.EncBinary()
					_ = yym3536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3530 || yy2arr3530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3530[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3538 := *x.GracePeriodSeconds
						yym3539 := z.EncBinary()
						_ = yym3539
						if false {
						} else {
							r.EncodeInt(int64(yy3538))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3530[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3540 := *x.GracePeriodSeconds
						yym3541 := z.EncBinary()
						_ = yym3541
						if false {
						} else {
							r.EncodeInt(int64(yy3540))
						}
					}
				}
			}
			if yyr3530 || yy2arr3530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3530[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3530[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3530 || yy2arr3530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3530[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3544 := *x.OrphanDependents
						yym3545 := z.EncBinary()
						_ = yym3545
						if false {
						} else {
							r.EncodeBool(bool(yy3544))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3530[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3546 := *x.OrphanDependents
						yym3547 := z.EncBinary()
						_ = yym3547
						if false {
						} else {
							r.EncodeBool(bool(yy3546))
						}
					}
				}
			}
			if yyr3530 || yy2arr3530 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3548 := z.DecBinary()
	_ = yym3548
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3549 := r.ContainerType()
		if yyct3549 == codecSelferValueTypeMap1234 {
			yyl3549 := r.ReadMapStart()
			if yyl3549 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3549, d)
			}
		} else if yyct3549 == codecSelferValueTypeArray1234 {
			yyl3549 := r.ReadArrayStart()
			if yyl3549 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3549, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3550Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3550Slc
	var yyhl3550 bool = l >= 0
	for yyj3550 := 0; ; yyj3550++ {
		if yyhl3550 {
			if yyj3550 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3550Slc = r.DecodeBytes(yys3550Slc, true, true)
		yys3550 := string(yys3550Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3550 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3554 := z.DecBinary()
				_ = yym3554
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3557 := z.DecBinary()
				_ = yym3557
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3550)
		} // end switch yys3550
	} // end for yyj3550
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3558 int
	var yyb3558 bool
	var yyhl3558 bool = l >= 0
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3562 := z.DecBinary()
		_ = yym3562
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3565 := z.DecBinary()
		_ = yym3565
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3558++
		if yyhl3558 {
			yyb3558 = yyj3558 > l
		} else {
			yyb3558 = r.CheckBreak()
		}
		if yyb3558 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3558-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3566 := z.EncBinary()
		_ = yym3566
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3567 := !z.EncBinary()
			yy2arr3567 := z.EncBasicHandle().StructToArray
			var yyq3567 [4]bool
			_, _, _ = yysep3567, yyq3567, yy2arr3567
			const yyr3567 bool = false
			yyq3567[0] = x.Kind != ""
			yyq3567[1] = x.APIVersion != ""
			var yynn3567 int
			if yyr3567 || yy2arr3567 {
				r.EncodeArrayStart(4)
			} else {
				yynn3567 = 2
				for _, b := range yyq3567 {
					if b {
						yynn3567++
					}
				}
				r.EncodeMapStart(yynn3567)
				yynn3567 = 0
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3567[0] {
					yym3569 := z.EncBinary()
					_ = yym3569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3567[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3570 := z.EncBinary()
					_ = yym3570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3567[1] {
					yym3572 := z.EncBinary()
					_ = yym3572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3567[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3573 := z.EncBinary()
					_ = yym3573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3575 := z.EncBinary()
				_ = yym3575
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3576 := z.EncBinary()
				_ = yym3576
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3578 := z.EncBinary()
				_ = yym3578
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3579 := z.EncBinary()
				_ = yym3579
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3580 := z.DecBinary()
	_ = yym3580
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3581 := r.ContainerType()
		if yyct3581 == codecSelferValueTypeMap1234 {
			yyl3581 := r.ReadMapStart()
			if yyl3581 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3581, d)
			}
		} else if yyct3581 == codecSelferValueTypeArray1234 {
			yyl3581 := r.ReadArrayStart()
			if yyl3581 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3581, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3582Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3582Slc
	var yyhl3582 bool = l >= 0
	for yyj3582 := 0; ; yyj3582++ {
		if yyhl3582 {
			if yyj3582 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3582Slc = r.DecodeBytes(yys3582Slc, true, true)
		yys3582 := string(yys3582Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3582 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3582)
		} // end switch yys3582
	} // end for yyj3582
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3587 int
	var yyb3587 bool
	var yyhl3587 bool = l >= 0
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3587++
		if yyhl3587 {
			yyb3587 = yyj3587 > l
		} else {
			yyb3587 = r.CheckBreak()
		}
		if yyb3587 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3587-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3592 := z.EncBinary()
		_ = yym3592
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3593 := !z.EncBinary()
			yy2arr3593 := z.EncBasicHandle().StructToArray
			var yyq3593 [7]bool
			_, _, _ = yysep3593, yyq3593, yy2arr3593
			const yyr3593 bool = false
			yyq3593[0] = x.Kind != ""
			yyq3593[1] = x.APIVersion != ""
			yyq3593[2] = x.LabelSelector != ""
			yyq3593[3] = x.FieldSelector != ""
			yyq3593[4] = x.Watch != false
			yyq3593[5] = x.ResourceVersion != ""
			yyq3593[6] = x.TimeoutSeconds != nil
			var yynn3593 int
			if yyr3593 || yy2arr3593 {
				r.EncodeArrayStart(7)
			} else {
				yynn3593 = 0
				for _, b := range yyq3593 {
					if b {
						yynn3593++
					}
				}
				r.EncodeMapStart(yynn3593)
				yynn3593 = 0
			}
			if yyr3593 || yy2arr3593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3593[0] {
					yym3595 := z.EncBinary()
					_ = yym3595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3593[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3596 := z.EncBinary()
					_ = yym3596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3593 || yy2arr3593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3593[1] {
					yym3598 := z.EncBinary()
					_ = yym3598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3593[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3599 := z.EncBinary()
					_ = yym3599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3593 || yy2arr3593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3593[2] {
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3593[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3602 := z.EncBinary()
					_ = yym3602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3593 || yy2arr3593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3593[3] {
					yym3604 := z.EncBinary()
					_ = yym3604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3593[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3605 := z.EncBinary()
					_ = yym3605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3593 || yy2arr3593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3593[4] {
					yym3607 := z.EncBinary()
					_ = yym3607
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3593[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3608 := z.EncBinary()
					_ = yym3608
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3593 || yy2arr3593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3593[5] {
					yym3610 := z.EncBinary()
					_ = yym3610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3593[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3611 := z.EncBinary()
					_ = yym3611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3593 || yy2arr3593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3593[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3613 := *x.TimeoutSeconds
						yym3614 := z.EncBinary()
						_ = yym3614
						if false {
						} else {
							r.EncodeInt(int64(yy3613))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3593[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3615 := *x.TimeoutSeconds
						yym3616 := z.EncBinary()
						_ = yym3616
						if false {
						} else {
							r.EncodeInt(int64(yy3615))
						}
					}
				}
			}
			if yyr3593 || yy2arr3593 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3617 := z.DecBinary()
	_ = yym3617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3618 := r.ContainerType()
		if yyct3618 == codecSelferValueTypeMap1234 {
			yyl3618 := r.ReadMapStart()
			if yyl3618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3618, d)
			}
		} else if yyct3618 == codecSelferValueTypeArray1234 {
			yyl3618 := r.ReadArrayStart()
			if yyl3618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3619Slc
	var yyhl3619 bool = l >= 0
	for yyj3619 := 0; ; yyj3619++ {
		if yyhl3619 {
			if yyj3619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3619Slc = r.DecodeBytes(yys3619Slc, true, true)
		yys3619 := string(yys3619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3619 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3627 := z.DecBinary()
				_ = yym3627
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3619)
		} // end switch yys3619
	} // end for yyj3619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3628 int
	var yyb3628 bool
	var yyhl3628 bool = l >= 0
	yyj3628++
	if yyhl3628 {
		yyb3628 = yyj3628 > l
	} else {
		yyb3628 = r.CheckBreak()
	}
	if yyb3628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3628++
	if yyhl3628 {
		yyb3628 = yyj3628 > l
	} else {
		yyb3628 = r.CheckBreak()
	}
	if yyb3628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3628++
	if yyhl3628 {
		yyb3628 = yyj3628 > l
	} else {
		yyb3628 = r.CheckBreak()
	}
	if yyb3628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3628++
	if yyhl3628 {
		yyb3628 = yyj3628 > l
	} else {
		yyb3628 = r.CheckBreak()
	}
	if yyb3628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3628++
	if yyhl3628 {
		yyb3628 = yyj3628 > l
	} else {
		yyb3628 = r.CheckBreak()
	}
	if yyb3628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3628++
	if yyhl3628 {
		yyb3628 = yyj3628 > l
	} else {
		yyb3628 = r.CheckBreak()
	}
	if yyb3628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3628++
	if yyhl3628 {
		yyb3628 = yyj3628 > l
	} else {
		yyb3628 = r.CheckBreak()
	}
	if yyb3628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3636 := z.DecBinary()
		_ = yym3636
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3628++
		if yyhl3628 {
			yyb3628 = yyj3628 > l
		} else {
			yyb3628 = r.CheckBreak()
		}
		if yyb3628 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3628-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3637 := z.EncBinary()
		_ = yym3637
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3638 := !z.EncBinary()
			yy2arr3638 := z.EncBasicHandle().StructToArray
			var yyq3638 [10]bool
			_, _, _ = yysep3638, yyq3638, yy2arr3638
			const yyr3638 bool = false
			yyq3638[0] = x.Kind != ""
			yyq3638[1] = x.APIVersion != ""
			yyq3638[2] = x.Container != ""
			yyq3638[3] = x.Follow != false
			yyq3638[4] = x.Previous != false
			yyq3638[5] = x.SinceSeconds != nil
			yyq3638[6] = x.SinceTime != nil
			yyq3638[7] = x.Timestamps != false
			yyq3638[8] = x.TailLines != nil
			yyq3638[9] = x.LimitBytes != nil
			var yynn3638 int
			if yyr3638 || yy2arr3638 {
				r.EncodeArrayStart(10)
			} else {
				yynn3638 = 0
				for _, b := range yyq3638 {
					if b {
						yynn3638++
					}
				}
				r.EncodeMapStart(yynn3638)
				yynn3638 = 0
			}
			if yyr3638 || yy2arr3638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3638[0] {
					yym3640 := z.EncBinary()
					_ = yym3640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3638[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3641 := z.EncBinary()
					_ = yym3641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3638[1] {
					yym3643 := z.EncBinary()
					_ = yym3643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3638[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3644 := z.EncBinary()
					_ = yym3644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3638[2] {
					yym3646 := z.EncBinary()
					_ = yym3646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3638[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3647 := z.EncBinary()
					_ = yym3647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3638[3] {
					yym3649 := z.EncBinary()
					_ = yym3649
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3638[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3650 := z.EncBinary()
					_ = yym3650
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3638[4] {
					yym3652 := z.EncBinary()
					_ = yym3652
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3638[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3653 := z.EncBinary()
					_ = yym3653
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3638[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3655 := *x.SinceSeconds
						yym3656 := z.EncBinary()
						_ = yym3656
						if false {
						} else {
							r.EncodeInt(int64(yy3655))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3638[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3657 := *x.SinceSeconds
						yym3658 := z.EncBinary()
						_ = yym3658
						if false {
						} else {
							r.EncodeInt(int64(yy3657))
						}
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3638[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3660 := z.EncBinary()
						_ = yym3660
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3660 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3660 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3638[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3661 := z.EncBinary()
						_ = yym3661
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3661 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3661 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3638[7] {
					yym3663 := z.EncBinary()
					_ = yym3663
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3638[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3664 := z.EncBinary()
					_ = yym3664
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3638[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3666 := *x.TailLines
						yym3667 := z.EncBinary()
						_ = yym3667
						if false {
						} else {
							r.EncodeInt(int64(yy3666))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3638[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3668 := *x.TailLines
						yym3669 := z.EncBinary()
						_ = yym3669
						if false {
						} else {
							r.EncodeInt(int64(yy3668))
						}
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3638[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3671 := *x.LimitBytes
						yym3672 := z.EncBinary()
						_ = yym3672
						if false {
						} else {
							r.EncodeInt(int64(yy3671))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3638[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3673 := *x.LimitBytes
						yym3674 := z.EncBinary()
						_ = yym3674
						if false {
						} else {
							r.EncodeInt(int64(yy3673))
						}
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3675 := z.DecBinary()
	_ = yym3675
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3676 := r.ContainerType()
		if yyct3676 == codecSelferValueTypeMap1234 {
			yyl3676 := r.ReadMapStart()
			if yyl3676 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3676, d)
			}
		} else if yyct3676 == codecSelferValueTypeArray1234 {
			yyl3676 := r.ReadArrayStart()
			if yyl3676 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3676, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3677Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3677Slc
	var yyhl3677 bool = l >= 0
	for yyj3677 := 0; ; yyj3677++ {
		if yyhl3677 {
			if yyj3677 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3677Slc = r.DecodeBytes(yys3677Slc, true, true)
		yys3677 := string(yys3677Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3677 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3684 := z.DecBinary()
				_ = yym3684
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3686 := z.DecBinary()
				_ = yym3686
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3686 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3686 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3689 := z.DecBinary()
				_ = yym3689
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3691 := z.DecBinary()
				_ = yym3691
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3677)
		} // end switch yys3677
	} // end for yyj3677
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3692 int
	var yyb3692 bool
	var yyhl3692 bool = l >= 0
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3699 := z.DecBinary()
		_ = yym3699
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3701 := z.DecBinary()
		_ = yym3701
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3701 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3701 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3704 := z.DecBinary()
		_ = yym3704
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3706 := z.DecBinary()
		_ = yym3706
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3692++
		if yyhl3692 {
			yyb3692 = yyj3692 > l
		} else {
			yyb3692 = r.CheckBreak()
		}
		if yyb3692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3707 := z.EncBinary()
		_ = yym3707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3708 := !z.EncBinary()
			yy2arr3708 := z.EncBasicHandle().StructToArray
			var yyq3708 [7]bool
			_, _, _ = yysep3708, yyq3708, yy2arr3708
			const yyr3708 bool = false
			yyq3708[0] = x.Kind != ""
			yyq3708[1] = x.APIVersion != ""
			yyq3708[2] = x.Stdin != false
			yyq3708[3] = x.Stdout != false
			yyq3708[4] = x.Stderr != false
			yyq3708[5] = x.TTY != false
			yyq3708[6] = x.Container != ""
			var yynn3708 int
			if yyr3708 || yy2arr3708 {
				r.EncodeArrayStart(7)
			} else {
				yynn3708 = 0
				for _, b := range yyq3708 {
					if b {
						yynn3708++
					}
				}
				r.EncodeMapStart(yynn3708)
				yynn3708 = 0
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3708[0] {
					yym3710 := z.EncBinary()
					_ = yym3710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3711 := z.EncBinary()
					_ = yym3711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3708[1] {
					yym3713 := z.EncBinary()
					_ = yym3713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3708[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3714 := z.EncBinary()
					_ = yym3714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3708[2] {
					yym3716 := z.EncBinary()
					_ = yym3716
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3708[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3717 := z.EncBinary()
					_ = yym3717
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3708[3] {
					yym3719 := z.EncBinary()
					_ = yym3719
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3708[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3720 := z.EncBinary()
					_ = yym3720
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3708[4] {
					yym3722 := z.EncBinary()
					_ = yym3722
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3708[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3723 := z.EncBinary()
					_ = yym3723
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3708[5] {
					yym3725 := z.EncBinary()
					_ = yym3725
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3708[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3726 := z.EncBinary()
					_ = yym3726
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3708[6] {
					yym3728 := z.EncBinary()
					_ = yym3728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3708[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3729 := z.EncBinary()
					_ = yym3729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3730 := z.DecBinary()
	_ = yym3730
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3731 := r.ContainerType()
		if yyct3731 == codecSelferValueTypeMap1234 {
			yyl3731 := r.ReadMapStart()
			if yyl3731 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3731, d)
			}
		} else if yyct3731 == codecSelferValueTypeArray1234 {
			yyl3731 := r.ReadArrayStart()
			if yyl3731 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3731, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3732Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3732Slc
	var yyhl3732 bool = l >= 0
	for yyj3732 := 0; ; yyj3732++ {
		if yyhl3732 {
			if yyj3732 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3732Slc = r.DecodeBytes(yys3732Slc, true, true)
		yys3732 := string(yys3732Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3732 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3732)
		} // end switch yys3732
	} // end for yyj3732
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3740 int
	var yyb3740 bool
	var yyhl3740 bool = l >= 0
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3740++
		if yyhl3740 {
			yyb3740 = yyj3740 > l
		} else {
			yyb3740 = r.CheckBreak()
		}
		if yyb3740 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3740-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3748 := z.EncBinary()
		_ = yym3748
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3749 := !z.EncBinary()
			yy2arr3749 := z.EncBasicHandle().StructToArray
			var yyq3749 [8]bool
			_, _, _ = yysep3749, yyq3749, yy2arr3749
			const yyr3749 bool = false
			yyq3749[0] = x.Kind != ""
			yyq3749[1] = x.APIVersion != ""
			yyq3749[2] = x.Stdin != false
			yyq3749[3] = x.Stdout != false
			yyq3749[4] = x.Stderr != false
			yyq3749[5] = x.TTY != false
			yyq3749[6] = x.Container != ""
			var yynn3749 int
			if yyr3749 || yy2arr3749 {
				r.EncodeArrayStart(8)
			} else {
				yynn3749 = 1
				for _, b := range yyq3749 {
					if b {
						yynn3749++
					}
				}
				r.EncodeMapStart(yynn3749)
				yynn3749 = 0
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3749[0] {
					yym3751 := z.EncBinary()
					_ = yym3751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3749[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3749[1] {
					yym3754 := z.EncBinary()
					_ = yym3754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3749[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3755 := z.EncBinary()
					_ = yym3755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3749[2] {
					yym3757 := z.EncBinary()
					_ = yym3757
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3749[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3758 := z.EncBinary()
					_ = yym3758
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3749[3] {
					yym3760 := z.EncBinary()
					_ = yym3760
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3749[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3761 := z.EncBinary()
					_ = yym3761
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3749[4] {
					yym3763 := z.EncBinary()
					_ = yym3763
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3749[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3764 := z.EncBinary()
					_ = yym3764
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3749[5] {
					yym3766 := z.EncBinary()
					_ = yym3766
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3749[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3767 := z.EncBinary()
					_ = yym3767
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3749[6] {
					yym3769 := z.EncBinary()
					_ = yym3769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3749[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3770 := z.EncBinary()
					_ = yym3770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3772 := z.EncBinary()
					_ = yym3772
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3773 := z.EncBinary()
					_ = yym3773
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3774 := z.DecBinary()
	_ = yym3774
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3775 := r.ContainerType()
		if yyct3775 == codecSelferValueTypeMap1234 {
			yyl3775 := r.ReadMapStart()
			if yyl3775 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3775, d)
			}
		} else if yyct3775 == codecSelferValueTypeArray1234 {
			yyl3775 := r.ReadArrayStart()
			if yyl3775 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3775, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3776Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3776Slc
	var yyhl3776 bool = l >= 0
	for yyj3776 := 0; ; yyj3776++ {
		if yyhl3776 {
			if yyj3776 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3776Slc = r.DecodeBytes(yys3776Slc, true, true)
		yys3776 := string(yys3776Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3776 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3784 := &x.Command
				yym3785 := z.DecBinary()
				_ = yym3785
				if false {
				} else {
					z.F.DecSliceStringX(yyv3784, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3776)
		} // end switch yys3776
	} // end for yyj3776
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3786 int
	var yyb3786 bool
	var yyhl3786 bool = l >= 0
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3794 := &x.Command
		yym3795 := z.DecBinary()
		_ = yym3795
		if false {
		} else {
			z.F.DecSliceStringX(yyv3794, false, d)
		}
	}
	for {
		yyj3786++
		if yyhl3786 {
			yyb3786 = yyj3786 > l
		} else {
			yyb3786 = r.CheckBreak()
		}
		if yyb3786 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3786-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3796 := z.EncBinary()
		_ = yym3796
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3797 := !z.EncBinary()
			yy2arr3797 := z.EncBasicHandle().StructToArray
			var yyq3797 [3]bool
			_, _, _ = yysep3797, yyq3797, yy2arr3797
			const yyr3797 bool = false
			yyq3797[0] = x.Kind != ""
			yyq3797[1] = x.APIVersion != ""
			yyq3797[2] = x.Path != ""
			var yynn3797 int
			if yyr3797 || yy2arr3797 {
				r.EncodeArrayStart(3)
			} else {
				yynn3797 = 0
				for _, b := range yyq3797 {
					if b {
						yynn3797++
					}
				}
				r.EncodeMapStart(yynn3797)
				yynn3797 = 0
			}
			if yyr3797 || yy2arr3797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3797[0] {
					yym3799 := z.EncBinary()
					_ = yym3799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3797[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3800 := z.EncBinary()
					_ = yym3800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3797 || yy2arr3797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3797[1] {
					yym3802 := z.EncBinary()
					_ = yym3802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3797[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3803 := z.EncBinary()
					_ = yym3803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3797 || yy2arr3797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3797[2] {
					yym3805 := z.EncBinary()
					_ = yym3805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3797[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3806 := z.EncBinary()
					_ = yym3806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3797 || yy2arr3797 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3807 := z.DecBinary()
	_ = yym3807
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3808 := r.ContainerType()
		if yyct3808 == codecSelferValueTypeMap1234 {
			yyl3808 := r.ReadMapStart()
			if yyl3808 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3808, d)
			}
		} else if yyct3808 == codecSelferValueTypeArray1234 {
			yyl3808 := r.ReadArrayStart()
			if yyl3808 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3808, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3809Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3809Slc
	var yyhl3809 bool = l >= 0
	for yyj3809 := 0; ; yyj3809++ {
		if yyhl3809 {
			if yyj3809 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3809Slc = r.DecodeBytes(yys3809Slc, true, true)
		yys3809 := string(yys3809Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3809 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3809)
		} // end switch yys3809
	} // end for yyj3809
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3813 int
	var yyb3813 bool
	var yyhl3813 bool = l >= 0
	yyj3813++
	if yyhl3813 {
		yyb3813 = yyj3813 > l
	} else {
		yyb3813 = r.CheckBreak()
	}
	if yyb3813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3813++
	if yyhl3813 {
		yyb3813 = yyj3813 > l
	} else {
		yyb3813 = r.CheckBreak()
	}
	if yyb3813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3813++
	if yyhl3813 {
		yyb3813 = yyj3813 > l
	} else {
		yyb3813 = r.CheckBreak()
	}
	if yyb3813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3813++
		if yyhl3813 {
			yyb3813 = yyj3813 > l
		} else {
			yyb3813 = r.CheckBreak()
		}
		if yyb3813 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3813-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3817 := z.EncBinary()
		_ = yym3817
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3818 := !z.EncBinary()
			yy2arr3818 := z.EncBasicHandle().StructToArray
			var yyq3818 [3]bool
			_, _, _ = yysep3818, yyq3818, yy2arr3818
			const yyr3818 bool = false
			yyq3818[0] = x.Kind != ""
			yyq3818[1] = x.APIVersion != ""
			yyq3818[2] = x.Path != ""
			var yynn3818 int
			if yyr3818 || yy2arr3818 {
				r.EncodeArrayStart(3)
			} else {
				yynn3818 = 0
				for _, b := range yyq3818 {
					if b {
						yynn3818++
					}
				}
				r.EncodeMapStart(yynn3818)
				yynn3818 = 0
			}
			if yyr3818 || yy2arr3818 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3818[0] {
					yym3820 := z.EncBinary()
					_ = yym3820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3818[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3821 := z.EncBinary()
					_ = yym3821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3818 || yy2arr3818 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3818[1] {
					yym3823 := z.EncBinary()
					_ = yym3823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3818[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3824 := z.EncBinary()
					_ = yym3824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3818 || yy2arr3818 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3818[2] {
					yym3826 := z.EncBinary()
					_ = yym3826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3818[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3827 := z.EncBinary()
					_ = yym3827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3818 || yy2arr3818 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3828 := z.DecBinary()
	_ = yym3828
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3829 := r.ContainerType()
		if yyct3829 == codecSelferValueTypeMap1234 {
			yyl3829 := r.ReadMapStart()
			if yyl3829 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3829, d)
			}
		} else if yyct3829 == codecSelferValueTypeArray1234 {
			yyl3829 := r.ReadArrayStart()
			if yyl3829 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3829, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3830Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3830Slc
	var yyhl3830 bool = l >= 0
	for yyj3830 := 0; ; yyj3830++ {
		if yyhl3830 {
			if yyj3830 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3830Slc = r.DecodeBytes(yys3830Slc, true, true)
		yys3830 := string(yys3830Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3830 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3830)
		} // end switch yys3830
	} // end for yyj3830
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3834 int
	var yyb3834 bool
	var yyhl3834 bool = l >= 0
	yyj3834++
	if yyhl3834 {
		yyb3834 = yyj3834 > l
	} else {
		yyb3834 = r.CheckBreak()
	}
	if yyb3834 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3834++
	if yyhl3834 {
		yyb3834 = yyj3834 > l
	} else {
		yyb3834 = r.CheckBreak()
	}
	if yyb3834 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3834++
	if yyhl3834 {
		yyb3834 = yyj3834 > l
	} else {
		yyb3834 = r.CheckBreak()
	}
	if yyb3834 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3834++
		if yyhl3834 {
			yyb3834 = yyj3834 > l
		} else {
			yyb3834 = r.CheckBreak()
		}
		if yyb3834 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3834-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3838 := z.EncBinary()
		_ = yym3838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3839 := !z.EncBinary()
			yy2arr3839 := z.EncBasicHandle().StructToArray
			var yyq3839 [3]bool
			_, _, _ = yysep3839, yyq3839, yy2arr3839
			const yyr3839 bool = false
			yyq3839[0] = x.Kind != ""
			yyq3839[1] = x.APIVersion != ""
			yyq3839[2] = x.Path != ""
			var yynn3839 int
			if yyr3839 || yy2arr3839 {
				r.EncodeArrayStart(3)
			} else {
				yynn3839 = 0
				for _, b := range yyq3839 {
					if b {
						yynn3839++
					}
				}
				r.EncodeMapStart(yynn3839)
				yynn3839 = 0
			}
			if yyr3839 || yy2arr3839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3839[0] {
					yym3841 := z.EncBinary()
					_ = yym3841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3839[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3842 := z.EncBinary()
					_ = yym3842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3839 || yy2arr3839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3839[1] {
					yym3844 := z.EncBinary()
					_ = yym3844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3839[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3845 := z.EncBinary()
					_ = yym3845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3839 || yy2arr3839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3839[2] {
					yym3847 := z.EncBinary()
					_ = yym3847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3839[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3848 := z.EncBinary()
					_ = yym3848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3839 || yy2arr3839 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3849 := z.DecBinary()
	_ = yym3849
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3850 := r.ContainerType()
		if yyct3850 == codecSelferValueTypeMap1234 {
			yyl3850 := r.ReadMapStart()
			if yyl3850 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3850, d)
			}
		} else if yyct3850 == codecSelferValueTypeArray1234 {
			yyl3850 := r.ReadArrayStart()
			if yyl3850 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3850, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3851Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3851Slc
	var yyhl3851 bool = l >= 0
	for yyj3851 := 0; ; yyj3851++ {
		if yyhl3851 {
			if yyj3851 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3851Slc = r.DecodeBytes(yys3851Slc, true, true)
		yys3851 := string(yys3851Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3851 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3851)
		} // end switch yys3851
	} // end for yyj3851
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3855 int
	var yyb3855 bool
	var yyhl3855 bool = l >= 0
	yyj3855++
	if yyhl3855 {
		yyb3855 = yyj3855 > l
	} else {
		yyb3855 = r.CheckBreak()
	}
	if yyb3855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3855++
	if yyhl3855 {
		yyb3855 = yyj3855 > l
	} else {
		yyb3855 = r.CheckBreak()
	}
	if yyb3855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3855++
	if yyhl3855 {
		yyb3855 = yyj3855 > l
	} else {
		yyb3855 = r.CheckBreak()
	}
	if yyb3855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3855++
		if yyhl3855 {
			yyb3855 = yyj3855 > l
		} else {
			yyb3855 = r.CheckBreak()
		}
		if yyb3855 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3855-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3859 := z.EncBinary()
		_ = yym3859
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3860 := !z.EncBinary()
			yy2arr3860 := z.EncBasicHandle().StructToArray
			var yyq3860 [5]bool
			_, _, _ = yysep3860, yyq3860, yy2arr3860
			const yyr3860 bool = false
			yyq3860[4] = x.Controller != nil
			var yynn3860 int
			if yyr3860 || yy2arr3860 {
				r.EncodeArrayStart(5)
			} else {
				yynn3860 = 4
				for _, b := range yyq3860 {
					if b {
						yynn3860++
					}
				}
				r.EncodeMapStart(yynn3860)
				yynn3860 = 0
			}
			if yyr3860 || yy2arr3860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3862 := z.EncBinary()
				_ = yym3862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3863 := z.EncBinary()
				_ = yym3863
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3860 || yy2arr3860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3865 := z.EncBinary()
				_ = yym3865
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3866 := z.EncBinary()
				_ = yym3866
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3860 || yy2arr3860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3868 := z.EncBinary()
				_ = yym3868
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3869 := z.EncBinary()
				_ = yym3869
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3860 || yy2arr3860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3871 := z.EncBinary()
				_ = yym3871
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3872 := z.EncBinary()
				_ = yym3872
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3860 || yy2arr3860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3860[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3874 := *x.Controller
						yym3875 := z.EncBinary()
						_ = yym3875
						if false {
						} else {
							r.EncodeBool(bool(yy3874))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3860[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3876 := *x.Controller
						yym3877 := z.EncBinary()
						_ = yym3877
						if false {
						} else {
							r.EncodeBool(bool(yy3876))
						}
					}
				}
			}
			if yyr3860 || yy2arr3860 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3878 := z.DecBinary()
	_ = yym3878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3879 := r.ContainerType()
		if yyct3879 == codecSelferValueTypeMap1234 {
			yyl3879 := r.ReadMapStart()
			if yyl3879 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3879, d)
			}
		} else if yyct3879 == codecSelferValueTypeArray1234 {
			yyl3879 := r.ReadArrayStart()
			if yyl3879 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3879, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3880Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3880Slc
	var yyhl3880 bool = l >= 0
	for yyj3880 := 0; ; yyj3880++ {
		if yyhl3880 {
			if yyj3880 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3880Slc = r.DecodeBytes(yys3880Slc, true, true)
		yys3880 := string(yys3880Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3880 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3886 := z.DecBinary()
				_ = yym3886
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3880)
		} // end switch yys3880
	} // end for yyj3880
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3887 int
	var yyb3887 bool
	var yyhl3887 bool = l >= 0
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3893 := z.DecBinary()
		_ = yym3893
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3887++
		if yyhl3887 {
			yyb3887 = yyj3887 > l
		} else {
			yyb3887 = r.CheckBreak()
		}
		if yyb3887 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3887-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3894 := z.EncBinary()
		_ = yym3894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3895 := !z.EncBinary()
			yy2arr3895 := z.EncBasicHandle().StructToArray
			var yyq3895 [7]bool
			_, _, _ = yysep3895, yyq3895, yy2arr3895
			const yyr3895 bool = false
			yyq3895[0] = x.Kind != ""
			yyq3895[1] = x.Namespace != ""
			yyq3895[2] = x.Name != ""
			yyq3895[3] = x.UID != ""
			yyq3895[4] = x.APIVersion != ""
			yyq3895[5] = x.ResourceVersion != ""
			yyq3895[6] = x.FieldPath != ""
			var yynn3895 int
			if yyr3895 || yy2arr3895 {
				r.EncodeArrayStart(7)
			} else {
				yynn3895 = 0
				for _, b := range yyq3895 {
					if b {
						yynn3895++
					}
				}
				r.EncodeMapStart(yynn3895)
				yynn3895 = 0
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3895[0] {
					yym3897 := z.EncBinary()
					_ = yym3897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3895[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3898 := z.EncBinary()
					_ = yym3898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3895[1] {
					yym3900 := z.EncBinary()
					_ = yym3900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3895[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3901 := z.EncBinary()
					_ = yym3901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3895[2] {
					yym3903 := z.EncBinary()
					_ = yym3903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3895[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3904 := z.EncBinary()
					_ = yym3904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3895[3] {
					yym3906 := z.EncBinary()
					_ = yym3906
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3895[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3907 := z.EncBinary()
					_ = yym3907
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3895[4] {
					yym3909 := z.EncBinary()
					_ = yym3909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3895[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3910 := z.EncBinary()
					_ = yym3910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3895[5] {
					yym3912 := z.EncBinary()
					_ = yym3912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3895[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3913 := z.EncBinary()
					_ = yym3913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3895[6] {
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3895[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3916 := z.EncBinary()
					_ = yym3916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3917 := z.DecBinary()
	_ = yym3917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3918 := r.ContainerType()
		if yyct3918 == codecSelferValueTypeMap1234 {
			yyl3918 := r.ReadMapStart()
			if yyl3918 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3918, d)
			}
		} else if yyct3918 == codecSelferValueTypeArray1234 {
			yyl3918 := r.ReadArrayStart()
			if yyl3918 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3919Slc
	var yyhl3919 bool = l >= 0
	for yyj3919 := 0; ; yyj3919++ {
		if yyhl3919 {
			if yyj3919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3919Slc = r.DecodeBytes(yys3919Slc, true, true)
		yys3919 := string(yys3919Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3919 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3919)
		} // end switch yys3919
	} // end for yyj3919
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3927 int
	var yyb3927 bool
	var yyhl3927 bool = l >= 0
	yyj3927++
	if yyhl3927 {
		yyb3927 = yyj3927 > l
	} else {
		yyb3927 = r.CheckBreak()
	}
	if yyb3927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3927++
	if yyhl3927 {
		yyb3927 = yyj3927 > l
	} else {
		yyb3927 = r.CheckBreak()
	}
	if yyb3927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3927++
	if yyhl3927 {
		yyb3927 = yyj3927 > l
	} else {
		yyb3927 = r.CheckBreak()
	}
	if yyb3927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3927++
	if yyhl3927 {
		yyb3927 = yyj3927 > l
	} else {
		yyb3927 = r.CheckBreak()
	}
	if yyb3927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3927++
	if yyhl3927 {
		yyb3927 = yyj3927 > l
	} else {
		yyb3927 = r.CheckBreak()
	}
	if yyb3927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3927++
	if yyhl3927 {
		yyb3927 = yyj3927 > l
	} else {
		yyb3927 = r.CheckBreak()
	}
	if yyb3927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3927++
	if yyhl3927 {
		yyb3927 = yyj3927 > l
	} else {
		yyb3927 = r.CheckBreak()
	}
	if yyb3927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3927++
		if yyhl3927 {
			yyb3927 = yyj3927 > l
		} else {
			yyb3927 = r.CheckBreak()
		}
		if yyb3927 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3927-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3935 := z.EncBinary()
		_ = yym3935
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3936 := !z.EncBinary()
			yy2arr3936 := z.EncBasicHandle().StructToArray
			var yyq3936 [1]bool
			_, _, _ = yysep3936, yyq3936, yy2arr3936
			const yyr3936 bool = false
			yyq3936[0] = x.Name != ""
			var yynn3936 int
			if yyr3936 || yy2arr3936 {
				r.EncodeArrayStart(1)
			} else {
				yynn3936 = 0
				for _, b := range yyq3936 {
					if b {
						yynn3936++
					}
				}
				r.EncodeMapStart(yynn3936)
				yynn3936 = 0
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[0] {
					yym3938 := z.EncBinary()
					_ = yym3938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3936[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3940 := z.DecBinary()
	_ = yym3940
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3941 := r.ContainerType()
		if yyct3941 == codecSelferValueTypeMap1234 {
			yyl3941 := r.ReadMapStart()
			if yyl3941 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3941, d)
			}
		} else if yyct3941 == codecSelferValueTypeArray1234 {
			yyl3941 := r.ReadArrayStart()
			if yyl3941 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3941, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3942Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3942Slc
	var yyhl3942 bool = l >= 0
	for yyj3942 := 0; ; yyj3942++ {
		if yyhl3942 {
			if yyj3942 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3942Slc = r.DecodeBytes(yys3942Slc, true, true)
		yys3942 := string(yys3942Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3942 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3942)
		} // end switch yys3942
	} // end for yyj3942
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3944 int
	var yyb3944 bool
	var yyhl3944 bool = l >= 0
	yyj3944++
	if yyhl3944 {
		yyb3944 = yyj3944 > l
	} else {
		yyb3944 = r.CheckBreak()
	}
	if yyb3944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3944++
		if yyhl3944 {
			yyb3944 = yyj3944 > l
		} else {
			yyb3944 = r.CheckBreak()
		}
		if yyb3944 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3944-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3946 := z.EncBinary()
		_ = yym3946
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3947 := !z.EncBinary()
			yy2arr3947 := z.EncBasicHandle().StructToArray
			var yyq3947 [3]bool
			_, _, _ = yysep3947, yyq3947, yy2arr3947
			const yyr3947 bool = false
			yyq3947[0] = x.Kind != ""
			yyq3947[1] = x.APIVersion != ""
			yyq3947[2] = true
			var yynn3947 int
			if yyr3947 || yy2arr3947 {
				r.EncodeArrayStart(3)
			} else {
				yynn3947 = 0
				for _, b := range yyq3947 {
					if b {
						yynn3947++
					}
				}
				r.EncodeMapStart(yynn3947)
				yynn3947 = 0
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3947[0] {
					yym3949 := z.EncBinary()
					_ = yym3949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3947[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3950 := z.EncBinary()
					_ = yym3950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3947[1] {
					yym3952 := z.EncBinary()
					_ = yym3952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3947[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3953 := z.EncBinary()
					_ = yym3953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3947[2] {
					yy3955 := &x.Reference
					yy3955.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3947[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3956 := &x.Reference
					yy3956.CodecEncodeSelf(e)
				}
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3957 := z.DecBinary()
	_ = yym3957
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3958 := r.ContainerType()
		if yyct3958 == codecSelferValueTypeMap1234 {
			yyl3958 := r.ReadMapStart()
			if yyl3958 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3958, d)
			}
		} else if yyct3958 == codecSelferValueTypeArray1234 {
			yyl3958 := r.ReadArrayStart()
			if yyl3958 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3958, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3959Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3959Slc
	var yyhl3959 bool = l >= 0
	for yyj3959 := 0; ; yyj3959++ {
		if yyhl3959 {
			if yyj3959 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3959Slc = r.DecodeBytes(yys3959Slc, true, true)
		yys3959 := string(yys3959Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3959 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3962 := &x.Reference
				yyv3962.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3959)
		} // end switch yys3959
	} // end for yyj3959
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3963 int
	var yyb3963 bool
	var yyhl3963 bool = l >= 0
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3966 := &x.Reference
		yyv3966.CodecDecodeSelf(d)
	}
	for {
		yyj3963++
		if yyhl3963 {
			yyb3963 = yyj3963 > l
		} else {
			yyb3963 = r.CheckBreak()
		}
		if yyb3963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3967 := z.EncBinary()
		_ = yym3967
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3968 := !z.EncBinary()
			yy2arr3968 := z.EncBasicHandle().StructToArray
			var yyq3968 [2]bool
			_, _, _ = yysep3968, yyq3968, yy2arr3968
			const yyr3968 bool = false
			yyq3968[0] = x.Component != ""
			yyq3968[1] = x.Host != ""
			var yynn3968 int
			if yyr3968 || yy2arr3968 {
				r.EncodeArrayStart(2)
			} else {
				yynn3968 = 0
				for _, b := range yyq3968 {
					if b {
						yynn3968++
					}
				}
				r.EncodeMapStart(yynn3968)
				yynn3968 = 0
			}
			if yyr3968 || yy2arr3968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3968[0] {
					yym3970 := z.EncBinary()
					_ = yym3970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3968[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3971 := z.EncBinary()
					_ = yym3971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3968 || yy2arr3968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3968[1] {
					yym3973 := z.EncBinary()
					_ = yym3973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3968[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3974 := z.EncBinary()
					_ = yym3974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3968 || yy2arr3968 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3975 := z.DecBinary()
	_ = yym3975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3976 := r.ContainerType()
		if yyct3976 == codecSelferValueTypeMap1234 {
			yyl3976 := r.ReadMapStart()
			if yyl3976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3976, d)
			}
		} else if yyct3976 == codecSelferValueTypeArray1234 {
			yyl3976 := r.ReadArrayStart()
			if yyl3976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3977Slc
	var yyhl3977 bool = l >= 0
	for yyj3977 := 0; ; yyj3977++ {
		if yyhl3977 {
			if yyj3977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3977Slc = r.DecodeBytes(yys3977Slc, true, true)
		yys3977 := string(yys3977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3977 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3977)
		} // end switch yys3977
	} // end for yyj3977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3980 int
	var yyb3980 bool
	var yyhl3980 bool = l >= 0
	yyj3980++
	if yyhl3980 {
		yyb3980 = yyj3980 > l
	} else {
		yyb3980 = r.CheckBreak()
	}
	if yyb3980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3980++
	if yyhl3980 {
		yyb3980 = yyj3980 > l
	} else {
		yyb3980 = r.CheckBreak()
	}
	if yyb3980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3980++
		if yyhl3980 {
			yyb3980 = yyj3980 > l
		} else {
			yyb3980 = r.CheckBreak()
		}
		if yyb3980 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3980-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3983 := z.EncBinary()
		_ = yym3983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3984 := !z.EncBinary()
			yy2arr3984 := z.EncBasicHandle().StructToArray
			var yyq3984 [11]bool
			_, _, _ = yysep3984, yyq3984, yy2arr3984
			const yyr3984 bool = false
			yyq3984[0] = x.Kind != ""
			yyq3984[1] = x.APIVersion != ""
			yyq3984[4] = x.Reason != ""
			yyq3984[5] = x.Message != ""
			yyq3984[6] = true
			yyq3984[7] = true
			yyq3984[8] = true
			yyq3984[9] = x.Count != 0
			yyq3984[10] = x.Type != ""
			var yynn3984 int
			if yyr3984 || yy2arr3984 {
				r.EncodeArrayStart(11)
			} else {
				yynn3984 = 2
				for _, b := range yyq3984 {
					if b {
						yynn3984++
					}
				}
				r.EncodeMapStart(yynn3984)
				yynn3984 = 0
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[0] {
					yym3986 := z.EncBinary()
					_ = yym3986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3984[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3987 := z.EncBinary()
					_ = yym3987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[1] {
					yym3989 := z.EncBinary()
					_ = yym3989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3984[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3990 := z.EncBinary()
					_ = yym3990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3992 := &x.ObjectMeta
				yy3992.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3993 := &x.ObjectMeta
				yy3993.CodecEncodeSelf(e)
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3995 := &x.InvolvedObject
				yy3995.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3996 := &x.InvolvedObject
				yy3996.CodecEncodeSelf(e)
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[4] {
					yym3998 := z.EncBinary()
					_ = yym3998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3984[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3999 := z.EncBinary()
					_ = yym3999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[5] {
					yym4001 := z.EncBinary()
					_ = yym4001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3984[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4002 := z.EncBinary()
					_ = yym4002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[6] {
					yy4004 := &x.Source
					yy4004.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3984[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4005 := &x.Source
					yy4005.CodecEncodeSelf(e)
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[7] {
					yy4007 := &x.FirstTimestamp
					yym4008 := z.EncBinary()
					_ = yym4008
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4007) {
					} else if yym4008 {
						z.EncBinaryMarshal(yy4007)
					} else if !yym4008 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4007)
					} else {
						z.EncFallback(yy4007)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3984[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4009 := &x.FirstTimestamp
					yym4010 := z.EncBinary()
					_ = yym4010
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4009) {
					} else if yym4010 {
						z.EncBinaryMarshal(yy4009)
					} else if !yym4010 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4009)
					} else {
						z.EncFallback(yy4009)
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[8] {
					yy4012 := &x.LastTimestamp
					yym4013 := z.EncBinary()
					_ = yym4013
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4012) {
					} else if yym4013 {
						z.EncBinaryMarshal(yy4012)
					} else if !yym4013 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4012)
					} else {
						z.EncFallback(yy4012)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3984[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4014 := &x.LastTimestamp
					yym4015 := z.EncBinary()
					_ = yym4015
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4014) {
					} else if yym4015 {
						z.EncBinaryMarshal(yy4014)
					} else if !yym4015 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4014)
					} else {
						z.EncFallback(yy4014)
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[9] {
					yym4017 := z.EncBinary()
					_ = yym4017
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3984[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4018 := z.EncBinary()
					_ = yym4018
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[10] {
					yym4020 := z.EncBinary()
					_ = yym4020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3984[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4021 := z.EncBinary()
					_ = yym4021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4022 := z.DecBinary()
	_ = yym4022
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4023 := r.ContainerType()
		if yyct4023 == codecSelferValueTypeMap1234 {
			yyl4023 := r.ReadMapStart()
			if yyl4023 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4023, d)
			}
		} else if yyct4023 == codecSelferValueTypeArray1234 {
			yyl4023 := r.ReadArrayStart()
			if yyl4023 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4023, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4024Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4024Slc
	var yyhl4024 bool = l >= 0
	for yyj4024 := 0; ; yyj4024++ {
		if yyhl4024 {
			if yyj4024 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4024Slc = r.DecodeBytes(yys4024Slc, true, true)
		yys4024 := string(yys4024Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4024 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4027 := &x.ObjectMeta
				yyv4027.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv4028 := &x.InvolvedObject
				yyv4028.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv4031 := &x.Source
				yyv4031.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv4032 := &x.FirstTimestamp
				yym4033 := z.DecBinary()
				_ = yym4033
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4032) {
				} else if yym4033 {
					z.DecBinaryUnmarshal(yyv4032)
				} else if !yym4033 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4032)
				} else {
					z.DecFallback(yyv4032, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv4034 := &x.LastTimestamp
				yym4035 := z.DecBinary()
				_ = yym4035
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4034) {
				} else if yym4035 {
					z.DecBinaryUnmarshal(yyv4034)
				} else if !yym4035 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4034)
				} else {
					z.DecFallback(yyv4034, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4024)
		} // end switch yys4024
	} // end for yyj4024
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4038 int
	var yyb4038 bool
	var yyhl4038 bool = l >= 0
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4041 := &x.ObjectMeta
		yyv4041.CodecDecodeSelf(d)
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv4042 := &x.InvolvedObject
		yyv4042.CodecDecodeSelf(d)
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv4045 := &x.Source
		yyv4045.CodecDecodeSelf(d)
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv4046 := &x.FirstTimestamp
		yym4047 := z.DecBinary()
		_ = yym4047
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4046) {
		} else if yym4047 {
			z.DecBinaryUnmarshal(yyv4046)
		} else if !yym4047 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv4046)
		} else {
			z.DecFallback(yyv4046, false)
		}
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv4048 := &x.LastTimestamp
		yym4049 := z.DecBinary()
		_ = yym4049
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4048) {
		} else if yym4049 {
			z.DecBinaryUnmarshal(yyv4048)
		} else if !yym4049 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv4048)
		} else {
			z.DecFallback(yyv4048, false)
		}
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj4038++
		if yyhl4038 {
			yyb4038 = yyj4038 > l
		} else {
			yyb4038 = r.CheckBreak()
		}
		if yyb4038 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4038-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4052 := z.EncBinary()
		_ = yym4052
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4053 := !z.EncBinary()
			yy2arr4053 := z.EncBasicHandle().StructToArray
			var yyq4053 [4]bool
			_, _, _ = yysep4053, yyq4053, yy2arr4053
			const yyr4053 bool = false
			yyq4053[0] = x.Kind != ""
			yyq4053[1] = x.APIVersion != ""
			yyq4053[2] = true
			var yynn4053 int
			if yyr4053 || yy2arr4053 {
				r.EncodeArrayStart(4)
			} else {
				yynn4053 = 1
				for _, b := range yyq4053 {
					if b {
						yynn4053++
					}
				}
				r.EncodeMapStart(yynn4053)
				yynn4053 = 0
			}
			if yyr4053 || yy2arr4053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4053[0] {
					yym4055 := z.EncBinary()
					_ = yym4055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4053[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4056 := z.EncBinary()
					_ = yym4056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4053 || yy2arr4053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4053[1] {
					yym4058 := z.EncBinary()
					_ = yym4058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4053[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4059 := z.EncBinary()
					_ = yym4059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4053 || yy2arr4053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4053[2] {
					yy4061 := &x.ListMeta
					yym4062 := z.EncBinary()
					_ = yym4062
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4061) {
					} else {
						z.EncFallback(yy4061)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4053[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4063 := &x.ListMeta
					yym4064 := z.EncBinary()
					_ = yym4064
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4063) {
					} else {
						z.EncFallback(yy4063)
					}
				}
			}
			if yyr4053 || yy2arr4053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4066 := z.EncBinary()
					_ = yym4066
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4067 := z.EncBinary()
					_ = yym4067
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr4053 || yy2arr4053 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4068 := z.DecBinary()
	_ = yym4068
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4069 := r.ContainerType()
		if yyct4069 == codecSelferValueTypeMap1234 {
			yyl4069 := r.ReadMapStart()
			if yyl4069 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4069, d)
			}
		} else if yyct4069 == codecSelferValueTypeArray1234 {
			yyl4069 := r.ReadArrayStart()
			if yyl4069 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4069, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4070Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4070Slc
	var yyhl4070 bool = l >= 0
	for yyj4070 := 0; ; yyj4070++ {
		if yyhl4070 {
			if yyj4070 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4070Slc = r.DecodeBytes(yys4070Slc, true, true)
		yys4070 := string(yys4070Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4070 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4073 := &x.ListMeta
				yym4074 := z.DecBinary()
				_ = yym4074
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4073) {
				} else {
					z.DecFallback(yyv4073, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4075 := &x.Items
				yym4076 := z.DecBinary()
				_ = yym4076
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv4075), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4070)
		} // end switch yys4070
	} // end for yyj4070
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4077 int
	var yyb4077 bool
	var yyhl4077 bool = l >= 0
	yyj4077++
	if yyhl4077 {
		yyb4077 = yyj4077 > l
	} else {
		yyb4077 = r.CheckBreak()
	}
	if yyb4077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4077++
	if yyhl4077 {
		yyb4077 = yyj4077 > l
	} else {
		yyb4077 = r.CheckBreak()
	}
	if yyb4077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4077++
	if yyhl4077 {
		yyb4077 = yyj4077 > l
	} else {
		yyb4077 = r.CheckBreak()
	}
	if yyb4077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4080 := &x.ListMeta
		yym4081 := z.DecBinary()
		_ = yym4081
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4080) {
		} else {
			z.DecFallback(yyv4080, false)
		}
	}
	yyj4077++
	if yyhl4077 {
		yyb4077 = yyj4077 > l
	} else {
		yyb4077 = r.CheckBreak()
	}
	if yyb4077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4082 := &x.Items
		yym4083 := z.DecBinary()
		_ = yym4083
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv4082), d)
		}
	}
	for {
		yyj4077++
		if yyhl4077 {
			yyb4077 = yyj4077 > l
		} else {
			yyb4077 = r.CheckBreak()
		}
		if yyb4077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4084 := z.EncBinary()
		_ = yym4084
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4085 := !z.EncBinary()
			yy2arr4085 := z.EncBasicHandle().StructToArray
			var yyq4085 [4]bool
			_, _, _ = yysep4085, yyq4085, yy2arr4085
			const yyr4085 bool = false
			yyq4085[0] = x.Kind != ""
			yyq4085[1] = x.APIVersion != ""
			yyq4085[2] = true
			var yynn4085 int
			if yyr4085 || yy2arr4085 {
				r.EncodeArrayStart(4)
			} else {
				yynn4085 = 1
				for _, b := range yyq4085 {
					if b {
						yynn4085++
					}
				}
				r.EncodeMapStart(yynn4085)
				yynn4085 = 0
			}
			if yyr4085 || yy2arr4085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4085[0] {
					yym4087 := z.EncBinary()
					_ = yym4087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4085[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4088 := z.EncBinary()
					_ = yym4088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4085 || yy2arr4085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4085[1] {
					yym4090 := z.EncBinary()
					_ = yym4090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4085[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4091 := z.EncBinary()
					_ = yym4091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4085 || yy2arr4085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4085[2] {
					yy4093 := &x.ListMeta
					yym4094 := z.EncBinary()
					_ = yym4094
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4093) {
					} else {
						z.EncFallback(yy4093)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4085[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4095 := &x.ListMeta
					yym4096 := z.EncBinary()
					_ = yym4096
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4095) {
					} else {
						z.EncFallback(yy4095)
					}
				}
			}
			if yyr4085 || yy2arr4085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4098 := z.EncBinary()
					_ = yym4098
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4099 := z.EncBinary()
					_ = yym4099
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr4085 || yy2arr4085 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4100 := z.DecBinary()
	_ = yym4100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4101 := r.ContainerType()
		if yyct4101 == codecSelferValueTypeMap1234 {
			yyl4101 := r.ReadMapStart()
			if yyl4101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4101, d)
			}
		} else if yyct4101 == codecSelferValueTypeArray1234 {
			yyl4101 := r.ReadArrayStart()
			if yyl4101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4102Slc
	var yyhl4102 bool = l >= 0
	for yyj4102 := 0; ; yyj4102++ {
		if yyhl4102 {
			if yyj4102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4102Slc = r.DecodeBytes(yys4102Slc, true, true)
		yys4102 := string(yys4102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4102 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4105 := &x.ListMeta
				yym4106 := z.DecBinary()
				_ = yym4106
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4105) {
				} else {
					z.DecFallback(yyv4105, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4107 := &x.Items
				yym4108 := z.DecBinary()
				_ = yym4108
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv4107), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4102)
		} // end switch yys4102
	} // end for yyj4102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4109 int
	var yyb4109 bool
	var yyhl4109 bool = l >= 0
	yyj4109++
	if yyhl4109 {
		yyb4109 = yyj4109 > l
	} else {
		yyb4109 = r.CheckBreak()
	}
	if yyb4109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4109++
	if yyhl4109 {
		yyb4109 = yyj4109 > l
	} else {
		yyb4109 = r.CheckBreak()
	}
	if yyb4109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4109++
	if yyhl4109 {
		yyb4109 = yyj4109 > l
	} else {
		yyb4109 = r.CheckBreak()
	}
	if yyb4109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4112 := &x.ListMeta
		yym4113 := z.DecBinary()
		_ = yym4113
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4112) {
		} else {
			z.DecFallback(yyv4112, false)
		}
	}
	yyj4109++
	if yyhl4109 {
		yyb4109 = yyj4109 > l
	} else {
		yyb4109 = r.CheckBreak()
	}
	if yyb4109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4114 := &x.Items
		yym4115 := z.DecBinary()
		_ = yym4115
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv4114), d)
		}
	}
	for {
		yyj4109++
		if yyhl4109 {
			yyb4109 = yyj4109 > l
		} else {
			yyb4109 = r.CheckBreak()
		}
		if yyb4109 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4109-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4116 := z.EncBinary()
	_ = yym4116
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4117 := z.DecBinary()
	_ = yym4117
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4118 := z.EncBinary()
		_ = yym4118
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4119 := !z.EncBinary()
			yy2arr4119 := z.EncBasicHandle().StructToArray
			var yyq4119 [6]bool
			_, _, _ = yysep4119, yyq4119, yy2arr4119
			const yyr4119 bool = false
			yyq4119[0] = x.Type != ""
			yyq4119[1] = len(x.Max) != 0
			yyq4119[2] = len(x.Min) != 0
			yyq4119[3] = len(x.Default) != 0
			yyq4119[4] = len(x.DefaultRequest) != 0
			yyq4119[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4119 int
			if yyr4119 || yy2arr4119 {
				r.EncodeArrayStart(6)
			} else {
				yynn4119 = 0
				for _, b := range yyq4119 {
					if b {
						yynn4119++
					}
				}
				r.EncodeMapStart(yynn4119)
				yynn4119 = 0
			}
			if yyr4119 || yy2arr4119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4119[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4119[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4119 || yy2arr4119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4119[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4119[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4119 || yy2arr4119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4119[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4119[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4119 || yy2arr4119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4119[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4119[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4119 || yy2arr4119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4119[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4119[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4119 || yy2arr4119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4119[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4119[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4119 || yy2arr4119 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4126 := z.DecBinary()
	_ = yym4126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4127 := r.ContainerType()
		if yyct4127 == codecSelferValueTypeMap1234 {
			yyl4127 := r.ReadMapStart()
			if yyl4127 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4127, d)
			}
		} else if yyct4127 == codecSelferValueTypeArray1234 {
			yyl4127 := r.ReadArrayStart()
			if yyl4127 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4128Slc
	var yyhl4128 bool = l >= 0
	for yyj4128 := 0; ; yyj4128++ {
		if yyhl4128 {
			if yyj4128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4128Slc = r.DecodeBytes(yys4128Slc, true, true)
		yys4128 := string(yys4128Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4128 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4130 := &x.Max
				yyv4130.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4131 := &x.Min
				yyv4131.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4132 := &x.Default
				yyv4132.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4133 := &x.DefaultRequest
				yyv4133.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4134 := &x.MaxLimitRequestRatio
				yyv4134.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4128)
		} // end switch yys4128
	} // end for yyj4128
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4135 int
	var yyb4135 bool
	var yyhl4135 bool = l >= 0
	yyj4135++
	if yyhl4135 {
		yyb4135 = yyj4135 > l
	} else {
		yyb4135 = r.CheckBreak()
	}
	if yyb4135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4135++
	if yyhl4135 {
		yyb4135 = yyj4135 > l
	} else {
		yyb4135 = r.CheckBreak()
	}
	if yyb4135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4137 := &x.Max
		yyv4137.CodecDecodeSelf(d)
	}
	yyj4135++
	if yyhl4135 {
		yyb4135 = yyj4135 > l
	} else {
		yyb4135 = r.CheckBreak()
	}
	if yyb4135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4138 := &x.Min
		yyv4138.CodecDecodeSelf(d)
	}
	yyj4135++
	if yyhl4135 {
		yyb4135 = yyj4135 > l
	} else {
		yyb4135 = r.CheckBreak()
	}
	if yyb4135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4139 := &x.Default
		yyv4139.CodecDecodeSelf(d)
	}
	yyj4135++
	if yyhl4135 {
		yyb4135 = yyj4135 > l
	} else {
		yyb4135 = r.CheckBreak()
	}
	if yyb4135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4140 := &x.DefaultRequest
		yyv4140.CodecDecodeSelf(d)
	}
	yyj4135++
	if yyhl4135 {
		yyb4135 = yyj4135 > l
	} else {
		yyb4135 = r.CheckBreak()
	}
	if yyb4135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4141 := &x.MaxLimitRequestRatio
		yyv4141.CodecDecodeSelf(d)
	}
	for {
		yyj4135++
		if yyhl4135 {
			yyb4135 = yyj4135 > l
		} else {
			yyb4135 = r.CheckBreak()
		}
		if yyb4135 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4135-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4142 := z.EncBinary()
		_ = yym4142
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4143 := !z.EncBinary()
			yy2arr4143 := z.EncBasicHandle().StructToArray
			var yyq4143 [1]bool
			_, _, _ = yysep4143, yyq4143, yy2arr4143
			const yyr4143 bool = false
			var yynn4143 int
			if yyr4143 || yy2arr4143 {
				r.EncodeArrayStart(1)
			} else {
				yynn4143 = 1
				for _, b := range yyq4143 {
					if b {
						yynn4143++
					}
				}
				r.EncodeMapStart(yynn4143)
				yynn4143 = 0
			}
			if yyr4143 || yy2arr4143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4145 := z.EncBinary()
					_ = yym4145
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4146 := z.EncBinary()
					_ = yym4146
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4143 || yy2arr4143 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4147 := z.DecBinary()
	_ = yym4147
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4148 := r.ContainerType()
		if yyct4148 == codecSelferValueTypeMap1234 {
			yyl4148 := r.ReadMapStart()
			if yyl4148 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4148, d)
			}
		} else if yyct4148 == codecSelferValueTypeArray1234 {
			yyl4148 := r.ReadArrayStart()
			if yyl4148 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4148, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4149Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4149Slc
	var yyhl4149 bool = l >= 0
	for yyj4149 := 0; ; yyj4149++ {
		if yyhl4149 {
			if yyj4149 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4149Slc = r.DecodeBytes(yys4149Slc, true, true)
		yys4149 := string(yys4149Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4149 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4150 := &x.Limits
				yym4151 := z.DecBinary()
				_ = yym4151
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4150), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4149)
		} // end switch yys4149
	} // end for yyj4149
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4152 int
	var yyb4152 bool
	var yyhl4152 bool = l >= 0
	yyj4152++
	if yyhl4152 {
		yyb4152 = yyj4152 > l
	} else {
		yyb4152 = r.CheckBreak()
	}
	if yyb4152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4153 := &x.Limits
		yym4154 := z.DecBinary()
		_ = yym4154
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4153), d)
		}
	}
	for {
		yyj4152++
		if yyhl4152 {
			yyb4152 = yyj4152 > l
		} else {
			yyb4152 = r.CheckBreak()
		}
		if yyb4152 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4152-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4155 := z.EncBinary()
		_ = yym4155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4156 := !z.EncBinary()
			yy2arr4156 := z.EncBasicHandle().StructToArray
			var yyq4156 [4]bool
			_, _, _ = yysep4156, yyq4156, yy2arr4156
			const yyr4156 bool = false
			yyq4156[0] = x.Kind != ""
			yyq4156[1] = x.APIVersion != ""
			yyq4156[2] = true
			yyq4156[3] = true
			var yynn4156 int
			if yyr4156 || yy2arr4156 {
				r.EncodeArrayStart(4)
			} else {
				yynn4156 = 0
				for _, b := range yyq4156 {
					if b {
						yynn4156++
					}
				}
				r.EncodeMapStart(yynn4156)
				yynn4156 = 0
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[0] {
					yym4158 := z.EncBinary()
					_ = yym4158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4156[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4159 := z.EncBinary()
					_ = yym4159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[1] {
					yym4161 := z.EncBinary()
					_ = yym4161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4156[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4162 := z.EncBinary()
					_ = yym4162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[2] {
					yy4164 := &x.ObjectMeta
					yy4164.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4156[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4165 := &x.ObjectMeta
					yy4165.CodecEncodeSelf(e)
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[3] {
					yy4167 := &x.Spec
					yy4167.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4156[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4168 := &x.Spec
					yy4168.CodecEncodeSelf(e)
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4169 := z.DecBinary()
	_ = yym4169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4170 := r.ContainerType()
		if yyct4170 == codecSelferValueTypeMap1234 {
			yyl4170 := r.ReadMapStart()
			if yyl4170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4170, d)
			}
		} else if yyct4170 == codecSelferValueTypeArray1234 {
			yyl4170 := r.ReadArrayStart()
			if yyl4170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4171Slc
	var yyhl4171 bool = l >= 0
	for yyj4171 := 0; ; yyj4171++ {
		if yyhl4171 {
			if yyj4171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4171Slc = r.DecodeBytes(yys4171Slc, true, true)
		yys4171 := string(yys4171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4171 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4174 := &x.ObjectMeta
				yyv4174.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4175 := &x.Spec
				yyv4175.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4171)
		} // end switch yys4171
	} // end for yyj4171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4176 int
	var yyb4176 bool
	var yyhl4176 bool = l >= 0
	yyj4176++
	if yyhl4176 {
		yyb4176 = yyj4176 > l
	} else {
		yyb4176 = r.CheckBreak()
	}
	if yyb4176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4176++
	if yyhl4176 {
		yyb4176 = yyj4176 > l
	} else {
		yyb4176 = r.CheckBreak()
	}
	if yyb4176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4176++
	if yyhl4176 {
		yyb4176 = yyj4176 > l
	} else {
		yyb4176 = r.CheckBreak()
	}
	if yyb4176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4179 := &x.ObjectMeta
		yyv4179.CodecDecodeSelf(d)
	}
	yyj4176++
	if yyhl4176 {
		yyb4176 = yyj4176 > l
	} else {
		yyb4176 = r.CheckBreak()
	}
	if yyb4176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4180 := &x.Spec
		yyv4180.CodecDecodeSelf(d)
	}
	for {
		yyj4176++
		if yyhl4176 {
			yyb4176 = yyj4176 > l
		} else {
			yyb4176 = r.CheckBreak()
		}
		if yyb4176 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4176-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4181 := z.EncBinary()
		_ = yym4181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4182 := !z.EncBinary()
			yy2arr4182 := z.EncBasicHandle().StructToArray
			var yyq4182 [4]bool
			_, _, _ = yysep4182, yyq4182, yy2arr4182
			const yyr4182 bool = false
			yyq4182[0] = x.Kind != ""
			yyq4182[1] = x.APIVersion != ""
			yyq4182[2] = true
			var yynn4182 int
			if yyr4182 || yy2arr4182 {
				r.EncodeArrayStart(4)
			} else {
				yynn4182 = 1
				for _, b := range yyq4182 {
					if b {
						yynn4182++
					}
				}
				r.EncodeMapStart(yynn4182)
				yynn4182 = 0
			}
			if yyr4182 || yy2arr4182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4182[0] {
					yym4184 := z.EncBinary()
					_ = yym4184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4182[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4185 := z.EncBinary()
					_ = yym4185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4182 || yy2arr4182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4182[1] {
					yym4187 := z.EncBinary()
					_ = yym4187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4182[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4188 := z.EncBinary()
					_ = yym4188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4182 || yy2arr4182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4182[2] {
					yy4190 := &x.ListMeta
					yym4191 := z.EncBinary()
					_ = yym4191
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4190) {
					} else {
						z.EncFallback(yy4190)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4182[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4192 := &x.ListMeta
					yym4193 := z.EncBinary()
					_ = yym4193
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4192) {
					} else {
						z.EncFallback(yy4192)
					}
				}
			}
			if yyr4182 || yy2arr4182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4195 := z.EncBinary()
					_ = yym4195
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4196 := z.EncBinary()
					_ = yym4196
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4182 || yy2arr4182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4197 := z.DecBinary()
	_ = yym4197
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4198 := r.ContainerType()
		if yyct4198 == codecSelferValueTypeMap1234 {
			yyl4198 := r.ReadMapStart()
			if yyl4198 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4198, d)
			}
		} else if yyct4198 == codecSelferValueTypeArray1234 {
			yyl4198 := r.ReadArrayStart()
			if yyl4198 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4198, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4199Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4199Slc
	var yyhl4199 bool = l >= 0
	for yyj4199 := 0; ; yyj4199++ {
		if yyhl4199 {
			if yyj4199 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4199Slc = r.DecodeBytes(yys4199Slc, true, true)
		yys4199 := string(yys4199Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4199 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4202 := &x.ListMeta
				yym4203 := z.DecBinary()
				_ = yym4203
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4202) {
				} else {
					z.DecFallback(yyv4202, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4204 := &x.Items
				yym4205 := z.DecBinary()
				_ = yym4205
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4204), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4199)
		} // end switch yys4199
	} // end for yyj4199
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4206 int
	var yyb4206 bool
	var yyhl4206 bool = l >= 0
	yyj4206++
	if yyhl4206 {
		yyb4206 = yyj4206 > l
	} else {
		yyb4206 = r.CheckBreak()
	}
	if yyb4206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4206++
	if yyhl4206 {
		yyb4206 = yyj4206 > l
	} else {
		yyb4206 = r.CheckBreak()
	}
	if yyb4206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4206++
	if yyhl4206 {
		yyb4206 = yyj4206 > l
	} else {
		yyb4206 = r.CheckBreak()
	}
	if yyb4206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4209 := &x.ListMeta
		yym4210 := z.DecBinary()
		_ = yym4210
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4209) {
		} else {
			z.DecFallback(yyv4209, false)
		}
	}
	yyj4206++
	if yyhl4206 {
		yyb4206 = yyj4206 > l
	} else {
		yyb4206 = r.CheckBreak()
	}
	if yyb4206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4211 := &x.Items
		yym4212 := z.DecBinary()
		_ = yym4212
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4211), d)
		}
	}
	for {
		yyj4206++
		if yyhl4206 {
			yyb4206 = yyj4206 > l
		} else {
			yyb4206 = r.CheckBreak()
		}
		if yyb4206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4213 := z.EncBinary()
	_ = yym4213
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4214 := z.DecBinary()
	_ = yym4214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4215 := z.EncBinary()
		_ = yym4215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4216 := !z.EncBinary()
			yy2arr4216 := z.EncBasicHandle().StructToArray
			var yyq4216 [2]bool
			_, _, _ = yysep4216, yyq4216, yy2arr4216
			const yyr4216 bool = false
			yyq4216[0] = len(x.Hard) != 0
			yyq4216[1] = len(x.Scopes) != 0
			var yynn4216 int
			if yyr4216 || yy2arr4216 {
				r.EncodeArrayStart(2)
			} else {
				yynn4216 = 0
				for _, b := range yyq4216 {
					if b {
						yynn4216++
					}
				}
				r.EncodeMapStart(yynn4216)
				yynn4216 = 0
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4216[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4216[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4216[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4219 := z.EncBinary()
						_ = yym4219
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4216[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4220 := z.EncBinary()
						_ = yym4220
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4221 := z.DecBinary()
	_ = yym4221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4222 := r.ContainerType()
		if yyct4222 == codecSelferValueTypeMap1234 {
			yyl4222 := r.ReadMapStart()
			if yyl4222 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4222, d)
			}
		} else if yyct4222 == codecSelferValueTypeArray1234 {
			yyl4222 := r.ReadArrayStart()
			if yyl4222 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4222, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4223Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4223Slc
	var yyhl4223 bool = l >= 0
	for yyj4223 := 0; ; yyj4223++ {
		if yyhl4223 {
			if yyj4223 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4223Slc = r.DecodeBytes(yys4223Slc, true, true)
		yys4223 := string(yys4223Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4223 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4224 := &x.Hard
				yyv4224.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4225 := &x.Scopes
				yym4226 := z.DecBinary()
				_ = yym4226
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4225), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4223)
		} // end switch yys4223
	} // end for yyj4223
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4227 int
	var yyb4227 bool
	var yyhl4227 bool = l >= 0
	yyj4227++
	if yyhl4227 {
		yyb4227 = yyj4227 > l
	} else {
		yyb4227 = r.CheckBreak()
	}
	if yyb4227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4228 := &x.Hard
		yyv4228.CodecDecodeSelf(d)
	}
	yyj4227++
	if yyhl4227 {
		yyb4227 = yyj4227 > l
	} else {
		yyb4227 = r.CheckBreak()
	}
	if yyb4227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4229 := &x.Scopes
		yym4230 := z.DecBinary()
		_ = yym4230
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4229), d)
		}
	}
	for {
		yyj4227++
		if yyhl4227 {
			yyb4227 = yyj4227 > l
		} else {
			yyb4227 = r.CheckBreak()
		}
		if yyb4227 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4227-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4231 := z.EncBinary()
		_ = yym4231
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4232 := !z.EncBinary()
			yy2arr4232 := z.EncBasicHandle().StructToArray
			var yyq4232 [2]bool
			_, _, _ = yysep4232, yyq4232, yy2arr4232
			const yyr4232 bool = false
			yyq4232[0] = len(x.Hard) != 0
			yyq4232[1] = len(x.Used) != 0
			var yynn4232 int
			if yyr4232 || yy2arr4232 {
				r.EncodeArrayStart(2)
			} else {
				yynn4232 = 0
				for _, b := range yyq4232 {
					if b {
						yynn4232++
					}
				}
				r.EncodeMapStart(yynn4232)
				yynn4232 = 0
			}
			if yyr4232 || yy2arr4232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4232[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4232[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4232 || yy2arr4232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4232[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4232[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4232 || yy2arr4232 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4235 := z.DecBinary()
	_ = yym4235
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4236 := r.ContainerType()
		if yyct4236 == codecSelferValueTypeMap1234 {
			yyl4236 := r.ReadMapStart()
			if yyl4236 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4236, d)
			}
		} else if yyct4236 == codecSelferValueTypeArray1234 {
			yyl4236 := r.ReadArrayStart()
			if yyl4236 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4236, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4237Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4237Slc
	var yyhl4237 bool = l >= 0
	for yyj4237 := 0; ; yyj4237++ {
		if yyhl4237 {
			if yyj4237 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4237Slc = r.DecodeBytes(yys4237Slc, true, true)
		yys4237 := string(yys4237Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4237 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4238 := &x.Hard
				yyv4238.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4239 := &x.Used
				yyv4239.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4237)
		} // end switch yys4237
	} // end for yyj4237
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4240 int
	var yyb4240 bool
	var yyhl4240 bool = l >= 0
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4241 := &x.Hard
		yyv4241.CodecDecodeSelf(d)
	}
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4242 := &x.Used
		yyv4242.CodecDecodeSelf(d)
	}
	for {
		yyj4240++
		if yyhl4240 {
			yyb4240 = yyj4240 > l
		} else {
			yyb4240 = r.CheckBreak()
		}
		if yyb4240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4243 := z.EncBinary()
		_ = yym4243
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4244 := !z.EncBinary()
			yy2arr4244 := z.EncBasicHandle().StructToArray
			var yyq4244 [5]bool
			_, _, _ = yysep4244, yyq4244, yy2arr4244
			const yyr4244 bool = false
			yyq4244[0] = x.Kind != ""
			yyq4244[1] = x.APIVersion != ""
			yyq4244[2] = true
			yyq4244[3] = true
			yyq4244[4] = true
			var yynn4244 int
			if yyr4244 || yy2arr4244 {
				r.EncodeArrayStart(5)
			} else {
				yynn4244 = 0
				for _, b := range yyq4244 {
					if b {
						yynn4244++
					}
				}
				r.EncodeMapStart(yynn4244)
				yynn4244 = 0
			}
			if yyr4244 || yy2arr4244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4244[0] {
					yym4246 := z.EncBinary()
					_ = yym4246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4244[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4247 := z.EncBinary()
					_ = yym4247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4244 || yy2arr4244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4244[1] {
					yym4249 := z.EncBinary()
					_ = yym4249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4244[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4250 := z.EncBinary()
					_ = yym4250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4244 || yy2arr4244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4244[2] {
					yy4252 := &x.ObjectMeta
					yy4252.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4244[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4253 := &x.ObjectMeta
					yy4253.CodecEncodeSelf(e)
				}
			}
			if yyr4244 || yy2arr4244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4244[3] {
					yy4255 := &x.Spec
					yy4255.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4244[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4256 := &x.Spec
					yy4256.CodecEncodeSelf(e)
				}
			}
			if yyr4244 || yy2arr4244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4244[4] {
					yy4258 := &x.Status
					yy4258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4244[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4259 := &x.Status
					yy4259.CodecEncodeSelf(e)
				}
			}
			if yyr4244 || yy2arr4244 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4260 := z.DecBinary()
	_ = yym4260
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4261 := r.ContainerType()
		if yyct4261 == codecSelferValueTypeMap1234 {
			yyl4261 := r.ReadMapStart()
			if yyl4261 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4261, d)
			}
		} else if yyct4261 == codecSelferValueTypeArray1234 {
			yyl4261 := r.ReadArrayStart()
			if yyl4261 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4261, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4262Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4262Slc
	var yyhl4262 bool = l >= 0
	for yyj4262 := 0; ; yyj4262++ {
		if yyhl4262 {
			if yyj4262 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4262Slc = r.DecodeBytes(yys4262Slc, true, true)
		yys4262 := string(yys4262Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4262 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4265 := &x.ObjectMeta
				yyv4265.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4266 := &x.Spec
				yyv4266.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4267 := &x.Status
				yyv4267.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4262)
		} // end switch yys4262
	} // end for yyj4262
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4268 int
	var yyb4268 bool
	var yyhl4268 bool = l >= 0
	yyj4268++
	if yyhl4268 {
		yyb4268 = yyj4268 > l
	} else {
		yyb4268 = r.CheckBreak()
	}
	if yyb4268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4268++
	if yyhl4268 {
		yyb4268 = yyj4268 > l
	} else {
		yyb4268 = r.CheckBreak()
	}
	if yyb4268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4268++
	if yyhl4268 {
		yyb4268 = yyj4268 > l
	} else {
		yyb4268 = r.CheckBreak()
	}
	if yyb4268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4271 := &x.ObjectMeta
		yyv4271.CodecDecodeSelf(d)
	}
	yyj4268++
	if yyhl4268 {
		yyb4268 = yyj4268 > l
	} else {
		yyb4268 = r.CheckBreak()
	}
	if yyb4268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4272 := &x.Spec
		yyv4272.CodecDecodeSelf(d)
	}
	yyj4268++
	if yyhl4268 {
		yyb4268 = yyj4268 > l
	} else {
		yyb4268 = r.CheckBreak()
	}
	if yyb4268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4273 := &x.Status
		yyv4273.CodecDecodeSelf(d)
	}
	for {
		yyj4268++
		if yyhl4268 {
			yyb4268 = yyj4268 > l
		} else {
			yyb4268 = r.CheckBreak()
		}
		if yyb4268 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4268-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4274 := z.EncBinary()
		_ = yym4274
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4275 := !z.EncBinary()
			yy2arr4275 := z.EncBasicHandle().StructToArray
			var yyq4275 [4]bool
			_, _, _ = yysep4275, yyq4275, yy2arr4275
			const yyr4275 bool = false
			yyq4275[0] = x.Kind != ""
			yyq4275[1] = x.APIVersion != ""
			yyq4275[2] = true
			var yynn4275 int
			if yyr4275 || yy2arr4275 {
				r.EncodeArrayStart(4)
			} else {
				yynn4275 = 1
				for _, b := range yyq4275 {
					if b {
						yynn4275++
					}
				}
				r.EncodeMapStart(yynn4275)
				yynn4275 = 0
			}
			if yyr4275 || yy2arr4275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4275[0] {
					yym4277 := z.EncBinary()
					_ = yym4277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4275[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4278 := z.EncBinary()
					_ = yym4278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4275 || yy2arr4275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4275[1] {
					yym4280 := z.EncBinary()
					_ = yym4280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4275[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4281 := z.EncBinary()
					_ = yym4281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4275 || yy2arr4275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4275[2] {
					yy4283 := &x.ListMeta
					yym4284 := z.EncBinary()
					_ = yym4284
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4283) {
					} else {
						z.EncFallback(yy4283)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4275[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4285 := &x.ListMeta
					yym4286 := z.EncBinary()
					_ = yym4286
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4285) {
					} else {
						z.EncFallback(yy4285)
					}
				}
			}
			if yyr4275 || yy2arr4275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4288 := z.EncBinary()
					_ = yym4288
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4289 := z.EncBinary()
					_ = yym4289
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4275 || yy2arr4275 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4290 := z.DecBinary()
	_ = yym4290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4291 := r.ContainerType()
		if yyct4291 == codecSelferValueTypeMap1234 {
			yyl4291 := r.ReadMapStart()
			if yyl4291 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4291, d)
			}
		} else if yyct4291 == codecSelferValueTypeArray1234 {
			yyl4291 := r.ReadArrayStart()
			if yyl4291 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4291, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4292Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4292Slc
	var yyhl4292 bool = l >= 0
	for yyj4292 := 0; ; yyj4292++ {
		if yyhl4292 {
			if yyj4292 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4292Slc = r.DecodeBytes(yys4292Slc, true, true)
		yys4292 := string(yys4292Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4292 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4295 := &x.ListMeta
				yym4296 := z.DecBinary()
				_ = yym4296
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4295) {
				} else {
					z.DecFallback(yyv4295, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4297 := &x.Items
				yym4298 := z.DecBinary()
				_ = yym4298
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4297), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4292)
		} // end switch yys4292
	} // end for yyj4292
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4299 int
	var yyb4299 bool
	var yyhl4299 bool = l >= 0
	yyj4299++
	if yyhl4299 {
		yyb4299 = yyj4299 > l
	} else {
		yyb4299 = r.CheckBreak()
	}
	if yyb4299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4299++
	if yyhl4299 {
		yyb4299 = yyj4299 > l
	} else {
		yyb4299 = r.CheckBreak()
	}
	if yyb4299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4299++
	if yyhl4299 {
		yyb4299 = yyj4299 > l
	} else {
		yyb4299 = r.CheckBreak()
	}
	if yyb4299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4302 := &x.ListMeta
		yym4303 := z.DecBinary()
		_ = yym4303
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4302) {
		} else {
			z.DecFallback(yyv4302, false)
		}
	}
	yyj4299++
	if yyhl4299 {
		yyb4299 = yyj4299 > l
	} else {
		yyb4299 = r.CheckBreak()
	}
	if yyb4299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4304 := &x.Items
		yym4305 := z.DecBinary()
		_ = yym4305
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4304), d)
		}
	}
	for {
		yyj4299++
		if yyhl4299 {
			yyb4299 = yyj4299 > l
		} else {
			yyb4299 = r.CheckBreak()
		}
		if yyb4299 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4299-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4306 := z.EncBinary()
		_ = yym4306
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4307 := !z.EncBinary()
			yy2arr4307 := z.EncBasicHandle().StructToArray
			var yyq4307 [6]bool
			_, _, _ = yysep4307, yyq4307, yy2arr4307
			const yyr4307 bool = false
			yyq4307[0] = x.Kind != ""
			yyq4307[1] = x.APIVersion != ""
			yyq4307[2] = true
			yyq4307[3] = len(x.Data) != 0
			yyq4307[4] = len(x.StringData) != 0
			yyq4307[5] = x.Type != ""
			var yynn4307 int
			if yyr4307 || yy2arr4307 {
				r.EncodeArrayStart(6)
			} else {
				yynn4307 = 0
				for _, b := range yyq4307 {
					if b {
						yynn4307++
					}
				}
				r.EncodeMapStart(yynn4307)
				yynn4307 = 0
			}
			if yyr4307 || yy2arr4307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4307[0] {
					yym4309 := z.EncBinary()
					_ = yym4309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4307[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4310 := z.EncBinary()
					_ = yym4310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4307 || yy2arr4307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4307[1] {
					yym4312 := z.EncBinary()
					_ = yym4312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4307[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4313 := z.EncBinary()
					_ = yym4313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4307 || yy2arr4307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4307[2] {
					yy4315 := &x.ObjectMeta
					yy4315.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4307[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4316 := &x.ObjectMeta
					yy4316.CodecEncodeSelf(e)
				}
			}
			if yyr4307 || yy2arr4307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4307[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4318 := z.EncBinary()
						_ = yym4318
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4307[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4319 := z.EncBinary()
						_ = yym4319
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4307 || yy2arr4307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4307[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4321 := z.EncBinary()
						_ = yym4321
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4307[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4322 := z.EncBinary()
						_ = yym4322
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4307 || yy2arr4307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4307[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4307[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4307 || yy2arr4307 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4324 := z.DecBinary()
	_ = yym4324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4325 := r.ContainerType()
		if yyct4325 == codecSelferValueTypeMap1234 {
			yyl4325 := r.ReadMapStart()
			if yyl4325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4325, d)
			}
		} else if yyct4325 == codecSelferValueTypeArray1234 {
			yyl4325 := r.ReadArrayStart()
			if yyl4325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4326Slc
	var yyhl4326 bool = l >= 0
	for yyj4326 := 0; ; yyj4326++ {
		if yyhl4326 {
			if yyj4326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4326Slc = r.DecodeBytes(yys4326Slc, true, true)
		yys4326 := string(yys4326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4326 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4329 := &x.ObjectMeta
				yyv4329.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4330 := &x.Data
				yym4331 := z.DecBinary()
				_ = yym4331
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4330), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4332 := &x.StringData
				yym4333 := z.DecBinary()
				_ = yym4333
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4332, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4326)
		} // end switch yys4326
	} // end for yyj4326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4335 int
	var yyb4335 bool
	var yyhl4335 bool = l >= 0
	yyj4335++
	if yyhl4335 {
		yyb4335 = yyj4335 > l
	} else {
		yyb4335 = r.CheckBreak()
	}
	if yyb4335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4335++
	if yyhl4335 {
		yyb4335 = yyj4335 > l
	} else {
		yyb4335 = r.CheckBreak()
	}
	if yyb4335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4335++
	if yyhl4335 {
		yyb4335 = yyj4335 > l
	} else {
		yyb4335 = r.CheckBreak()
	}
	if yyb4335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4338 := &x.ObjectMeta
		yyv4338.CodecDecodeSelf(d)
	}
	yyj4335++
	if yyhl4335 {
		yyb4335 = yyj4335 > l
	} else {
		yyb4335 = r.CheckBreak()
	}
	if yyb4335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4339 := &x.Data
		yym4340 := z.DecBinary()
		_ = yym4340
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4339), d)
		}
	}
	yyj4335++
	if yyhl4335 {
		yyb4335 = yyj4335 > l
	} else {
		yyb4335 = r.CheckBreak()
	}
	if yyb4335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4341 := &x.StringData
		yym4342 := z.DecBinary()
		_ = yym4342
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4341, false, d)
		}
	}
	yyj4335++
	if yyhl4335 {
		yyb4335 = yyj4335 > l
	} else {
		yyb4335 = r.CheckBreak()
	}
	if yyb4335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4335++
		if yyhl4335 {
			yyb4335 = yyj4335 > l
		} else {
			yyb4335 = r.CheckBreak()
		}
		if yyb4335 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4335-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4344 := z.EncBinary()
	_ = yym4344
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4345 := z.DecBinary()
	_ = yym4345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4346 := z.EncBinary()
		_ = yym4346
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4347 := !z.EncBinary()
			yy2arr4347 := z.EncBasicHandle().StructToArray
			var yyq4347 [4]bool
			_, _, _ = yysep4347, yyq4347, yy2arr4347
			const yyr4347 bool = false
			yyq4347[0] = x.Kind != ""
			yyq4347[1] = x.APIVersion != ""
			yyq4347[2] = true
			var yynn4347 int
			if yyr4347 || yy2arr4347 {
				r.EncodeArrayStart(4)
			} else {
				yynn4347 = 1
				for _, b := range yyq4347 {
					if b {
						yynn4347++
					}
				}
				r.EncodeMapStart(yynn4347)
				yynn4347 = 0
			}
			if yyr4347 || yy2arr4347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4347[0] {
					yym4349 := z.EncBinary()
					_ = yym4349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4347[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4350 := z.EncBinary()
					_ = yym4350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4347 || yy2arr4347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4347[1] {
					yym4352 := z.EncBinary()
					_ = yym4352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4347[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4353 := z.EncBinary()
					_ = yym4353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4347 || yy2arr4347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4347[2] {
					yy4355 := &x.ListMeta
					yym4356 := z.EncBinary()
					_ = yym4356
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4355) {
					} else {
						z.EncFallback(yy4355)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4347[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4357 := &x.ListMeta
					yym4358 := z.EncBinary()
					_ = yym4358
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4357) {
					} else {
						z.EncFallback(yy4357)
					}
				}
			}
			if yyr4347 || yy2arr4347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4360 := z.EncBinary()
					_ = yym4360
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4361 := z.EncBinary()
					_ = yym4361
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4347 || yy2arr4347 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4362 := z.DecBinary()
	_ = yym4362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4363 := r.ContainerType()
		if yyct4363 == codecSelferValueTypeMap1234 {
			yyl4363 := r.ReadMapStart()
			if yyl4363 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4363, d)
			}
		} else if yyct4363 == codecSelferValueTypeArray1234 {
			yyl4363 := r.ReadArrayStart()
			if yyl4363 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4363, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4364Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4364Slc
	var yyhl4364 bool = l >= 0
	for yyj4364 := 0; ; yyj4364++ {
		if yyhl4364 {
			if yyj4364 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4364Slc = r.DecodeBytes(yys4364Slc, true, true)
		yys4364 := string(yys4364Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4364 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4367 := &x.ListMeta
				yym4368 := z.DecBinary()
				_ = yym4368
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4367) {
				} else {
					z.DecFallback(yyv4367, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4369 := &x.Items
				yym4370 := z.DecBinary()
				_ = yym4370
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4369), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4364)
		} // end switch yys4364
	} // end for yyj4364
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4371 int
	var yyb4371 bool
	var yyhl4371 bool = l >= 0
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4374 := &x.ListMeta
		yym4375 := z.DecBinary()
		_ = yym4375
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4374) {
		} else {
			z.DecFallback(yyv4374, false)
		}
	}
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4376 := &x.Items
		yym4377 := z.DecBinary()
		_ = yym4377
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4376), d)
		}
	}
	for {
		yyj4371++
		if yyhl4371 {
			yyb4371 = yyj4371 > l
		} else {
			yyb4371 = r.CheckBreak()
		}
		if yyb4371 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4371-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4378 := z.EncBinary()
		_ = yym4378
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4379 := !z.EncBinary()
			yy2arr4379 := z.EncBasicHandle().StructToArray
			var yyq4379 [4]bool
			_, _, _ = yysep4379, yyq4379, yy2arr4379
			const yyr4379 bool = false
			yyq4379[0] = x.Kind != ""
			yyq4379[1] = x.APIVersion != ""
			yyq4379[2] = true
			yyq4379[3] = len(x.Data) != 0
			var yynn4379 int
			if yyr4379 || yy2arr4379 {
				r.EncodeArrayStart(4)
			} else {
				yynn4379 = 0
				for _, b := range yyq4379 {
					if b {
						yynn4379++
					}
				}
				r.EncodeMapStart(yynn4379)
				yynn4379 = 0
			}
			if yyr4379 || yy2arr4379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4379[0] {
					yym4381 := z.EncBinary()
					_ = yym4381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4379[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4382 := z.EncBinary()
					_ = yym4382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4379 || yy2arr4379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4379[1] {
					yym4384 := z.EncBinary()
					_ = yym4384
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4379[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4385 := z.EncBinary()
					_ = yym4385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4379 || yy2arr4379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4379[2] {
					yy4387 := &x.ObjectMeta
					yy4387.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4379[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4388 := &x.ObjectMeta
					yy4388.CodecEncodeSelf(e)
				}
			}
			if yyr4379 || yy2arr4379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4379[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4390 := z.EncBinary()
						_ = yym4390
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4379[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4391 := z.EncBinary()
						_ = yym4391
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4379 || yy2arr4379 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4392 := z.DecBinary()
	_ = yym4392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4393 := r.ContainerType()
		if yyct4393 == codecSelferValueTypeMap1234 {
			yyl4393 := r.ReadMapStart()
			if yyl4393 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4393, d)
			}
		} else if yyct4393 == codecSelferValueTypeArray1234 {
			yyl4393 := r.ReadArrayStart()
			if yyl4393 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4393, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4394Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4394Slc
	var yyhl4394 bool = l >= 0
	for yyj4394 := 0; ; yyj4394++ {
		if yyhl4394 {
			if yyj4394 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4394Slc = r.DecodeBytes(yys4394Slc, true, true)
		yys4394 := string(yys4394Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4394 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4397 := &x.ObjectMeta
				yyv4397.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4398 := &x.Data
				yym4399 := z.DecBinary()
				_ = yym4399
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4398, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4394)
		} // end switch yys4394
	} // end for yyj4394
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4400 int
	var yyb4400 bool
	var yyhl4400 bool = l >= 0
	yyj4400++
	if yyhl4400 {
		yyb4400 = yyj4400 > l
	} else {
		yyb4400 = r.CheckBreak()
	}
	if yyb4400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4400++
	if yyhl4400 {
		yyb4400 = yyj4400 > l
	} else {
		yyb4400 = r.CheckBreak()
	}
	if yyb4400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4400++
	if yyhl4400 {
		yyb4400 = yyj4400 > l
	} else {
		yyb4400 = r.CheckBreak()
	}
	if yyb4400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4403 := &x.ObjectMeta
		yyv4403.CodecDecodeSelf(d)
	}
	yyj4400++
	if yyhl4400 {
		yyb4400 = yyj4400 > l
	} else {
		yyb4400 = r.CheckBreak()
	}
	if yyb4400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4404 := &x.Data
		yym4405 := z.DecBinary()
		_ = yym4405
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4404, false, d)
		}
	}
	for {
		yyj4400++
		if yyhl4400 {
			yyb4400 = yyj4400 > l
		} else {
			yyb4400 = r.CheckBreak()
		}
		if yyb4400 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4400-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4406 := z.EncBinary()
		_ = yym4406
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4407 := !z.EncBinary()
			yy2arr4407 := z.EncBasicHandle().StructToArray
			var yyq4407 [4]bool
			_, _, _ = yysep4407, yyq4407, yy2arr4407
			const yyr4407 bool = false
			yyq4407[0] = x.Kind != ""
			yyq4407[1] = x.APIVersion != ""
			yyq4407[2] = true
			var yynn4407 int
			if yyr4407 || yy2arr4407 {
				r.EncodeArrayStart(4)
			} else {
				yynn4407 = 1
				for _, b := range yyq4407 {
					if b {
						yynn4407++
					}
				}
				r.EncodeMapStart(yynn4407)
				yynn4407 = 0
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[0] {
					yym4409 := z.EncBinary()
					_ = yym4409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4407[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4410 := z.EncBinary()
					_ = yym4410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[1] {
					yym4412 := z.EncBinary()
					_ = yym4412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4407[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4413 := z.EncBinary()
					_ = yym4413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[2] {
					yy4415 := &x.ListMeta
					yym4416 := z.EncBinary()
					_ = yym4416
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4415) {
					} else {
						z.EncFallback(yy4415)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4407[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4417 := &x.ListMeta
					yym4418 := z.EncBinary()
					_ = yym4418
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4417) {
					} else {
						z.EncFallback(yy4417)
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4420 := z.EncBinary()
					_ = yym4420
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4421 := z.EncBinary()
					_ = yym4421
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4422 := z.DecBinary()
	_ = yym4422
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4423 := r.ContainerType()
		if yyct4423 == codecSelferValueTypeMap1234 {
			yyl4423 := r.ReadMapStart()
			if yyl4423 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4423, d)
			}
		} else if yyct4423 == codecSelferValueTypeArray1234 {
			yyl4423 := r.ReadArrayStart()
			if yyl4423 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4423, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4424Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4424Slc
	var yyhl4424 bool = l >= 0
	for yyj4424 := 0; ; yyj4424++ {
		if yyhl4424 {
			if yyj4424 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4424Slc = r.DecodeBytes(yys4424Slc, true, true)
		yys4424 := string(yys4424Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4424 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4427 := &x.ListMeta
				yym4428 := z.DecBinary()
				_ = yym4428
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4427) {
				} else {
					z.DecFallback(yyv4427, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4429 := &x.Items
				yym4430 := z.DecBinary()
				_ = yym4430
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4429), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4424)
		} // end switch yys4424
	} // end for yyj4424
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4431 int
	var yyb4431 bool
	var yyhl4431 bool = l >= 0
	yyj4431++
	if yyhl4431 {
		yyb4431 = yyj4431 > l
	} else {
		yyb4431 = r.CheckBreak()
	}
	if yyb4431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4431++
	if yyhl4431 {
		yyb4431 = yyj4431 > l
	} else {
		yyb4431 = r.CheckBreak()
	}
	if yyb4431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4431++
	if yyhl4431 {
		yyb4431 = yyj4431 > l
	} else {
		yyb4431 = r.CheckBreak()
	}
	if yyb4431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4434 := &x.ListMeta
		yym4435 := z.DecBinary()
		_ = yym4435
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4434) {
		} else {
			z.DecFallback(yyv4434, false)
		}
	}
	yyj4431++
	if yyhl4431 {
		yyb4431 = yyj4431 > l
	} else {
		yyb4431 = r.CheckBreak()
	}
	if yyb4431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4436 := &x.Items
		yym4437 := z.DecBinary()
		_ = yym4437
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4436), d)
		}
	}
	for {
		yyj4431++
		if yyhl4431 {
			yyb4431 = yyj4431 > l
		} else {
			yyb4431 = r.CheckBreak()
		}
		if yyb4431 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4431-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4438 := z.EncBinary()
	_ = yym4438
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4439 := z.DecBinary()
	_ = yym4439
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4440 := z.EncBinary()
		_ = yym4440
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4441 := !z.EncBinary()
			yy2arr4441 := z.EncBasicHandle().StructToArray
			var yyq4441 [4]bool
			_, _, _ = yysep4441, yyq4441, yy2arr4441
			const yyr4441 bool = false
			yyq4441[2] = x.Message != ""
			yyq4441[3] = x.Error != ""
			var yynn4441 int
			if yyr4441 || yy2arr4441 {
				r.EncodeArrayStart(4)
			} else {
				yynn4441 = 2
				for _, b := range yyq4441 {
					if b {
						yynn4441++
					}
				}
				r.EncodeMapStart(yynn4441)
				yynn4441 = 0
			}
			if yyr4441 || yy2arr4441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4441 || yy2arr4441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4441 || yy2arr4441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4441[2] {
					yym4445 := z.EncBinary()
					_ = yym4445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4441[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4446 := z.EncBinary()
					_ = yym4446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4441 || yy2arr4441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4441[3] {
					yym4448 := z.EncBinary()
					_ = yym4448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4441[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4449 := z.EncBinary()
					_ = yym4449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4441 || yy2arr4441 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4450 := z.DecBinary()
	_ = yym4450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4451 := r.ContainerType()
		if yyct4451 == codecSelferValueTypeMap1234 {
			yyl4451 := r.ReadMapStart()
			if yyl4451 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4451, d)
			}
		} else if yyct4451 == codecSelferValueTypeArray1234 {
			yyl4451 := r.ReadArrayStart()
			if yyl4451 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4452Slc
	var yyhl4452 bool = l >= 0
	for yyj4452 := 0; ; yyj4452++ {
		if yyhl4452 {
			if yyj4452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4452Slc = r.DecodeBytes(yys4452Slc, true, true)
		yys4452 := string(yys4452Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4452 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4452)
		} // end switch yys4452
	} // end for yyj4452
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4457 int
	var yyb4457 bool
	var yyhl4457 bool = l >= 0
	yyj4457++
	if yyhl4457 {
		yyb4457 = yyj4457 > l
	} else {
		yyb4457 = r.CheckBreak()
	}
	if yyb4457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4457++
	if yyhl4457 {
		yyb4457 = yyj4457 > l
	} else {
		yyb4457 = r.CheckBreak()
	}
	if yyb4457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4457++
	if yyhl4457 {
		yyb4457 = yyj4457 > l
	} else {
		yyb4457 = r.CheckBreak()
	}
	if yyb4457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4457++
	if yyhl4457 {
		yyb4457 = yyj4457 > l
	} else {
		yyb4457 = r.CheckBreak()
	}
	if yyb4457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4457++
		if yyhl4457 {
			yyb4457 = yyj4457 > l
		} else {
			yyb4457 = r.CheckBreak()
		}
		if yyb4457 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4457-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4462 := z.EncBinary()
		_ = yym4462
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4463 := !z.EncBinary()
			yy2arr4463 := z.EncBasicHandle().StructToArray
			var yyq4463 [4]bool
			_, _, _ = yysep4463, yyq4463, yy2arr4463
			const yyr4463 bool = false
			yyq4463[0] = x.Kind != ""
			yyq4463[1] = x.APIVersion != ""
			yyq4463[2] = true
			yyq4463[3] = len(x.Conditions) != 0
			var yynn4463 int
			if yyr4463 || yy2arr4463 {
				r.EncodeArrayStart(4)
			} else {
				yynn4463 = 0
				for _, b := range yyq4463 {
					if b {
						yynn4463++
					}
				}
				r.EncodeMapStart(yynn4463)
				yynn4463 = 0
			}
			if yyr4463 || yy2arr4463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4463[0] {
					yym4465 := z.EncBinary()
					_ = yym4465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4463[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4466 := z.EncBinary()
					_ = yym4466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4463 || yy2arr4463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4463[1] {
					yym4468 := z.EncBinary()
					_ = yym4468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4463[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4469 := z.EncBinary()
					_ = yym4469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4463 || yy2arr4463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4463[2] {
					yy4471 := &x.ObjectMeta
					yy4471.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4463[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4472 := &x.ObjectMeta
					yy4472.CodecEncodeSelf(e)
				}
			}
			if yyr4463 || yy2arr4463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4463[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4474 := z.EncBinary()
						_ = yym4474
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4463[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4475 := z.EncBinary()
						_ = yym4475
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4463 || yy2arr4463 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4476 := z.DecBinary()
	_ = yym4476
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4477 := r.ContainerType()
		if yyct4477 == codecSelferValueTypeMap1234 {
			yyl4477 := r.ReadMapStart()
			if yyl4477 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4477, d)
			}
		} else if yyct4477 == codecSelferValueTypeArray1234 {
			yyl4477 := r.ReadArrayStart()
			if yyl4477 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4477, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4478Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4478Slc
	var yyhl4478 bool = l >= 0
	for yyj4478 := 0; ; yyj4478++ {
		if yyhl4478 {
			if yyj4478 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4478Slc = r.DecodeBytes(yys4478Slc, true, true)
		yys4478 := string(yys4478Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4478 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4481 := &x.ObjectMeta
				yyv4481.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4482 := &x.Conditions
				yym4483 := z.DecBinary()
				_ = yym4483
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4482), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4478)
		} // end switch yys4478
	} // end for yyj4478
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4484 int
	var yyb4484 bool
	var yyhl4484 bool = l >= 0
	yyj4484++
	if yyhl4484 {
		yyb4484 = yyj4484 > l
	} else {
		yyb4484 = r.CheckBreak()
	}
	if yyb4484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4484++
	if yyhl4484 {
		yyb4484 = yyj4484 > l
	} else {
		yyb4484 = r.CheckBreak()
	}
	if yyb4484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4484++
	if yyhl4484 {
		yyb4484 = yyj4484 > l
	} else {
		yyb4484 = r.CheckBreak()
	}
	if yyb4484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4487 := &x.ObjectMeta
		yyv4487.CodecDecodeSelf(d)
	}
	yyj4484++
	if yyhl4484 {
		yyb4484 = yyj4484 > l
	} else {
		yyb4484 = r.CheckBreak()
	}
	if yyb4484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4488 := &x.Conditions
		yym4489 := z.DecBinary()
		_ = yym4489
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4488), d)
		}
	}
	for {
		yyj4484++
		if yyhl4484 {
			yyb4484 = yyj4484 > l
		} else {
			yyb4484 = r.CheckBreak()
		}
		if yyb4484 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4484-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4490 := z.EncBinary()
		_ = yym4490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4491 := !z.EncBinary()
			yy2arr4491 := z.EncBasicHandle().StructToArray
			var yyq4491 [4]bool
			_, _, _ = yysep4491, yyq4491, yy2arr4491
			const yyr4491 bool = false
			yyq4491[0] = x.Kind != ""
			yyq4491[1] = x.APIVersion != ""
			yyq4491[2] = true
			var yynn4491 int
			if yyr4491 || yy2arr4491 {
				r.EncodeArrayStart(4)
			} else {
				yynn4491 = 1
				for _, b := range yyq4491 {
					if b {
						yynn4491++
					}
				}
				r.EncodeMapStart(yynn4491)
				yynn4491 = 0
			}
			if yyr4491 || yy2arr4491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4491[0] {
					yym4493 := z.EncBinary()
					_ = yym4493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4491[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4494 := z.EncBinary()
					_ = yym4494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4491 || yy2arr4491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4491[1] {
					yym4496 := z.EncBinary()
					_ = yym4496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4491[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4497 := z.EncBinary()
					_ = yym4497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4491 || yy2arr4491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4491[2] {
					yy4499 := &x.ListMeta
					yym4500 := z.EncBinary()
					_ = yym4500
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4499) {
					} else {
						z.EncFallback(yy4499)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4491[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4501 := &x.ListMeta
					yym4502 := z.EncBinary()
					_ = yym4502
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4501) {
					} else {
						z.EncFallback(yy4501)
					}
				}
			}
			if yyr4491 || yy2arr4491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4504 := z.EncBinary()
					_ = yym4504
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4505 := z.EncBinary()
					_ = yym4505
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4491 || yy2arr4491 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4506 := z.DecBinary()
	_ = yym4506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4507 := r.ContainerType()
		if yyct4507 == codecSelferValueTypeMap1234 {
			yyl4507 := r.ReadMapStart()
			if yyl4507 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4507, d)
			}
		} else if yyct4507 == codecSelferValueTypeArray1234 {
			yyl4507 := r.ReadArrayStart()
			if yyl4507 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4507, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4508Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4508Slc
	var yyhl4508 bool = l >= 0
	for yyj4508 := 0; ; yyj4508++ {
		if yyhl4508 {
			if yyj4508 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4508Slc = r.DecodeBytes(yys4508Slc, true, true)
		yys4508 := string(yys4508Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4508 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4511 := &x.ListMeta
				yym4512 := z.DecBinary()
				_ = yym4512
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4511) {
				} else {
					z.DecFallback(yyv4511, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4513 := &x.Items
				yym4514 := z.DecBinary()
				_ = yym4514
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4513), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4508)
		} // end switch yys4508
	} // end for yyj4508
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4515 int
	var yyb4515 bool
	var yyhl4515 bool = l >= 0
	yyj4515++
	if yyhl4515 {
		yyb4515 = yyj4515 > l
	} else {
		yyb4515 = r.CheckBreak()
	}
	if yyb4515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4515++
	if yyhl4515 {
		yyb4515 = yyj4515 > l
	} else {
		yyb4515 = r.CheckBreak()
	}
	if yyb4515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4515++
	if yyhl4515 {
		yyb4515 = yyj4515 > l
	} else {
		yyb4515 = r.CheckBreak()
	}
	if yyb4515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4518 := &x.ListMeta
		yym4519 := z.DecBinary()
		_ = yym4519
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4518) {
		} else {
			z.DecFallback(yyv4518, false)
		}
	}
	yyj4515++
	if yyhl4515 {
		yyb4515 = yyj4515 > l
	} else {
		yyb4515 = r.CheckBreak()
	}
	if yyb4515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4520 := &x.Items
		yym4521 := z.DecBinary()
		_ = yym4521
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4520), d)
		}
	}
	for {
		yyj4515++
		if yyhl4515 {
			yyb4515 = yyj4515 > l
		} else {
			yyb4515 = r.CheckBreak()
		}
		if yyb4515 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4515-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4522 := z.EncBinary()
		_ = yym4522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4523 := !z.EncBinary()
			yy2arr4523 := z.EncBasicHandle().StructToArray
			var yyq4523 [2]bool
			_, _, _ = yysep4523, yyq4523, yy2arr4523
			const yyr4523 bool = false
			yyq4523[0] = len(x.Items) != 0
			yyq4523[1] = x.DefaultMode != nil
			var yynn4523 int
			if yyr4523 || yy2arr4523 {
				r.EncodeArrayStart(2)
			} else {
				yynn4523 = 0
				for _, b := range yyq4523 {
					if b {
						yynn4523++
					}
				}
				r.EncodeMapStart(yynn4523)
				yynn4523 = 0
			}
			if yyr4523 || yy2arr4523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4523[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4525 := z.EncBinary()
						_ = yym4525
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4523[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4526 := z.EncBinary()
						_ = yym4526
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4523 || yy2arr4523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4523[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4528 := *x.DefaultMode
						yym4529 := z.EncBinary()
						_ = yym4529
						if false {
						} else {
							r.EncodeInt(int64(yy4528))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4523[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4530 := *x.DefaultMode
						yym4531 := z.EncBinary()
						_ = yym4531
						if false {
						} else {
							r.EncodeInt(int64(yy4530))
						}
					}
				}
			}
			if yyr4523 || yy2arr4523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4532 := z.DecBinary()
	_ = yym4532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4533 := r.ContainerType()
		if yyct4533 == codecSelferValueTypeMap1234 {
			yyl4533 := r.ReadMapStart()
			if yyl4533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4533, d)
			}
		} else if yyct4533 == codecSelferValueTypeArray1234 {
			yyl4533 := r.ReadArrayStart()
			if yyl4533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4534Slc
	var yyhl4534 bool = l >= 0
	for yyj4534 := 0; ; yyj4534++ {
		if yyhl4534 {
			if yyj4534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4534Slc = r.DecodeBytes(yys4534Slc, true, true)
		yys4534 := string(yys4534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4534 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4535 := &x.Items
				yym4536 := z.DecBinary()
				_ = yym4536
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4535), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym4538 := z.DecBinary()
				_ = yym4538
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4534)
		} // end switch yys4534
	} // end for yyj4534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4539 int
	var yyb4539 bool
	var yyhl4539 bool = l >= 0
	yyj4539++
	if yyhl4539 {
		yyb4539 = yyj4539 > l
	} else {
		yyb4539 = r.CheckBreak()
	}
	if yyb4539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4540 := &x.Items
		yym4541 := z.DecBinary()
		_ = yym4541
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4540), d)
		}
	}
	yyj4539++
	if yyhl4539 {
		yyb4539 = yyj4539 > l
	} else {
		yyb4539 = r.CheckBreak()
	}
	if yyb4539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym4543 := z.DecBinary()
		_ = yym4543
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4539++
		if yyhl4539 {
			yyb4539 = yyj4539 > l
		} else {
			yyb4539 = r.CheckBreak()
		}
		if yyb4539 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4539-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4544 := z.EncBinary()
		_ = yym4544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4545 := !z.EncBinary()
			yy2arr4545 := z.EncBasicHandle().StructToArray
			var yyq4545 [4]bool
			_, _, _ = yysep4545, yyq4545, yy2arr4545
			const yyr4545 bool = false
			yyq4545[1] = x.FieldRef != nil
			yyq4545[2] = x.ResourceFieldRef != nil
			yyq4545[3] = x.Mode != nil
			var yynn4545 int
			if yyr4545 || yy2arr4545 {
				r.EncodeArrayStart(4)
			} else {
				yynn4545 = 1
				for _, b := range yyq4545 {
					if b {
						yynn4545++
					}
				}
				r.EncodeMapStart(yynn4545)
				yynn4545 = 0
			}
			if yyr4545 || yy2arr4545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4547 := z.EncBinary()
				_ = yym4547
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4548 := z.EncBinary()
				_ = yym4548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4545 || yy2arr4545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4545[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4545[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4545 || yy2arr4545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4545[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4545[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4545 || yy2arr4545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4545[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4552 := *x.Mode
						yym4553 := z.EncBinary()
						_ = yym4553
						if false {
						} else {
							r.EncodeInt(int64(yy4552))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4545[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4554 := *x.Mode
						yym4555 := z.EncBinary()
						_ = yym4555
						if false {
						} else {
							r.EncodeInt(int64(yy4554))
						}
					}
				}
			}
			if yyr4545 || yy2arr4545 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4556 := z.DecBinary()
	_ = yym4556
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4557 := r.ContainerType()
		if yyct4557 == codecSelferValueTypeMap1234 {
			yyl4557 := r.ReadMapStart()
			if yyl4557 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4557, d)
			}
		} else if yyct4557 == codecSelferValueTypeArray1234 {
			yyl4557 := r.ReadArrayStart()
			if yyl4557 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4557, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4558Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4558Slc
	var yyhl4558 bool = l >= 0
	for yyj4558 := 0; ; yyj4558++ {
		if yyhl4558 {
			if yyj4558 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4558Slc = r.DecodeBytes(yys4558Slc, true, true)
		yys4558 := string(yys4558Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4558 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym4563 := z.DecBinary()
				_ = yym4563
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4558)
		} // end switch yys4558
	} // end for yyj4558
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4564 int
	var yyb4564 bool
	var yyhl4564 bool = l >= 0
	yyj4564++
	if yyhl4564 {
		yyb4564 = yyj4564 > l
	} else {
		yyb4564 = r.CheckBreak()
	}
	if yyb4564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4564++
	if yyhl4564 {
		yyb4564 = yyj4564 > l
	} else {
		yyb4564 = r.CheckBreak()
	}
	if yyb4564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4564++
	if yyhl4564 {
		yyb4564 = yyj4564 > l
	} else {
		yyb4564 = r.CheckBreak()
	}
	if yyb4564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj4564++
	if yyhl4564 {
		yyb4564 = yyj4564 > l
	} else {
		yyb4564 = r.CheckBreak()
	}
	if yyb4564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym4569 := z.DecBinary()
		_ = yym4569
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4564++
		if yyhl4564 {
			yyb4564 = yyj4564 > l
		} else {
			yyb4564 = r.CheckBreak()
		}
		if yyb4564 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4564-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4570 := z.EncBinary()
		_ = yym4570
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4571 := !z.EncBinary()
			yy2arr4571 := z.EncBasicHandle().StructToArray
			var yyq4571 [6]bool
			_, _, _ = yysep4571, yyq4571, yy2arr4571
			const yyr4571 bool = false
			yyq4571[0] = x.Capabilities != nil
			yyq4571[1] = x.Privileged != nil
			yyq4571[2] = x.SELinuxOptions != nil
			yyq4571[3] = x.RunAsUser != nil
			yyq4571[4] = x.RunAsNonRoot != nil
			yyq4571[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4571 int
			if yyr4571 || yy2arr4571 {
				r.EncodeArrayStart(6)
			} else {
				yynn4571 = 0
				for _, b := range yyq4571 {
					if b {
						yynn4571++
					}
				}
				r.EncodeMapStart(yynn4571)
				yynn4571 = 0
			}
			if yyr4571 || yy2arr4571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4571[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4571[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4571 || yy2arr4571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4571[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4574 := *x.Privileged
						yym4575 := z.EncBinary()
						_ = yym4575
						if false {
						} else {
							r.EncodeBool(bool(yy4574))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4571[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4576 := *x.Privileged
						yym4577 := z.EncBinary()
						_ = yym4577
						if false {
						} else {
							r.EncodeBool(bool(yy4576))
						}
					}
				}
			}
			if yyr4571 || yy2arr4571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4571[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4571[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4571 || yy2arr4571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4571[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4580 := *x.RunAsUser
						yym4581 := z.EncBinary()
						_ = yym4581
						if false {
						} else {
							r.EncodeInt(int64(yy4580))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4571[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4582 := *x.RunAsUser
						yym4583 := z.EncBinary()
						_ = yym4583
						if false {
						} else {
							r.EncodeInt(int64(yy4582))
						}
					}
				}
			}
			if yyr4571 || yy2arr4571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4571[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4585 := *x.RunAsNonRoot
						yym4586 := z.EncBinary()
						_ = yym4586
						if false {
						} else {
							r.EncodeBool(bool(yy4585))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4571[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4587 := *x.RunAsNonRoot
						yym4588 := z.EncBinary()
						_ = yym4588
						if false {
						} else {
							r.EncodeBool(bool(yy4587))
						}
					}
				}
			}
			if yyr4571 || yy2arr4571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4571[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4590 := *x.ReadOnlyRootFilesystem
						yym4591 := z.EncBinary()
						_ = yym4591
						if false {
						} else {
							r.EncodeBool(bool(yy4590))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4571[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4592 := *x.ReadOnlyRootFilesystem
						yym4593 := z.EncBinary()
						_ = yym4593
						if false {
						} else {
							r.EncodeBool(bool(yy4592))
						}
					}
				}
			}
			if yyr4571 || yy2arr4571 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4594 := z.DecBinary()
	_ = yym4594
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4595 := r.ContainerType()
		if yyct4595 == codecSelferValueTypeMap1234 {
			yyl4595 := r.ReadMapStart()
			if yyl4595 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4595, d)
			}
		} else if yyct4595 == codecSelferValueTypeArray1234 {
			yyl4595 := r.ReadArrayStart()
			if yyl4595 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4595, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4596Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4596Slc
	var yyhl4596 bool = l >= 0
	for yyj4596 := 0; ; yyj4596++ {
		if yyhl4596 {
			if yyj4596 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4596Slc = r.DecodeBytes(yys4596Slc, true, true)
		yys4596 := string(yys4596Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4596 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4599 := z.DecBinary()
				_ = yym4599
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4602 := z.DecBinary()
				_ = yym4602
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4604 := z.DecBinary()
				_ = yym4604
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4606 := z.DecBinary()
				_ = yym4606
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4596)
		} // end switch yys4596
	} // end for yyj4596
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4607 int
	var yyb4607 bool
	var yyhl4607 bool = l >= 0
	yyj4607++
	if yyhl4607 {
		yyb4607 = yyj4607 > l
	} else {
		yyb4607 = r.CheckBreak()
	}
	if yyb4607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4607++
	if yyhl4607 {
		yyb4607 = yyj4607 > l
	} else {
		yyb4607 = r.CheckBreak()
	}
	if yyb4607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4610 := z.DecBinary()
		_ = yym4610
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4607++
	if yyhl4607 {
		yyb4607 = yyj4607 > l
	} else {
		yyb4607 = r.CheckBreak()
	}
	if yyb4607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4607++
	if yyhl4607 {
		yyb4607 = yyj4607 > l
	} else {
		yyb4607 = r.CheckBreak()
	}
	if yyb4607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4613 := z.DecBinary()
		_ = yym4613
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4607++
	if yyhl4607 {
		yyb4607 = yyj4607 > l
	} else {
		yyb4607 = r.CheckBreak()
	}
	if yyb4607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4615 := z.DecBinary()
		_ = yym4615
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4607++
	if yyhl4607 {
		yyb4607 = yyj4607 > l
	} else {
		yyb4607 = r.CheckBreak()
	}
	if yyb4607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4617 := z.DecBinary()
		_ = yym4617
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4607++
		if yyhl4607 {
			yyb4607 = yyj4607 > l
		} else {
			yyb4607 = r.CheckBreak()
		}
		if yyb4607 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4607-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4618 := z.EncBinary()
		_ = yym4618
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4619 := !z.EncBinary()
			yy2arr4619 := z.EncBasicHandle().StructToArray
			var yyq4619 [4]bool
			_, _, _ = yysep4619, yyq4619, yy2arr4619
			const yyr4619 bool = false
			yyq4619[0] = x.User != ""
			yyq4619[1] = x.Role != ""
			yyq4619[2] = x.Type != ""
			yyq4619[3] = x.Level != ""
			var yynn4619 int
			if yyr4619 || yy2arr4619 {
				r.EncodeArrayStart(4)
			} else {
				yynn4619 = 0
				for _, b := range yyq4619 {
					if b {
						yynn4619++
					}
				}
				r.EncodeMapStart(yynn4619)
				yynn4619 = 0
			}
			if yyr4619 || yy2arr4619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4619[0] {
					yym4621 := z.EncBinary()
					_ = yym4621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4619[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4622 := z.EncBinary()
					_ = yym4622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4619 || yy2arr4619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4619[1] {
					yym4624 := z.EncBinary()
					_ = yym4624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4619[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4625 := z.EncBinary()
					_ = yym4625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4619 || yy2arr4619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4619[2] {
					yym4627 := z.EncBinary()
					_ = yym4627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4619[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4628 := z.EncBinary()
					_ = yym4628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4619 || yy2arr4619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4619[3] {
					yym4630 := z.EncBinary()
					_ = yym4630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4619[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4631 := z.EncBinary()
					_ = yym4631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4619 || yy2arr4619 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4632 := z.DecBinary()
	_ = yym4632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4633 := r.ContainerType()
		if yyct4633 == codecSelferValueTypeMap1234 {
			yyl4633 := r.ReadMapStart()
			if yyl4633 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4633, d)
			}
		} else if yyct4633 == codecSelferValueTypeArray1234 {
			yyl4633 := r.ReadArrayStart()
			if yyl4633 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4633, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4634Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4634Slc
	var yyhl4634 bool = l >= 0
	for yyj4634 := 0; ; yyj4634++ {
		if yyhl4634 {
			if yyj4634 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4634Slc = r.DecodeBytes(yys4634Slc, true, true)
		yys4634 := string(yys4634Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4634 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4634)
		} // end switch yys4634
	} // end for yyj4634
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4639 int
	var yyb4639 bool
	var yyhl4639 bool = l >= 0
	yyj4639++
	if yyhl4639 {
		yyb4639 = yyj4639 > l
	} else {
		yyb4639 = r.CheckBreak()
	}
	if yyb4639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4639++
	if yyhl4639 {
		yyb4639 = yyj4639 > l
	} else {
		yyb4639 = r.CheckBreak()
	}
	if yyb4639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4639++
	if yyhl4639 {
		yyb4639 = yyj4639 > l
	} else {
		yyb4639 = r.CheckBreak()
	}
	if yyb4639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4639++
	if yyhl4639 {
		yyb4639 = yyj4639 > l
	} else {
		yyb4639 = r.CheckBreak()
	}
	if yyb4639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4639++
		if yyhl4639 {
			yyb4639 = yyj4639 > l
		} else {
			yyb4639 = r.CheckBreak()
		}
		if yyb4639 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4639-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4644 := z.EncBinary()
		_ = yym4644
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4645 := !z.EncBinary()
			yy2arr4645 := z.EncBasicHandle().StructToArray
			var yyq4645 [5]bool
			_, _, _ = yysep4645, yyq4645, yy2arr4645
			const yyr4645 bool = false
			yyq4645[0] = x.Kind != ""
			yyq4645[1] = x.APIVersion != ""
			yyq4645[2] = true
			var yynn4645 int
			if yyr4645 || yy2arr4645 {
				r.EncodeArrayStart(5)
			} else {
				yynn4645 = 2
				for _, b := range yyq4645 {
					if b {
						yynn4645++
					}
				}
				r.EncodeMapStart(yynn4645)
				yynn4645 = 0
			}
			if yyr4645 || yy2arr4645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4645[0] {
					yym4647 := z.EncBinary()
					_ = yym4647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4645[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4648 := z.EncBinary()
					_ = yym4648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4645 || yy2arr4645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4645[1] {
					yym4650 := z.EncBinary()
					_ = yym4650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4645[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4651 := z.EncBinary()
					_ = yym4651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4645 || yy2arr4645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4645[2] {
					yy4653 := &x.ObjectMeta
					yy4653.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4645[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4654 := &x.ObjectMeta
					yy4654.CodecEncodeSelf(e)
				}
			}
			if yyr4645 || yy2arr4645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4656 := z.EncBinary()
				_ = yym4656
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4657 := z.EncBinary()
				_ = yym4657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4645 || yy2arr4645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4659 := z.EncBinary()
					_ = yym4659
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4660 := z.EncBinary()
					_ = yym4660
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4645 || yy2arr4645 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4661 := z.DecBinary()
	_ = yym4661
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4662 := r.ContainerType()
		if yyct4662 == codecSelferValueTypeMap1234 {
			yyl4662 := r.ReadMapStart()
			if yyl4662 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4662, d)
			}
		} else if yyct4662 == codecSelferValueTypeArray1234 {
			yyl4662 := r.ReadArrayStart()
			if yyl4662 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4662, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4663Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4663Slc
	var yyhl4663 bool = l >= 0
	for yyj4663 := 0; ; yyj4663++ {
		if yyhl4663 {
			if yyj4663 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4663Slc = r.DecodeBytes(yys4663Slc, true, true)
		yys4663 := string(yys4663Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4663 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4666 := &x.ObjectMeta
				yyv4666.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4668 := &x.Data
				yym4669 := z.DecBinary()
				_ = yym4669
				if false {
				} else {
					*yyv4668 = r.DecodeBytes(*(*[]byte)(yyv4668), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4663)
		} // end switch yys4663
	} // end for yyj4663
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4670 int
	var yyb4670 bool
	var yyhl4670 bool = l >= 0
	yyj4670++
	if yyhl4670 {
		yyb4670 = yyj4670 > l
	} else {
		yyb4670 = r.CheckBreak()
	}
	if yyb4670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4670++
	if yyhl4670 {
		yyb4670 = yyj4670 > l
	} else {
		yyb4670 = r.CheckBreak()
	}
	if yyb4670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4670++
	if yyhl4670 {
		yyb4670 = yyj4670 > l
	} else {
		yyb4670 = r.CheckBreak()
	}
	if yyb4670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4673 := &x.ObjectMeta
		yyv4673.CodecDecodeSelf(d)
	}
	yyj4670++
	if yyhl4670 {
		yyb4670 = yyj4670 > l
	} else {
		yyb4670 = r.CheckBreak()
	}
	if yyb4670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4670++
	if yyhl4670 {
		yyb4670 = yyj4670 > l
	} else {
		yyb4670 = r.CheckBreak()
	}
	if yyb4670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4675 := &x.Data
		yym4676 := z.DecBinary()
		_ = yym4676
		if false {
		} else {
			*yyv4675 = r.DecodeBytes(*(*[]byte)(yyv4675), false, false)
		}
	}
	for {
		yyj4670++
		if yyhl4670 {
			yyb4670 = yyj4670 > l
		} else {
			yyb4670 = r.CheckBreak()
		}
		if yyb4670 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4670-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4677 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4678 := &yyv4677
		yy4678.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4679 := *v
	yyh4679, yyl4679 := z.DecSliceHelperStart()
	var yyc4679 bool
	if yyl4679 == 0 {
		if yyv4679 == nil {
			yyv4679 = []OwnerReference{}
			yyc4679 = true
		} else if len(yyv4679) != 0 {
			yyv4679 = yyv4679[:0]
			yyc4679 = true
		}
	} else if yyl4679 > 0 {
		var yyrr4679, yyrl4679 int
		var yyrt4679 bool
		if yyl4679 > cap(yyv4679) {

			yyrg4679 := len(yyv4679) > 0
			yyv24679 := yyv4679
			yyrl4679, yyrt4679 = z.DecInferLen(yyl4679, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4679 {
				if yyrl4679 <= cap(yyv4679) {
					yyv4679 = yyv4679[:yyrl4679]
				} else {
					yyv4679 = make([]OwnerReference, yyrl4679)
				}
			} else {
				yyv4679 = make([]OwnerReference, yyrl4679)
			}
			yyc4679 = true
			yyrr4679 = len(yyv4679)
			if yyrg4679 {
				copy(yyv4679, yyv24679)
			}
		} else if yyl4679 != len(yyv4679) {
			yyv4679 = yyv4679[:yyl4679]
			yyc4679 = true
		}
		yyj4679 := 0
		for ; yyj4679 < yyrr4679; yyj4679++ {
			yyh4679.ElemContainerState(yyj4679)
			if r.TryDecodeAsNil() {
				yyv4679[yyj4679] = OwnerReference{}
			} else {
				yyv4680 := &yyv4679[yyj4679]
				yyv4680.CodecDecodeSelf(d)
			}

		}
		if yyrt4679 {
			for ; yyj4679 < yyl4679; yyj4679++ {
				yyv4679 = append(yyv4679, OwnerReference{})
				yyh4679.ElemContainerState(yyj4679)
				if r.TryDecodeAsNil() {
					yyv4679[yyj4679] = OwnerReference{}
				} else {
					yyv4681 := &yyv4679[yyj4679]
					yyv4681.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4679 := 0
		for ; !r.CheckBreak(); yyj4679++ {

			if yyj4679 >= len(yyv4679) {
				yyv4679 = append(yyv4679, OwnerReference{}) // var yyz4679 OwnerReference
				yyc4679 = true
			}
			yyh4679.ElemContainerState(yyj4679)
			if yyj4679 < len(yyv4679) {
				if r.TryDecodeAsNil() {
					yyv4679[yyj4679] = OwnerReference{}
				} else {
					yyv4682 := &yyv4679[yyj4679]
					yyv4682.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4679 < len(yyv4679) {
			yyv4679 = yyv4679[:yyj4679]
			yyc4679 = true
		} else if yyj4679 == 0 && yyv4679 == nil {
			yyv4679 = []OwnerReference{}
			yyc4679 = true
		}
	}
	yyh4679.End()
	if yyc4679 {
		*v = yyv4679
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4683 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4683.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4684 := *v
	yyh4684, yyl4684 := z.DecSliceHelperStart()
	var yyc4684 bool
	if yyl4684 == 0 {
		if yyv4684 == nil {
			yyv4684 = []PersistentVolumeAccessMode{}
			yyc4684 = true
		} else if len(yyv4684) != 0 {
			yyv4684 = yyv4684[:0]
			yyc4684 = true
		}
	} else if yyl4684 > 0 {
		var yyrr4684, yyrl4684 int
		var yyrt4684 bool
		if yyl4684 > cap(yyv4684) {

			yyrl4684, yyrt4684 = z.DecInferLen(yyl4684, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4684 {
				if yyrl4684 <= cap(yyv4684) {
					yyv4684 = yyv4684[:yyrl4684]
				} else {
					yyv4684 = make([]PersistentVolumeAccessMode, yyrl4684)
				}
			} else {
				yyv4684 = make([]PersistentVolumeAccessMode, yyrl4684)
			}
			yyc4684 = true
			yyrr4684 = len(yyv4684)
		} else if yyl4684 != len(yyv4684) {
			yyv4684 = yyv4684[:yyl4684]
			yyc4684 = true
		}
		yyj4684 := 0
		for ; yyj4684 < yyrr4684; yyj4684++ {
			yyh4684.ElemContainerState(yyj4684)
			if r.TryDecodeAsNil() {
				yyv4684[yyj4684] = ""
			} else {
				yyv4684[yyj4684] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4684 {
			for ; yyj4684 < yyl4684; yyj4684++ {
				yyv4684 = append(yyv4684, "")
				yyh4684.ElemContainerState(yyj4684)
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = ""
				} else {
					yyv4684[yyj4684] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4684 := 0
		for ; !r.CheckBreak(); yyj4684++ {

			if yyj4684 >= len(yyv4684) {
				yyv4684 = append(yyv4684, "") // var yyz4684 PersistentVolumeAccessMode
				yyc4684 = true
			}
			yyh4684.ElemContainerState(yyj4684)
			if yyj4684 < len(yyv4684) {
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = ""
				} else {
					yyv4684[yyj4684] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4684 < len(yyv4684) {
			yyv4684 = yyv4684[:yyj4684]
			yyc4684 = true
		} else if yyj4684 == 0 && yyv4684 == nil {
			yyv4684 = []PersistentVolumeAccessMode{}
			yyc4684 = true
		}
	}
	yyh4684.End()
	if yyc4684 {
		*v = yyv4684
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4688 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4689 := &yyv4688
		yy4689.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4690 := *v
	yyh4690, yyl4690 := z.DecSliceHelperStart()
	var yyc4690 bool
	if yyl4690 == 0 {
		if yyv4690 == nil {
			yyv4690 = []PersistentVolume{}
			yyc4690 = true
		} else if len(yyv4690) != 0 {
			yyv4690 = yyv4690[:0]
			yyc4690 = true
		}
	} else if yyl4690 > 0 {
		var yyrr4690, yyrl4690 int
		var yyrt4690 bool
		if yyl4690 > cap(yyv4690) {

			yyrg4690 := len(yyv4690) > 0
			yyv24690 := yyv4690
			yyrl4690, yyrt4690 = z.DecInferLen(yyl4690, z.DecBasicHandle().MaxInitLen, 512)
			if yyrt4690 {
				if yyrl4690 <= cap(yyv4690) {
					yyv4690 = yyv4690[:yyrl4690]
				} else {
					yyv4690 = make([]PersistentVolume, yyrl4690)
				}
			} else {
				yyv4690 = make([]PersistentVolume, yyrl4690)
			}
			yyc4690 = true
			yyrr4690 = len(yyv4690)
			if yyrg4690 {
				copy(yyv4690, yyv24690)
			}
		} else if yyl4690 != len(yyv4690) {
			yyv4690 = yyv4690[:yyl4690]
			yyc4690 = true
		}
		yyj4690 := 0
		for ; yyj4690 < yyrr4690; yyj4690++ {
			yyh4690.ElemContainerState(yyj4690)
			if r.TryDecodeAsNil() {
				yyv4690[yyj4690] = PersistentVolume{}
			} else {
				yyv4691 := &yyv4690[yyj4690]
				yyv4691.CodecDecodeSelf(d)
			}

		}
		if yyrt4690 {
			for ; yyj4690 < yyl4690; yyj4690++ {
				yyv4690 = append(yyv4690, PersistentVolume{})
				yyh4690.ElemContainerState(yyj4690)
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = PersistentVolume{}
				} else {
					yyv4692 := &yyv4690[yyj4690]
					yyv4692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4690 := 0
		for ; !r.CheckBreak(); yyj4690++ {

			if yyj4690 >= len(yyv4690) {
				yyv4690 = append(yyv4690, PersistentVolume{}) // var yyz4690 PersistentVolume
				yyc4690 = true
			}
			yyh4690.ElemContainerState(yyj4690)
			if yyj4690 < len(yyv4690) {
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = PersistentVolume{}
				} else {
					yyv4693 := &yyv4690[yyj4690]
					yyv4693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4690 < len(yyv4690) {
			yyv4690 = yyv4690[:yyj4690]
			yyc4690 = true
		} else if yyj4690 == 0 && yyv4690 == nil {
			yyv4690 = []PersistentVolume{}
			yyc4690 = true
		}
	}
	yyh4690.End()
	if yyc4690 {
		*v = yyv4690
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4694 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4695 := &yyv4694
		yy4695.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4696 := *v
	yyh4696, yyl4696 := z.DecSliceHelperStart()
	var yyc4696 bool
	if yyl4696 == 0 {
		if yyv4696 == nil {
			yyv4696 = []PersistentVolumeClaim{}
			yyc4696 = true
		} else if len(yyv4696) != 0 {
			yyv4696 = yyv4696[:0]
			yyc4696 = true
		}
	} else if yyl4696 > 0 {
		var yyrr4696, yyrl4696 int
		var yyrt4696 bool
		if yyl4696 > cap(yyv4696) {

			yyrg4696 := len(yyv4696) > 0
			yyv24696 := yyv4696
			yyrl4696, yyrt4696 = z.DecInferLen(yyl4696, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4696 {
				if yyrl4696 <= cap(yyv4696) {
					yyv4696 = yyv4696[:yyrl4696]
				} else {
					yyv4696 = make([]PersistentVolumeClaim, yyrl4696)
				}
			} else {
				yyv4696 = make([]PersistentVolumeClaim, yyrl4696)
			}
			yyc4696 = true
			yyrr4696 = len(yyv4696)
			if yyrg4696 {
				copy(yyv4696, yyv24696)
			}
		} else if yyl4696 != len(yyv4696) {
			yyv4696 = yyv4696[:yyl4696]
			yyc4696 = true
		}
		yyj4696 := 0
		for ; yyj4696 < yyrr4696; yyj4696++ {
			yyh4696.ElemContainerState(yyj4696)
			if r.TryDecodeAsNil() {
				yyv4696[yyj4696] = PersistentVolumeClaim{}
			} else {
				yyv4697 := &yyv4696[yyj4696]
				yyv4697.CodecDecodeSelf(d)
			}

		}
		if yyrt4696 {
			for ; yyj4696 < yyl4696; yyj4696++ {
				yyv4696 = append(yyv4696, PersistentVolumeClaim{})
				yyh4696.ElemContainerState(yyj4696)
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = PersistentVolumeClaim{}
				} else {
					yyv4698 := &yyv4696[yyj4696]
					yyv4698.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4696 := 0
		for ; !r.CheckBreak(); yyj4696++ {

			if yyj4696 >= len(yyv4696) {
				yyv4696 = append(yyv4696, PersistentVolumeClaim{}) // var yyz4696 PersistentVolumeClaim
				yyc4696 = true
			}
			yyh4696.ElemContainerState(yyj4696)
			if yyj4696 < len(yyv4696) {
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = PersistentVolumeClaim{}
				} else {
					yyv4699 := &yyv4696[yyj4696]
					yyv4699.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4696 < len(yyv4696) {
			yyv4696 = yyv4696[:yyj4696]
			yyc4696 = true
		} else if yyj4696 == 0 && yyv4696 == nil {
			yyv4696 = []PersistentVolumeClaim{}
			yyc4696 = true
		}
	}
	yyh4696.End()
	if yyc4696 {
		*v = yyv4696
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4700 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4701 := &yyv4700
		yy4701.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4702 := *v
	yyh4702, yyl4702 := z.DecSliceHelperStart()
	var yyc4702 bool
	if yyl4702 == 0 {
		if yyv4702 == nil {
			yyv4702 = []KeyToPath{}
			yyc4702 = true
		} else if len(yyv4702) != 0 {
			yyv4702 = yyv4702[:0]
			yyc4702 = true
		}
	} else if yyl4702 > 0 {
		var yyrr4702, yyrl4702 int
		var yyrt4702 bool
		if yyl4702 > cap(yyv4702) {

			yyrg4702 := len(yyv4702) > 0
			yyv24702 := yyv4702
			yyrl4702, yyrt4702 = z.DecInferLen(yyl4702, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4702 {
				if yyrl4702 <= cap(yyv4702) {
					yyv4702 = yyv4702[:yyrl4702]
				} else {
					yyv4702 = make([]KeyToPath, yyrl4702)
				}
			} else {
				yyv4702 = make([]KeyToPath, yyrl4702)
			}
			yyc4702 = true
			yyrr4702 = len(yyv4702)
			if yyrg4702 {
				copy(yyv4702, yyv24702)
			}
		} else if yyl4702 != len(yyv4702) {
			yyv4702 = yyv4702[:yyl4702]
			yyc4702 = true
		}
		yyj4702 := 0
		for ; yyj4702 < yyrr4702; yyj4702++ {
			yyh4702.ElemContainerState(yyj4702)
			if r.TryDecodeAsNil() {
				yyv4702[yyj4702] = KeyToPath{}
			} else {
				yyv4703 := &yyv4702[yyj4702]
				yyv4703.CodecDecodeSelf(d)
			}

		}
		if yyrt4702 {
			for ; yyj4702 < yyl4702; yyj4702++ {
				yyv4702 = append(yyv4702, KeyToPath{})
				yyh4702.ElemContainerState(yyj4702)
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = KeyToPath{}
				} else {
					yyv4704 := &yyv4702[yyj4702]
					yyv4704.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4702 := 0
		for ; !r.CheckBreak(); yyj4702++ {

			if yyj4702 >= len(yyv4702) {
				yyv4702 = append(yyv4702, KeyToPath{}) // var yyz4702 KeyToPath
				yyc4702 = true
			}
			yyh4702.ElemContainerState(yyj4702)
			if yyj4702 < len(yyv4702) {
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = KeyToPath{}
				} else {
					yyv4705 := &yyv4702[yyj4702]
					yyv4705.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4702 < len(yyv4702) {
			yyv4702 = yyv4702[:yyj4702]
			yyc4702 = true
		} else if yyj4702 == 0 && yyv4702 == nil {
			yyv4702 = []KeyToPath{}
			yyc4702 = true
		}
	}
	yyh4702.End()
	if yyc4702 {
		*v = yyv4702
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4706 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4707 := &yyv4706
		yy4707.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4708 := *v
	yyh4708, yyl4708 := z.DecSliceHelperStart()
	var yyc4708 bool
	if yyl4708 == 0 {
		if yyv4708 == nil {
			yyv4708 = []HTTPHeader{}
			yyc4708 = true
		} else if len(yyv4708) != 0 {
			yyv4708 = yyv4708[:0]
			yyc4708 = true
		}
	} else if yyl4708 > 0 {
		var yyrr4708, yyrl4708 int
		var yyrt4708 bool
		if yyl4708 > cap(yyv4708) {

			yyrg4708 := len(yyv4708) > 0
			yyv24708 := yyv4708
			yyrl4708, yyrt4708 = z.DecInferLen(yyl4708, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4708 {
				if yyrl4708 <= cap(yyv4708) {
					yyv4708 = yyv4708[:yyrl4708]
				} else {
					yyv4708 = make([]HTTPHeader, yyrl4708)
				}
			} else {
				yyv4708 = make([]HTTPHeader, yyrl4708)
			}
			yyc4708 = true
			yyrr4708 = len(yyv4708)
			if yyrg4708 {
				copy(yyv4708, yyv24708)
			}
		} else if yyl4708 != len(yyv4708) {
			yyv4708 = yyv4708[:yyl4708]
			yyc4708 = true
		}
		yyj4708 := 0
		for ; yyj4708 < yyrr4708; yyj4708++ {
			yyh4708.ElemContainerState(yyj4708)
			if r.TryDecodeAsNil() {
				yyv4708[yyj4708] = HTTPHeader{}
			} else {
				yyv4709 := &yyv4708[yyj4708]
				yyv4709.CodecDecodeSelf(d)
			}

		}
		if yyrt4708 {
			for ; yyj4708 < yyl4708; yyj4708++ {
				yyv4708 = append(yyv4708, HTTPHeader{})
				yyh4708.ElemContainerState(yyj4708)
				if r.TryDecodeAsNil() {
					yyv4708[yyj4708] = HTTPHeader{}
				} else {
					yyv4710 := &yyv4708[yyj4708]
					yyv4710.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4708 := 0
		for ; !r.CheckBreak(); yyj4708++ {

			if yyj4708 >= len(yyv4708) {
				yyv4708 = append(yyv4708, HTTPHeader{}) // var yyz4708 HTTPHeader
				yyc4708 = true
			}
			yyh4708.ElemContainerState(yyj4708)
			if yyj4708 < len(yyv4708) {
				if r.TryDecodeAsNil() {
					yyv4708[yyj4708] = HTTPHeader{}
				} else {
					yyv4711 := &yyv4708[yyj4708]
					yyv4711.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4708 < len(yyv4708) {
			yyv4708 = yyv4708[:yyj4708]
			yyc4708 = true
		} else if yyj4708 == 0 && yyv4708 == nil {
			yyv4708 = []HTTPHeader{}
			yyc4708 = true
		}
	}
	yyh4708.End()
	if yyc4708 {
		*v = yyv4708
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4712 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4712.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4713 := *v
	yyh4713, yyl4713 := z.DecSliceHelperStart()
	var yyc4713 bool
	if yyl4713 == 0 {
		if yyv4713 == nil {
			yyv4713 = []Capability{}
			yyc4713 = true
		} else if len(yyv4713) != 0 {
			yyv4713 = yyv4713[:0]
			yyc4713 = true
		}
	} else if yyl4713 > 0 {
		var yyrr4713, yyrl4713 int
		var yyrt4713 bool
		if yyl4713 > cap(yyv4713) {

			yyrl4713, yyrt4713 = z.DecInferLen(yyl4713, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4713 {
				if yyrl4713 <= cap(yyv4713) {
					yyv4713 = yyv4713[:yyrl4713]
				} else {
					yyv4713 = make([]Capability, yyrl4713)
				}
			} else {
				yyv4713 = make([]Capability, yyrl4713)
			}
			yyc4713 = true
			yyrr4713 = len(yyv4713)
		} else if yyl4713 != len(yyv4713) {
			yyv4713 = yyv4713[:yyl4713]
			yyc4713 = true
		}
		yyj4713 := 0
		for ; yyj4713 < yyrr4713; yyj4713++ {
			yyh4713.ElemContainerState(yyj4713)
			if r.TryDecodeAsNil() {
				yyv4713[yyj4713] = ""
			} else {
				yyv4713[yyj4713] = Capability(r.DecodeString())
			}

		}
		if yyrt4713 {
			for ; yyj4713 < yyl4713; yyj4713++ {
				yyv4713 = append(yyv4713, "")
				yyh4713.ElemContainerState(yyj4713)
				if r.TryDecodeAsNil() {
					yyv4713[yyj4713] = ""
				} else {
					yyv4713[yyj4713] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4713 := 0
		for ; !r.CheckBreak(); yyj4713++ {

			if yyj4713 >= len(yyv4713) {
				yyv4713 = append(yyv4713, "") // var yyz4713 Capability
				yyc4713 = true
			}
			yyh4713.ElemContainerState(yyj4713)
			if yyj4713 < len(yyv4713) {
				if r.TryDecodeAsNil() {
					yyv4713[yyj4713] = ""
				} else {
					yyv4713[yyj4713] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4713 < len(yyv4713) {
			yyv4713 = yyv4713[:yyj4713]
			yyc4713 = true
		} else if yyj4713 == 0 && yyv4713 == nil {
			yyv4713 = []Capability{}
			yyc4713 = true
		}
	}
	yyh4713.End()
	if yyc4713 {
		*v = yyv4713
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4717 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4718 := &yyv4717
		yy4718.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4719 := *v
	yyh4719, yyl4719 := z.DecSliceHelperStart()
	var yyc4719 bool
	if yyl4719 == 0 {
		if yyv4719 == nil {
			yyv4719 = []ContainerPort{}
			yyc4719 = true
		} else if len(yyv4719) != 0 {
			yyv4719 = yyv4719[:0]
			yyc4719 = true
		}
	} else if yyl4719 > 0 {
		var yyrr4719, yyrl4719 int
		var yyrt4719 bool
		if yyl4719 > cap(yyv4719) {

			yyrg4719 := len(yyv4719) > 0
			yyv24719 := yyv4719
			yyrl4719, yyrt4719 = z.DecInferLen(yyl4719, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4719 {
				if yyrl4719 <= cap(yyv4719) {
					yyv4719 = yyv4719[:yyrl4719]
				} else {
					yyv4719 = make([]ContainerPort, yyrl4719)
				}
			} else {
				yyv4719 = make([]ContainerPort, yyrl4719)
			}
			yyc4719 = true
			yyrr4719 = len(yyv4719)
			if yyrg4719 {
				copy(yyv4719, yyv24719)
			}
		} else if yyl4719 != len(yyv4719) {
			yyv4719 = yyv4719[:yyl4719]
			yyc4719 = true
		}
		yyj4719 := 0
		for ; yyj4719 < yyrr4719; yyj4719++ {
			yyh4719.ElemContainerState(yyj4719)
			if r.TryDecodeAsNil() {
				yyv4719[yyj4719] = ContainerPort{}
			} else {
				yyv4720 := &yyv4719[yyj4719]
				yyv4720.CodecDecodeSelf(d)
			}

		}
		if yyrt4719 {
			for ; yyj4719 < yyl4719; yyj4719++ {
				yyv4719 = append(yyv4719, ContainerPort{})
				yyh4719.ElemContainerState(yyj4719)
				if r.TryDecodeAsNil() {
					yyv4719[yyj4719] = ContainerPort{}
				} else {
					yyv4721 := &yyv4719[yyj4719]
					yyv4721.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4719 := 0
		for ; !r.CheckBreak(); yyj4719++ {

			if yyj4719 >= len(yyv4719) {
				yyv4719 = append(yyv4719, ContainerPort{}) // var yyz4719 ContainerPort
				yyc4719 = true
			}
			yyh4719.ElemContainerState(yyj4719)
			if yyj4719 < len(yyv4719) {
				if r.TryDecodeAsNil() {
					yyv4719[yyj4719] = ContainerPort{}
				} else {
					yyv4722 := &yyv4719[yyj4719]
					yyv4722.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4719 < len(yyv4719) {
			yyv4719 = yyv4719[:yyj4719]
			yyc4719 = true
		} else if yyj4719 == 0 && yyv4719 == nil {
			yyv4719 = []ContainerPort{}
			yyc4719 = true
		}
	}
	yyh4719.End()
	if yyc4719 {
		*v = yyv4719
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4723 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4724 := &yyv4723
		yy4724.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4725 := *v
	yyh4725, yyl4725 := z.DecSliceHelperStart()
	var yyc4725 bool
	if yyl4725 == 0 {
		if yyv4725 == nil {
			yyv4725 = []EnvVar{}
			yyc4725 = true
		} else if len(yyv4725) != 0 {
			yyv4725 = yyv4725[:0]
			yyc4725 = true
		}
	} else if yyl4725 > 0 {
		var yyrr4725, yyrl4725 int
		var yyrt4725 bool
		if yyl4725 > cap(yyv4725) {

			yyrg4725 := len(yyv4725) > 0
			yyv24725 := yyv4725
			yyrl4725, yyrt4725 = z.DecInferLen(yyl4725, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4725 {
				if yyrl4725 <= cap(yyv4725) {
					yyv4725 = yyv4725[:yyrl4725]
				} else {
					yyv4725 = make([]EnvVar, yyrl4725)
				}
			} else {
				yyv4725 = make([]EnvVar, yyrl4725)
			}
			yyc4725 = true
			yyrr4725 = len(yyv4725)
			if yyrg4725 {
				copy(yyv4725, yyv24725)
			}
		} else if yyl4725 != len(yyv4725) {
			yyv4725 = yyv4725[:yyl4725]
			yyc4725 = true
		}
		yyj4725 := 0
		for ; yyj4725 < yyrr4725; yyj4725++ {
			yyh4725.ElemContainerState(yyj4725)
			if r.TryDecodeAsNil() {
				yyv4725[yyj4725] = EnvVar{}
			} else {
				yyv4726 := &yyv4725[yyj4725]
				yyv4726.CodecDecodeSelf(d)
			}

		}
		if yyrt4725 {
			for ; yyj4725 < yyl4725; yyj4725++ {
				yyv4725 = append(yyv4725, EnvVar{})
				yyh4725.ElemContainerState(yyj4725)
				if r.TryDecodeAsNil() {
					yyv4725[yyj4725] = EnvVar{}
				} else {
					yyv4727 := &yyv4725[yyj4725]
					yyv4727.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4725 := 0
		for ; !r.CheckBreak(); yyj4725++ {

			if yyj4725 >= len(yyv4725) {
				yyv4725 = append(yyv4725, EnvVar{}) // var yyz4725 EnvVar
				yyc4725 = true
			}
			yyh4725.ElemContainerState(yyj4725)
			if yyj4725 < len(yyv4725) {
				if r.TryDecodeAsNil() {
					yyv4725[yyj4725] = EnvVar{}
				} else {
					yyv4728 := &yyv4725[yyj4725]
					yyv4728.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4725 < len(yyv4725) {
			yyv4725 = yyv4725[:yyj4725]
			yyc4725 = true
		} else if yyj4725 == 0 && yyv4725 == nil {
			yyv4725 = []EnvVar{}
			yyc4725 = true
		}
	}
	yyh4725.End()
	if yyc4725 {
		*v = yyv4725
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4729 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4730 := &yyv4729
		yy4730.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4731 := *v
	yyh4731, yyl4731 := z.DecSliceHelperStart()
	var yyc4731 bool
	if yyl4731 == 0 {
		if yyv4731 == nil {
			yyv4731 = []VolumeMount{}
			yyc4731 = true
		} else if len(yyv4731) != 0 {
			yyv4731 = yyv4731[:0]
			yyc4731 = true
		}
	} else if yyl4731 > 0 {
		var yyrr4731, yyrl4731 int
		var yyrt4731 bool
		if yyl4731 > cap(yyv4731) {

			yyrg4731 := len(yyv4731) > 0
			yyv24731 := yyv4731
			yyrl4731, yyrt4731 = z.DecInferLen(yyl4731, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4731 {
				if yyrl4731 <= cap(yyv4731) {
					yyv4731 = yyv4731[:yyrl4731]
				} else {
					yyv4731 = make([]VolumeMount, yyrl4731)
				}
			} else {
				yyv4731 = make([]VolumeMount, yyrl4731)
			}
			yyc4731 = true
			yyrr4731 = len(yyv4731)
			if yyrg4731 {
				copy(yyv4731, yyv24731)
			}
		} else if yyl4731 != len(yyv4731) {
			yyv4731 = yyv4731[:yyl4731]
			yyc4731 = true
		}
		yyj4731 := 0
		for ; yyj4731 < yyrr4731; yyj4731++ {
			yyh4731.ElemContainerState(yyj4731)
			if r.TryDecodeAsNil() {
				yyv4731[yyj4731] = VolumeMount{}
			} else {
				yyv4732 := &yyv4731[yyj4731]
				yyv4732.CodecDecodeSelf(d)
			}

		}
		if yyrt4731 {
			for ; yyj4731 < yyl4731; yyj4731++ {
				yyv4731 = append(yyv4731, VolumeMount{})
				yyh4731.ElemContainerState(yyj4731)
				if r.TryDecodeAsNil() {
					yyv4731[yyj4731] = VolumeMount{}
				} else {
					yyv4733 := &yyv4731[yyj4731]
					yyv4733.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4731 := 0
		for ; !r.CheckBreak(); yyj4731++ {

			if yyj4731 >= len(yyv4731) {
				yyv4731 = append(yyv4731, VolumeMount{}) // var yyz4731 VolumeMount
				yyc4731 = true
			}
			yyh4731.ElemContainerState(yyj4731)
			if yyj4731 < len(yyv4731) {
				if r.TryDecodeAsNil() {
					yyv4731[yyj4731] = VolumeMount{}
				} else {
					yyv4734 := &yyv4731[yyj4731]
					yyv4734.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4731 < len(yyv4731) {
			yyv4731 = yyv4731[:yyj4731]
			yyc4731 = true
		} else if yyj4731 == 0 && yyv4731 == nil {
			yyv4731 = []VolumeMount{}
			yyc4731 = true
		}
	}
	yyh4731.End()
	if yyc4731 {
		*v = yyv4731
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4735 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4736 := &yyv4735
		yy4736.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4737 := *v
	yyh4737, yyl4737 := z.DecSliceHelperStart()
	var yyc4737 bool
	if yyl4737 == 0 {
		if yyv4737 == nil {
			yyv4737 = []NodeSelectorTerm{}
			yyc4737 = true
		} else if len(yyv4737) != 0 {
			yyv4737 = yyv4737[:0]
			yyc4737 = true
		}
	} else if yyl4737 > 0 {
		var yyrr4737, yyrl4737 int
		var yyrt4737 bool
		if yyl4737 > cap(yyv4737) {

			yyrg4737 := len(yyv4737) > 0
			yyv24737 := yyv4737
			yyrl4737, yyrt4737 = z.DecInferLen(yyl4737, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4737 {
				if yyrl4737 <= cap(yyv4737) {
					yyv4737 = yyv4737[:yyrl4737]
				} else {
					yyv4737 = make([]NodeSelectorTerm, yyrl4737)
				}
			} else {
				yyv4737 = make([]NodeSelectorTerm, yyrl4737)
			}
			yyc4737 = true
			yyrr4737 = len(yyv4737)
			if yyrg4737 {
				copy(yyv4737, yyv24737)
			}
		} else if yyl4737 != len(yyv4737) {
			yyv4737 = yyv4737[:yyl4737]
			yyc4737 = true
		}
		yyj4737 := 0
		for ; yyj4737 < yyrr4737; yyj4737++ {
			yyh4737.ElemContainerState(yyj4737)
			if r.TryDecodeAsNil() {
				yyv4737[yyj4737] = NodeSelectorTerm{}
			} else {
				yyv4738 := &yyv4737[yyj4737]
				yyv4738.CodecDecodeSelf(d)
			}

		}
		if yyrt4737 {
			for ; yyj4737 < yyl4737; yyj4737++ {
				yyv4737 = append(yyv4737, NodeSelectorTerm{})
				yyh4737.ElemContainerState(yyj4737)
				if r.TryDecodeAsNil() {
					yyv4737[yyj4737] = NodeSelectorTerm{}
				} else {
					yyv4739 := &yyv4737[yyj4737]
					yyv4739.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4737 := 0
		for ; !r.CheckBreak(); yyj4737++ {

			if yyj4737 >= len(yyv4737) {
				yyv4737 = append(yyv4737, NodeSelectorTerm{}) // var yyz4737 NodeSelectorTerm
				yyc4737 = true
			}
			yyh4737.ElemContainerState(yyj4737)
			if yyj4737 < len(yyv4737) {
				if r.TryDecodeAsNil() {
					yyv4737[yyj4737] = NodeSelectorTerm{}
				} else {
					yyv4740 := &yyv4737[yyj4737]
					yyv4740.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4737 < len(yyv4737) {
			yyv4737 = yyv4737[:yyj4737]
			yyc4737 = true
		} else if yyj4737 == 0 && yyv4737 == nil {
			yyv4737 = []NodeSelectorTerm{}
			yyc4737 = true
		}
	}
	yyh4737.End()
	if yyc4737 {
		*v = yyv4737
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4741 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4742 := &yyv4741
		yy4742.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4743 := *v
	yyh4743, yyl4743 := z.DecSliceHelperStart()
	var yyc4743 bool
	if yyl4743 == 0 {
		if yyv4743 == nil {
			yyv4743 = []NodeSelectorRequirement{}
			yyc4743 = true
		} else if len(yyv4743) != 0 {
			yyv4743 = yyv4743[:0]
			yyc4743 = true
		}
	} else if yyl4743 > 0 {
		var yyrr4743, yyrl4743 int
		var yyrt4743 bool
		if yyl4743 > cap(yyv4743) {

			yyrg4743 := len(yyv4743) > 0
			yyv24743 := yyv4743
			yyrl4743, yyrt4743 = z.DecInferLen(yyl4743, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4743 {
				if yyrl4743 <= cap(yyv4743) {
					yyv4743 = yyv4743[:yyrl4743]
				} else {
					yyv4743 = make([]NodeSelectorRequirement, yyrl4743)
				}
			} else {
				yyv4743 = make([]NodeSelectorRequirement, yyrl4743)
			}
			yyc4743 = true
			yyrr4743 = len(yyv4743)
			if yyrg4743 {
				copy(yyv4743, yyv24743)
			}
		} else if yyl4743 != len(yyv4743) {
			yyv4743 = yyv4743[:yyl4743]
			yyc4743 = true
		}
		yyj4743 := 0
		for ; yyj4743 < yyrr4743; yyj4743++ {
			yyh4743.ElemContainerState(yyj4743)
			if r.TryDecodeAsNil() {
				yyv4743[yyj4743] = NodeSelectorRequirement{}
			} else {
				yyv4744 := &yyv4743[yyj4743]
				yyv4744.CodecDecodeSelf(d)
			}

		}
		if yyrt4743 {
			for ; yyj4743 < yyl4743; yyj4743++ {
				yyv4743 = append(yyv4743, NodeSelectorRequirement{})
				yyh4743.ElemContainerState(yyj4743)
				if r.TryDecodeAsNil() {
					yyv4743[yyj4743] = NodeSelectorRequirement{}
				} else {
					yyv4745 := &yyv4743[yyj4743]
					yyv4745.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4743 := 0
		for ; !r.CheckBreak(); yyj4743++ {

			if yyj4743 >= len(yyv4743) {
				yyv4743 = append(yyv4743, NodeSelectorRequirement{}) // var yyz4743 NodeSelectorRequirement
				yyc4743 = true
			}
			yyh4743.ElemContainerState(yyj4743)
			if yyj4743 < len(yyv4743) {
				if r.TryDecodeAsNil() {
					yyv4743[yyj4743] = NodeSelectorRequirement{}
				} else {
					yyv4746 := &yyv4743[yyj4743]
					yyv4746.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4743 < len(yyv4743) {
			yyv4743 = yyv4743[:yyj4743]
			yyc4743 = true
		} else if yyj4743 == 0 && yyv4743 == nil {
			yyv4743 = []NodeSelectorRequirement{}
			yyc4743 = true
		}
	}
	yyh4743.End()
	if yyc4743 {
		*v = yyv4743
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4747 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4748 := &yyv4747
		yy4748.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4749 := *v
	yyh4749, yyl4749 := z.DecSliceHelperStart()
	var yyc4749 bool
	if yyl4749 == 0 {
		if yyv4749 == nil {
			yyv4749 = []PodAffinityTerm{}
			yyc4749 = true
		} else if len(yyv4749) != 0 {
			yyv4749 = yyv4749[:0]
			yyc4749 = true
		}
	} else if yyl4749 > 0 {
		var yyrr4749, yyrl4749 int
		var yyrt4749 bool
		if yyl4749 > cap(yyv4749) {

			yyrg4749 := len(yyv4749) > 0
			yyv24749 := yyv4749
			yyrl4749, yyrt4749 = z.DecInferLen(yyl4749, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4749 {
				if yyrl4749 <= cap(yyv4749) {
					yyv4749 = yyv4749[:yyrl4749]
				} else {
					yyv4749 = make([]PodAffinityTerm, yyrl4749)
				}
			} else {
				yyv4749 = make([]PodAffinityTerm, yyrl4749)
			}
			yyc4749 = true
			yyrr4749 = len(yyv4749)
			if yyrg4749 {
				copy(yyv4749, yyv24749)
			}
		} else if yyl4749 != len(yyv4749) {
			yyv4749 = yyv4749[:yyl4749]
			yyc4749 = true
		}
		yyj4749 := 0
		for ; yyj4749 < yyrr4749; yyj4749++ {
			yyh4749.ElemContainerState(yyj4749)
			if r.TryDecodeAsNil() {
				yyv4749[yyj4749] = PodAffinityTerm{}
			} else {
				yyv4750 := &yyv4749[yyj4749]
				yyv4750.CodecDecodeSelf(d)
			}

		}
		if yyrt4749 {
			for ; yyj4749 < yyl4749; yyj4749++ {
				yyv4749 = append(yyv4749, PodAffinityTerm{})
				yyh4749.ElemContainerState(yyj4749)
				if r.TryDecodeAsNil() {
					yyv4749[yyj4749] = PodAffinityTerm{}
				} else {
					yyv4751 := &yyv4749[yyj4749]
					yyv4751.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4749 := 0
		for ; !r.CheckBreak(); yyj4749++ {

			if yyj4749 >= len(yyv4749) {
				yyv4749 = append(yyv4749, PodAffinityTerm{}) // var yyz4749 PodAffinityTerm
				yyc4749 = true
			}
			yyh4749.ElemContainerState(yyj4749)
			if yyj4749 < len(yyv4749) {
				if r.TryDecodeAsNil() {
					yyv4749[yyj4749] = PodAffinityTerm{}
				} else {
					yyv4752 := &yyv4749[yyj4749]
					yyv4752.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4749 < len(yyv4749) {
			yyv4749 = yyv4749[:yyj4749]
			yyc4749 = true
		} else if yyj4749 == 0 && yyv4749 == nil {
			yyv4749 = []PodAffinityTerm{}
			yyc4749 = true
		}
	}
	yyh4749.End()
	if yyc4749 {
		*v = yyv4749
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4753 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4754 := &yyv4753
		yy4754.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4755 := *v
	yyh4755, yyl4755 := z.DecSliceHelperStart()
	var yyc4755 bool
	if yyl4755 == 0 {
		if yyv4755 == nil {
			yyv4755 = []WeightedPodAffinityTerm{}
			yyc4755 = true
		} else if len(yyv4755) != 0 {
			yyv4755 = yyv4755[:0]
			yyc4755 = true
		}
	} else if yyl4755 > 0 {
		var yyrr4755, yyrl4755 int
		var yyrt4755 bool
		if yyl4755 > cap(yyv4755) {

			yyrg4755 := len(yyv4755) > 0
			yyv24755 := yyv4755
			yyrl4755, yyrt4755 = z.DecInferLen(yyl4755, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4755 {
				if yyrl4755 <= cap(yyv4755) {
					yyv4755 = yyv4755[:yyrl4755]
				} else {
					yyv4755 = make([]WeightedPodAffinityTerm, yyrl4755)
				}
			} else {
				yyv4755 = make([]WeightedPodAffinityTerm, yyrl4755)
			}
			yyc4755 = true
			yyrr4755 = len(yyv4755)
			if yyrg4755 {
				copy(yyv4755, yyv24755)
			}
		} else if yyl4755 != len(yyv4755) {
			yyv4755 = yyv4755[:yyl4755]
			yyc4755 = true
		}
		yyj4755 := 0
		for ; yyj4755 < yyrr4755; yyj4755++ {
			yyh4755.ElemContainerState(yyj4755)
			if r.TryDecodeAsNil() {
				yyv4755[yyj4755] = WeightedPodAffinityTerm{}
			} else {
				yyv4756 := &yyv4755[yyj4755]
				yyv4756.CodecDecodeSelf(d)
			}

		}
		if yyrt4755 {
			for ; yyj4755 < yyl4755; yyj4755++ {
				yyv4755 = append(yyv4755, WeightedPodAffinityTerm{})
				yyh4755.ElemContainerState(yyj4755)
				if r.TryDecodeAsNil() {
					yyv4755[yyj4755] = WeightedPodAffinityTerm{}
				} else {
					yyv4757 := &yyv4755[yyj4755]
					yyv4757.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4755 := 0
		for ; !r.CheckBreak(); yyj4755++ {

			if yyj4755 >= len(yyv4755) {
				yyv4755 = append(yyv4755, WeightedPodAffinityTerm{}) // var yyz4755 WeightedPodAffinityTerm
				yyc4755 = true
			}
			yyh4755.ElemContainerState(yyj4755)
			if yyj4755 < len(yyv4755) {
				if r.TryDecodeAsNil() {
					yyv4755[yyj4755] = WeightedPodAffinityTerm{}
				} else {
					yyv4758 := &yyv4755[yyj4755]
					yyv4758.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4755 < len(yyv4755) {
			yyv4755 = yyv4755[:yyj4755]
			yyc4755 = true
		} else if yyj4755 == 0 && yyv4755 == nil {
			yyv4755 = []WeightedPodAffinityTerm{}
			yyc4755 = true
		}
	}
	yyh4755.End()
	if yyc4755 {
		*v = yyv4755
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4759 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4760 := &yyv4759
		yy4760.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4761 := *v
	yyh4761, yyl4761 := z.DecSliceHelperStart()
	var yyc4761 bool
	if yyl4761 == 0 {
		if yyv4761 == nil {
			yyv4761 = []PreferredSchedulingTerm{}
			yyc4761 = true
		} else if len(yyv4761) != 0 {
			yyv4761 = yyv4761[:0]
			yyc4761 = true
		}
	} else if yyl4761 > 0 {
		var yyrr4761, yyrl4761 int
		var yyrt4761 bool
		if yyl4761 > cap(yyv4761) {

			yyrg4761 := len(yyv4761) > 0
			yyv24761 := yyv4761
			yyrl4761, yyrt4761 = z.DecInferLen(yyl4761, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4761 {
				if yyrl4761 <= cap(yyv4761) {
					yyv4761 = yyv4761[:yyrl4761]
				} else {
					yyv4761 = make([]PreferredSchedulingTerm, yyrl4761)
				}
			} else {
				yyv4761 = make([]PreferredSchedulingTerm, yyrl4761)
			}
			yyc4761 = true
			yyrr4761 = len(yyv4761)
			if yyrg4761 {
				copy(yyv4761, yyv24761)
			}
		} else if yyl4761 != len(yyv4761) {
			yyv4761 = yyv4761[:yyl4761]
			yyc4761 = true
		}
		yyj4761 := 0
		for ; yyj4761 < yyrr4761; yyj4761++ {
			yyh4761.ElemContainerState(yyj4761)
			if r.TryDecodeAsNil() {
				yyv4761[yyj4761] = PreferredSchedulingTerm{}
			} else {
				yyv4762 := &yyv4761[yyj4761]
				yyv4762.CodecDecodeSelf(d)
			}

		}
		if yyrt4761 {
			for ; yyj4761 < yyl4761; yyj4761++ {
				yyv4761 = append(yyv4761, PreferredSchedulingTerm{})
				yyh4761.ElemContainerState(yyj4761)
				if r.TryDecodeAsNil() {
					yyv4761[yyj4761] = PreferredSchedulingTerm{}
				} else {
					yyv4763 := &yyv4761[yyj4761]
					yyv4763.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4761 := 0
		for ; !r.CheckBreak(); yyj4761++ {

			if yyj4761 >= len(yyv4761) {
				yyv4761 = append(yyv4761, PreferredSchedulingTerm{}) // var yyz4761 PreferredSchedulingTerm
				yyc4761 = true
			}
			yyh4761.ElemContainerState(yyj4761)
			if yyj4761 < len(yyv4761) {
				if r.TryDecodeAsNil() {
					yyv4761[yyj4761] = PreferredSchedulingTerm{}
				} else {
					yyv4764 := &yyv4761[yyj4761]
					yyv4764.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4761 < len(yyv4761) {
			yyv4761 = yyv4761[:yyj4761]
			yyc4761 = true
		} else if yyj4761 == 0 && yyv4761 == nil {
			yyv4761 = []PreferredSchedulingTerm{}
			yyc4761 = true
		}
	}
	yyh4761.End()
	if yyc4761 {
		*v = yyv4761
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4765 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4766 := &yyv4765
		yy4766.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4767 := *v
	yyh4767, yyl4767 := z.DecSliceHelperStart()
	var yyc4767 bool
	if yyl4767 == 0 {
		if yyv4767 == nil {
			yyv4767 = []Volume{}
			yyc4767 = true
		} else if len(yyv4767) != 0 {
			yyv4767 = yyv4767[:0]
			yyc4767 = true
		}
	} else if yyl4767 > 0 {
		var yyrr4767, yyrl4767 int
		var yyrt4767 bool
		if yyl4767 > cap(yyv4767) {

			yyrg4767 := len(yyv4767) > 0
			yyv24767 := yyv4767
			yyrl4767, yyrt4767 = z.DecInferLen(yyl4767, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4767 {
				if yyrl4767 <= cap(yyv4767) {
					yyv4767 = yyv4767[:yyrl4767]
				} else {
					yyv4767 = make([]Volume, yyrl4767)
				}
			} else {
				yyv4767 = make([]Volume, yyrl4767)
			}
			yyc4767 = true
			yyrr4767 = len(yyv4767)
			if yyrg4767 {
				copy(yyv4767, yyv24767)
			}
		} else if yyl4767 != len(yyv4767) {
			yyv4767 = yyv4767[:yyl4767]
			yyc4767 = true
		}
		yyj4767 := 0
		for ; yyj4767 < yyrr4767; yyj4767++ {
			yyh4767.ElemContainerState(yyj4767)
			if r.TryDecodeAsNil() {
				yyv4767[yyj4767] = Volume{}
			} else {
				yyv4768 := &yyv4767[yyj4767]
				yyv4768.CodecDecodeSelf(d)
			}

		}
		if yyrt4767 {
			for ; yyj4767 < yyl4767; yyj4767++ {
				yyv4767 = append(yyv4767, Volume{})
				yyh4767.ElemContainerState(yyj4767)
				if r.TryDecodeAsNil() {
					yyv4767[yyj4767] = Volume{}
				} else {
					yyv4769 := &yyv4767[yyj4767]
					yyv4769.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4767 := 0
		for ; !r.CheckBreak(); yyj4767++ {

			if yyj4767 >= len(yyv4767) {
				yyv4767 = append(yyv4767, Volume{}) // var yyz4767 Volume
				yyc4767 = true
			}
			yyh4767.ElemContainerState(yyj4767)
			if yyj4767 < len(yyv4767) {
				if r.TryDecodeAsNil() {
					yyv4767[yyj4767] = Volume{}
				} else {
					yyv4770 := &yyv4767[yyj4767]
					yyv4770.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4767 < len(yyv4767) {
			yyv4767 = yyv4767[:yyj4767]
			yyc4767 = true
		} else if yyj4767 == 0 && yyv4767 == nil {
			yyv4767 = []Volume{}
			yyc4767 = true
		}
	}
	yyh4767.End()
	if yyc4767 {
		*v = yyv4767
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4771 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4772 := &yyv4771
		yy4772.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4773 := *v
	yyh4773, yyl4773 := z.DecSliceHelperStart()
	var yyc4773 bool
	if yyl4773 == 0 {
		if yyv4773 == nil {
			yyv4773 = []Container{}
			yyc4773 = true
		} else if len(yyv4773) != 0 {
			yyv4773 = yyv4773[:0]
			yyc4773 = true
		}
	} else if yyl4773 > 0 {
		var yyrr4773, yyrl4773 int
		var yyrt4773 bool
		if yyl4773 > cap(yyv4773) {

			yyrg4773 := len(yyv4773) > 0
			yyv24773 := yyv4773
			yyrl4773, yyrt4773 = z.DecInferLen(yyl4773, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4773 {
				if yyrl4773 <= cap(yyv4773) {
					yyv4773 = yyv4773[:yyrl4773]
				} else {
					yyv4773 = make([]Container, yyrl4773)
				}
			} else {
				yyv4773 = make([]Container, yyrl4773)
			}
			yyc4773 = true
			yyrr4773 = len(yyv4773)
			if yyrg4773 {
				copy(yyv4773, yyv24773)
			}
		} else if yyl4773 != len(yyv4773) {
			yyv4773 = yyv4773[:yyl4773]
			yyc4773 = true
		}
		yyj4773 := 0
		for ; yyj4773 < yyrr4773; yyj4773++ {
			yyh4773.ElemContainerState(yyj4773)
			if r.TryDecodeAsNil() {
				yyv4773[yyj4773] = Container{}
			} else {
				yyv4774 := &yyv4773[yyj4773]
				yyv4774.CodecDecodeSelf(d)
			}

		}
		if yyrt4773 {
			for ; yyj4773 < yyl4773; yyj4773++ {
				yyv4773 = append(yyv4773, Container{})
				yyh4773.ElemContainerState(yyj4773)
				if r.TryDecodeAsNil() {
					yyv4773[yyj4773] = Container{}
				} else {
					yyv4775 := &yyv4773[yyj4773]
					yyv4775.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4773 := 0
		for ; !r.CheckBreak(); yyj4773++ {

			if yyj4773 >= len(yyv4773) {
				yyv4773 = append(yyv4773, Container{}) // var yyz4773 Container
				yyc4773 = true
			}
			yyh4773.ElemContainerState(yyj4773)
			if yyj4773 < len(yyv4773) {
				if r.TryDecodeAsNil() {
					yyv4773[yyj4773] = Container{}
				} else {
					yyv4776 := &yyv4773[yyj4773]
					yyv4776.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4773 < len(yyv4773) {
			yyv4773 = yyv4773[:yyj4773]
			yyc4773 = true
		} else if yyj4773 == 0 && yyv4773 == nil {
			yyv4773 = []Container{}
			yyc4773 = true
		}
	}
	yyh4773.End()
	if yyc4773 {
		*v = yyv4773
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4777 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4778 := &yyv4777
		yy4778.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4779 := *v
	yyh4779, yyl4779 := z.DecSliceHelperStart()
	var yyc4779 bool
	if yyl4779 == 0 {
		if yyv4779 == nil {
			yyv4779 = []LocalObjectReference{}
			yyc4779 = true
		} else if len(yyv4779) != 0 {
			yyv4779 = yyv4779[:0]
			yyc4779 = true
		}
	} else if yyl4779 > 0 {
		var yyrr4779, yyrl4779 int
		var yyrt4779 bool
		if yyl4779 > cap(yyv4779) {

			yyrg4779 := len(yyv4779) > 0
			yyv24779 := yyv4779
			yyrl4779, yyrt4779 = z.DecInferLen(yyl4779, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4779 {
				if yyrl4779 <= cap(yyv4779) {
					yyv4779 = yyv4779[:yyrl4779]
				} else {
					yyv4779 = make([]LocalObjectReference, yyrl4779)
				}
			} else {
				yyv4779 = make([]LocalObjectReference, yyrl4779)
			}
			yyc4779 = true
			yyrr4779 = len(yyv4779)
			if yyrg4779 {
				copy(yyv4779, yyv24779)
			}
		} else if yyl4779 != len(yyv4779) {
			yyv4779 = yyv4779[:yyl4779]
			yyc4779 = true
		}
		yyj4779 := 0
		for ; yyj4779 < yyrr4779; yyj4779++ {
			yyh4779.ElemContainerState(yyj4779)
			if r.TryDecodeAsNil() {
				yyv4779[yyj4779] = LocalObjectReference{}
			} else {
				yyv4780 := &yyv4779[yyj4779]
				yyv4780.CodecDecodeSelf(d)
			}

		}
		if yyrt4779 {
			for ; yyj4779 < yyl4779; yyj4779++ {
				yyv4779 = append(yyv4779, LocalObjectReference{})
				yyh4779.ElemContainerState(yyj4779)
				if r.TryDecodeAsNil() {
					yyv4779[yyj4779] = LocalObjectReference{}
				} else {
					yyv4781 := &yyv4779[yyj4779]
					yyv4781.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4779 := 0
		for ; !r.CheckBreak(); yyj4779++ {

			if yyj4779 >= len(yyv4779) {
				yyv4779 = append(yyv4779, LocalObjectReference{}) // var yyz4779 LocalObjectReference
				yyc4779 = true
			}
			yyh4779.ElemContainerState(yyj4779)
			if yyj4779 < len(yyv4779) {
				if r.TryDecodeAsNil() {
					yyv4779[yyj4779] = LocalObjectReference{}
				} else {
					yyv4782 := &yyv4779[yyj4779]
					yyv4782.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4779 < len(yyv4779) {
			yyv4779 = yyv4779[:yyj4779]
			yyc4779 = true
		} else if yyj4779 == 0 && yyv4779 == nil {
			yyv4779 = []LocalObjectReference{}
			yyc4779 = true
		}
	}
	yyh4779.End()
	if yyc4779 {
		*v = yyv4779
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4783 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4784 := &yyv4783
		yy4784.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4785 := *v
	yyh4785, yyl4785 := z.DecSliceHelperStart()
	var yyc4785 bool
	if yyl4785 == 0 {
		if yyv4785 == nil {
			yyv4785 = []PodCondition{}
			yyc4785 = true
		} else if len(yyv4785) != 0 {
			yyv4785 = yyv4785[:0]
			yyc4785 = true
		}
	} else if yyl4785 > 0 {
		var yyrr4785, yyrl4785 int
		var yyrt4785 bool
		if yyl4785 > cap(yyv4785) {

			yyrg4785 := len(yyv4785) > 0
			yyv24785 := yyv4785
			yyrl4785, yyrt4785 = z.DecInferLen(yyl4785, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4785 {
				if yyrl4785 <= cap(yyv4785) {
					yyv4785 = yyv4785[:yyrl4785]
				} else {
					yyv4785 = make([]PodCondition, yyrl4785)
				}
			} else {
				yyv4785 = make([]PodCondition, yyrl4785)
			}
			yyc4785 = true
			yyrr4785 = len(yyv4785)
			if yyrg4785 {
				copy(yyv4785, yyv24785)
			}
		} else if yyl4785 != len(yyv4785) {
			yyv4785 = yyv4785[:yyl4785]
			yyc4785 = true
		}
		yyj4785 := 0
		for ; yyj4785 < yyrr4785; yyj4785++ {
			yyh4785.ElemContainerState(yyj4785)
			if r.TryDecodeAsNil() {
				yyv4785[yyj4785] = PodCondition{}
			} else {
				yyv4786 := &yyv4785[yyj4785]
				yyv4786.CodecDecodeSelf(d)
			}

		}
		if yyrt4785 {
			for ; yyj4785 < yyl4785; yyj4785++ {
				yyv4785 = append(yyv4785, PodCondition{})
				yyh4785.ElemContainerState(yyj4785)
				if r.TryDecodeAsNil() {
					yyv4785[yyj4785] = PodCondition{}
				} else {
					yyv4787 := &yyv4785[yyj4785]
					yyv4787.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4785 := 0
		for ; !r.CheckBreak(); yyj4785++ {

			if yyj4785 >= len(yyv4785) {
				yyv4785 = append(yyv4785, PodCondition{}) // var yyz4785 PodCondition
				yyc4785 = true
			}
			yyh4785.ElemContainerState(yyj4785)
			if yyj4785 < len(yyv4785) {
				if r.TryDecodeAsNil() {
					yyv4785[yyj4785] = PodCondition{}
				} else {
					yyv4788 := &yyv4785[yyj4785]
					yyv4788.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4785 < len(yyv4785) {
			yyv4785 = yyv4785[:yyj4785]
			yyc4785 = true
		} else if yyj4785 == 0 && yyv4785 == nil {
			yyv4785 = []PodCondition{}
			yyc4785 = true
		}
	}
	yyh4785.End()
	if yyc4785 {
		*v = yyv4785
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4789 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4790 := &yyv4789
		yy4790.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4791 := *v
	yyh4791, yyl4791 := z.DecSliceHelperStart()
	var yyc4791 bool
	if yyl4791 == 0 {
		if yyv4791 == nil {
			yyv4791 = []ContainerStatus{}
			yyc4791 = true
		} else if len(yyv4791) != 0 {
			yyv4791 = yyv4791[:0]
			yyc4791 = true
		}
	} else if yyl4791 > 0 {
		var yyrr4791, yyrl4791 int
		var yyrt4791 bool
		if yyl4791 > cap(yyv4791) {

			yyrg4791 := len(yyv4791) > 0
			yyv24791 := yyv4791
			yyrl4791, yyrt4791 = z.DecInferLen(yyl4791, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4791 {
				if yyrl4791 <= cap(yyv4791) {
					yyv4791 = yyv4791[:yyrl4791]
				} else {
					yyv4791 = make([]ContainerStatus, yyrl4791)
				}
			} else {
				yyv4791 = make([]ContainerStatus, yyrl4791)
			}
			yyc4791 = true
			yyrr4791 = len(yyv4791)
			if yyrg4791 {
				copy(yyv4791, yyv24791)
			}
		} else if yyl4791 != len(yyv4791) {
			yyv4791 = yyv4791[:yyl4791]
			yyc4791 = true
		}
		yyj4791 := 0
		for ; yyj4791 < yyrr4791; yyj4791++ {
			yyh4791.ElemContainerState(yyj4791)
			if r.TryDecodeAsNil() {
				yyv4791[yyj4791] = ContainerStatus{}
			} else {
				yyv4792 := &yyv4791[yyj4791]
				yyv4792.CodecDecodeSelf(d)
			}

		}
		if yyrt4791 {
			for ; yyj4791 < yyl4791; yyj4791++ {
				yyv4791 = append(yyv4791, ContainerStatus{})
				yyh4791.ElemContainerState(yyj4791)
				if r.TryDecodeAsNil() {
					yyv4791[yyj4791] = ContainerStatus{}
				} else {
					yyv4793 := &yyv4791[yyj4791]
					yyv4793.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4791 := 0
		for ; !r.CheckBreak(); yyj4791++ {

			if yyj4791 >= len(yyv4791) {
				yyv4791 = append(yyv4791, ContainerStatus{}) // var yyz4791 ContainerStatus
				yyc4791 = true
			}
			yyh4791.ElemContainerState(yyj4791)
			if yyj4791 < len(yyv4791) {
				if r.TryDecodeAsNil() {
					yyv4791[yyj4791] = ContainerStatus{}
				} else {
					yyv4794 := &yyv4791[yyj4791]
					yyv4794.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4791 < len(yyv4791) {
			yyv4791 = yyv4791[:yyj4791]
			yyc4791 = true
		} else if yyj4791 == 0 && yyv4791 == nil {
			yyv4791 = []ContainerStatus{}
			yyc4791 = true
		}
	}
	yyh4791.End()
	if yyc4791 {
		*v = yyv4791
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4795 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4796 := &yyv4795
		yy4796.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4797 := *v
	yyh4797, yyl4797 := z.DecSliceHelperStart()
	var yyc4797 bool
	if yyl4797 == 0 {
		if yyv4797 == nil {
			yyv4797 = []Pod{}
			yyc4797 = true
		} else if len(yyv4797) != 0 {
			yyv4797 = yyv4797[:0]
			yyc4797 = true
		}
	} else if yyl4797 > 0 {
		var yyrr4797, yyrl4797 int
		var yyrt4797 bool
		if yyl4797 > cap(yyv4797) {

			yyrg4797 := len(yyv4797) > 0
			yyv24797 := yyv4797
			yyrl4797, yyrt4797 = z.DecInferLen(yyl4797, z.DecBasicHandle().MaxInitLen, 664)
			if yyrt4797 {
				if yyrl4797 <= cap(yyv4797) {
					yyv4797 = yyv4797[:yyrl4797]
				} else {
					yyv4797 = make([]Pod, yyrl4797)
				}
			} else {
				yyv4797 = make([]Pod, yyrl4797)
			}
			yyc4797 = true
			yyrr4797 = len(yyv4797)
			if yyrg4797 {
				copy(yyv4797, yyv24797)
			}
		} else if yyl4797 != len(yyv4797) {
			yyv4797 = yyv4797[:yyl4797]
			yyc4797 = true
		}
		yyj4797 := 0
		for ; yyj4797 < yyrr4797; yyj4797++ {
			yyh4797.ElemContainerState(yyj4797)
			if r.TryDecodeAsNil() {
				yyv4797[yyj4797] = Pod{}
			} else {
				yyv4798 := &yyv4797[yyj4797]
				yyv4798.CodecDecodeSelf(d)
			}

		}
		if yyrt4797 {
			for ; yyj4797 < yyl4797; yyj4797++ {
				yyv4797 = append(yyv4797, Pod{})
				yyh4797.ElemContainerState(yyj4797)
				if r.TryDecodeAsNil() {
					yyv4797[yyj4797] = Pod{}
				} else {
					yyv4799 := &yyv4797[yyj4797]
					yyv4799.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4797 := 0
		for ; !r.CheckBreak(); yyj4797++ {

			if yyj4797 >= len(yyv4797) {
				yyv4797 = append(yyv4797, Pod{}) // var yyz4797 Pod
				yyc4797 = true
			}
			yyh4797.ElemContainerState(yyj4797)
			if yyj4797 < len(yyv4797) {
				if r.TryDecodeAsNil() {
					yyv4797[yyj4797] = Pod{}
				} else {
					yyv4800 := &yyv4797[yyj4797]
					yyv4800.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4797 < len(yyv4797) {
			yyv4797 = yyv4797[:yyj4797]
			yyc4797 = true
		} else if yyj4797 == 0 && yyv4797 == nil {
			yyv4797 = []Pod{}
			yyc4797 = true
		}
	}
	yyh4797.End()
	if yyc4797 {
		*v = yyv4797
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4801 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4802 := &yyv4801
		yy4802.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4803 := *v
	yyh4803, yyl4803 := z.DecSliceHelperStart()
	var yyc4803 bool
	if yyl4803 == 0 {
		if yyv4803 == nil {
			yyv4803 = []PodTemplate{}
			yyc4803 = true
		} else if len(yyv4803) != 0 {
			yyv4803 = yyv4803[:0]
			yyc4803 = true
		}
	} else if yyl4803 > 0 {
		var yyrr4803, yyrl4803 int
		var yyrt4803 bool
		if yyl4803 > cap(yyv4803) {

			yyrg4803 := len(yyv4803) > 0
			yyv24803 := yyv4803
			yyrl4803, yyrt4803 = z.DecInferLen(yyl4803, z.DecBasicHandle().MaxInitLen, 728)
			if yyrt4803 {
				if yyrl4803 <= cap(yyv4803) {
					yyv4803 = yyv4803[:yyrl4803]
				} else {
					yyv4803 = make([]PodTemplate, yyrl4803)
				}
			} else {
				yyv4803 = make([]PodTemplate, yyrl4803)
			}
			yyc4803 = true
			yyrr4803 = len(yyv4803)
			if yyrg4803 {
				copy(yyv4803, yyv24803)
			}
		} else if yyl4803 != len(yyv4803) {
			yyv4803 = yyv4803[:yyl4803]
			yyc4803 = true
		}
		yyj4803 := 0
		for ; yyj4803 < yyrr4803; yyj4803++ {
			yyh4803.ElemContainerState(yyj4803)
			if r.TryDecodeAsNil() {
				yyv4803[yyj4803] = PodTemplate{}
			} else {
				yyv4804 := &yyv4803[yyj4803]
				yyv4804.CodecDecodeSelf(d)
			}

		}
		if yyrt4803 {
			for ; yyj4803 < yyl4803; yyj4803++ {
				yyv4803 = append(yyv4803, PodTemplate{})
				yyh4803.ElemContainerState(yyj4803)
				if r.TryDecodeAsNil() {
					yyv4803[yyj4803] = PodTemplate{}
				} else {
					yyv4805 := &yyv4803[yyj4803]
					yyv4805.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4803 := 0
		for ; !r.CheckBreak(); yyj4803++ {

			if yyj4803 >= len(yyv4803) {
				yyv4803 = append(yyv4803, PodTemplate{}) // var yyz4803 PodTemplate
				yyc4803 = true
			}
			yyh4803.ElemContainerState(yyj4803)
			if yyj4803 < len(yyv4803) {
				if r.TryDecodeAsNil() {
					yyv4803[yyj4803] = PodTemplate{}
				} else {
					yyv4806 := &yyv4803[yyj4803]
					yyv4806.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4803 < len(yyv4803) {
			yyv4803 = yyv4803[:yyj4803]
			yyc4803 = true
		} else if yyj4803 == 0 && yyv4803 == nil {
			yyv4803 = []PodTemplate{}
			yyc4803 = true
		}
	}
	yyh4803.End()
	if yyc4803 {
		*v = yyv4803
	}
}

func (x codecSelfer1234) encSliceReplicationControllerCondition(v []ReplicationControllerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4807 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4808 := &yyv4807
		yy4808.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationControllerCondition(v *[]ReplicationControllerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4809 := *v
	yyh4809, yyl4809 := z.DecSliceHelperStart()
	var yyc4809 bool
	if yyl4809 == 0 {
		if yyv4809 == nil {
			yyv4809 = []ReplicationControllerCondition{}
			yyc4809 = true
		} else if len(yyv4809) != 0 {
			yyv4809 = yyv4809[:0]
			yyc4809 = true
		}
	} else if yyl4809 > 0 {
		var yyrr4809, yyrl4809 int
		var yyrt4809 bool
		if yyl4809 > cap(yyv4809) {

			yyrg4809 := len(yyv4809) > 0
			yyv24809 := yyv4809
			yyrl4809, yyrt4809 = z.DecInferLen(yyl4809, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt4809 {
				if yyrl4809 <= cap(yyv4809) {
					yyv4809 = yyv4809[:yyrl4809]
				} else {
					yyv4809 = make([]ReplicationControllerCondition, yyrl4809)
				}
			} else {
				yyv4809 = make([]ReplicationControllerCondition, yyrl4809)
			}
			yyc4809 = true
			yyrr4809 = len(yyv4809)
			if yyrg4809 {
				copy(yyv4809, yyv24809)
			}
		} else if yyl4809 != len(yyv4809) {
			yyv4809 = yyv4809[:yyl4809]
			yyc4809 = true
		}
		yyj4809 := 0
		for ; yyj4809 < yyrr4809; yyj4809++ {
			yyh4809.ElemContainerState(yyj4809)
			if r.TryDecodeAsNil() {
				yyv4809[yyj4809] = ReplicationControllerCondition{}
			} else {
				yyv4810 := &yyv4809[yyj4809]
				yyv4810.CodecDecodeSelf(d)
			}

		}
		if yyrt4809 {
			for ; yyj4809 < yyl4809; yyj4809++ {
				yyv4809 = append(yyv4809, ReplicationControllerCondition{})
				yyh4809.ElemContainerState(yyj4809)
				if r.TryDecodeAsNil() {
					yyv4809[yyj4809] = ReplicationControllerCondition{}
				} else {
					yyv4811 := &yyv4809[yyj4809]
					yyv4811.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4809 := 0
		for ; !r.CheckBreak(); yyj4809++ {

			if yyj4809 >= len(yyv4809) {
				yyv4809 = append(yyv4809, ReplicationControllerCondition{}) // var yyz4809 ReplicationControllerCondition
				yyc4809 = true
			}
			yyh4809.ElemContainerState(yyj4809)
			if yyj4809 < len(yyv4809) {
				if r.TryDecodeAsNil() {
					yyv4809[yyj4809] = ReplicationControllerCondition{}
				} else {
					yyv4812 := &yyv4809[yyj4809]
					yyv4812.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4809 < len(yyv4809) {
			yyv4809 = yyv4809[:yyj4809]
			yyc4809 = true
		} else if yyj4809 == 0 && yyv4809 == nil {
			yyv4809 = []ReplicationControllerCondition{}
			yyc4809 = true
		}
	}
	yyh4809.End()
	if yyc4809 {
		*v = yyv4809
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4813 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4814 := &yyv4813
		yy4814.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4815 := *v
	yyh4815, yyl4815 := z.DecSliceHelperStart()
	var yyc4815 bool
	if yyl4815 == 0 {
		if yyv4815 == nil {
			yyv4815 = []ReplicationController{}
			yyc4815 = true
		} else if len(yyv4815) != 0 {
			yyv4815 = yyv4815[:0]
			yyc4815 = true
		}
	} else if yyl4815 > 0 {
		var yyrr4815, yyrl4815 int
		var yyrt4815 bool
		if yyl4815 > cap(yyv4815) {

			yyrg4815 := len(yyv4815) > 0
			yyv24815 := yyv4815
			yyrl4815, yyrt4815 = z.DecInferLen(yyl4815, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt4815 {
				if yyrl4815 <= cap(yyv4815) {
					yyv4815 = yyv4815[:yyrl4815]
				} else {
					yyv4815 = make([]ReplicationController, yyrl4815)
				}
			} else {
				yyv4815 = make([]ReplicationController, yyrl4815)
			}
			yyc4815 = true
			yyrr4815 = len(yyv4815)
			if yyrg4815 {
				copy(yyv4815, yyv24815)
			}
		} else if yyl4815 != len(yyv4815) {
			yyv4815 = yyv4815[:yyl4815]
			yyc4815 = true
		}
		yyj4815 := 0
		for ; yyj4815 < yyrr4815; yyj4815++ {
			yyh4815.ElemContainerState(yyj4815)
			if r.TryDecodeAsNil() {
				yyv4815[yyj4815] = ReplicationController{}
			} else {
				yyv4816 := &yyv4815[yyj4815]
				yyv4816.CodecDecodeSelf(d)
			}

		}
		if yyrt4815 {
			for ; yyj4815 < yyl4815; yyj4815++ {
				yyv4815 = append(yyv4815, ReplicationController{})
				yyh4815.ElemContainerState(yyj4815)
				if r.TryDecodeAsNil() {
					yyv4815[yyj4815] = ReplicationController{}
				} else {
					yyv4817 := &yyv4815[yyj4815]
					yyv4817.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4815 := 0
		for ; !r.CheckBreak(); yyj4815++ {

			if yyj4815 >= len(yyv4815) {
				yyv4815 = append(yyv4815, ReplicationController{}) // var yyz4815 ReplicationController
				yyc4815 = true
			}
			yyh4815.ElemContainerState(yyj4815)
			if yyj4815 < len(yyv4815) {
				if r.TryDecodeAsNil() {
					yyv4815[yyj4815] = ReplicationController{}
				} else {
					yyv4818 := &yyv4815[yyj4815]
					yyv4818.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4815 < len(yyv4815) {
			yyv4815 = yyv4815[:yyj4815]
			yyc4815 = true
		} else if yyj4815 == 0 && yyv4815 == nil {
			yyv4815 = []ReplicationController{}
			yyc4815 = true
		}
	}
	yyh4815.End()
	if yyc4815 {
		*v = yyv4815
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4819 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4820 := &yyv4819
		yy4820.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4821 := *v
	yyh4821, yyl4821 := z.DecSliceHelperStart()
	var yyc4821 bool
	if yyl4821 == 0 {
		if yyv4821 == nil {
			yyv4821 = []LoadBalancerIngress{}
			yyc4821 = true
		} else if len(yyv4821) != 0 {
			yyv4821 = yyv4821[:0]
			yyc4821 = true
		}
	} else if yyl4821 > 0 {
		var yyrr4821, yyrl4821 int
		var yyrt4821 bool
		if yyl4821 > cap(yyv4821) {

			yyrg4821 := len(yyv4821) > 0
			yyv24821 := yyv4821
			yyrl4821, yyrt4821 = z.DecInferLen(yyl4821, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4821 {
				if yyrl4821 <= cap(yyv4821) {
					yyv4821 = yyv4821[:yyrl4821]
				} else {
					yyv4821 = make([]LoadBalancerIngress, yyrl4821)
				}
			} else {
				yyv4821 = make([]LoadBalancerIngress, yyrl4821)
			}
			yyc4821 = true
			yyrr4821 = len(yyv4821)
			if yyrg4821 {
				copy(yyv4821, yyv24821)
			}
		} else if yyl4821 != len(yyv4821) {
			yyv4821 = yyv4821[:yyl4821]
			yyc4821 = true
		}
		yyj4821 := 0
		for ; yyj4821 < yyrr4821; yyj4821++ {
			yyh4821.ElemContainerState(yyj4821)
			if r.TryDecodeAsNil() {
				yyv4821[yyj4821] = LoadBalancerIngress{}
			} else {
				yyv4822 := &yyv4821[yyj4821]
				yyv4822.CodecDecodeSelf(d)
			}

		}
		if yyrt4821 {
			for ; yyj4821 < yyl4821; yyj4821++ {
				yyv4821 = append(yyv4821, LoadBalancerIngress{})
				yyh4821.ElemContainerState(yyj4821)
				if r.TryDecodeAsNil() {
					yyv4821[yyj4821] = LoadBalancerIngress{}
				} else {
					yyv4823 := &yyv4821[yyj4821]
					yyv4823.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4821 := 0
		for ; !r.CheckBreak(); yyj4821++ {

			if yyj4821 >= len(yyv4821) {
				yyv4821 = append(yyv4821, LoadBalancerIngress{}) // var yyz4821 LoadBalancerIngress
				yyc4821 = true
			}
			yyh4821.ElemContainerState(yyj4821)
			if yyj4821 < len(yyv4821) {
				if r.TryDecodeAsNil() {
					yyv4821[yyj4821] = LoadBalancerIngress{}
				} else {
					yyv4824 := &yyv4821[yyj4821]
					yyv4824.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4821 < len(yyv4821) {
			yyv4821 = yyv4821[:yyj4821]
			yyc4821 = true
		} else if yyj4821 == 0 && yyv4821 == nil {
			yyv4821 = []LoadBalancerIngress{}
			yyc4821 = true
		}
	}
	yyh4821.End()
	if yyc4821 {
		*v = yyv4821
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4825 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4826 := &yyv4825
		yy4826.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4827 := *v
	yyh4827, yyl4827 := z.DecSliceHelperStart()
	var yyc4827 bool
	if yyl4827 == 0 {
		if yyv4827 == nil {
			yyv4827 = []ServicePort{}
			yyc4827 = true
		} else if len(yyv4827) != 0 {
			yyv4827 = yyv4827[:0]
			yyc4827 = true
		}
	} else if yyl4827 > 0 {
		var yyrr4827, yyrl4827 int
		var yyrt4827 bool
		if yyl4827 > cap(yyv4827) {

			yyrg4827 := len(yyv4827) > 0
			yyv24827 := yyv4827
			yyrl4827, yyrt4827 = z.DecInferLen(yyl4827, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4827 {
				if yyrl4827 <= cap(yyv4827) {
					yyv4827 = yyv4827[:yyrl4827]
				} else {
					yyv4827 = make([]ServicePort, yyrl4827)
				}
			} else {
				yyv4827 = make([]ServicePort, yyrl4827)
			}
			yyc4827 = true
			yyrr4827 = len(yyv4827)
			if yyrg4827 {
				copy(yyv4827, yyv24827)
			}
		} else if yyl4827 != len(yyv4827) {
			yyv4827 = yyv4827[:yyl4827]
			yyc4827 = true
		}
		yyj4827 := 0
		for ; yyj4827 < yyrr4827; yyj4827++ {
			yyh4827.ElemContainerState(yyj4827)
			if r.TryDecodeAsNil() {
				yyv4827[yyj4827] = ServicePort{}
			} else {
				yyv4828 := &yyv4827[yyj4827]
				yyv4828.CodecDecodeSelf(d)
			}

		}
		if yyrt4827 {
			for ; yyj4827 < yyl4827; yyj4827++ {
				yyv4827 = append(yyv4827, ServicePort{})
				yyh4827.ElemContainerState(yyj4827)
				if r.TryDecodeAsNil() {
					yyv4827[yyj4827] = ServicePort{}
				} else {
					yyv4829 := &yyv4827[yyj4827]
					yyv4829.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4827 := 0
		for ; !r.CheckBreak(); yyj4827++ {

			if yyj4827 >= len(yyv4827) {
				yyv4827 = append(yyv4827, ServicePort{}) // var yyz4827 ServicePort
				yyc4827 = true
			}
			yyh4827.ElemContainerState(yyj4827)
			if yyj4827 < len(yyv4827) {
				if r.TryDecodeAsNil() {
					yyv4827[yyj4827] = ServicePort{}
				} else {
					yyv4830 := &yyv4827[yyj4827]
					yyv4830.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4827 < len(yyv4827) {
			yyv4827 = yyv4827[:yyj4827]
			yyc4827 = true
		} else if yyj4827 == 0 && yyv4827 == nil {
			yyv4827 = []ServicePort{}
			yyc4827 = true
		}
	}
	yyh4827.End()
	if yyc4827 {
		*v = yyv4827
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4831 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4832 := &yyv4831
		yy4832.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4833 := *v
	yyh4833, yyl4833 := z.DecSliceHelperStart()
	var yyc4833 bool
	if yyl4833 == 0 {
		if yyv4833 == nil {
			yyv4833 = []Service{}
			yyc4833 = true
		} else if len(yyv4833) != 0 {
			yyv4833 = yyv4833[:0]
			yyc4833 = true
		}
	} else if yyl4833 > 0 {
		var yyrr4833, yyrl4833 int
		var yyrt4833 bool
		if yyl4833 > cap(yyv4833) {

			yyrg4833 := len(yyv4833) > 0
			yyv24833 := yyv4833
			yyrl4833, yyrt4833 = z.DecInferLen(yyl4833, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4833 {
				if yyrl4833 <= cap(yyv4833) {
					yyv4833 = yyv4833[:yyrl4833]
				} else {
					yyv4833 = make([]Service, yyrl4833)
				}
			} else {
				yyv4833 = make([]Service, yyrl4833)
			}
			yyc4833 = true
			yyrr4833 = len(yyv4833)
			if yyrg4833 {
				copy(yyv4833, yyv24833)
			}
		} else if yyl4833 != len(yyv4833) {
			yyv4833 = yyv4833[:yyl4833]
			yyc4833 = true
		}
		yyj4833 := 0
		for ; yyj4833 < yyrr4833; yyj4833++ {
			yyh4833.ElemContainerState(yyj4833)
			if r.TryDecodeAsNil() {
				yyv4833[yyj4833] = Service{}
			} else {
				yyv4834 := &yyv4833[yyj4833]
				yyv4834.CodecDecodeSelf(d)
			}

		}
		if yyrt4833 {
			for ; yyj4833 < yyl4833; yyj4833++ {
				yyv4833 = append(yyv4833, Service{})
				yyh4833.ElemContainerState(yyj4833)
				if r.TryDecodeAsNil() {
					yyv4833[yyj4833] = Service{}
				} else {
					yyv4835 := &yyv4833[yyj4833]
					yyv4835.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4833 := 0
		for ; !r.CheckBreak(); yyj4833++ {

			if yyj4833 >= len(yyv4833) {
				yyv4833 = append(yyv4833, Service{}) // var yyz4833 Service
				yyc4833 = true
			}
			yyh4833.ElemContainerState(yyj4833)
			if yyj4833 < len(yyv4833) {
				if r.TryDecodeAsNil() {
					yyv4833[yyj4833] = Service{}
				} else {
					yyv4836 := &yyv4833[yyj4833]
					yyv4836.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4833 < len(yyv4833) {
			yyv4833 = yyv4833[:yyj4833]
			yyc4833 = true
		} else if yyj4833 == 0 && yyv4833 == nil {
			yyv4833 = []Service{}
			yyc4833 = true
		}
	}
	yyh4833.End()
	if yyc4833 {
		*v = yyv4833
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4837 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4838 := &yyv4837
		yy4838.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4839 := *v
	yyh4839, yyl4839 := z.DecSliceHelperStart()
	var yyc4839 bool
	if yyl4839 == 0 {
		if yyv4839 == nil {
			yyv4839 = []ObjectReference{}
			yyc4839 = true
		} else if len(yyv4839) != 0 {
			yyv4839 = yyv4839[:0]
			yyc4839 = true
		}
	} else if yyl4839 > 0 {
		var yyrr4839, yyrl4839 int
		var yyrt4839 bool
		if yyl4839 > cap(yyv4839) {

			yyrg4839 := len(yyv4839) > 0
			yyv24839 := yyv4839
			yyrl4839, yyrt4839 = z.DecInferLen(yyl4839, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4839 {
				if yyrl4839 <= cap(yyv4839) {
					yyv4839 = yyv4839[:yyrl4839]
				} else {
					yyv4839 = make([]ObjectReference, yyrl4839)
				}
			} else {
				yyv4839 = make([]ObjectReference, yyrl4839)
			}
			yyc4839 = true
			yyrr4839 = len(yyv4839)
			if yyrg4839 {
				copy(yyv4839, yyv24839)
			}
		} else if yyl4839 != len(yyv4839) {
			yyv4839 = yyv4839[:yyl4839]
			yyc4839 = true
		}
		yyj4839 := 0
		for ; yyj4839 < yyrr4839; yyj4839++ {
			yyh4839.ElemContainerState(yyj4839)
			if r.TryDecodeAsNil() {
				yyv4839[yyj4839] = ObjectReference{}
			} else {
				yyv4840 := &yyv4839[yyj4839]
				yyv4840.CodecDecodeSelf(d)
			}

		}
		if yyrt4839 {
			for ; yyj4839 < yyl4839; yyj4839++ {
				yyv4839 = append(yyv4839, ObjectReference{})
				yyh4839.ElemContainerState(yyj4839)
				if r.TryDecodeAsNil() {
					yyv4839[yyj4839] = ObjectReference{}
				} else {
					yyv4841 := &yyv4839[yyj4839]
					yyv4841.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4839 := 0
		for ; !r.CheckBreak(); yyj4839++ {

			if yyj4839 >= len(yyv4839) {
				yyv4839 = append(yyv4839, ObjectReference{}) // var yyz4839 ObjectReference
				yyc4839 = true
			}
			yyh4839.ElemContainerState(yyj4839)
			if yyj4839 < len(yyv4839) {
				if r.TryDecodeAsNil() {
					yyv4839[yyj4839] = ObjectReference{}
				} else {
					yyv4842 := &yyv4839[yyj4839]
					yyv4842.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4839 < len(yyv4839) {
			yyv4839 = yyv4839[:yyj4839]
			yyc4839 = true
		} else if yyj4839 == 0 && yyv4839 == nil {
			yyv4839 = []ObjectReference{}
			yyc4839 = true
		}
	}
	yyh4839.End()
	if yyc4839 {
		*v = yyv4839
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4843 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4844 := &yyv4843
		yy4844.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4845 := *v
	yyh4845, yyl4845 := z.DecSliceHelperStart()
	var yyc4845 bool
	if yyl4845 == 0 {
		if yyv4845 == nil {
			yyv4845 = []ServiceAccount{}
			yyc4845 = true
		} else if len(yyv4845) != 0 {
			yyv4845 = yyv4845[:0]
			yyc4845 = true
		}
	} else if yyl4845 > 0 {
		var yyrr4845, yyrl4845 int
		var yyrt4845 bool
		if yyl4845 > cap(yyv4845) {

			yyrg4845 := len(yyv4845) > 0
			yyv24845 := yyv4845
			yyrl4845, yyrt4845 = z.DecInferLen(yyl4845, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4845 {
				if yyrl4845 <= cap(yyv4845) {
					yyv4845 = yyv4845[:yyrl4845]
				} else {
					yyv4845 = make([]ServiceAccount, yyrl4845)
				}
			} else {
				yyv4845 = make([]ServiceAccount, yyrl4845)
			}
			yyc4845 = true
			yyrr4845 = len(yyv4845)
			if yyrg4845 {
				copy(yyv4845, yyv24845)
			}
		} else if yyl4845 != len(yyv4845) {
			yyv4845 = yyv4845[:yyl4845]
			yyc4845 = true
		}
		yyj4845 := 0
		for ; yyj4845 < yyrr4845; yyj4845++ {
			yyh4845.ElemContainerState(yyj4845)
			if r.TryDecodeAsNil() {
				yyv4845[yyj4845] = ServiceAccount{}
			} else {
				yyv4846 := &yyv4845[yyj4845]
				yyv4846.CodecDecodeSelf(d)
			}

		}
		if yyrt4845 {
			for ; yyj4845 < yyl4845; yyj4845++ {
				yyv4845 = append(yyv4845, ServiceAccount{})
				yyh4845.ElemContainerState(yyj4845)
				if r.TryDecodeAsNil() {
					yyv4845[yyj4845] = ServiceAccount{}
				} else {
					yyv4847 := &yyv4845[yyj4845]
					yyv4847.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4845 := 0
		for ; !r.CheckBreak(); yyj4845++ {

			if yyj4845 >= len(yyv4845) {
				yyv4845 = append(yyv4845, ServiceAccount{}) // var yyz4845 ServiceAccount
				yyc4845 = true
			}
			yyh4845.ElemContainerState(yyj4845)
			if yyj4845 < len(yyv4845) {
				if r.TryDecodeAsNil() {
					yyv4845[yyj4845] = ServiceAccount{}
				} else {
					yyv4848 := &yyv4845[yyj4845]
					yyv4848.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4845 < len(yyv4845) {
			yyv4845 = yyv4845[:yyj4845]
			yyc4845 = true
		} else if yyj4845 == 0 && yyv4845 == nil {
			yyv4845 = []ServiceAccount{}
			yyc4845 = true
		}
	}
	yyh4845.End()
	if yyc4845 {
		*v = yyv4845
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4849 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4850 := &yyv4849
		yy4850.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4851 := *v
	yyh4851, yyl4851 := z.DecSliceHelperStart()
	var yyc4851 bool
	if yyl4851 == 0 {
		if yyv4851 == nil {
			yyv4851 = []EndpointSubset{}
			yyc4851 = true
		} else if len(yyv4851) != 0 {
			yyv4851 = yyv4851[:0]
			yyc4851 = true
		}
	} else if yyl4851 > 0 {
		var yyrr4851, yyrl4851 int
		var yyrt4851 bool
		if yyl4851 > cap(yyv4851) {

			yyrg4851 := len(yyv4851) > 0
			yyv24851 := yyv4851
			yyrl4851, yyrt4851 = z.DecInferLen(yyl4851, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4851 {
				if yyrl4851 <= cap(yyv4851) {
					yyv4851 = yyv4851[:yyrl4851]
				} else {
					yyv4851 = make([]EndpointSubset, yyrl4851)
				}
			} else {
				yyv4851 = make([]EndpointSubset, yyrl4851)
			}
			yyc4851 = true
			yyrr4851 = len(yyv4851)
			if yyrg4851 {
				copy(yyv4851, yyv24851)
			}
		} else if yyl4851 != len(yyv4851) {
			yyv4851 = yyv4851[:yyl4851]
			yyc4851 = true
		}
		yyj4851 := 0
		for ; yyj4851 < yyrr4851; yyj4851++ {
			yyh4851.ElemContainerState(yyj4851)
			if r.TryDecodeAsNil() {
				yyv4851[yyj4851] = EndpointSubset{}
			} else {
				yyv4852 := &yyv4851[yyj4851]
				yyv4852.CodecDecodeSelf(d)
			}

		}
		if yyrt4851 {
			for ; yyj4851 < yyl4851; yyj4851++ {
				yyv4851 = append(yyv4851, EndpointSubset{})
				yyh4851.ElemContainerState(yyj4851)
				if r.TryDecodeAsNil() {
					yyv4851[yyj4851] = EndpointSubset{}
				} else {
					yyv4853 := &yyv4851[yyj4851]
					yyv4853.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4851 := 0
		for ; !r.CheckBreak(); yyj4851++ {

			if yyj4851 >= len(yyv4851) {
				yyv4851 = append(yyv4851, EndpointSubset{}) // var yyz4851 EndpointSubset
				yyc4851 = true
			}
			yyh4851.ElemContainerState(yyj4851)
			if yyj4851 < len(yyv4851) {
				if r.TryDecodeAsNil() {
					yyv4851[yyj4851] = EndpointSubset{}
				} else {
					yyv4854 := &yyv4851[yyj4851]
					yyv4854.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4851 < len(yyv4851) {
			yyv4851 = yyv4851[:yyj4851]
			yyc4851 = true
		} else if yyj4851 == 0 && yyv4851 == nil {
			yyv4851 = []EndpointSubset{}
			yyc4851 = true
		}
	}
	yyh4851.End()
	if yyc4851 {
		*v = yyv4851
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4855 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4856 := &yyv4855
		yy4856.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4857 := *v
	yyh4857, yyl4857 := z.DecSliceHelperStart()
	var yyc4857 bool
	if yyl4857 == 0 {
		if yyv4857 == nil {
			yyv4857 = []EndpointAddress{}
			yyc4857 = true
		} else if len(yyv4857) != 0 {
			yyv4857 = yyv4857[:0]
			yyc4857 = true
		}
	} else if yyl4857 > 0 {
		var yyrr4857, yyrl4857 int
		var yyrt4857 bool
		if yyl4857 > cap(yyv4857) {

			yyrg4857 := len(yyv4857) > 0
			yyv24857 := yyv4857
			yyrl4857, yyrt4857 = z.DecInferLen(yyl4857, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4857 {
				if yyrl4857 <= cap(yyv4857) {
					yyv4857 = yyv4857[:yyrl4857]
				} else {
					yyv4857 = make([]EndpointAddress, yyrl4857)
				}
			} else {
				yyv4857 = make([]EndpointAddress, yyrl4857)
			}
			yyc4857 = true
			yyrr4857 = len(yyv4857)
			if yyrg4857 {
				copy(yyv4857, yyv24857)
			}
		} else if yyl4857 != len(yyv4857) {
			yyv4857 = yyv4857[:yyl4857]
			yyc4857 = true
		}
		yyj4857 := 0
		for ; yyj4857 < yyrr4857; yyj4857++ {
			yyh4857.ElemContainerState(yyj4857)
			if r.TryDecodeAsNil() {
				yyv4857[yyj4857] = EndpointAddress{}
			} else {
				yyv4858 := &yyv4857[yyj4857]
				yyv4858.CodecDecodeSelf(d)
			}

		}
		if yyrt4857 {
			for ; yyj4857 < yyl4857; yyj4857++ {
				yyv4857 = append(yyv4857, EndpointAddress{})
				yyh4857.ElemContainerState(yyj4857)
				if r.TryDecodeAsNil() {
					yyv4857[yyj4857] = EndpointAddress{}
				} else {
					yyv4859 := &yyv4857[yyj4857]
					yyv4859.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4857 := 0
		for ; !r.CheckBreak(); yyj4857++ {

			if yyj4857 >= len(yyv4857) {
				yyv4857 = append(yyv4857, EndpointAddress{}) // var yyz4857 EndpointAddress
				yyc4857 = true
			}
			yyh4857.ElemContainerState(yyj4857)
			if yyj4857 < len(yyv4857) {
				if r.TryDecodeAsNil() {
					yyv4857[yyj4857] = EndpointAddress{}
				} else {
					yyv4860 := &yyv4857[yyj4857]
					yyv4860.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4857 < len(yyv4857) {
			yyv4857 = yyv4857[:yyj4857]
			yyc4857 = true
		} else if yyj4857 == 0 && yyv4857 == nil {
			yyv4857 = []EndpointAddress{}
			yyc4857 = true
		}
	}
	yyh4857.End()
	if yyc4857 {
		*v = yyv4857
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4861 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4862 := &yyv4861
		yy4862.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4863 := *v
	yyh4863, yyl4863 := z.DecSliceHelperStart()
	var yyc4863 bool
	if yyl4863 == 0 {
		if yyv4863 == nil {
			yyv4863 = []EndpointPort{}
			yyc4863 = true
		} else if len(yyv4863) != 0 {
			yyv4863 = yyv4863[:0]
			yyc4863 = true
		}
	} else if yyl4863 > 0 {
		var yyrr4863, yyrl4863 int
		var yyrt4863 bool
		if yyl4863 > cap(yyv4863) {

			yyrg4863 := len(yyv4863) > 0
			yyv24863 := yyv4863
			yyrl4863, yyrt4863 = z.DecInferLen(yyl4863, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4863 {
				if yyrl4863 <= cap(yyv4863) {
					yyv4863 = yyv4863[:yyrl4863]
				} else {
					yyv4863 = make([]EndpointPort, yyrl4863)
				}
			} else {
				yyv4863 = make([]EndpointPort, yyrl4863)
			}
			yyc4863 = true
			yyrr4863 = len(yyv4863)
			if yyrg4863 {
				copy(yyv4863, yyv24863)
			}
		} else if yyl4863 != len(yyv4863) {
			yyv4863 = yyv4863[:yyl4863]
			yyc4863 = true
		}
		yyj4863 := 0
		for ; yyj4863 < yyrr4863; yyj4863++ {
			yyh4863.ElemContainerState(yyj4863)
			if r.TryDecodeAsNil() {
				yyv4863[yyj4863] = EndpointPort{}
			} else {
				yyv4864 := &yyv4863[yyj4863]
				yyv4864.CodecDecodeSelf(d)
			}

		}
		if yyrt4863 {
			for ; yyj4863 < yyl4863; yyj4863++ {
				yyv4863 = append(yyv4863, EndpointPort{})
				yyh4863.ElemContainerState(yyj4863)
				if r.TryDecodeAsNil() {
					yyv4863[yyj4863] = EndpointPort{}
				} else {
					yyv4865 := &yyv4863[yyj4863]
					yyv4865.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4863 := 0
		for ; !r.CheckBreak(); yyj4863++ {

			if yyj4863 >= len(yyv4863) {
				yyv4863 = append(yyv4863, EndpointPort{}) // var yyz4863 EndpointPort
				yyc4863 = true
			}
			yyh4863.ElemContainerState(yyj4863)
			if yyj4863 < len(yyv4863) {
				if r.TryDecodeAsNil() {
					yyv4863[yyj4863] = EndpointPort{}
				} else {
					yyv4866 := &yyv4863[yyj4863]
					yyv4866.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4863 < len(yyv4863) {
			yyv4863 = yyv4863[:yyj4863]
			yyc4863 = true
		} else if yyj4863 == 0 && yyv4863 == nil {
			yyv4863 = []EndpointPort{}
			yyc4863 = true
		}
	}
	yyh4863.End()
	if yyc4863 {
		*v = yyv4863
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4867 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4868 := &yyv4867
		yy4868.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4869 := *v
	yyh4869, yyl4869 := z.DecSliceHelperStart()
	var yyc4869 bool
	if yyl4869 == 0 {
		if yyv4869 == nil {
			yyv4869 = []Endpoints{}
			yyc4869 = true
		} else if len(yyv4869) != 0 {
			yyv4869 = yyv4869[:0]
			yyc4869 = true
		}
	} else if yyl4869 > 0 {
		var yyrr4869, yyrl4869 int
		var yyrt4869 bool
		if yyl4869 > cap(yyv4869) {

			yyrg4869 := len(yyv4869) > 0
			yyv24869 := yyv4869
			yyrl4869, yyrt4869 = z.DecInferLen(yyl4869, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4869 {
				if yyrl4869 <= cap(yyv4869) {
					yyv4869 = yyv4869[:yyrl4869]
				} else {
					yyv4869 = make([]Endpoints, yyrl4869)
				}
			} else {
				yyv4869 = make([]Endpoints, yyrl4869)
			}
			yyc4869 = true
			yyrr4869 = len(yyv4869)
			if yyrg4869 {
				copy(yyv4869, yyv24869)
			}
		} else if yyl4869 != len(yyv4869) {
			yyv4869 = yyv4869[:yyl4869]
			yyc4869 = true
		}
		yyj4869 := 0
		for ; yyj4869 < yyrr4869; yyj4869++ {
			yyh4869.ElemContainerState(yyj4869)
			if r.TryDecodeAsNil() {
				yyv4869[yyj4869] = Endpoints{}
			} else {
				yyv4870 := &yyv4869[yyj4869]
				yyv4870.CodecDecodeSelf(d)
			}

		}
		if yyrt4869 {
			for ; yyj4869 < yyl4869; yyj4869++ {
				yyv4869 = append(yyv4869, Endpoints{})
				yyh4869.ElemContainerState(yyj4869)
				if r.TryDecodeAsNil() {
					yyv4869[yyj4869] = Endpoints{}
				} else {
					yyv4871 := &yyv4869[yyj4869]
					yyv4871.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4869 := 0
		for ; !r.CheckBreak(); yyj4869++ {

			if yyj4869 >= len(yyv4869) {
				yyv4869 = append(yyv4869, Endpoints{}) // var yyz4869 Endpoints
				yyc4869 = true
			}
			yyh4869.ElemContainerState(yyj4869)
			if yyj4869 < len(yyv4869) {
				if r.TryDecodeAsNil() {
					yyv4869[yyj4869] = Endpoints{}
				} else {
					yyv4872 := &yyv4869[yyj4869]
					yyv4872.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4869 < len(yyv4869) {
			yyv4869 = yyv4869[:yyj4869]
			yyc4869 = true
		} else if yyj4869 == 0 && yyv4869 == nil {
			yyv4869 = []Endpoints{}
			yyc4869 = true
		}
	}
	yyh4869.End()
	if yyc4869 {
		*v = yyv4869
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4873 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4874 := &yyv4873
		yy4874.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4875 := *v
	yyh4875, yyl4875 := z.DecSliceHelperStart()
	var yyc4875 bool
	if yyl4875 == 0 {
		if yyv4875 == nil {
			yyv4875 = []NodeCondition{}
			yyc4875 = true
		} else if len(yyv4875) != 0 {
			yyv4875 = yyv4875[:0]
			yyc4875 = true
		}
	} else if yyl4875 > 0 {
		var yyrr4875, yyrl4875 int
		var yyrt4875 bool
		if yyl4875 > cap(yyv4875) {

			yyrg4875 := len(yyv4875) > 0
			yyv24875 := yyv4875
			yyrl4875, yyrt4875 = z.DecInferLen(yyl4875, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4875 {
				if yyrl4875 <= cap(yyv4875) {
					yyv4875 = yyv4875[:yyrl4875]
				} else {
					yyv4875 = make([]NodeCondition, yyrl4875)
				}
			} else {
				yyv4875 = make([]NodeCondition, yyrl4875)
			}
			yyc4875 = true
			yyrr4875 = len(yyv4875)
			if yyrg4875 {
				copy(yyv4875, yyv24875)
			}
		} else if yyl4875 != len(yyv4875) {
			yyv4875 = yyv4875[:yyl4875]
			yyc4875 = true
		}
		yyj4875 := 0
		for ; yyj4875 < yyrr4875; yyj4875++ {
			yyh4875.ElemContainerState(yyj4875)
			if r.TryDecodeAsNil() {
				yyv4875[yyj4875] = NodeCondition{}
			} else {
				yyv4876 := &yyv4875[yyj4875]
				yyv4876.CodecDecodeSelf(d)
			}

		}
		if yyrt4875 {
			for ; yyj4875 < yyl4875; yyj4875++ {
				yyv4875 = append(yyv4875, NodeCondition{})
				yyh4875.ElemContainerState(yyj4875)
				if r.TryDecodeAsNil() {
					yyv4875[yyj4875] = NodeCondition{}
				} else {
					yyv4877 := &yyv4875[yyj4875]
					yyv4877.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4875 := 0
		for ; !r.CheckBreak(); yyj4875++ {

			if yyj4875 >= len(yyv4875) {
				yyv4875 = append(yyv4875, NodeCondition{}) // var yyz4875 NodeCondition
				yyc4875 = true
			}
			yyh4875.ElemContainerState(yyj4875)
			if yyj4875 < len(yyv4875) {
				if r.TryDecodeAsNil() {
					yyv4875[yyj4875] = NodeCondition{}
				} else {
					yyv4878 := &yyv4875[yyj4875]
					yyv4878.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4875 < len(yyv4875) {
			yyv4875 = yyv4875[:yyj4875]
			yyc4875 = true
		} else if yyj4875 == 0 && yyv4875 == nil {
			yyv4875 = []NodeCondition{}
			yyc4875 = true
		}
	}
	yyh4875.End()
	if yyc4875 {
		*v = yyv4875
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4879 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4880 := &yyv4879
		yy4880.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4881 := *v
	yyh4881, yyl4881 := z.DecSliceHelperStart()
	var yyc4881 bool
	if yyl4881 == 0 {
		if yyv4881 == nil {
			yyv4881 = []NodeAddress{}
			yyc4881 = true
		} else if len(yyv4881) != 0 {
			yyv4881 = yyv4881[:0]
			yyc4881 = true
		}
	} else if yyl4881 > 0 {
		var yyrr4881, yyrl4881 int
		var yyrt4881 bool
		if yyl4881 > cap(yyv4881) {

			yyrg4881 := len(yyv4881) > 0
			yyv24881 := yyv4881
			yyrl4881, yyrt4881 = z.DecInferLen(yyl4881, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4881 {
				if yyrl4881 <= cap(yyv4881) {
					yyv4881 = yyv4881[:yyrl4881]
				} else {
					yyv4881 = make([]NodeAddress, yyrl4881)
				}
			} else {
				yyv4881 = make([]NodeAddress, yyrl4881)
			}
			yyc4881 = true
			yyrr4881 = len(yyv4881)
			if yyrg4881 {
				copy(yyv4881, yyv24881)
			}
		} else if yyl4881 != len(yyv4881) {
			yyv4881 = yyv4881[:yyl4881]
			yyc4881 = true
		}
		yyj4881 := 0
		for ; yyj4881 < yyrr4881; yyj4881++ {
			yyh4881.ElemContainerState(yyj4881)
			if r.TryDecodeAsNil() {
				yyv4881[yyj4881] = NodeAddress{}
			} else {
				yyv4882 := &yyv4881[yyj4881]
				yyv4882.CodecDecodeSelf(d)
			}

		}
		if yyrt4881 {
			for ; yyj4881 < yyl4881; yyj4881++ {
				yyv4881 = append(yyv4881, NodeAddress{})
				yyh4881.ElemContainerState(yyj4881)
				if r.TryDecodeAsNil() {
					yyv4881[yyj4881] = NodeAddress{}
				} else {
					yyv4883 := &yyv4881[yyj4881]
					yyv4883.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4881 := 0
		for ; !r.CheckBreak(); yyj4881++ {

			if yyj4881 >= len(yyv4881) {
				yyv4881 = append(yyv4881, NodeAddress{}) // var yyz4881 NodeAddress
				yyc4881 = true
			}
			yyh4881.ElemContainerState(yyj4881)
			if yyj4881 < len(yyv4881) {
				if r.TryDecodeAsNil() {
					yyv4881[yyj4881] = NodeAddress{}
				} else {
					yyv4884 := &yyv4881[yyj4881]
					yyv4884.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4881 < len(yyv4881) {
			yyv4881 = yyv4881[:yyj4881]
			yyc4881 = true
		} else if yyj4881 == 0 && yyv4881 == nil {
			yyv4881 = []NodeAddress{}
			yyc4881 = true
		}
	}
	yyh4881.End()
	if yyc4881 {
		*v = yyv4881
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4885 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4886 := &yyv4885
		yy4886.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4887 := *v
	yyh4887, yyl4887 := z.DecSliceHelperStart()
	var yyc4887 bool
	if yyl4887 == 0 {
		if yyv4887 == nil {
			yyv4887 = []ContainerImage{}
			yyc4887 = true
		} else if len(yyv4887) != 0 {
			yyv4887 = yyv4887[:0]
			yyc4887 = true
		}
	} else if yyl4887 > 0 {
		var yyrr4887, yyrl4887 int
		var yyrt4887 bool
		if yyl4887 > cap(yyv4887) {

			yyrg4887 := len(yyv4887) > 0
			yyv24887 := yyv4887
			yyrl4887, yyrt4887 = z.DecInferLen(yyl4887, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4887 {
				if yyrl4887 <= cap(yyv4887) {
					yyv4887 = yyv4887[:yyrl4887]
				} else {
					yyv4887 = make([]ContainerImage, yyrl4887)
				}
			} else {
				yyv4887 = make([]ContainerImage, yyrl4887)
			}
			yyc4887 = true
			yyrr4887 = len(yyv4887)
			if yyrg4887 {
				copy(yyv4887, yyv24887)
			}
		} else if yyl4887 != len(yyv4887) {
			yyv4887 = yyv4887[:yyl4887]
			yyc4887 = true
		}
		yyj4887 := 0
		for ; yyj4887 < yyrr4887; yyj4887++ {
			yyh4887.ElemContainerState(yyj4887)
			if r.TryDecodeAsNil() {
				yyv4887[yyj4887] = ContainerImage{}
			} else {
				yyv4888 := &yyv4887[yyj4887]
				yyv4888.CodecDecodeSelf(d)
			}

		}
		if yyrt4887 {
			for ; yyj4887 < yyl4887; yyj4887++ {
				yyv4887 = append(yyv4887, ContainerImage{})
				yyh4887.ElemContainerState(yyj4887)
				if r.TryDecodeAsNil() {
					yyv4887[yyj4887] = ContainerImage{}
				} else {
					yyv4889 := &yyv4887[yyj4887]
					yyv4889.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4887 := 0
		for ; !r.CheckBreak(); yyj4887++ {

			if yyj4887 >= len(yyv4887) {
				yyv4887 = append(yyv4887, ContainerImage{}) // var yyz4887 ContainerImage
				yyc4887 = true
			}
			yyh4887.ElemContainerState(yyj4887)
			if yyj4887 < len(yyv4887) {
				if r.TryDecodeAsNil() {
					yyv4887[yyj4887] = ContainerImage{}
				} else {
					yyv4890 := &yyv4887[yyj4887]
					yyv4890.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4887 < len(yyv4887) {
			yyv4887 = yyv4887[:yyj4887]
			yyc4887 = true
		} else if yyj4887 == 0 && yyv4887 == nil {
			yyv4887 = []ContainerImage{}
			yyc4887 = true
		}
	}
	yyh4887.End()
	if yyc4887 {
		*v = yyv4887
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4891 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4891.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4892 := *v
	yyh4892, yyl4892 := z.DecSliceHelperStart()
	var yyc4892 bool
	if yyl4892 == 0 {
		if yyv4892 == nil {
			yyv4892 = []UniqueVolumeName{}
			yyc4892 = true
		} else if len(yyv4892) != 0 {
			yyv4892 = yyv4892[:0]
			yyc4892 = true
		}
	} else if yyl4892 > 0 {
		var yyrr4892, yyrl4892 int
		var yyrt4892 bool
		if yyl4892 > cap(yyv4892) {

			yyrl4892, yyrt4892 = z.DecInferLen(yyl4892, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4892 {
				if yyrl4892 <= cap(yyv4892) {
					yyv4892 = yyv4892[:yyrl4892]
				} else {
					yyv4892 = make([]UniqueVolumeName, yyrl4892)
				}
			} else {
				yyv4892 = make([]UniqueVolumeName, yyrl4892)
			}
			yyc4892 = true
			yyrr4892 = len(yyv4892)
		} else if yyl4892 != len(yyv4892) {
			yyv4892 = yyv4892[:yyl4892]
			yyc4892 = true
		}
		yyj4892 := 0
		for ; yyj4892 < yyrr4892; yyj4892++ {
			yyh4892.ElemContainerState(yyj4892)
			if r.TryDecodeAsNil() {
				yyv4892[yyj4892] = ""
			} else {
				yyv4892[yyj4892] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4892 {
			for ; yyj4892 < yyl4892; yyj4892++ {
				yyv4892 = append(yyv4892, "")
				yyh4892.ElemContainerState(yyj4892)
				if r.TryDecodeAsNil() {
					yyv4892[yyj4892] = ""
				} else {
					yyv4892[yyj4892] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4892 := 0
		for ; !r.CheckBreak(); yyj4892++ {

			if yyj4892 >= len(yyv4892) {
				yyv4892 = append(yyv4892, "") // var yyz4892 UniqueVolumeName
				yyc4892 = true
			}
			yyh4892.ElemContainerState(yyj4892)
			if yyj4892 < len(yyv4892) {
				if r.TryDecodeAsNil() {
					yyv4892[yyj4892] = ""
				} else {
					yyv4892[yyj4892] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4892 < len(yyv4892) {
			yyv4892 = yyv4892[:yyj4892]
			yyc4892 = true
		} else if yyj4892 == 0 && yyv4892 == nil {
			yyv4892 = []UniqueVolumeName{}
			yyc4892 = true
		}
	}
	yyh4892.End()
	if yyc4892 {
		*v = yyv4892
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4896 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4897 := &yyv4896
		yy4897.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4898 := *v
	yyh4898, yyl4898 := z.DecSliceHelperStart()
	var yyc4898 bool
	if yyl4898 == 0 {
		if yyv4898 == nil {
			yyv4898 = []AttachedVolume{}
			yyc4898 = true
		} else if len(yyv4898) != 0 {
			yyv4898 = yyv4898[:0]
			yyc4898 = true
		}
	} else if yyl4898 > 0 {
		var yyrr4898, yyrl4898 int
		var yyrt4898 bool
		if yyl4898 > cap(yyv4898) {

			yyrg4898 := len(yyv4898) > 0
			yyv24898 := yyv4898
			yyrl4898, yyrt4898 = z.DecInferLen(yyl4898, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4898 {
				if yyrl4898 <= cap(yyv4898) {
					yyv4898 = yyv4898[:yyrl4898]
				} else {
					yyv4898 = make([]AttachedVolume, yyrl4898)
				}
			} else {
				yyv4898 = make([]AttachedVolume, yyrl4898)
			}
			yyc4898 = true
			yyrr4898 = len(yyv4898)
			if yyrg4898 {
				copy(yyv4898, yyv24898)
			}
		} else if yyl4898 != len(yyv4898) {
			yyv4898 = yyv4898[:yyl4898]
			yyc4898 = true
		}
		yyj4898 := 0
		for ; yyj4898 < yyrr4898; yyj4898++ {
			yyh4898.ElemContainerState(yyj4898)
			if r.TryDecodeAsNil() {
				yyv4898[yyj4898] = AttachedVolume{}
			} else {
				yyv4899 := &yyv4898[yyj4898]
				yyv4899.CodecDecodeSelf(d)
			}

		}
		if yyrt4898 {
			for ; yyj4898 < yyl4898; yyj4898++ {
				yyv4898 = append(yyv4898, AttachedVolume{})
				yyh4898.ElemContainerState(yyj4898)
				if r.TryDecodeAsNil() {
					yyv4898[yyj4898] = AttachedVolume{}
				} else {
					yyv4900 := &yyv4898[yyj4898]
					yyv4900.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4898 := 0
		for ; !r.CheckBreak(); yyj4898++ {

			if yyj4898 >= len(yyv4898) {
				yyv4898 = append(yyv4898, AttachedVolume{}) // var yyz4898 AttachedVolume
				yyc4898 = true
			}
			yyh4898.ElemContainerState(yyj4898)
			if yyj4898 < len(yyv4898) {
				if r.TryDecodeAsNil() {
					yyv4898[yyj4898] = AttachedVolume{}
				} else {
					yyv4901 := &yyv4898[yyj4898]
					yyv4901.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4898 < len(yyv4898) {
			yyv4898 = yyv4898[:yyj4898]
			yyc4898 = true
		} else if yyj4898 == 0 && yyv4898 == nil {
			yyv4898 = []AttachedVolume{}
			yyc4898 = true
		}
	}
	yyh4898.End()
	if yyc4898 {
		*v = yyv4898
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4902 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4903 := &yyv4902
		yy4903.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4904 := *v
	yyh4904, yyl4904 := z.DecSliceHelperStart()
	var yyc4904 bool
	if yyl4904 == 0 {
		if yyv4904 == nil {
			yyv4904 = []PreferAvoidPodsEntry{}
			yyc4904 = true
		} else if len(yyv4904) != 0 {
			yyv4904 = yyv4904[:0]
			yyc4904 = true
		}
	} else if yyl4904 > 0 {
		var yyrr4904, yyrl4904 int
		var yyrt4904 bool
		if yyl4904 > cap(yyv4904) {

			yyrg4904 := len(yyv4904) > 0
			yyv24904 := yyv4904
			yyrl4904, yyrt4904 = z.DecInferLen(yyl4904, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4904 {
				if yyrl4904 <= cap(yyv4904) {
					yyv4904 = yyv4904[:yyrl4904]
				} else {
					yyv4904 = make([]PreferAvoidPodsEntry, yyrl4904)
				}
			} else {
				yyv4904 = make([]PreferAvoidPodsEntry, yyrl4904)
			}
			yyc4904 = true
			yyrr4904 = len(yyv4904)
			if yyrg4904 {
				copy(yyv4904, yyv24904)
			}
		} else if yyl4904 != len(yyv4904) {
			yyv4904 = yyv4904[:yyl4904]
			yyc4904 = true
		}
		yyj4904 := 0
		for ; yyj4904 < yyrr4904; yyj4904++ {
			yyh4904.ElemContainerState(yyj4904)
			if r.TryDecodeAsNil() {
				yyv4904[yyj4904] = PreferAvoidPodsEntry{}
			} else {
				yyv4905 := &yyv4904[yyj4904]
				yyv4905.CodecDecodeSelf(d)
			}

		}
		if yyrt4904 {
			for ; yyj4904 < yyl4904; yyj4904++ {
				yyv4904 = append(yyv4904, PreferAvoidPodsEntry{})
				yyh4904.ElemContainerState(yyj4904)
				if r.TryDecodeAsNil() {
					yyv4904[yyj4904] = PreferAvoidPodsEntry{}
				} else {
					yyv4906 := &yyv4904[yyj4904]
					yyv4906.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4904 := 0
		for ; !r.CheckBreak(); yyj4904++ {

			if yyj4904 >= len(yyv4904) {
				yyv4904 = append(yyv4904, PreferAvoidPodsEntry{}) // var yyz4904 PreferAvoidPodsEntry
				yyc4904 = true
			}
			yyh4904.ElemContainerState(yyj4904)
			if yyj4904 < len(yyv4904) {
				if r.TryDecodeAsNil() {
					yyv4904[yyj4904] = PreferAvoidPodsEntry{}
				} else {
					yyv4907 := &yyv4904[yyj4904]
					yyv4907.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4904 < len(yyv4904) {
			yyv4904 = yyv4904[:yyj4904]
			yyc4904 = true
		} else if yyj4904 == 0 && yyv4904 == nil {
			yyv4904 = []PreferAvoidPodsEntry{}
			yyc4904 = true
		}
	}
	yyh4904.End()
	if yyc4904 {
		*v = yyv4904
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4908, yyv4908 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4908.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4909 := &yyv4908
		yym4910 := z.EncBinary()
		_ = yym4910
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4909) {
		} else if !yym4910 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4909)
		} else {
			z.EncFallback(yy4909)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4911 := *v
	yyl4911 := r.ReadMapStart()
	yybh4911 := z.DecBasicHandle()
	if yyv4911 == nil {
		yyrl4911, _ := z.DecInferLen(yyl4911, yybh4911.MaxInitLen, 72)
		yyv4911 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4911)
		*v = yyv4911
	}
	var yymk4911 ResourceName
	var yymv4911 pkg3_resource.Quantity
	var yymg4911 bool
	if yybh4911.MapValueReset {
		yymg4911 = true
	}
	if yyl4911 > 0 {
		for yyj4911 := 0; yyj4911 < yyl4911; yyj4911++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4911 = ""
			} else {
				yymk4911 = ResourceName(r.DecodeString())
			}

			if yymg4911 {
				yymv4911 = yyv4911[yymk4911]
			} else {
				yymv4911 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4911 = pkg3_resource.Quantity{}
			} else {
				yyv4913 := &yymv4911
				yym4914 := z.DecBinary()
				_ = yym4914
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4913) {
				} else if !yym4914 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4913)
				} else {
					z.DecFallback(yyv4913, false)
				}
			}

			if yyv4911 != nil {
				yyv4911[yymk4911] = yymv4911
			}
		}
	} else if yyl4911 < 0 {
		for yyj4911 := 0; !r.CheckBreak(); yyj4911++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4911 = ""
			} else {
				yymk4911 = ResourceName(r.DecodeString())
			}

			if yymg4911 {
				yymv4911 = yyv4911[yymk4911]
			} else {
				yymv4911 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4911 = pkg3_resource.Quantity{}
			} else {
				yyv4916 := &yymv4911
				yym4917 := z.DecBinary()
				_ = yym4917
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4916) {
				} else if !yym4917 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4916)
				} else {
					z.DecFallback(yyv4916, false)
				}
			}

			if yyv4911 != nil {
				yyv4911[yymk4911] = yymv4911
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4918 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4919 := &yyv4918
		yy4919.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4920 := *v
	yyh4920, yyl4920 := z.DecSliceHelperStart()
	var yyc4920 bool
	if yyl4920 == 0 {
		if yyv4920 == nil {
			yyv4920 = []Node{}
			yyc4920 = true
		} else if len(yyv4920) != 0 {
			yyv4920 = yyv4920[:0]
			yyc4920 = true
		}
	} else if yyl4920 > 0 {
		var yyrr4920, yyrl4920 int
		var yyrt4920 bool
		if yyl4920 > cap(yyv4920) {

			yyrg4920 := len(yyv4920) > 0
			yyv24920 := yyv4920
			yyrl4920, yyrt4920 = z.DecInferLen(yyl4920, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4920 {
				if yyrl4920 <= cap(yyv4920) {
					yyv4920 = yyv4920[:yyrl4920]
				} else {
					yyv4920 = make([]Node, yyrl4920)
				}
			} else {
				yyv4920 = make([]Node, yyrl4920)
			}
			yyc4920 = true
			yyrr4920 = len(yyv4920)
			if yyrg4920 {
				copy(yyv4920, yyv24920)
			}
		} else if yyl4920 != len(yyv4920) {
			yyv4920 = yyv4920[:yyl4920]
			yyc4920 = true
		}
		yyj4920 := 0
		for ; yyj4920 < yyrr4920; yyj4920++ {
			yyh4920.ElemContainerState(yyj4920)
			if r.TryDecodeAsNil() {
				yyv4920[yyj4920] = Node{}
			} else {
				yyv4921 := &yyv4920[yyj4920]
				yyv4921.CodecDecodeSelf(d)
			}

		}
		if yyrt4920 {
			for ; yyj4920 < yyl4920; yyj4920++ {
				yyv4920 = append(yyv4920, Node{})
				yyh4920.ElemContainerState(yyj4920)
				if r.TryDecodeAsNil() {
					yyv4920[yyj4920] = Node{}
				} else {
					yyv4922 := &yyv4920[yyj4920]
					yyv4922.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4920 := 0
		for ; !r.CheckBreak(); yyj4920++ {

			if yyj4920 >= len(yyv4920) {
				yyv4920 = append(yyv4920, Node{}) // var yyz4920 Node
				yyc4920 = true
			}
			yyh4920.ElemContainerState(yyj4920)
			if yyj4920 < len(yyv4920) {
				if r.TryDecodeAsNil() {
					yyv4920[yyj4920] = Node{}
				} else {
					yyv4923 := &yyv4920[yyj4920]
					yyv4923.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4920 < len(yyv4920) {
			yyv4920 = yyv4920[:yyj4920]
			yyc4920 = true
		} else if yyj4920 == 0 && yyv4920 == nil {
			yyv4920 = []Node{}
			yyc4920 = true
		}
	}
	yyh4920.End()
	if yyc4920 {
		*v = yyv4920
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4924 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4924.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4925 := *v
	yyh4925, yyl4925 := z.DecSliceHelperStart()
	var yyc4925 bool
	if yyl4925 == 0 {
		if yyv4925 == nil {
			yyv4925 = []FinalizerName{}
			yyc4925 = true
		} else if len(yyv4925) != 0 {
			yyv4925 = yyv4925[:0]
			yyc4925 = true
		}
	} else if yyl4925 > 0 {
		var yyrr4925, yyrl4925 int
		var yyrt4925 bool
		if yyl4925 > cap(yyv4925) {

			yyrl4925, yyrt4925 = z.DecInferLen(yyl4925, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4925 {
				if yyrl4925 <= cap(yyv4925) {
					yyv4925 = yyv4925[:yyrl4925]
				} else {
					yyv4925 = make([]FinalizerName, yyrl4925)
				}
			} else {
				yyv4925 = make([]FinalizerName, yyrl4925)
			}
			yyc4925 = true
			yyrr4925 = len(yyv4925)
		} else if yyl4925 != len(yyv4925) {
			yyv4925 = yyv4925[:yyl4925]
			yyc4925 = true
		}
		yyj4925 := 0
		for ; yyj4925 < yyrr4925; yyj4925++ {
			yyh4925.ElemContainerState(yyj4925)
			if r.TryDecodeAsNil() {
				yyv4925[yyj4925] = ""
			} else {
				yyv4925[yyj4925] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4925 {
			for ; yyj4925 < yyl4925; yyj4925++ {
				yyv4925 = append(yyv4925, "")
				yyh4925.ElemContainerState(yyj4925)
				if r.TryDecodeAsNil() {
					yyv4925[yyj4925] = ""
				} else {
					yyv4925[yyj4925] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4925 := 0
		for ; !r.CheckBreak(); yyj4925++ {

			if yyj4925 >= len(yyv4925) {
				yyv4925 = append(yyv4925, "") // var yyz4925 FinalizerName
				yyc4925 = true
			}
			yyh4925.ElemContainerState(yyj4925)
			if yyj4925 < len(yyv4925) {
				if r.TryDecodeAsNil() {
					yyv4925[yyj4925] = ""
				} else {
					yyv4925[yyj4925] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4925 < len(yyv4925) {
			yyv4925 = yyv4925[:yyj4925]
			yyc4925 = true
		} else if yyj4925 == 0 && yyv4925 == nil {
			yyv4925 = []FinalizerName{}
			yyc4925 = true
		}
	}
	yyh4925.End()
	if yyc4925 {
		*v = yyv4925
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4929 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4930 := &yyv4929
		yy4930.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4931 := *v
	yyh4931, yyl4931 := z.DecSliceHelperStart()
	var yyc4931 bool
	if yyl4931 == 0 {
		if yyv4931 == nil {
			yyv4931 = []Namespace{}
			yyc4931 = true
		} else if len(yyv4931) != 0 {
			yyv4931 = yyv4931[:0]
			yyc4931 = true
		}
	} else if yyl4931 > 0 {
		var yyrr4931, yyrl4931 int
		var yyrt4931 bool
		if yyl4931 > cap(yyv4931) {

			yyrg4931 := len(yyv4931) > 0
			yyv24931 := yyv4931
			yyrl4931, yyrt4931 = z.DecInferLen(yyl4931, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4931 {
				if yyrl4931 <= cap(yyv4931) {
					yyv4931 = yyv4931[:yyrl4931]
				} else {
					yyv4931 = make([]Namespace, yyrl4931)
				}
			} else {
				yyv4931 = make([]Namespace, yyrl4931)
			}
			yyc4931 = true
			yyrr4931 = len(yyv4931)
			if yyrg4931 {
				copy(yyv4931, yyv24931)
			}
		} else if yyl4931 != len(yyv4931) {
			yyv4931 = yyv4931[:yyl4931]
			yyc4931 = true
		}
		yyj4931 := 0
		for ; yyj4931 < yyrr4931; yyj4931++ {
			yyh4931.ElemContainerState(yyj4931)
			if r.TryDecodeAsNil() {
				yyv4931[yyj4931] = Namespace{}
			} else {
				yyv4932 := &yyv4931[yyj4931]
				yyv4932.CodecDecodeSelf(d)
			}

		}
		if yyrt4931 {
			for ; yyj4931 < yyl4931; yyj4931++ {
				yyv4931 = append(yyv4931, Namespace{})
				yyh4931.ElemContainerState(yyj4931)
				if r.TryDecodeAsNil() {
					yyv4931[yyj4931] = Namespace{}
				} else {
					yyv4933 := &yyv4931[yyj4931]
					yyv4933.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4931 := 0
		for ; !r.CheckBreak(); yyj4931++ {

			if yyj4931 >= len(yyv4931) {
				yyv4931 = append(yyv4931, Namespace{}) // var yyz4931 Namespace
				yyc4931 = true
			}
			yyh4931.ElemContainerState(yyj4931)
			if yyj4931 < len(yyv4931) {
				if r.TryDecodeAsNil() {
					yyv4931[yyj4931] = Namespace{}
				} else {
					yyv4934 := &yyv4931[yyj4931]
					yyv4934.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4931 < len(yyv4931) {
			yyv4931 = yyv4931[:yyj4931]
			yyc4931 = true
		} else if yyj4931 == 0 && yyv4931 == nil {
			yyv4931 = []Namespace{}
			yyc4931 = true
		}
	}
	yyh4931.End()
	if yyc4931 {
		*v = yyv4931
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4935 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4936 := &yyv4935
		yy4936.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4937 := *v
	yyh4937, yyl4937 := z.DecSliceHelperStart()
	var yyc4937 bool
	if yyl4937 == 0 {
		if yyv4937 == nil {
			yyv4937 = []Event{}
			yyc4937 = true
		} else if len(yyv4937) != 0 {
			yyv4937 = yyv4937[:0]
			yyc4937 = true
		}
	} else if yyl4937 > 0 {
		var yyrr4937, yyrl4937 int
		var yyrt4937 bool
		if yyl4937 > cap(yyv4937) {

			yyrg4937 := len(yyv4937) > 0
			yyv24937 := yyv4937
			yyrl4937, yyrt4937 = z.DecInferLen(yyl4937, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4937 {
				if yyrl4937 <= cap(yyv4937) {
					yyv4937 = yyv4937[:yyrl4937]
				} else {
					yyv4937 = make([]Event, yyrl4937)
				}
			} else {
				yyv4937 = make([]Event, yyrl4937)
			}
			yyc4937 = true
			yyrr4937 = len(yyv4937)
			if yyrg4937 {
				copy(yyv4937, yyv24937)
			}
		} else if yyl4937 != len(yyv4937) {
			yyv4937 = yyv4937[:yyl4937]
			yyc4937 = true
		}
		yyj4937 := 0
		for ; yyj4937 < yyrr4937; yyj4937++ {
			yyh4937.ElemContainerState(yyj4937)
			if r.TryDecodeAsNil() {
				yyv4937[yyj4937] = Event{}
			} else {
				yyv4938 := &yyv4937[yyj4937]
				yyv4938.CodecDecodeSelf(d)
			}

		}
		if yyrt4937 {
			for ; yyj4937 < yyl4937; yyj4937++ {
				yyv4937 = append(yyv4937, Event{})
				yyh4937.ElemContainerState(yyj4937)
				if r.TryDecodeAsNil() {
					yyv4937[yyj4937] = Event{}
				} else {
					yyv4939 := &yyv4937[yyj4937]
					yyv4939.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4937 := 0
		for ; !r.CheckBreak(); yyj4937++ {

			if yyj4937 >= len(yyv4937) {
				yyv4937 = append(yyv4937, Event{}) // var yyz4937 Event
				yyc4937 = true
			}
			yyh4937.ElemContainerState(yyj4937)
			if yyj4937 < len(yyv4937) {
				if r.TryDecodeAsNil() {
					yyv4937[yyj4937] = Event{}
				} else {
					yyv4940 := &yyv4937[yyj4937]
					yyv4940.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4937 < len(yyv4937) {
			yyv4937 = yyv4937[:yyj4937]
			yyc4937 = true
		} else if yyj4937 == 0 && yyv4937 == nil {
			yyv4937 = []Event{}
			yyc4937 = true
		}
	}
	yyh4937.End()
	if yyc4937 {
		*v = yyv4937
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4941 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4942 := &yyv4941
		yym4943 := z.EncBinary()
		_ = yym4943
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4942) {
		} else if !yym4943 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4942)
		} else {
			z.EncFallback(yy4942)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4944 := *v
	yyh4944, yyl4944 := z.DecSliceHelperStart()
	var yyc4944 bool
	if yyl4944 == 0 {
		if yyv4944 == nil {
			yyv4944 = []pkg5_runtime.RawExtension{}
			yyc4944 = true
		} else if len(yyv4944) != 0 {
			yyv4944 = yyv4944[:0]
			yyc4944 = true
		}
	} else if yyl4944 > 0 {
		var yyrr4944, yyrl4944 int
		var yyrt4944 bool
		if yyl4944 > cap(yyv4944) {

			yyrg4944 := len(yyv4944) > 0
			yyv24944 := yyv4944
			yyrl4944, yyrt4944 = z.DecInferLen(yyl4944, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4944 {
				if yyrl4944 <= cap(yyv4944) {
					yyv4944 = yyv4944[:yyrl4944]
				} else {
					yyv4944 = make([]pkg5_runtime.RawExtension, yyrl4944)
				}
			} else {
				yyv4944 = make([]pkg5_runtime.RawExtension, yyrl4944)
			}
			yyc4944 = true
			yyrr4944 = len(yyv4944)
			if yyrg4944 {
				copy(yyv4944, yyv24944)
			}
		} else if yyl4944 != len(yyv4944) {
			yyv4944 = yyv4944[:yyl4944]
			yyc4944 = true
		}
		yyj4944 := 0
		for ; yyj4944 < yyrr4944; yyj4944++ {
			yyh4944.ElemContainerState(yyj4944)
			if r.TryDecodeAsNil() {
				yyv4944[yyj4944] = pkg5_runtime.RawExtension{}
			} else {
				yyv4945 := &yyv4944[yyj4944]
				yym4946 := z.DecBinary()
				_ = yym4946
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4945) {
				} else if !yym4946 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4945)
				} else {
					z.DecFallback(yyv4945, false)
				}
			}

		}
		if yyrt4944 {
			for ; yyj4944 < yyl4944; yyj4944++ {
				yyv4944 = append(yyv4944, pkg5_runtime.RawExtension{})
				yyh4944.ElemContainerState(yyj4944)
				if r.TryDecodeAsNil() {
					yyv4944[yyj4944] = pkg5_runtime.RawExtension{}
				} else {
					yyv4947 := &yyv4944[yyj4944]
					yym4948 := z.DecBinary()
					_ = yym4948
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4947) {
					} else if !yym4948 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4947)
					} else {
						z.DecFallback(yyv4947, false)
					}
				}

			}
		}

	} else {
		yyj4944 := 0
		for ; !r.CheckBreak(); yyj4944++ {

			if yyj4944 >= len(yyv4944) {
				yyv4944 = append(yyv4944, pkg5_runtime.RawExtension{}) // var yyz4944 pkg5_runtime.RawExtension
				yyc4944 = true
			}
			yyh4944.ElemContainerState(yyj4944)
			if yyj4944 < len(yyv4944) {
				if r.TryDecodeAsNil() {
					yyv4944[yyj4944] = pkg5_runtime.RawExtension{}
				} else {
					yyv4949 := &yyv4944[yyj4944]
					yym4950 := z.DecBinary()
					_ = yym4950
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4949) {
					} else if !yym4950 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4949)
					} else {
						z.DecFallback(yyv4949, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4944 < len(yyv4944) {
			yyv4944 = yyv4944[:yyj4944]
			yyc4944 = true
		} else if yyj4944 == 0 && yyv4944 == nil {
			yyv4944 = []pkg5_runtime.RawExtension{}
			yyc4944 = true
		}
	}
	yyh4944.End()
	if yyc4944 {
		*v = yyv4944
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4951 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4952 := &yyv4951
		yy4952.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4953 := *v
	yyh4953, yyl4953 := z.DecSliceHelperStart()
	var yyc4953 bool
	if yyl4953 == 0 {
		if yyv4953 == nil {
			yyv4953 = []LimitRangeItem{}
			yyc4953 = true
		} else if len(yyv4953) != 0 {
			yyv4953 = yyv4953[:0]
			yyc4953 = true
		}
	} else if yyl4953 > 0 {
		var yyrr4953, yyrl4953 int
		var yyrt4953 bool
		if yyl4953 > cap(yyv4953) {

			yyrg4953 := len(yyv4953) > 0
			yyv24953 := yyv4953
			yyrl4953, yyrt4953 = z.DecInferLen(yyl4953, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4953 {
				if yyrl4953 <= cap(yyv4953) {
					yyv4953 = yyv4953[:yyrl4953]
				} else {
					yyv4953 = make([]LimitRangeItem, yyrl4953)
				}
			} else {
				yyv4953 = make([]LimitRangeItem, yyrl4953)
			}
			yyc4953 = true
			yyrr4953 = len(yyv4953)
			if yyrg4953 {
				copy(yyv4953, yyv24953)
			}
		} else if yyl4953 != len(yyv4953) {
			yyv4953 = yyv4953[:yyl4953]
			yyc4953 = true
		}
		yyj4953 := 0
		for ; yyj4953 < yyrr4953; yyj4953++ {
			yyh4953.ElemContainerState(yyj4953)
			if r.TryDecodeAsNil() {
				yyv4953[yyj4953] = LimitRangeItem{}
			} else {
				yyv4954 := &yyv4953[yyj4953]
				yyv4954.CodecDecodeSelf(d)
			}

		}
		if yyrt4953 {
			for ; yyj4953 < yyl4953; yyj4953++ {
				yyv4953 = append(yyv4953, LimitRangeItem{})
				yyh4953.ElemContainerState(yyj4953)
				if r.TryDecodeAsNil() {
					yyv4953[yyj4953] = LimitRangeItem{}
				} else {
					yyv4955 := &yyv4953[yyj4953]
					yyv4955.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4953 := 0
		for ; !r.CheckBreak(); yyj4953++ {

			if yyj4953 >= len(yyv4953) {
				yyv4953 = append(yyv4953, LimitRangeItem{}) // var yyz4953 LimitRangeItem
				yyc4953 = true
			}
			yyh4953.ElemContainerState(yyj4953)
			if yyj4953 < len(yyv4953) {
				if r.TryDecodeAsNil() {
					yyv4953[yyj4953] = LimitRangeItem{}
				} else {
					yyv4956 := &yyv4953[yyj4953]
					yyv4956.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4953 < len(yyv4953) {
			yyv4953 = yyv4953[:yyj4953]
			yyc4953 = true
		} else if yyj4953 == 0 && yyv4953 == nil {
			yyv4953 = []LimitRangeItem{}
			yyc4953 = true
		}
	}
	yyh4953.End()
	if yyc4953 {
		*v = yyv4953
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4957 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4958 := &yyv4957
		yy4958.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4959 := *v
	yyh4959, yyl4959 := z.DecSliceHelperStart()
	var yyc4959 bool
	if yyl4959 == 0 {
		if yyv4959 == nil {
			yyv4959 = []LimitRange{}
			yyc4959 = true
		} else if len(yyv4959) != 0 {
			yyv4959 = yyv4959[:0]
			yyc4959 = true
		}
	} else if yyl4959 > 0 {
		var yyrr4959, yyrl4959 int
		var yyrt4959 bool
		if yyl4959 > cap(yyv4959) {

			yyrg4959 := len(yyv4959) > 0
			yyv24959 := yyv4959
			yyrl4959, yyrt4959 = z.DecInferLen(yyl4959, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4959 {
				if yyrl4959 <= cap(yyv4959) {
					yyv4959 = yyv4959[:yyrl4959]
				} else {
					yyv4959 = make([]LimitRange, yyrl4959)
				}
			} else {
				yyv4959 = make([]LimitRange, yyrl4959)
			}
			yyc4959 = true
			yyrr4959 = len(yyv4959)
			if yyrg4959 {
				copy(yyv4959, yyv24959)
			}
		} else if yyl4959 != len(yyv4959) {
			yyv4959 = yyv4959[:yyl4959]
			yyc4959 = true
		}
		yyj4959 := 0
		for ; yyj4959 < yyrr4959; yyj4959++ {
			yyh4959.ElemContainerState(yyj4959)
			if r.TryDecodeAsNil() {
				yyv4959[yyj4959] = LimitRange{}
			} else {
				yyv4960 := &yyv4959[yyj4959]
				yyv4960.CodecDecodeSelf(d)
			}

		}
		if yyrt4959 {
			for ; yyj4959 < yyl4959; yyj4959++ {
				yyv4959 = append(yyv4959, LimitRange{})
				yyh4959.ElemContainerState(yyj4959)
				if r.TryDecodeAsNil() {
					yyv4959[yyj4959] = LimitRange{}
				} else {
					yyv4961 := &yyv4959[yyj4959]
					yyv4961.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4959 := 0
		for ; !r.CheckBreak(); yyj4959++ {

			if yyj4959 >= len(yyv4959) {
				yyv4959 = append(yyv4959, LimitRange{}) // var yyz4959 LimitRange
				yyc4959 = true
			}
			yyh4959.ElemContainerState(yyj4959)
			if yyj4959 < len(yyv4959) {
				if r.TryDecodeAsNil() {
					yyv4959[yyj4959] = LimitRange{}
				} else {
					yyv4962 := &yyv4959[yyj4959]
					yyv4962.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4959 < len(yyv4959) {
			yyv4959 = yyv4959[:yyj4959]
			yyc4959 = true
		} else if yyj4959 == 0 && yyv4959 == nil {
			yyv4959 = []LimitRange{}
			yyc4959 = true
		}
	}
	yyh4959.End()
	if yyc4959 {
		*v = yyv4959
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4963 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4963.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4964 := *v
	yyh4964, yyl4964 := z.DecSliceHelperStart()
	var yyc4964 bool
	if yyl4964 == 0 {
		if yyv4964 == nil {
			yyv4964 = []ResourceQuotaScope{}
			yyc4964 = true
		} else if len(yyv4964) != 0 {
			yyv4964 = yyv4964[:0]
			yyc4964 = true
		}
	} else if yyl4964 > 0 {
		var yyrr4964, yyrl4964 int
		var yyrt4964 bool
		if yyl4964 > cap(yyv4964) {

			yyrl4964, yyrt4964 = z.DecInferLen(yyl4964, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4964 {
				if yyrl4964 <= cap(yyv4964) {
					yyv4964 = yyv4964[:yyrl4964]
				} else {
					yyv4964 = make([]ResourceQuotaScope, yyrl4964)
				}
			} else {
				yyv4964 = make([]ResourceQuotaScope, yyrl4964)
			}
			yyc4964 = true
			yyrr4964 = len(yyv4964)
		} else if yyl4964 != len(yyv4964) {
			yyv4964 = yyv4964[:yyl4964]
			yyc4964 = true
		}
		yyj4964 := 0
		for ; yyj4964 < yyrr4964; yyj4964++ {
			yyh4964.ElemContainerState(yyj4964)
			if r.TryDecodeAsNil() {
				yyv4964[yyj4964] = ""
			} else {
				yyv4964[yyj4964] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4964 {
			for ; yyj4964 < yyl4964; yyj4964++ {
				yyv4964 = append(yyv4964, "")
				yyh4964.ElemContainerState(yyj4964)
				if r.TryDecodeAsNil() {
					yyv4964[yyj4964] = ""
				} else {
					yyv4964[yyj4964] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4964 := 0
		for ; !r.CheckBreak(); yyj4964++ {

			if yyj4964 >= len(yyv4964) {
				yyv4964 = append(yyv4964, "") // var yyz4964 ResourceQuotaScope
				yyc4964 = true
			}
			yyh4964.ElemContainerState(yyj4964)
			if yyj4964 < len(yyv4964) {
				if r.TryDecodeAsNil() {
					yyv4964[yyj4964] = ""
				} else {
					yyv4964[yyj4964] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4964 < len(yyv4964) {
			yyv4964 = yyv4964[:yyj4964]
			yyc4964 = true
		} else if yyj4964 == 0 && yyv4964 == nil {
			yyv4964 = []ResourceQuotaScope{}
			yyc4964 = true
		}
	}
	yyh4964.End()
	if yyc4964 {
		*v = yyv4964
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4968 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4969 := &yyv4968
		yy4969.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4970 := *v
	yyh4970, yyl4970 := z.DecSliceHelperStart()
	var yyc4970 bool
	if yyl4970 == 0 {
		if yyv4970 == nil {
			yyv4970 = []ResourceQuota{}
			yyc4970 = true
		} else if len(yyv4970) != 0 {
			yyv4970 = yyv4970[:0]
			yyc4970 = true
		}
	} else if yyl4970 > 0 {
		var yyrr4970, yyrl4970 int
		var yyrt4970 bool
		if yyl4970 > cap(yyv4970) {

			yyrg4970 := len(yyv4970) > 0
			yyv24970 := yyv4970
			yyrl4970, yyrt4970 = z.DecInferLen(yyl4970, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4970 {
				if yyrl4970 <= cap(yyv4970) {
					yyv4970 = yyv4970[:yyrl4970]
				} else {
					yyv4970 = make([]ResourceQuota, yyrl4970)
				}
			} else {
				yyv4970 = make([]ResourceQuota, yyrl4970)
			}
			yyc4970 = true
			yyrr4970 = len(yyv4970)
			if yyrg4970 {
				copy(yyv4970, yyv24970)
			}
		} else if yyl4970 != len(yyv4970) {
			yyv4970 = yyv4970[:yyl4970]
			yyc4970 = true
		}
		yyj4970 := 0
		for ; yyj4970 < yyrr4970; yyj4970++ {
			yyh4970.ElemContainerState(yyj4970)
			if r.TryDecodeAsNil() {
				yyv4970[yyj4970] = ResourceQuota{}
			} else {
				yyv4971 := &yyv4970[yyj4970]
				yyv4971.CodecDecodeSelf(d)
			}

		}
		if yyrt4970 {
			for ; yyj4970 < yyl4970; yyj4970++ {
				yyv4970 = append(yyv4970, ResourceQuota{})
				yyh4970.ElemContainerState(yyj4970)
				if r.TryDecodeAsNil() {
					yyv4970[yyj4970] = ResourceQuota{}
				} else {
					yyv4972 := &yyv4970[yyj4970]
					yyv4972.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4970 := 0
		for ; !r.CheckBreak(); yyj4970++ {

			if yyj4970 >= len(yyv4970) {
				yyv4970 = append(yyv4970, ResourceQuota{}) // var yyz4970 ResourceQuota
				yyc4970 = true
			}
			yyh4970.ElemContainerState(yyj4970)
			if yyj4970 < len(yyv4970) {
				if r.TryDecodeAsNil() {
					yyv4970[yyj4970] = ResourceQuota{}
				} else {
					yyv4973 := &yyv4970[yyj4970]
					yyv4973.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4970 < len(yyv4970) {
			yyv4970 = yyv4970[:yyj4970]
			yyc4970 = true
		} else if yyj4970 == 0 && yyv4970 == nil {
			yyv4970 = []ResourceQuota{}
			yyc4970 = true
		}
	}
	yyh4970.End()
	if yyc4970 {
		*v = yyv4970
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4974, yyv4974 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4975 := z.EncBinary()
		_ = yym4975
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4974))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4974 == nil {
			r.EncodeNil()
		} else {
			yym4976 := z.EncBinary()
			_ = yym4976
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4974))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4977 := *v
	yyl4977 := r.ReadMapStart()
	yybh4977 := z.DecBasicHandle()
	if yyv4977 == nil {
		yyrl4977, _ := z.DecInferLen(yyl4977, yybh4977.MaxInitLen, 40)
		yyv4977 = make(map[string][]uint8, yyrl4977)
		*v = yyv4977
	}
	var yymk4977 string
	var yymv4977 []uint8
	var yymg4977 bool
	if yybh4977.MapValueReset {
		yymg4977 = true
	}
	if yyl4977 > 0 {
		for yyj4977 := 0; yyj4977 < yyl4977; yyj4977++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4977 = ""
			} else {
				yymk4977 = string(r.DecodeString())
			}

			if yymg4977 {
				yymv4977 = yyv4977[yymk4977]
			} else {
				yymv4977 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4977 = nil
			} else {
				yyv4979 := &yymv4977
				yym4980 := z.DecBinary()
				_ = yym4980
				if false {
				} else {
					*yyv4979 = r.DecodeBytes(*(*[]byte)(yyv4979), false, false)
				}
			}

			if yyv4977 != nil {
				yyv4977[yymk4977] = yymv4977
			}
		}
	} else if yyl4977 < 0 {
		for yyj4977 := 0; !r.CheckBreak(); yyj4977++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4977 = ""
			} else {
				yymk4977 = string(r.DecodeString())
			}

			if yymg4977 {
				yymv4977 = yyv4977[yymk4977]
			} else {
				yymv4977 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4977 = nil
			} else {
				yyv4982 := &yymv4977
				yym4983 := z.DecBinary()
				_ = yym4983
				if false {
				} else {
					*yyv4982 = r.DecodeBytes(*(*[]byte)(yyv4982), false, false)
				}
			}

			if yyv4977 != nil {
				yyv4977[yymk4977] = yymv4977
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4984 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4985 := &yyv4984
		yy4985.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4986 := *v
	yyh4986, yyl4986 := z.DecSliceHelperStart()
	var yyc4986 bool
	if yyl4986 == 0 {
		if yyv4986 == nil {
			yyv4986 = []Secret{}
			yyc4986 = true
		} else if len(yyv4986) != 0 {
			yyv4986 = yyv4986[:0]
			yyc4986 = true
		}
	} else if yyl4986 > 0 {
		var yyrr4986, yyrl4986 int
		var yyrt4986 bool
		if yyl4986 > cap(yyv4986) {

			yyrg4986 := len(yyv4986) > 0
			yyv24986 := yyv4986
			yyrl4986, yyrt4986 = z.DecInferLen(yyl4986, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4986 {
				if yyrl4986 <= cap(yyv4986) {
					yyv4986 = yyv4986[:yyrl4986]
				} else {
					yyv4986 = make([]Secret, yyrl4986)
				}
			} else {
				yyv4986 = make([]Secret, yyrl4986)
			}
			yyc4986 = true
			yyrr4986 = len(yyv4986)
			if yyrg4986 {
				copy(yyv4986, yyv24986)
			}
		} else if yyl4986 != len(yyv4986) {
			yyv4986 = yyv4986[:yyl4986]
			yyc4986 = true
		}
		yyj4986 := 0
		for ; yyj4986 < yyrr4986; yyj4986++ {
			yyh4986.ElemContainerState(yyj4986)
			if r.TryDecodeAsNil() {
				yyv4986[yyj4986] = Secret{}
			} else {
				yyv4987 := &yyv4986[yyj4986]
				yyv4987.CodecDecodeSelf(d)
			}

		}
		if yyrt4986 {
			for ; yyj4986 < yyl4986; yyj4986++ {
				yyv4986 = append(yyv4986, Secret{})
				yyh4986.ElemContainerState(yyj4986)
				if r.TryDecodeAsNil() {
					yyv4986[yyj4986] = Secret{}
				} else {
					yyv4988 := &yyv4986[yyj4986]
					yyv4988.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4986 := 0
		for ; !r.CheckBreak(); yyj4986++ {

			if yyj4986 >= len(yyv4986) {
				yyv4986 = append(yyv4986, Secret{}) // var yyz4986 Secret
				yyc4986 = true
			}
			yyh4986.ElemContainerState(yyj4986)
			if yyj4986 < len(yyv4986) {
				if r.TryDecodeAsNil() {
					yyv4986[yyj4986] = Secret{}
				} else {
					yyv4989 := &yyv4986[yyj4986]
					yyv4989.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4986 < len(yyv4986) {
			yyv4986 = yyv4986[:yyj4986]
			yyc4986 = true
		} else if yyj4986 == 0 && yyv4986 == nil {
			yyv4986 = []Secret{}
			yyc4986 = true
		}
	}
	yyh4986.End()
	if yyc4986 {
		*v = yyv4986
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4990 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4991 := &yyv4990
		yy4991.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4992 := *v
	yyh4992, yyl4992 := z.DecSliceHelperStart()
	var yyc4992 bool
	if yyl4992 == 0 {
		if yyv4992 == nil {
			yyv4992 = []ConfigMap{}
			yyc4992 = true
		} else if len(yyv4992) != 0 {
			yyv4992 = yyv4992[:0]
			yyc4992 = true
		}
	} else if yyl4992 > 0 {
		var yyrr4992, yyrl4992 int
		var yyrt4992 bool
		if yyl4992 > cap(yyv4992) {

			yyrg4992 := len(yyv4992) > 0
			yyv24992 := yyv4992
			yyrl4992, yyrt4992 = z.DecInferLen(yyl4992, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4992 {
				if yyrl4992 <= cap(yyv4992) {
					yyv4992 = yyv4992[:yyrl4992]
				} else {
					yyv4992 = make([]ConfigMap, yyrl4992)
				}
			} else {
				yyv4992 = make([]ConfigMap, yyrl4992)
			}
			yyc4992 = true
			yyrr4992 = len(yyv4992)
			if yyrg4992 {
				copy(yyv4992, yyv24992)
			}
		} else if yyl4992 != len(yyv4992) {
			yyv4992 = yyv4992[:yyl4992]
			yyc4992 = true
		}
		yyj4992 := 0
		for ; yyj4992 < yyrr4992; yyj4992++ {
			yyh4992.ElemContainerState(yyj4992)
			if r.TryDecodeAsNil() {
				yyv4992[yyj4992] = ConfigMap{}
			} else {
				yyv4993 := &yyv4992[yyj4992]
				yyv4993.CodecDecodeSelf(d)
			}

		}
		if yyrt4992 {
			for ; yyj4992 < yyl4992; yyj4992++ {
				yyv4992 = append(yyv4992, ConfigMap{})
				yyh4992.ElemContainerState(yyj4992)
				if r.TryDecodeAsNil() {
					yyv4992[yyj4992] = ConfigMap{}
				} else {
					yyv4994 := &yyv4992[yyj4992]
					yyv4994.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4992 := 0
		for ; !r.CheckBreak(); yyj4992++ {

			if yyj4992 >= len(yyv4992) {
				yyv4992 = append(yyv4992, ConfigMap{}) // var yyz4992 ConfigMap
				yyc4992 = true
			}
			yyh4992.ElemContainerState(yyj4992)
			if yyj4992 < len(yyv4992) {
				if r.TryDecodeAsNil() {
					yyv4992[yyj4992] = ConfigMap{}
				} else {
					yyv4995 := &yyv4992[yyj4992]
					yyv4995.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4992 < len(yyv4992) {
			yyv4992 = yyv4992[:yyj4992]
			yyc4992 = true
		} else if yyj4992 == 0 && yyv4992 == nil {
			yyv4992 = []ConfigMap{}
			yyc4992 = true
		}
	}
	yyh4992.End()
	if yyc4992 {
		*v = yyv4992
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4996 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4997 := &yyv4996
		yy4997.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4998 := *v
	yyh4998, yyl4998 := z.DecSliceHelperStart()
	var yyc4998 bool
	if yyl4998 == 0 {
		if yyv4998 == nil {
			yyv4998 = []ComponentCondition{}
			yyc4998 = true
		} else if len(yyv4998) != 0 {
			yyv4998 = yyv4998[:0]
			yyc4998 = true
		}
	} else if yyl4998 > 0 {
		var yyrr4998, yyrl4998 int
		var yyrt4998 bool
		if yyl4998 > cap(yyv4998) {

			yyrg4998 := len(yyv4998) > 0
			yyv24998 := yyv4998
			yyrl4998, yyrt4998 = z.DecInferLen(yyl4998, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4998 {
				if yyrl4998 <= cap(yyv4998) {
					yyv4998 = yyv4998[:yyrl4998]
				} else {
					yyv4998 = make([]ComponentCondition, yyrl4998)
				}
			} else {
				yyv4998 = make([]ComponentCondition, yyrl4998)
			}
			yyc4998 = true
			yyrr4998 = len(yyv4998)
			if yyrg4998 {
				copy(yyv4998, yyv24998)
			}
		} else if yyl4998 != len(yyv4998) {
			yyv4998 = yyv4998[:yyl4998]
			yyc4998 = true
		}
		yyj4998 := 0
		for ; yyj4998 < yyrr4998; yyj4998++ {
			yyh4998.ElemContainerState(yyj4998)
			if r.TryDecodeAsNil() {
				yyv4998[yyj4998] = ComponentCondition{}
			} else {
				yyv4999 := &yyv4998[yyj4998]
				yyv4999.CodecDecodeSelf(d)
			}

		}
		if yyrt4998 {
			for ; yyj4998 < yyl4998; yyj4998++ {
				yyv4998 = append(yyv4998, ComponentCondition{})
				yyh4998.ElemContainerState(yyj4998)
				if r.TryDecodeAsNil() {
					yyv4998[yyj4998] = ComponentCondition{}
				} else {
					yyv5000 := &yyv4998[yyj4998]
					yyv5000.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4998 := 0
		for ; !r.CheckBreak(); yyj4998++ {

			if yyj4998 >= len(yyv4998) {
				yyv4998 = append(yyv4998, ComponentCondition{}) // var yyz4998 ComponentCondition
				yyc4998 = true
			}
			yyh4998.ElemContainerState(yyj4998)
			if yyj4998 < len(yyv4998) {
				if r.TryDecodeAsNil() {
					yyv4998[yyj4998] = ComponentCondition{}
				} else {
					yyv5001 := &yyv4998[yyj4998]
					yyv5001.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4998 < len(yyv4998) {
			yyv4998 = yyv4998[:yyj4998]
			yyc4998 = true
		} else if yyj4998 == 0 && yyv4998 == nil {
			yyv4998 = []ComponentCondition{}
			yyc4998 = true
		}
	}
	yyh4998.End()
	if yyc4998 {
		*v = yyv4998
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv5002 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy5003 := &yyv5002
		yy5003.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv5004 := *v
	yyh5004, yyl5004 := z.DecSliceHelperStart()
	var yyc5004 bool
	if yyl5004 == 0 {
		if yyv5004 == nil {
			yyv5004 = []ComponentStatus{}
			yyc5004 = true
		} else if len(yyv5004) != 0 {
			yyv5004 = yyv5004[:0]
			yyc5004 = true
		}
	} else if yyl5004 > 0 {
		var yyrr5004, yyrl5004 int
		var yyrt5004 bool
		if yyl5004 > cap(yyv5004) {

			yyrg5004 := len(yyv5004) > 0
			yyv25004 := yyv5004
			yyrl5004, yyrt5004 = z.DecInferLen(yyl5004, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt5004 {
				if yyrl5004 <= cap(yyv5004) {
					yyv5004 = yyv5004[:yyrl5004]
				} else {
					yyv5004 = make([]ComponentStatus, yyrl5004)
				}
			} else {
				yyv5004 = make([]ComponentStatus, yyrl5004)
			}
			yyc5004 = true
			yyrr5004 = len(yyv5004)
			if yyrg5004 {
				copy(yyv5004, yyv25004)
			}
		} else if yyl5004 != len(yyv5004) {
			yyv5004 = yyv5004[:yyl5004]
			yyc5004 = true
		}
		yyj5004 := 0
		for ; yyj5004 < yyrr5004; yyj5004++ {
			yyh5004.ElemContainerState(yyj5004)
			if r.TryDecodeAsNil() {
				yyv5004[yyj5004] = ComponentStatus{}
			} else {
				yyv5005 := &yyv5004[yyj5004]
				yyv5005.CodecDecodeSelf(d)
			}

		}
		if yyrt5004 {
			for ; yyj5004 < yyl5004; yyj5004++ {
				yyv5004 = append(yyv5004, ComponentStatus{})
				yyh5004.ElemContainerState(yyj5004)
				if r.TryDecodeAsNil() {
					yyv5004[yyj5004] = ComponentStatus{}
				} else {
					yyv5006 := &yyv5004[yyj5004]
					yyv5006.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj5004 := 0
		for ; !r.CheckBreak(); yyj5004++ {

			if yyj5004 >= len(yyv5004) {
				yyv5004 = append(yyv5004, ComponentStatus{}) // var yyz5004 ComponentStatus
				yyc5004 = true
			}
			yyh5004.ElemContainerState(yyj5004)
			if yyj5004 < len(yyv5004) {
				if r.TryDecodeAsNil() {
					yyv5004[yyj5004] = ComponentStatus{}
				} else {
					yyv5007 := &yyv5004[yyj5004]
					yyv5007.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj5004 < len(yyv5004) {
			yyv5004 = yyv5004[:yyj5004]
			yyc5004 = true
		} else if yyj5004 == 0 && yyv5004 == nil {
			yyv5004 = []ComponentStatus{}
			yyc5004 = true
		}
	}
	yyh5004.End()
	if yyc5004 {
		*v = yyv5004
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv5008 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy5009 := &yyv5008
		yy5009.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv5010 := *v
	yyh5010, yyl5010 := z.DecSliceHelperStart()
	var yyc5010 bool
	if yyl5010 == 0 {
		if yyv5010 == nil {
			yyv5010 = []DownwardAPIVolumeFile{}
			yyc5010 = true
		} else if len(yyv5010) != 0 {
			yyv5010 = yyv5010[:0]
			yyc5010 = true
		}
	} else if yyl5010 > 0 {
		var yyrr5010, yyrl5010 int
		var yyrt5010 bool
		if yyl5010 > cap(yyv5010) {

			yyrg5010 := len(yyv5010) > 0
			yyv25010 := yyv5010
			yyrl5010, yyrt5010 = z.DecInferLen(yyl5010, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt5010 {
				if yyrl5010 <= cap(yyv5010) {
					yyv5010 = yyv5010[:yyrl5010]
				} else {
					yyv5010 = make([]DownwardAPIVolumeFile, yyrl5010)
				}
			} else {
				yyv5010 = make([]DownwardAPIVolumeFile, yyrl5010)
			}
			yyc5010 = true
			yyrr5010 = len(yyv5010)
			if yyrg5010 {
				copy(yyv5010, yyv25010)
			}
		} else if yyl5010 != len(yyv5010) {
			yyv5010 = yyv5010[:yyl5010]
			yyc5010 = true
		}
		yyj5010 := 0
		for ; yyj5010 < yyrr5010; yyj5010++ {
			yyh5010.ElemContainerState(yyj5010)
			if r.TryDecodeAsNil() {
				yyv5010[yyj5010] = DownwardAPIVolumeFile{}
			} else {
				yyv5011 := &yyv5010[yyj5010]
				yyv5011.CodecDecodeSelf(d)
			}

		}
		if yyrt5010 {
			for ; yyj5010 < yyl5010; yyj5010++ {
				yyv5010 = append(yyv5010, DownwardAPIVolumeFile{})
				yyh5010.ElemContainerState(yyj5010)
				if r.TryDecodeAsNil() {
					yyv5010[yyj5010] = DownwardAPIVolumeFile{}
				} else {
					yyv5012 := &yyv5010[yyj5010]
					yyv5012.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj5010 := 0
		for ; !r.CheckBreak(); yyj5010++ {

			if yyj5010 >= len(yyv5010) {
				yyv5010 = append(yyv5010, DownwardAPIVolumeFile{}) // var yyz5010 DownwardAPIVolumeFile
				yyc5010 = true
			}
			yyh5010.ElemContainerState(yyj5010)
			if yyj5010 < len(yyv5010) {
				if r.TryDecodeAsNil() {
					yyv5010[yyj5010] = DownwardAPIVolumeFile{}
				} else {
					yyv5013 := &yyv5010[yyj5010]
					yyv5013.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj5010 < len(yyv5010) {
			yyv5010 = yyv5010[:yyj5010]
			yyc5010 = true
		} else if yyj5010 == 0 && yyv5010 == nil {
			yyv5010 = []DownwardAPIVolumeFile{}
			yyc5010 = true
		}
	}
	yyh5010.End()
	if yyc5010 {
		*v = yyv5010
	}
}
