---
# Tasks for the control machine.

- set_fact:
    fetch_kubectl_binary: False
    mapping_domain_to_ip: True

- name: Create kubeconfig file directory
  file: path={{ ansible_env.HOME }}/.kube state=directory

- name: Set kubeconfig name for control machine according to uid and cid
  set_fact:
    kubeconfig_name: "config_{{ cluster_name }}"

- name: Fetch kubeconfig for kubectl from master
  fetch: src={{ cm_kubectl_kubeconfig }} dest={{ ansible_env.HOME }}/.kube/{{ kubeconfig_name }} flat=yes
  delegate_to: "{{ groups['masters'][0] }}"

- name: Remove .kube/config in {{ ansible_env.HOME }} directory
  file: path={{ ansible_env.HOME }}/.kube/config state=absent
  changed_when: false

- name: Create .kube/config soft link in {{ ansible_env.HOME }} directory
  file: path={{ ansible_env.HOME }}/.kube/config src={{ ansible_env.HOME }}/.kube/{{ kubeconfig_name }} state=link

- name: Check if kubectl exists
  command: which kubectl
  register: check_res
  failed_when: False
- set_fact:
    fetch_kubectl_binary: True
  when: check_res.rc == 1
- set_fact:
    fetch_kubectl_binary: True
  when: check_res.rc == 0 and check_res.stdout != "{{ bin_dir }}/kubectl"

- name: Fetch kubectl binary from master
  fetch: src={{ bin_dir }}/kubectl dest={{ bin_dir }}/kubectl flat=yes
  delegate_to: "{{ groups['masters'][0] }}"
  when: fetch_kubectl_binary

- name: Chmod kubectl binary with mode 0755
  file: path={{ bin_dir }}/kubectl owner=root group=root mode=0755
  when: fetch_kubectl_binary

- name: Check if mapping domain name to ip
  set_fact:
    mapping_domain_to_ip: false
  when: host_provider == "anchnet" or host_provider == "aliyun"

- name: Set default base domain name
  set_fact:
    domain_name: "{{ caicloud_private_test_domain }}"
  when: mapping_domain_to_ip

- name: Set user defined domain name
  set_fact:
    domain_name: "{{ base_domain_name }}"
  when: mapping_domain_to_ip and (base_domain_name is defined)

- name: Update /etc/hosts | Remove wrong hosts
  shell: newhosts=`mktemp` && sed -e '/{{ dns_host_name }}.{{ domain_name }}/d' /etc/hosts > $newhosts && cp $newhosts /etc/hosts && rm $newhosts
  when: mapping_domain_to_ip

- name: Update /etc/hosts for mapping domain name to ip
  shell: echo "{{ kube_apiserver_endpoint_ip }} {{ dns_host_name }}.{{ domain_name }}" >> /etc/hosts
  when: mapping_domain_to_ip
