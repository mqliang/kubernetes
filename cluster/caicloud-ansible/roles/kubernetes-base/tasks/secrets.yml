---
# Generate self-signed certs or write ca-signed certs

- name: Create system kube-cert groups
  group: name={{ kube_cert_group }} state=present system=yes

- name: Create system kube user
  user:
    name=kube
    comment="Kubernetes user"
    shell=/sbin/nologin
    state=present
    system=yes
    groups={{ kube_cert_group }}

- name: Make sure the certificate directory exits
  file:
    path={{ kube_cert_dir }}
    state=directory
    mode=o-rwx
    group={{ kube_cert_group }}

- name: make sure the tokens directory exits
  file:
    path={{ kube_token_dir }}
    state=directory
    mode=o-rwx
    group={{ kube_cert_group }}

- include: gen_certs.yml
  when: inventory_hostname == groups['masters'][0]

- include: gen_tokens.yml
  when: inventory_hostname == groups['masters'][0]

- include: gen_basic_auth.yml
  when: inventory_hostname == groups['masters'][0]

- include: gen_abac_policy.yml
  when: inventory_hostname == groups['masters'][0]

#
# Place ca certificate everywhere.

- name: Read back the CA certificate
  slurp:
    src: "{{ kube_cert_dir }}/ca.crt"
  register: ca_cert
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Register the CA certificate as a fact so it can be used later
  set_fact:
    kube_ca_cert: "{{ ca_cert.content|b64decode }}"

- name: Place CA certificate and kube_cfg credentials everywhere
  copy: content="{{ kube_ca_cert }}" dest="{{ kube_cert_dir }}/ca.crt"
  when: inventory_hostname != groups['masters'][0]

#
# Place certs on masters.

- name: Get the certs from first master
  slurp:
    src: "{{ item }}"
  register: slurp_certs
  with_items:
    - "{{ kube_cert_dir }}/kubelet.crt"
    - "{{ kube_cert_dir }}/kubelet.key"
    - "{{ kube_cert_dir }}/server.crt"
    - "{{ kube_cert_dir }}/server.key"
    - "{{ kube_cert_dir }}/kubecfg.crt"
    - "{{ kube_cert_dir }}/kubecfg.key"
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Copy certs on masters
  copy:
    content: "{{ item.content|b64decode }}"
    dest: "{{ item.source }}"
  with_items: '{{slurp_certs.results}}'
  when: inventory_hostname in groups['masters'] and
        inventory_hostname != groups['masters'][0]

- name: Verify certificate permissions
  file:
    path={{ item }}
    group={{ kube_cert_group }}
    owner=kube
    mode=0440
  with_items:
    - "{{ kube_cert_dir }}/ca.crt"
    - "{{ kube_cert_dir }}/server.crt"
    - "{{ kube_cert_dir }}/server.key"
    - "{{ kube_cert_dir }}/kubecfg.crt"
    - "{{ kube_cert_dir }}/kubecfg.key"
    - "{{ kube_cert_dir }}/kubelet.crt"
    - "{{ kube_cert_dir }}/kubelet.key"
  when: inventory_hostname in groups['masters']

#
# Place tokens on masters.

- name: Get list of tokens from first master
  shell: "(find {{ kube_token_dir }} -maxdepth 1 -type f)"
  register: tokens_list
  changed_when: false
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Get the tokens from first master
  slurp:
    src: "{{ item }}"
  register: slurp_tokens
  with_items: '{{ tokens_list.stdout_lines }}'
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Copy tokens on masters
  copy:
    content: "{{ item.content|b64decode }}"
    dest: "{{ item.source }}"
  with_items: '{{slurp_tokens.results}}'
  when: inventory_hostname in groups['masters'] and
        inventory_hostname != groups['masters'][0]

- name: Verify auth permissions
  file:
    path="{{ item.source }}"
    group={{ kube_cert_group }}
    owner=kube
    mode=0440
  with_items: '{{slurp_tokens.results}}'
  when: inventory_hostname in groups['masters']

- name: Verify abac policy permissions
  file:
    path={{ kube_token_dir }}/abac.json
    group={{ kube_cert_group }}
    owner=kube
    mode=0640
  when: inventory_hostname in groups['masters']
