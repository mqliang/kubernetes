---
# Get aliyun instances ssh info.

- name: Set common parametes
  set_fact:
    common_paras: "--AccessKeyId {{ access_key_id }} --AccessKeySecret {{ access_key_secret }} --RegionId {{ region_id }} --output json"

- name: Search the security group by name
  command: aliyuncli ecs DescribeSecurityGroups {{ common_paras }} --SecurityGroupName {{ security_group_name }}
  register: sg_info
  until: sg_info.stdout.find("Code") == -1
  retries: 5
  delay: 5

- name: Get security group id from an existing cluster
  set_fact:
    json_sg_info: "{{ sg_info.stdout | from_json }}"
- fail: msg="Failed to get security group ID"
  when: json_sg_info.TotalCount|int == 0
- set_fact:
    aliyun_sgid: "{{ json_sg_info.SecurityGroups.SecurityGroup[0].SecurityGroupId }}"
  when: json_sg_info.TotalCount|int > 0

# Init with empty list
- set_fact:
    master_instances_list: "{{ [] }}"
    node_instances_list: "{{ [] }}"

- name: Get master instances with name prefix '{{ master_name_prefix }}' in the security group
  command: aliyuncli ecs DescribeInstances {{ common_paras }} --ZoneId {{ zone_id }} --SecurityGroupId {{ aliyun_sgid }} --InstanceName {{ master_name_prefix }}* --filter Instances.Instance[*].InstanceId
  register: master_instances_output
  until: master_instances_output.stdout.find("Code") == -1
  retries: 5
  delay: 5

- set_fact:
    master_instances_list: "{{ master_instances_output.stdout | from_json }}"
  when: master_instances_output.stdout != ""

- name: Get node instances with name prefix '{{ node_name_prefix }}' in the security group
  command: aliyuncli ecs DescribeInstances {{ common_paras }} --ZoneId {{ zone_id }} --SecurityGroupId {{ aliyun_sgid }} --InstanceName {{ node_name_prefix }}* --filter Instances.Instance[*].InstanceId
  register: node_instances_output
  until: node_instances_output.stdout.find("Code") == -1
  retries: 5
  delay: 5

- set_fact:
    node_instances_list: "{{ node_instances_output.stdout | from_json }}"
  when: node_instances_output.stdout != ""

- name: Make sure .ansible dir exists
  file: path={{ playbook_dir }}/.ansible state=directory

- name: Delete old instance.master
  file: path={{ playbook_dir }}/.ansible/instance.master state=absent
  changed_when: False

- name: Touch instance.master
  file: path={{ playbook_dir }}/.ansible/instance.master state=touch
  changed_when: False

- name: Delete old instance.node
  file: path={{ playbook_dir }}/.ansible/instance.node state=absent
  changed_when: False

- name: Touch instance.node
  file: path={{ playbook_dir }}/.ansible/instance.node state=touch
  changed_when: False

- name: Run master instances
  include: get-ssh-info.yml
  vars:
    instance_id: "{{ item }}"
    save_to_file: "{{ playbook_dir }}/.ansible/instance.master"
  with_items: "{{ master_instances_list }}"

- name: Run node instances
  include: get-ssh-info.yml
  vars:
    instance_id: "{{ item }}"
    save_to_file: "{{ playbook_dir }}/.ansible/instance.node"
  with_items: "{{ node_instances_list }}"
